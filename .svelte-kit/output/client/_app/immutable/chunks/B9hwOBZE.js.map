{"version":3,"file":"B9hwOBZE.js","sources":["../../../../../../src/lib/types/shared.ts","../../../../../../src/lib/services/baseService.ts"],"sourcesContent":["import { Timestamp } from 'firebase/firestore';\n\nexport interface BaseContentNode {\n  id: string;\n  title: string;\n  type: string;\n  slug?: string;\n  path?: string;\n  description?: string;\n  children?: BaseContentNode[];\n}\n\nexport interface ContentNode extends BaseContentNode {\n  markdownContent?: string;\n  contentLoadingError?: string;\n  metadata?: {\n    createdAt: Date;\n    updatedAt: Date;\n    author: string;\n    tags?: string[];\n    category?: string;\n  };\n}\n\nexport interface ContentManifestItem {\n  id: string;\n  title: string;\n  type: string;\n  slug?: string;\n  path?: string;\n  description?: string;\n  children?: ContentManifestItem[];\n  metadata?: {\n    createdAt: Date;\n    updatedAt: Date;\n    author: string;\n    tags?: string[];\n    category?: string;\n  };\n}\n\nexport interface ServiceResponse<T> {\n  data: T | null;\n  error: Error | null;\n}\n\nexport interface ContentMetadata {\n  createdAt: Date;\n  updatedAt: Date;\n  author: string;\n  tags?: string[];\n  category?: string;\n}\n\nexport interface ContentResponse {\n  id: string;\n  title: string;\n  content: string;\n  metadata: ContentMetadata;\n  related: string[];\n}\n\nexport class ServiceError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public status: number = 500\n  ) {\n    super(message);\n    this.name = 'ServiceError';\n  }\n}\n\nexport interface Exercise {\n  id: string;\n  title: string;\n  description?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  estimatedTime?: string;\n  content?: string;\n  category?: string;\n  tags?: string[];\n  points?: number;\n  hints?: string[];\n  solution?: string;\n  relatedExercises?: string[];\n  metadata?: {\n    dateAdded?: Timestamp;\n    popularity?: number;\n    difficulty?: number;\n  };\n  categories?: string[];\n  progressStatus?: 'notStarted' | 'inProgress' | 'completed';\n}\n\nexport interface ExerciseFilterOptions {\n  difficulty?: string;\n  category?: string;\n  tags?: string[];\n  searchTerm?: string;\n  sortBy?: 'newest' | 'oldest' | 'difficulty' | 'popularity';\n  limit?: number;\n  preferCategories?: string[];\n  difficultyRange?: {\n    min?: number;\n    max?: number;\n  };\n}\n\nexport interface ScoredExercise {\n  exercise: Exercise;\n  score: number;\n}\n\nexport interface Lesson {\n  id: string;\n  title: string;\n  content: string;\n  duration?: number;\n  order: number;\n  exercises?: string[];\n  prerequisites?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface Module {\n  id: string;\n  title: string;\n  description?: string;\n  lessons: Lesson[];\n  order: number;\n  duration?: number;\n  prerequisites?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface CourseStructure {\n  id: string;\n  title: string;\n  description?: string;\n  modules: Module[];\n  totalDuration?: number;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  tags?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface ForumCategory {\n  id: string;\n  title: string;\n  description: string;\n  slug: string;\n  order: number;\n  topicCount: number;\n  postCount: number;\n  lastActivity?: Timestamp;\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n    author: string;\n  };\n}\n\nexport interface ForumTopic {\n  id: string;\n  title: string;\n  content: string;\n  categoryId: string;\n  authorId: string;\n  authorName: string;\n  slug: string;\n  viewCount: number;\n  replyCount: number;\n  isPinned: boolean;\n  isLocked: boolean;\n  lastActivity?: Timestamp;\n  tags?: string[];\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n  };\n}\n\nexport interface ForumPost {\n  id: string;\n  content: string;\n  topicId: string;\n  authorId: string;\n  authorName: string;\n  parentId?: string;\n  isAnswer: boolean;\n  upvotes: number;\n  downvotes: number;\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n  };\n}\n\nexport interface UserProgress {\n  userId: string;\n  courseId: string;\n  moduleId: string;\n  lessonId: string;\n  exerciseId?: string;\n  status: 'notStarted' | 'inProgress' | 'completed';\n  score?: number;\n  lastAccessed: Timestamp;\n  metadata?: {\n    timeSpent: number;\n    attempts: number;\n    completionDate?: Timestamp;\n  };\n}\n\nexport interface UserPreferences {\n  userId: string;\n  theme: 'light' | 'dark' | 'system';\n  language: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    frequency: 'immediate' | 'daily' | 'weekly';\n  };\n  accessibility: {\n    fontSize: number;\n    highContrast: boolean;\n    reducedMotion: boolean;\n  };\n  metadata?: {\n    lastUpdated: Timestamp;\n  };\n} ","import type { ServiceResponse } from '../types/shared';\nimport { ServiceError } from '../types/shared';\n\nexport class BaseService {\n  protected async handleRequest<T>(fn: () => Promise<T>): Promise<ServiceResponse<T>> {\n    try {\n      const data = await fn();\n      return { data, error: null };\n    } catch (error) {\n      return this.handleError(error) as ServiceResponse<T>;\n    }\n  }\n\n  protected handleError(error: unknown): ServiceResponse<null> {\n    if (error instanceof ServiceError) {\n      return { data: null, error };\n    }\n    \n    if (error instanceof Error) {\n      return { \n        data: null, \n        error: new ServiceError(error.message, 'INTERNAL_ERROR') \n      };\n    }\n    \n    return { \n      data: null, \n      error: new ServiceError('An unknown error occurred', 'UNKNOWN_ERROR') \n    };\n  }\n\n  protected validateId(id: string | null | undefined): void {\n    if (!id) {\n      throw new ServiceError('Invalid ID provided', 'INVALID_ID', 400);\n    }\n  }\n\n  protected validateInput<T>(input: T | null | undefined, fieldName: string): void {\n    if (!input) {\n      throw new ServiceError(`Invalid ${fieldName} provided`, 'INVALID_INPUT', 400);\n    }\n  }\n}\n\nexport { ServiceError };"],"names":["ServiceError","message","code","status","BaseService","fn","__async","error","id","input","fieldName"],"mappings":"mOA8DO,MAAMA,UAAqB,KAAM,CACtC,YACEC,EACOC,EACAC,EAAiB,IACxB,CACA,MAAMF,CAAO,EAHN,KAAA,KAAAC,EACA,KAAA,OAAAC,EAGP,KAAK,KAAO,cAAA,CAEhB,CCpEO,MAAMC,CAAY,CACP,cAAiBC,EAAmD,QAAAC,EAAA,sBAC9E,GAAA,CAEK,MAAA,CAAE,KADI,MAAMD,EAAG,EACP,MAAO,IAAK,QACpBE,EAAO,CACP,OAAA,KAAK,YAAYA,CAAK,CAAA,CAC/B,GAGQ,YAAYA,EAAuC,CAC3D,OAAIA,aAAiBP,EACZ,CAAE,KAAM,KAAM,MAAAO,CAAM,EAGzBA,aAAiB,MACZ,CACL,KAAM,KACN,MAAO,IAAIP,EAAaO,EAAM,QAAS,gBAAgB,CACzD,EAGK,CACL,KAAM,KACN,MAAO,IAAIP,EAAa,4BAA6B,eAAe,CACtE,CAAA,CAGQ,WAAWQ,EAAqC,CACxD,GAAI,CAACA,EACH,MAAM,IAAIR,EAAa,sBAAuB,aAAc,GAAG,CACjE,CAGQ,cAAiBS,EAA6BC,EAAyB,CAC/E,GAAI,CAACD,EACH,MAAM,IAAIT,EAAa,WAAWU,CAAS,YAAa,gBAAiB,GAAG,CAC9E,CAEJ"}