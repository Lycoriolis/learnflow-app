{"version":3,"file":"pK43Z0Mz.js","sources":["../../../../../../src/lib/utils/csrf.types.ts","../../../../../../src/lib/utils/csrf.client.ts"],"sourcesContent":["/**\n * Shared CSRF types and constants for both client and server\n * This file should only contain types, interfaces, and constants\n * No implementation code should be here\n */\n\n// The header name used for CSRF token transmission\nexport const CSRF_HEADER = 'X-CSRF-Token';\n\n// Cookie name for CSRF token storage\nexport const CSRF_COOKIE = 'csrf_token';\n\n// Interface for CSRF token responses\nexport interface CsrfToken {\n  token: string;\n}","/**\n * Client-side CSRF protection utilities\n */\nimport { CSRF_HEADER, CSRF_COOKIE } from './csrf.types.js';\n\n/**\n * Retrieves the current CSRF token from either meta tag or localStorage\n */\nexport function getCsrfToken(): string | null {\n  if (typeof window === 'undefined') return null;\n  \n  // First check for token in meta tag (set during initial page load)\n  const metaTag = document.querySelector('meta[name=\"csrf-token\"]');\n  if (metaTag && metaTag.getAttribute('content')) {\n    return metaTag.getAttribute('content');\n  }\n  \n  // Fallback to localStorage\n  return localStorage.getItem(CSRF_COOKIE);\n}\n\n/**\n * Stores a CSRF token in localStorage and updates meta tag\n */\nexport function storeCsrfToken(token: string): void {\n  if (typeof window === 'undefined') return;\n  \n  localStorage.setItem(CSRF_COOKIE, token);\n  \n  // Also update the meta tag if it exists\n  let metaTag = document.querySelector('meta[name=\"csrf-token\"]');\n  if (!metaTag) {\n    metaTag = document.createElement('meta');\n    metaTag.setAttribute('name', 'csrf-token');\n    document.head.appendChild(metaTag);\n  }\n  metaTag.setAttribute('content', token);\n}\n\n/**\n * Updates CSRF token from response headers if present\n */\nexport function updateCsrfTokenFromResponse(response: Response): void {\n  const newToken = response.headers.get(CSRF_HEADER);\n  if (newToken) {\n    storeCsrfToken(newToken);\n  }\n}\n\n/**\n * Initializes CSRF protection by requesting a new token from server\n */\nexport async function initializeCsrf(): Promise<void> {\n  try {\n    const response = await fetch('/api/csrf/refresh', {\n      method: 'GET',\n      credentials: 'same-origin'\n    });\n    \n    if (!response.ok) {\n      console.warn('Failed to initialize CSRF token');\n      return;\n    }\n    \n    const token = response.headers.get(CSRF_HEADER);\n    if (token) {\n      storeCsrfToken(token);\n    }\n  } catch (error) {\n    console.error('Error initializing CSRF token:', error);\n  }\n}"],"names":["CSRF_HEADER","CSRF_COOKIE","getCsrfToken","metaTag","storeCsrfToken","token","updateCsrfTokenFromResponse","response","newToken"],"mappings":"AAOO,MAAMA,EAAc,eAGdC,EAAc,aCFpB,SAASC,GAA8B,CACxC,GAAA,OAAO,QAAW,YAAoB,OAAA,KAGpC,MAAAC,EAAU,SAAS,cAAc,yBAAyB,EAChE,OAAIA,GAAWA,EAAQ,aAAa,SAAS,EACpCA,EAAQ,aAAa,SAAS,EAIhC,aAAa,QAAQF,CAAW,CACzC,CAKO,SAASG,EAAeC,EAAqB,CAC9C,GAAA,OAAO,QAAW,YAAa,OAEtB,aAAA,QAAQJ,EAAaI,CAAK,EAGnC,IAAAF,EAAU,SAAS,cAAc,yBAAyB,EACzDA,IACOA,EAAA,SAAS,cAAc,MAAM,EAC/BA,EAAA,aAAa,OAAQ,YAAY,EAChC,SAAA,KAAK,YAAYA,CAAO,GAE3BA,EAAA,aAAa,UAAWE,CAAK,CACvC,CAKO,SAASC,EAA4BC,EAA0B,CACpE,MAAMC,EAAWD,EAAS,QAAQ,IAAIP,CAAW,EAC7CQ,GACFJ,EAAeI,CAAQ,CAE3B"}