{"version":3,"file":"BWnoWNEX.js","sources":["../../../../../../src/lib/services/forums/forumService.ts"],"sourcesContent":["// src/lib/services/forums/forumService.ts\nimport { getFirestore, collection, query, where, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, increment, arrayUnion, Timestamp } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { BaseService, ServiceError } from '../baseService';\nimport type { ServiceResponse, ForumCategory, ForumTopic, ForumPost } from '../../types/shared';\n\nexport class ForumService extends BaseService {\n  private db = getFirestore();\n  private auth = getAuth();\n\n  async getForumCategories(): Promise<ServiceResponse<ForumCategory[]>> {\n    return this.handleRequest(async () => {\n      const categoriesRef = collection(this.db, 'forumCategories');\n      const snapshot = await getDocs(categoriesRef);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumCategory[];\n    });\n  }\n\n  async createForumTopic(topic: Omit<ForumTopic, 'id'>): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const user = this.auth.currentUser;\n      if (!user) {\n        throw new ServiceError('Unauthorized', 'UNAUTHORIZED', 401);\n      }\n\n      const topicsRef = collection(this.db, 'forumTopics');\n      const newTopic = {\n        ...topic,\n        authorId: user.uid,\n        authorName: user.displayName || 'Anonymous',\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n        viewCount: 0,\n        replyCount: 0,\n        isPinned: false,\n        isLocked: false\n      };\n\n      const docRef = await addDoc(topicsRef, newTopic);\n      return {\n        id: docRef.id,\n        ...newTopic\n      } as ForumTopic;\n    });\n  }\n\n  async createForumPost(post: Omit<ForumPost, 'id'>): Promise<ServiceResponse<ForumPost>> {\n    return this.handleRequest(async () => {\n      const user = this.auth.currentUser;\n      if (!user) {\n        throw new ServiceError('Unauthorized', 'UNAUTHORIZED', 401);\n      }\n\n      const postsRef = collection(this.db, 'forumPosts');\n      const newPost = {\n        ...post,\n        authorId: user.uid,\n        authorName: user.displayName || 'Anonymous',\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n        upvotes: 0,\n        downvotes: 0,\n        isAnswer: false\n      };\n\n      const docRef = await addDoc(postsRef, newPost);\n      return {\n        id: docRef.id,\n        ...newPost\n      } as ForumPost;\n    });\n  }\n\n  async createCategory(category: Omit<ForumCategory, 'id'>): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoriesRef = collection(this.db, 'forumCategories');\n      const newCategory = {\n        ...category,\n        topicCount: 0,\n        postCount: 0,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      };\n\n      const docRef = await addDoc(categoriesRef, newCategory);\n      return {\n        id: docRef.id,\n        ...newCategory\n      } as ForumCategory;\n    });\n  }\n\n  async deleteCategory(categoryId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      await deleteDoc(categoryRef);\n    });\n  }\n\n  async getCategory(categoryId: string): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      const docSnap = await getDoc(categoryRef);\n      \n      if (!docSnap.exists()) {\n        throw new ServiceError('Category not found', 'NOT_FOUND', 404);\n      }\n\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      } as ForumCategory;\n    });\n  }\n\n  async updateCategory(categoryId: string, updates: Partial<ForumCategory>): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      const updatesWithTimestamp = {\n        ...updates,\n        updatedAt: Timestamp.now()\n      };\n\n      await updateDoc(categoryRef, updatesWithTimestamp);\n      const updatedDoc = await getDoc(categoryRef);\n      return {\n        id: updatedDoc.id,\n        ...updatedDoc.data()\n      } as ForumCategory;\n    });\n  }\n\n  async getForumTopic(topicId: string): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      const docSnap = await getDoc(topicRef);\n      \n      if (!docSnap.exists()) {\n        throw new ServiceError('Topic not found', 'NOT_FOUND', 404);\n      }\n\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      } as ForumTopic;\n    });\n  }\n\n  async updateTopic(topicId: string, updates: Partial<ForumTopic>): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      const updatesWithTimestamp = {\n        ...updates,\n        updatedAt: Timestamp.now()\n      };\n\n      await updateDoc(topicRef, updatesWithTimestamp);\n      const updatedDoc = await getDoc(topicRef);\n      return {\n        id: updatedDoc.id,\n        ...updatedDoc.data()\n      } as ForumTopic;\n    });\n  }\n\n  async deleteTopic(topicId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      await deleteDoc(topicRef);\n    });\n  }\n\n  async getCategories(): Promise<ServiceResponse<ForumCategory[]>> {\n    return this.getForumCategories();\n  }\n\n  async getTopics(categoryId?: string): Promise<ServiceResponse<ForumTopic[]>> {\n    return this.handleRequest(async () => {\n      const topicsRef = collection(this.db, 'forumTopics');\n      let q = query(topicsRef);\n\n      if (categoryId) {\n        q = query(q, where('categoryId', '==', categoryId));\n      }\n\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumTopic[];\n    });\n  }\n\n  async getTopic(topicId: string): Promise<ServiceResponse<ForumTopic>> {\n    return this.getForumTopic(topicId);\n  }\n\n  async getPostsByTopicId(topicId: string): Promise<ServiceResponse<ForumPost[]>> {\n    return this.handleRequest(async () => {\n      const postsRef = collection(this.db, 'forumPosts');\n      const q = query(postsRef, where('topicId', '==', topicId));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumPost[];\n    });\n  }\n\n  async updatePost(postId: string, updates: Partial<ForumPost>): Promise<ServiceResponse<ForumPost>> {\n    return this.handleRequest(async () => {\n      const postRef = doc(this.db, 'forumPosts', postId);\n      const updatesWithTimestamp = { ...updates, updatedAt: Timestamp.now() };\n      await updateDoc(postRef, updatesWithTimestamp);\n      const updatedSnap = await getDoc(postRef);\n      return { id: updatedSnap.id, ...updatedSnap.data() } as ForumPost;\n    });\n  }\n\n  async deletePost(postId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const postRef = doc(this.db, 'forumPosts', postId);\n      await deleteDoc(postRef);\n    });\n  }\n}\n\n// Export individual functions for direct use\nexport const createForumTopic = async (topic: Omit<ForumTopic, 'id'>): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.createForumTopic(topic);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getForumCategories = async (): Promise<ForumCategory[]> => {\n  const service = new ForumService();\n  const response = await service.getForumCategories();\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const createForumPost = async (post: Omit<ForumPost, 'id'>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.createForumPost(post);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const createCategory = async (category: Omit<ForumCategory, 'id'>): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.createCategory(category);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deleteCategory = async (categoryId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deleteCategory(categoryId);\n  if (response.error) throw response.error;\n};\n\nexport const getCategory = async (categoryId: string): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.getCategory(categoryId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updateCategory = async (categoryId: string, updates: Partial<ForumCategory>): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.updateCategory(categoryId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getForumTopic = async (topicId: string): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.getForumTopic(topicId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updateTopic = async (topicId: string, updates: Partial<ForumTopic>): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.updateTopic(topicId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deleteTopic = async (topicId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deleteTopic(topicId);\n  if (response.error) throw response.error;\n};\n\nexport const getCategories = async (): Promise<ForumCategory[]> => {\n  const service = new ForumService();\n  const response = await service.getCategories();\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const getTopics = async (categoryId?: string): Promise<ForumTopic[]> => {\n  const service = new ForumService();\n  const response = await service.getTopics(categoryId);\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const getTopic = async (topicId: string): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.getTopic(topicId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getPostsByTopicId = async (topicId: string): Promise<ForumPost[]> => {\n  const service = new ForumService();\n  const response = await service.getPostsByTopicId(topicId);\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const createPost = async (post: Omit<ForumPost, 'id'>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.createForumPost(post);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updatePost = async (postId: string, updates: Partial<ForumPost>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.updatePost(postId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deletePost = async (postId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deletePost(postId);\n  if (response.error) throw response.error;\n};"],"names":["ForumService","BaseService","__publicField","getFirestore","getAuth","__async","categoriesRef","collection","getDocs","doc","__spreadValues","topic","user","ServiceError","topicsRef","newTopic","__spreadProps","Timestamp","docRef","addDoc","post","postsRef","newPost","category","newCategory","categoryId","categoryRef","deleteDoc","docSnap","getDoc","updates","updatesWithTimestamp","updateDoc","updatedDoc","topicId","topicRef","q","query","where","postId","postRef","updatedSnap","createForumTopic","response","getForumCategories","createForumPost","createCategory","deleteCategory","getCategory","updateCategory","getForumTopic","updateTopic","getCategories","getTopics","getTopic","getPostsByTopicId"],"mappings":"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"}