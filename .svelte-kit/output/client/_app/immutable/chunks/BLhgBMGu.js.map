{"version":3,"file":"BLhgBMGu.js","sources":["../../../../../../src/lib/services/courses/courseService.ts"],"sourcesContent":["// src/lib/services/courses/courseService.ts\nimport { getFirestore, collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport type { CourseStructure, Lesson, Module, ServiceResponse } from '../../types/shared';\nimport { BaseService } from '../baseService';\n\n// Define the ContentNode type which represents courses and exercises\nexport interface ContentNode {\n  id: string;\n  title: string;\n  description?: string;\n  category?: string;\n  tags?: string[];\n  content?: string;\n  level?: 'beginner' | 'intermediate' | 'advanced';\n  duration?: string;\n  author?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n  isPublished?: boolean;\n  order?: number;\n  type?: 'course' | 'exercise' | 'module';\n  prerequisites?: string[];\n  children?: ContentNode[];\n  parentId?: string;\n  slug?: string;\n}\n\n// Cache for courses\nconst courseCache: Record<string, CourseStructure> = {};\nconst categoryCache: Record<string, any[]> = {};\n\nexport class CourseService extends BaseService {\n  private db = getFirestore();\n  private auth = getAuth();\n\n  async fetchCourses(path: string): Promise<ServiceResponse<CourseStructure[]>> {\n    return this.handleRequest(async () => {\n      const coursesRef = collection(this.db, 'courses');\n      const q = query(coursesRef, where('path', '==', path));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as CourseStructure[];\n    });\n  }\n\n  async fetchCourseCategories(): Promise<ServiceResponse<any[]>> {\n    return this.handleRequest(async () => {\n      if (categoryCache['all']) {\n        return categoryCache['all'];\n      }\n\n      const categoriesRef = collection(this.db, 'courseCategories');\n      const snapshot = await getDocs(categoriesRef);\n      const categories = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      categoryCache['all'] = categories;\n      return categories;\n    });\n  }\n\n  async fetchCourseById(id: string): Promise<ServiceResponse<CourseStructure>> {\n    return this.handleRequest(async () => {\n      if (courseCache[id]) {\n        return courseCache[id];\n      }\n\n      const courseRef = doc(this.db, 'courses', id);\n      const docSnap = await getDoc(courseRef);\n      \n      if (!docSnap.exists()) {\n        throw new Error('Course not found');\n      }\n\n      const course = {\n        id: docSnap.id,\n        ...docSnap.data()\n      } as CourseStructure;\n\n      courseCache[id] = course;\n      return course;\n    });\n  }\n\n  async fetchCourseBySlug(slug: string): Promise<ServiceResponse<CourseStructure>> {\n    return this.handleRequest(async () => {\n      const coursesRef = collection(this.db, 'courses');\n      const q = query(coursesRef, where('slug', '==', slug));\n      const snapshot = await getDocs(q);\n      \n      if (snapshot.empty) {\n        throw new Error('Course not found');\n      }\n\n      const course = {\n        id: snapshot.docs[0].id,\n        ...snapshot.docs[0].data()\n      } as CourseStructure;\n\n      courseCache[course.id] = course;\n      return course;\n    });\n  }\n\n  clearCourseCache(): void {\n    Object.keys(courseCache).forEach(key => delete courseCache[key]);\n    Object.keys(categoryCache).forEach(key => delete categoryCache[key]);\n  }\n\n  async listCourses(): Promise<ServiceResponse<CourseStructure[]>> {\n    return this.handleRequest(async () => {\n      const { data: courses, error } = await this.fetchCourses('/content/courses');\n      if (error) {\n        throw error;\n      }\n\n      if (!courses) {\n        return [];\n      }\n\n      return courses.map(course => ({\n        id: course.id,\n        title: course.title,\n        description: course.description,\n        modules: course.modules.map(module => ({\n          id: module.id,\n          title: module.title,\n          description: module.description,\n          lessons: module.lessons.map(lesson => ({\n            id: lesson.id,\n            title: lesson.title,\n            content: lesson.content,\n            duration: lesson.duration,\n            order: lesson.order,\n            exercises: lesson.exercises,\n            prerequisites: lesson.prerequisites,\n            metadata: lesson.metadata\n          })),\n          order: module.order,\n          duration: module.duration,\n          prerequisites: module.prerequisites,\n          metadata: module.metadata\n        })),\n        totalDuration: course.totalDuration,\n        difficulty: course.difficulty,\n        tags: course.tags,\n        metadata: course.metadata\n      }));\n    });\n  }\n\n  extractModulesFromContent(content: string): Module[] {\n    const modules: Module[] = [];\n    const moduleRegex = /^#\\s+(.+)$/gm;\n    const lessonRegex = /^##\\s+(.+)$/gm;\n    let currentModule: Module | null = null;\n    let currentLesson: Lesson | null = null;\n    let moduleContent = '';\n    let lessonContent = '';\n\n    const lines = content.split('\\n');\n    for (const line of lines) {\n      const moduleMatch = line.match(moduleRegex);\n      const lessonMatch = line.match(lessonRegex);\n\n      if (moduleMatch) {\n        if (currentModule) {\n          if (currentLesson) {\n            currentModule.lessons.push(currentLesson);\n          }\n          modules.push(currentModule);\n        }\n\n        currentModule = {\n          id: moduleMatch[1].toLowerCase().replace(/\\s+/g, '-'),\n          title: moduleMatch[1],\n          description: '',\n          lessons: [],\n          order: modules.length + 1,\n          duration: 0,\n          prerequisites: [],\n          metadata: {\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            author: 'System'\n          }\n        };\n        currentLesson = null;\n        moduleContent = '';\n      } else if (lessonMatch && currentModule) {\n        if (currentLesson) {\n          currentModule.lessons.push(currentLesson);\n        }\n\n        currentLesson = {\n          id: lessonMatch[1].toLowerCase().replace(/\\s+/g, '-'),\n          title: lessonMatch[1],\n          content: '',\n          duration: 0,\n          order: currentModule.lessons.length + 1,\n          exercises: [],\n          prerequisites: [],\n          metadata: {\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            author: 'System'\n          }\n        };\n        lessonContent = '';\n      } else if (currentLesson) {\n        lessonContent += line + '\\n';\n        currentLesson.content = lessonContent.trim();\n      } else if (currentModule) {\n        moduleContent += line + '\\n';\n        currentModule.description = moduleContent.trim();\n      }\n    }\n\n    if (currentModule) {\n      if (currentLesson) {\n        currentModule.lessons.push(currentLesson);\n      }\n      modules.push(currentModule);\n    }\n\n    return modules;\n  }\n\n  getCourseGradient(title: string, id: string, tags: string[] = []): string {\n    const lowerTitle = title.toLowerCase();\n    const lowerId = id.toLowerCase();\n    const lowerTags = tags.map(tag => tag.toLowerCase());\n\n    if (\n      lowerTitle.includes('programming') ||\n      lowerTitle.includes('code') ||\n      lowerTitle.includes('developer') ||\n      lowerTags.includes('programming') ||\n      lowerTags.includes('code') ||\n      lowerTags.includes('developer')\n    ) {\n      return 'from-blue-500 to-purple-600';\n    }\n\n    if (\n      lowerTitle.includes('physics') ||\n      lowerTitle.includes('science') ||\n      lowerTags.includes('physics') ||\n      lowerTags.includes('science')\n    ) {\n      return 'from-green-500 to-teal-600';\n    }\n\n    if (\n      lowerTitle.includes('language') ||\n      lowerTitle.includes('linguistics') ||\n      lowerTags.includes('language') ||\n      lowerTags.includes('linguistics')\n    ) {\n      return 'from-yellow-500 to-orange-600';\n    }\n\n    return 'from-gray-500 to-gray-700';\n  }\n}\n\n// Export individual functions for direct use\nexport const fetchCourses = async (path: string): Promise<CourseStructure[]> => {\n  const service = new CourseService();\n  const response = await service.fetchCourses(path);\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const fetchCourseCategories = async (): Promise<any[]> => {\n  const service = new CourseService();\n  const response = await service.fetchCourseCategories();\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const fetchCourseBySlug = async (slug: string): Promise<CourseStructure> => {\n  const service = new CourseService();\n  const response = await service.fetchCourseBySlug(slug);\n  if (response.error) throw response.error;\n  return response.data!;\n};"],"names":["courseCache","categoryCache","CourseService","BaseService","__publicField","getFirestore","getAuth","path","__async","coursesRef","collection","q","query","where","getDocs","doc","__spreadValues","categoriesRef","categories","id","courseRef","docSnap","getDoc","course","slug","snapshot","key","courses","error","module","lesson","content","modules","moduleRegex","lessonRegex","currentModule","currentLesson","moduleContent","lessonContent","lines","line","moduleMatch","lessonMatch","title","tags","lowerTitle","lowerTags","tag","fetchCourses","response","fetchCourseCategories","fetchCourseBySlug"],"mappings":"2sBA6BA,MAAMA,EAA+C,CAAC,EAChDC,EAAuC,CAAC,EAEvC,MAAMC,UAAsBC,CAAY,CAAxC,kCACGC,EAAA,UAAKC,EAAa,GAClBD,EAAA,YAAOE,EAAQ,GAEjB,aAAaC,EAA2D,QAAAC,EAAA,sBACrE,OAAA,KAAK,cAAc,IAAYA,EAAA,sBACpC,MAAMC,EAAaC,EAAW,KAAK,GAAI,SAAS,EAC1CC,EAAIC,EAAMH,EAAYI,EAAM,OAAQ,KAAMN,CAAI,CAAC,EAErD,OADiB,MAAMO,EAAQH,CAAC,GAChB,KAAK,IAAII,GAAQC,EAAA,CAC/B,GAAID,EAAI,IACLA,EAAI,KAAK,EACZ,CAAA,EACH,CAAA,GAGG,uBAAyD,QAAAP,EAAA,sBACtD,OAAA,KAAK,cAAc,IAAYA,EAAA,sBAChC,GAAAP,EAAc,IAChB,OAAOA,EAAc,IAGvB,MAAMgB,EAAgBP,EAAW,KAAK,GAAI,kBAAkB,EAEtDQ,GADW,MAAMJ,EAAQG,CAAa,GAChB,KAAK,IAAIF,GAAQC,EAAA,CAC3C,GAAID,EAAI,IACLA,EAAI,KAAK,EACZ,EAEF,OAAAd,EAAc,IAASiB,EAChBA,CAAA,EACR,CAAA,GAGG,gBAAgBC,EAAuD,QAAAX,EAAA,sBACpE,OAAA,KAAK,cAAc,IAAYA,EAAA,sBAChC,GAAAR,EAAYmB,CAAE,EAChB,OAAOnB,EAAYmB,CAAE,EAGvB,MAAMC,EAAYL,EAAI,KAAK,GAAI,UAAWI,CAAE,EACtCE,EAAU,MAAMC,EAAOF,CAAS,EAElC,GAAA,CAACC,EAAQ,SACL,MAAA,IAAI,MAAM,kBAAkB,EAGpC,MAAME,EAASP,EAAA,CACb,GAAIK,EAAQ,IACTA,EAAQ,KAAK,GAGlB,OAAArB,EAAYmB,CAAE,EAAII,EACXA,CAAA,EACR,CAAA,GAGG,kBAAkBC,EAAyD,QAAAhB,EAAA,sBACxE,OAAA,KAAK,cAAc,IAAYA,EAAA,sBACpC,MAAMC,EAAaC,EAAW,KAAK,GAAI,SAAS,EAC1CC,EAAIC,EAAMH,EAAYI,EAAM,OAAQ,KAAMW,CAAI,CAAC,EAC/CC,EAAW,MAAMX,EAAQH,CAAC,EAEhC,GAAIc,EAAS,MACL,MAAA,IAAI,MAAM,kBAAkB,EAGpC,MAAMF,EAASP,EAAA,CACb,GAAIS,EAAS,KAAK,CAAC,EAAE,IAClBA,EAAS,KAAK,CAAC,EAAE,KAAK,GAGf,OAAAzB,EAAAuB,EAAO,EAAE,EAAIA,EAClBA,CAAA,EACR,CAAA,GAGH,kBAAyB,CAChB,OAAA,KAAKvB,CAAW,EAAE,WAAe,OAAOA,EAAY0B,CAAG,CAAC,EACxD,OAAA,KAAKzB,CAAa,EAAE,WAAe,OAAOA,EAAcyB,CAAG,CAAC,CAAA,CAG/D,aAA2D,QAAAlB,EAAA,sBACxD,OAAA,KAAK,cAAc,IAAYA,EAAA,sBAC9B,KAAA,CAAE,KAAMmB,EAAS,MAAAC,GAAU,MAAM,KAAK,aAAa,kBAAkB,EAC3E,GAAIA,EACI,MAAAA,EAGR,OAAKD,EAIEA,EAAQ,IAAeJ,IAAA,CAC5B,GAAIA,EAAO,GACX,MAAOA,EAAO,MACd,YAAaA,EAAO,YACpB,QAASA,EAAO,QAAQ,IAAeM,IAAA,CACrC,GAAIA,EAAO,GACX,MAAOA,EAAO,MACd,YAAaA,EAAO,YACpB,QAASA,EAAO,QAAQ,IAAeC,IAAA,CACrC,GAAIA,EAAO,GACX,MAAOA,EAAO,MACd,QAASA,EAAO,QAChB,SAAUA,EAAO,SACjB,MAAOA,EAAO,MACd,UAAWA,EAAO,UAClB,cAAeA,EAAO,cACtB,SAAUA,EAAO,QAAA,EACjB,EACF,MAAOD,EAAO,MACd,SAAUA,EAAO,SACjB,cAAeA,EAAO,cACtB,SAAUA,EAAO,QAAA,EACjB,EACF,cAAeN,EAAO,cACtB,WAAYA,EAAO,WACnB,KAAMA,EAAO,KACb,SAAUA,EAAO,QAAA,EACjB,EA9BO,CAAC,CA8BR,EACH,CAAA,GAGH,0BAA0BQ,EAA2B,CACnD,MAAMC,EAAoB,CAAC,EACrBC,EAAc,eACdC,EAAc,gBACpB,IAAIC,EAA+B,KAC/BC,EAA+B,KAC/BC,EAAgB,GAChBC,EAAgB,GAEd,MAAAC,EAAQR,EAAQ,MAAM;AAAA,CAAI,EAChC,UAAWS,KAAQD,EAAO,CAClB,MAAAE,EAAcD,EAAK,MAAMP,CAAW,EACpCS,EAAcF,EAAK,MAAMN,CAAW,EAEtCO,GACEN,IACEC,GACYD,EAAA,QAAQ,KAAKC,CAAa,EAE1CJ,EAAQ,KAAKG,CAAa,GAGZA,EAAA,CACd,GAAIM,EAAY,CAAC,EAAE,cAAc,QAAQ,OAAQ,GAAG,EACpD,MAAOA,EAAY,CAAC,EACpB,YAAa,GACb,QAAS,CAAC,EACV,MAAOT,EAAQ,OAAS,EACxB,SAAU,EACV,cAAe,CAAC,EAChB,SAAU,CACR,cAAe,KACf,cAAe,KACf,OAAQ,QAAA,CAEZ,EACgBI,EAAA,KACAC,EAAA,IACPK,GAAeP,GACpBC,GACYD,EAAA,QAAQ,KAAKC,CAAa,EAG1BA,EAAA,CACd,GAAIM,EAAY,CAAC,EAAE,cAAc,QAAQ,OAAQ,GAAG,EACpD,MAAOA,EAAY,CAAC,EACpB,QAAS,GACT,SAAU,EACV,MAAOP,EAAc,QAAQ,OAAS,EACtC,UAAW,CAAC,EACZ,cAAe,CAAC,EAChB,SAAU,CACR,cAAe,KACf,cAAe,KACf,OAAQ,QAAA,CAEZ,EACgBG,EAAA,IACPF,GACTE,GAAiBE,EAAO;AAAA,EACVJ,EAAA,QAAUE,EAAc,KAAK,GAClCH,IACTE,GAAiBG,EAAO;AAAA,EACVL,EAAA,YAAcE,EAAc,KAAK,EACjD,CAGF,OAAIF,IACEC,GACYD,EAAA,QAAQ,KAAKC,CAAa,EAE1CJ,EAAQ,KAAKG,CAAa,GAGrBH,CAAA,CAGT,kBAAkBW,EAAexB,EAAYyB,EAAiB,CAAA,EAAY,CAClE,MAAAC,EAAaF,EAAM,YAAY,EACrBxB,EAAG,YAAY,EAC/B,MAAM2B,EAAYF,EAAK,IAAWG,GAAAA,EAAI,aAAa,EAGjD,OAAAF,EAAW,SAAS,aAAa,GACjCA,EAAW,SAAS,MAAM,GAC1BA,EAAW,SAAS,WAAW,GAC/BC,EAAU,SAAS,aAAa,GAChCA,EAAU,SAAS,MAAM,GACzBA,EAAU,SAAS,WAAW,EAEvB,8BAIPD,EAAW,SAAS,SAAS,GAC7BA,EAAW,SAAS,SAAS,GAC7BC,EAAU,SAAS,SAAS,GAC5BA,EAAU,SAAS,SAAS,EAErB,6BAIPD,EAAW,SAAS,UAAU,GAC9BA,EAAW,SAAS,aAAa,GACjCC,EAAU,SAAS,UAAU,GAC7BA,EAAU,SAAS,aAAa,EAEzB,gCAGF,2BAAA,CAEX,CAGa,MAAAE,EAAsBzC,GAA6CC,EAAA,sBAE9E,MAAMyC,EAAW,MADD,IAAI/C,EAAc,EACH,aAAaK,CAAI,EAC5C,GAAA0C,EAAS,MAAO,MAAMA,EAAS,MAC5B,OAAAA,EAAS,MAAQ,CAAC,CAC3B,GAEaC,EAAwB,IAA4B1C,EAAA,sBAEzD,MAAAyC,EAAW,MADD,IAAI/C,EAAc,EACH,sBAAsB,EACjD,GAAA+C,EAAS,MAAO,MAAMA,EAAS,MAC5B,OAAAA,EAAS,MAAQ,CAAC,CAC3B,GAEaE,EAA2B3B,GAA2ChB,EAAA,sBAEjF,MAAMyC,EAAW,MADD,IAAI/C,EAAc,EACH,kBAAkBsB,CAAI,EACjD,GAAAyB,EAAS,MAAO,MAAMA,EAAS,MACnC,OAAOA,EAAS,IAClB"}