{"version":3,"file":"DN_AKHeO.js","sources":["../../../../../../src/lib/services/activityService.ts"],"sourcesContent":["// src/lib/services/activityService.ts\nimport { collection, addDoc, query, where, orderBy, limit as firestoreLimit, getDocs, doc, updateDoc, type DocumentData } from 'firebase/firestore';\nimport { db } from '../firebase.js';\nimport { get } from 'svelte/store';\nimport { user } from '../stores/authStore.js';\n\nexport interface Activity {\n  id: string;\n  userId: string;\n  eventType: string;\n  referenceId?: string;\n  metadata?: Record<string, any>;\n  timestampStart: number;\n  timestampEnd?: number;\n}\n\n/**\n * Start logging an activity\n */\nexport async function logStart(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<string> {\n  const activityData: any = {\n    eventType,\n    timestampStart: Date.now(),\n  };\n  \n  // Get user ID from auth store instead of localStorage\n  const currentUser = get(user);\n  if (currentUser) {\n    activityData.userId = currentUser.uid;\n  } else {\n    // Fallback to localStorage only if needed\n    const localStorageUserId = globalThis?.localStorage?.getItem('userId');\n    if (localStorageUserId) {\n      activityData.userId = localStorageUserId;\n    }\n  }\n  \n  // Only add these fields if they're not undefined\n  if (referenceId !== undefined) {\n    activityData.referenceId = referenceId;\n  }\n  \n  if (metadata !== undefined) {\n    activityData.metadata = metadata;\n  }\n  \n  try {\n    const docRef = await addDoc(collection(db, 'activities'), activityData);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error logging activity start:', error);\n    return '';\n  }\n}\n\n/**\n * Log completion of an activity\n */\nexport async function logEnd(activityId: string): Promise<void> {\n  const activityDoc = doc(db, 'activities', activityId);\n  await updateDoc(activityDoc, {\n    timestampEnd: Date.now()\n  });\n}\n\n/**\n * Log a one-time event\n */\nexport async function logEvent(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<void> {\n  const now = Date.now();\n  const eventData: any = {\n    eventType,\n    timestampStart: now,\n    timestampEnd: now\n  };\n  \n  // Get user ID from auth store instead of localStorage\n  const currentUser = get(user);\n  if (currentUser) {\n    eventData.userId = currentUser.uid;\n  } else {\n    // Fallback to localStorage only if needed\n    const localStorageUserId = globalThis?.localStorage?.getItem('userId');\n    if (localStorageUserId) {\n      eventData.userId = localStorageUserId;\n    }\n  }\n  \n  // Only add these fields if they're not undefined\n  if (referenceId !== undefined) {\n    eventData.referenceId = referenceId;\n  }\n  \n  if (metadata !== undefined) {\n    eventData.metadata = metadata;\n  }\n  \n  try {\n    await addDoc(collection(db, 'activities'), eventData);\n  } catch (error) {\n    console.error('Error logging event:', error);\n  }\n}\n\n/**\n * Fetch recent activities for a user\n */\nexport async function getRecentActivities(userId: string, limitCount: number = 10): Promise<Activity[]> {\n  const q = query(\n    collection(db, 'activities'),\n    where('userId', '==', userId),\n    orderBy('timestampStart', 'desc'),\n    firestoreLimit(limitCount)\n  );\n\n  const snapshot = await getDocs(q);\n  return snapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  })) as Activity[];\n}\n\n/**\n * Fetch recent activities for the current user\n */\nexport async function fetchRecentActivities(limitCount: number = 10): Promise<Activity[]> {\n  const userId = globalThis?.localStorage?.getItem('userId');\n  if (!userId) return [];\n  return getRecentActivities(userId, limitCount);\n}"],"names":["logStart","eventType","referenceId","metadata","__async","activityData","currentUser","get","user","localStorageUserId","_a","addDoc","collection","db","error","logEnd","activityId","activityDoc","doc","updateDoc","logEvent","now","eventData","getRecentActivities","userId","limitCount","q","query","where","orderBy","firestoreLimit","getDocs","__spreadValues","fetchRecentActivities"],"mappings":"2sBAmBsB,SAAAA,EAASC,EAAmBC,EAAsBC,EAAiD,QAAAC,EAAA,4BACvH,MAAMC,EAAoB,CACxB,UAAAJ,EACA,eAAgB,KAAK,IAAI,CAC3B,EAGMK,EAAcC,EAAIC,CAAI,EAC5B,GAAIF,EACFD,EAAa,OAASC,EAAY,QAC7B,CAEL,MAAMG,GAAqBC,EAAA,mCAAY,eAAZ,YAAAA,EAA0B,QAAQ,UACzDD,IACFJ,EAAa,OAASI,EACxB,CAIEP,IAAgB,SAClBG,EAAa,YAAcH,GAOzB,GAAA,CAEF,OADe,MAAMS,EAAOC,EAAWC,EAAI,YAAY,EAAGR,CAAY,GACxD,SACPS,EAAO,CACN,eAAA,MAAM,gCAAiCA,CAAK,EAC7C,EAAA,CAEX,GAKA,SAAsBC,EAAOC,EAAmC,QAAAZ,EAAA,sBAC9D,MAAMa,EAAcC,EAAIL,EAAI,aAAcG,CAAU,EACpD,MAAMG,EAAUF,EAAa,CAC3B,aAAc,KAAK,IAAI,CAAA,CACxB,CACH,GAKsB,SAAAG,EAASnB,EAAmBC,EAAsBC,EAA+C,QAAAC,EAAA,4BAC/G,MAAAiB,EAAM,KAAK,IAAI,EACfC,EAAiB,CACrB,UAAArB,EACA,eAAgBoB,EAChB,aAAcA,CAChB,EAGMf,EAAcC,EAAIC,CAAI,EAC5B,GAAIF,EACFgB,EAAU,OAAShB,EAAY,QAC1B,CAEL,MAAMG,GAAqBC,EAAA,mCAAY,eAAZ,YAAAA,EAA0B,QAAQ,UACzDD,IACFa,EAAU,OAASb,EACrB,CAIEP,IAAgB,SAClBoB,EAAU,YAAcpB,GAGtBC,IAAa,SACfmB,EAAU,SAAWnB,GAGnB,GAAA,CACF,MAAMQ,EAAOC,EAAWC,EAAI,YAAY,EAAGS,CAAS,QAC7CR,EAAO,CACN,QAAA,MAAM,uBAAwBA,CAAK,CAAA,CAE/C,GAKsB,SAAAS,EAAoBC,EAAgBC,EAAqB,GAAyB,QAAArB,EAAA,sBACtG,MAAMsB,EAAIC,EACRf,EAAWC,EAAI,YAAY,EAC3Be,EAAM,SAAU,KAAMJ,CAAM,EAC5BK,EAAQ,iBAAkB,MAAM,EAChCC,EAAeL,CAAU,CAC3B,EAGA,OADiB,MAAMM,EAAQL,CAAC,GAChB,KAAK,IAAIR,GAAQc,EAAA,CAC/B,GAAId,EAAI,IACLA,EAAI,KAAK,EACZ,CACJ,GAKsB,SAAAe,EAAsBR,EAAqB,GAAyB,QAAArB,EAAA,4BACxF,MAAMoB,GAASd,EAAA,mCAAY,eAAZ,YAAAA,EAA0B,QAAQ,UAC7C,OAACc,EACED,EAAoBC,EAAQC,CAAU,EADzB,CAAC,CAEvB"}