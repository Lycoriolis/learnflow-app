{"version":3,"file":"_page.svelte.js","sources":["../../../../../src/lib/components/WelcomeBanner.svelte","../../../../../src/lib/components/ProgressMetrics.svelte","../../../../../src/lib/components/courses/CourseCarousel.svelte","../../../../../src/lib/components/courses/exercise/ExercisesSection.svelte","../../../../../src/lib/components/RecentActivity.svelte","../../../../../src/lib/components/RecommendationsSection.svelte","../../../../../src/lib/components/ScoreCard.svelte","../../../../../src/routes/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  export let username = \"Hakim\";\n</script>\n\n<div class=\"bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-2xl p-6 mb-8 text-white squircle\">\n  <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center\">\n    <div>\n      <h2 class=\"text-2xl font-bold mb-2\">Welcome back, {username}!</h2>\n      <p class=\"opacity-90 mb-4 md:mb-0\">Continue your learning journey with these recommended courses</p>\n    </div>\n    <a \n      href=\"/courses\" \n      class=\"bg-indigo-100 text-indigo-800 px-4 py-2 rounded-lg font-medium hover:bg-indigo-200 transition\"\n    >\n      Explore Courses\n    </a>\n  </div>\n</div>","<script>\n  export let metrics = [\n    {\n      title: \"Courses in Progress\",\n      value: \"3\",\n      icon: \"fa-book\",\n      color: \"indigo\"\n    },\n    {\n      title: \"Exercises Completed\",\n      value: \"24\",\n      icon: \"fa-check-circle\",\n      color: \"green\"\n    },\n    {\n      title: \"Learning Streak\",\n      value: \"7 days\",\n      icon: \"fa-fire\",\n      color: \"yellow\"\n    }\n  ];\n</script>\n\n<div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n  {#each metrics as metric}\n    <div class=\"bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm card-hover\">\n      <div class=\"flex justify-between items-start\">\n        <div>\n          <h3 class=\"text-gray-400 text-sm font-medium\">{metric.title}</h3>\n          <p class=\"text-2xl font-bold text-gray-100 mt-1\">{metric.value}</p>\n        </div>\n        <div class=\"w-12 h-12 bg-indigo-900 rounded-full flex items-center justify-center\">\n          <i class=\"fas {metric.icon} text-indigo-300\"></i>\n        </div>\n      </div>\n    </div>\n  {/each}\n</div>\n","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import CourseCard from './CourseCard.svelte';\n  import type { ContentNode } from '$lib/services/courses/courseService';\n  import Icon from '@iconify/svelte';\n  \n  export let courses: ContentNode[] = [];\n  export let title: string = \"Featured Courses\";\n  \n  let selectedIndex = 0;\n  \n  function next() {\n    if (selectedIndex < courses.length - 1) {\n      selectedIndex++;\n    }\n  }\n  \n  function prev() {\n    if (selectedIndex > 0) {\n      selectedIndex--;\n    }\n  }\n</script>\n\n<div class=\"course-carousel\">\n  <div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"text-xl font-bold text-gray-900 dark:text-white\">{title}</h2>\n    \n    <div class=\"flex space-x-2\">\n      <button \n        on:click={prev}\n        class=\"p-2 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        disabled={selectedIndex === 0}\n      >\n        <Icon icon=\"mdi:chevron-left\" class=\"w-5 h-5\" />\n      </button>\n      \n      <button \n        on:click={next}\n        class=\"p-2 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        disabled={selectedIndex === courses.length - 1}\n      >\n        <Icon icon=\"mdi:chevron-right\" class=\"w-5 h-5\" />\n      </button>\n    </div>\n  </div>\n  \n  <div class=\"carousel-container overflow-hidden\">\n    <div class=\"carousel-track flex transition-transform duration-300\" style=\"transform: translateX(-{selectedIndex * 100}%)\">\n      {#each courses as course, i}\n        <div class=\"carousel-item w-full flex-shrink-0 p-2\">\n          <CourseCard {course} isSelected={i === selectedIndex} />\n        </div>\n      {/each}\n    </div>\n  </div>\n</div>","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { fade } from 'svelte/transition';\n  import ExerciseCard from './ExerciseCard.svelte';\n  import type { Exercise } from '$lib/services/courses/exerciseService';\n  import { fetchExercises } from '$lib/services/courses/exerciseService';\n\n  export let categoryId: string | null = null;\n  export let limit: number | null = null;\n  export let title: string = 'Exercises';\n  export let onExerciseClick: (exercise: Exercise) => void = (exercise) => {\n    console.log('Exercise clicked:', exercise.id);\n  };\n\n  let exercises: Exercise[] = [];\n  let isLoading = true;\n  let error: string | null = null;\n  let filteredExercises: Exercise[] = [];\n  let searchQuery = '';\n  let selectedDifficulty: 'all' | 'beginner' | 'intermediate' | 'advanced' = 'all';\n  let selectedTags: string[] = [];\n  let showFilters = false;\n\n  // Update filters when exercises or filter values change\n  $: applyFilters();\n\n  function applyFilters() {\n    let result = exercises;\n\n    if (searchQuery) {\n      const lowerQuery = searchQuery.toLowerCase();\n      result = result.filter(ex => ex.title.toLowerCase().includes(lowerQuery) || ex.description?.toLowerCase().includes(lowerQuery));\n    }\n\n    if (selectedDifficulty !== 'all') {\n      result = result.filter(ex => ex.difficulty === selectedDifficulty);\n    }\n\n    if (selectedTags.length > 0) {\n      result = result.filter(ex => selectedTags.every(tag => ex.tags?.includes(tag)));\n    }\n\n    if (limit !== null) {\n      result = result.slice(0, limit);\n    }\n\n    filteredExercises = result;\n  }\n\n  async function load() {\n    isLoading = true;\n    error = null;\n    try {\n      const all = await fetchExercises(categoryId);\n      exercises = all;\n    } catch (err) {\n      console.error(err);\n      error = 'Failed to load exercises';\n    } finally {\n      isLoading = false;\n    }\n  }\n\n  onMount(load);\n\n  function handleSearchInput(e: InputEvent) {\n    searchQuery = (e.target as HTMLInputElement).value;\n  }\n\n  function handleDifficultyChange(difficulty: typeof selectedDifficulty) {\n    selectedDifficulty = difficulty;\n  }\n\n  function toggleTag(tag: string) {\n    selectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];\n  }\n\n  function clearFilters() {\n    searchQuery = '';\n    selectedDifficulty = 'all';\n    selectedTags = [];\n  }\n\n  function toggleFilters() {\n    showFilters = !showFilters;\n  }\n</script>\n\n<section class=\"exercises-section\" in:fade={{ duration: 300 }}>\n  <div class=\"section-header\">\n    <h2 class=\"section-title\">{title}</h2>\n    <button on:click={toggleFilters} aria-expanded={showFilters} class=\"filter-toggle\">\n      <i class=\"fas fa-filter\"></i> Filters\n      {#if selectedDifficulty !== 'all' || selectedTags.length || searchQuery}\n        <span class=\"filter-badge\">{selectedTags.length + (selectedDifficulty !== 'all' ? 1 : 0) + (searchQuery ? 1 : 0)}</span>\n      {/if}\n    </button>\n  </div>\n\n  {#if isLoading}\n    <div class=\"loading-state\">Loading exercises...</div>\n  {:else if error}\n    <div class=\"error-state\">{error}</div>\n  {:else if filteredExercises.length === 0}\n    <div class=\"empty-state\">No exercises found.</div>\n  {:else}\n    <div class=\"exercises-grid\">\n      {#each filteredExercises as exercise (exercise.id)}\n        <ExerciseCard {...exercise} on:click={() => onExerciseClick(exercise)} />\n      {/each}\n    </div>\n  {/if}\n</section>\n\n<style>\n  .exercises-section {\n    margin-bottom: 3rem;\n  }\n  \n  .section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1.5rem;\n  }\n  \n  .section-title {\n    font-size: 1.75rem;\n    font-weight: 700;\n    color: #111827;\n    margin: 0;\n  }\n  \n  .filter-toggle {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 0.75rem;\n    background: #f9fafb;\n    border: 1px solid #e5e7eb;\n    border-radius: 0.375rem;\n    font-size: 0.95rem;\n    color: #4b5563;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n  \n  .filter-toggle:hover {\n    background: #f3f4f6;\n    border-color: #d1d5db;\n  }\n  \n  .filter-badge {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    background: #ef4444;\n    color: white;\n    width: 1.25rem;\n    height: 1.25rem;\n    font-size: 0.75rem;\n    border-radius: 50%;\n    font-weight: 600;\n  }\n  \n  .exercises-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 1.5rem;\n  }\n  \n  .loading-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 1rem;\n    padding: 3rem 0;\n    color: #6b7280;\n  }\n  \n  .error-state, .empty-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 1rem;\n    padding: 3rem 0;\n    text-align: center;\n    color: #6b7280;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { fetchRecentActivities, type Activity } from '$lib/services/activityService';\n\n  interface DisplayActivity extends Activity {\n    title: string;\n    content: string;\n    timeAgo: string;\n    icon: string;\n    color: string;\n  }\n\n  let activities: DisplayActivity[] = [];\n\n  // Compute relative time\n  function formatTimeAgo(ts: number): string {\n    const diff = Date.now() - ts;\n    const seconds = Math.floor(diff / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}h ago`;\n    const days = Math.floor(hours / 24);\n    return `${days}d ago`;\n  }\n\n  function mapEventTypeToTitle(type: string, metadata?: any): string {\n    switch(type) {\n      case 'view_course': return `Viewed Course`;\n      case 'start_lesson': return `Started Lesson`;\n      case 'complete_lesson': return `Completed Lesson`;\n      case 'flashcard_review': return `Reviewed Flashcards`;\n      default:\n        return type.replace(/_/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase());\n    }\n  }\n\n  function eventTypeIcon(type: string): string {\n    switch(type) {\n      case 'view_course': return 'fa-book';\n      case 'start_lesson':\n      case 'complete_lesson': return 'fa-layer-group';\n      case 'flashcard_review': return 'fa-layer-group';\n      default: return 'fa-circle';\n    }\n  }\n\n  function eventTypeColor(type: string): string {\n    switch(type) {\n      case 'view_course': return 'blue';\n      case 'start_lesson': return 'yellow';\n      case 'complete_lesson': return 'green';\n      case 'flashcard_review': return 'purple';\n      default: return 'gray';\n    }\n  }\n\n  onMount(async () => {\n    const data = await fetchRecentActivities(10);\n    activities = data.map(a => ({\n      ...a,\n      title: mapEventTypeToTitle(a.eventType, a.metadata),\n      content: a.referenceId,\n      timeAgo: formatTimeAgo(a.timestampStart),\n      icon: eventTypeIcon(a.eventType),\n      color: eventTypeColor(a.eventType)\n    }));\n  });\n</script>\n\n<div>\n  <h2 class=\"text-lg font-semibold text-gray-100 mb-4\">Recent Activity</h2>\n  <div class=\"bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm\">\n    <div class=\"space-y-4\">\n      {#each activities as activity (activity.id)}\n        <div class=\"flex items-start\">\n          <div class={`w-10 h-10 bg-${activity.color}-900 rounded-full flex items-center justify-center mr-3 flex-shrink-0`}>\n            <i class={`fas ${activity.icon} text-${activity.color}-300`}></i>\n          </div>\n          <div>\n            <h3 class=\"font-medium text-gray-100\">{activity.title}</h3>\n            <p class=\"text-gray-300 text-sm\">{activity.content}</p>\n            <p class=\"text-gray-400 text-xs mt-1\">{activity.timeAgo}</p>\n          </div>\n        </div>\n      {/each}\n      {#if activities.length === 0}\n        <p class=\"text-gray-400 text-sm\">No recent activity.</p>\n      {/if}\n    </div>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { get } from 'svelte/store';\n  import type { Recommendation } from '$lib/services/recommendationService.js';\n  import { user } from '$lib/stores/authStore.js';\n  import { secureFetch } from '$lib/utils/secureFetch'; // Assuming secureFetch handles auth/CSRF\n\n  export let limit: number = 5;\n\n  let recommendations: Recommendation[] = [];\n  let loading: boolean = true;\n  let error: string | null = null;\n\n  onMount(async () => {\n    try {\n      const currentUser = get(user);\n      if (!currentUser?.uid) {\n        // Don't throw an error, just show no recommendations for guests\n        loading = false;\n        return;\n      }\n      // Fetch from the new API endpoint\n      const response = await secureFetch(`/api/recommendations?limit=${limit}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      recommendations = await response.json();\n    } catch (e:any) {\n      console.error('Error fetching recommendations', e);\n      error = e.message || 'Failed to load recommendations.';\n    } finally {\n      loading = false;\n    }\n  });\n\n  function getLink(rec: Recommendation): string {\n    switch(rec.type) {\n      case 'next_lesson':\n        // Ensure metadata and path exist\n        return rec.metadata?.path ? `/courses/${rec.metadata.path}` : '#'; \n      case 'review_flashcards':\n        return `/tools/flashcards`;\n      case 'view_courses':\n        return `/courses`;\n      case 'course':\n         // Ensure metadata and path exist\n        return rec.metadata?.path ? `/courses/${rec.metadata.path}` : '#';\n      case 'exercise':\n         // Ensure metadata and path exist\n        return rec.metadata?.path ? `/exercises/${rec.metadata.path}` : '#';\n      default:\n        console.warn(`Unknown recommendation type: ${rec.type}`);\n        return '#';\n    }\n  }\n</script>\n\n<div class=\"mb-8\">\n  <h2 class=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">Recommended for You</h2>\n  {#if loading}\n    <p class=\"text-gray-600\">Loading recommendations...</p>\n  {:else if error}\n    <p class=\"text-red-500\">{error}</p>\n  {:else if recommendations.length === 0}\n    <p class=\"text-gray-600\">No recommendations at this time.</p>\n  {:else}\n    <div class=\"space-y-4\">\n      {#each recommendations as rec}\n        <a href={getLink(rec)} class=\"block bg-white dark:bg-gray-800 rounded-lg p-4 shadow hover:shadow-md transition flex items-center\">\n          <div class=\"flex-1\">\n            <h3 class=\"font-medium text-gray-900 dark:text-white\">{rec.title}</h3>\n            <p class=\"text-gray-600 dark:text-gray-300 text-sm\">{rec.description}</p>\n          </div>\n          <i class=\"fas fa-chevron-right text-gray-400\"></i>\n        </a>\n      {/each}\n    </div>\n  {/if}\n</div>","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  let score: number | null = null;\n  let loading = true;\n  let error: string | null = null;\n\n  onMount(async () => {\n    try {\n      const res = await fetch('/api/score');\n      if (!res.ok) throw new Error('Failed to fetch score');\n      const data = await res.json();\n      score = data.score;\n    } catch (e:any) {\n      console.error(e);\n      error = e.message;\n    } finally {\n      loading = false;\n    }\n  });\n\n  function starArray(n: number) {\n    const full = Math.floor(n);\n    const half = n - full >= 0.5;\n    return [...Array(5)].map((_, i) =>\n      i < full ? 'full' : i === full && half ? 'half' : 'empty'\n    );\n  }\n</script>\n\n<div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow mb-8\">\n  <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">Score Utilisateur</h2>\n  {#if loading}\n    <p class=\"text-gray-600\">Loading...</p>\n  {:else if error}\n    <p class=\"text-red-500\">{error}</p>\n  {:else if score !== null}\n    <div class=\"flex items-center\">\n      <div class=\"flex mr-3\">\n        {#each starArray(score) as type}\n          {#if type === 'full'}<i class=\"fas fa-star text-yellow-400\"></i>\n          {:else if type === 'half'}<i class=\"fas fa-star-half-alt text-yellow-400\"></i>\n          {:else}<i class=\"far fa-star text-gray-300 dark:text-gray-600\"></i>{/if}\n        {/each}\n      </div>\n      <span class=\"text-gray-900 dark:text-gray-100 font-medium\">{score}/5</span>\n    </div>\n  {/if}\n</div>","<script lang=\"ts\">\n  import { onMount, onDestroy } from 'svelte';\n  import WelcomeBanner from '$lib/components/WelcomeBanner.svelte';\n  import ProgressMetrics from '$lib/components/ProgressMetrics.svelte';\n  import CourseCarousel from '$lib/components/courses/CourseCarousel.svelte';\n  import ExercisesSection from '$lib/components/courses/exercise/ExercisesSection.svelte';\n  import RecentActivity from '$lib/components/RecentActivity.svelte';\n  import { isAuthenticated, user, loading as authLoading } from '$lib/stores/authStore.js';\n  import GeneralWelcome from '$lib/components/GeneralWelcome.svelte';\n  import { userProfile, userProfileLoading } from '$lib/stores/userProfileStore.js';\n  import { focusSessions, todos } from '$lib/stores/pipStores';\n  import FocusTimeChart from '$lib/components/FocusTimeChart.svelte';\n  import { logStart, logEnd } from '$lib/services/activityService';\n  import RecommendationsSection from '$lib/components/RecommendationsSection.svelte';\n  import ScoreCard from '$lib/components/ScoreCard.svelte';\n  import type { PageData } from './$types';\n\n  export let data: PageData;\n  $: suggestedCourses = data.suggestedCourses || [];\n\n  type Metric = { title: string; value: string; icon: string; color: string };\n  let metrics: Metric[] = [];\n  let dashboardEventId: string | null = null;\n\n  onMount(async () => {\n    dashboardEventId = await logStart('view_dashboard', 'dashboard');\n    const updateMetrics = () => {\n      if ($isAuthenticated && $userProfile) {\n        const enrollments: any[] = $userProfile.preferences?.enrollments || [];\n        const inProgress = enrollments.filter((e: any) => e.progress > 0 && e.progress < 100).length;\n        const completed = enrollments.filter((e: any) => e.progress === 100).length;\n        const sessions = $focusSessions;\n        const sessionCount = sessions.length;\n        const totalFocus = sessions.reduce((sum: number, s: any) => sum + (s.duration || 0) / 60, 0).toFixed(0);\n        const tasksDone = $todos.filter((t: any) => t.completed).length;\n        metrics = [\n          { title: 'Courses In Progress', value: String(inProgress), icon: 'fa-book', color: 'indigo' },\n          { title: 'Courses Completed', value: String(completed), icon: 'fa-award', color: 'green' },\n          { title: 'Focus Sessions', value: String(sessionCount), icon: 'fa-stopwatch', color: 'yellow' },\n          { title: 'Total Focus Time (min)', value: totalFocus, icon: 'fa-clock', color: 'purple' },\n          { title: 'Tasks Completed', value: String(tasksDone), icon: 'fa-list-check', color: 'blue' }\n        ];\n      }\n    };\n\n    updateMetrics();\n\n    const unsubscribeUserProfile = userProfile.subscribe(updateMetrics);\n    const unsubscribeFocusSessions = focusSessions.subscribe(updateMetrics);\n    const unsubscribeTodos = todos.subscribe(updateMetrics);\n\n    return () => {\n      unsubscribeUserProfile();\n      unsubscribeFocusSessions();\n      unsubscribeTodos();\n    };\n  });\n\n  onDestroy(() => {\n    if (dashboardEventId) {\n      logEnd(dashboardEventId);\n    }\n  });\n</script>\n\n<svelte:head>\n  <title>LearnFlow | Your Dashboard</title>\n  <meta name=\"description\" content=\"Your personalized learning dashboard on LearnFlow.\" />\n</svelte:head>\n\n<div class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\n  {#if $authLoading || $userProfileLoading}\n    <div class=\"flex justify-center items-center min-h-[60vh]\"><i class=\"fas fa-spinner fa-spin text-4xl text-indigo-500\"></i></div>\n  {:else if $isAuthenticated && $userProfile}\n    <WelcomeBanner username={$user ? ($user.displayName ?? $user.email ?? '') : ''} />\n\n    <ProgressMetrics {metrics} />\n\n    <div class=\"mb-8\">\n      <h2 class=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">Focus Time Log</h2>\n      <FocusTimeChart sessions={$focusSessions} timeUnit=\"day\" />\n    </div>\n\n    <div class=\"mb-8\">\n      <h2 class=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">Quick Actions</h2>\n      <div class=\"flex flex-col gap-4 w-full\">\n        <CourseCarousel title=\"Suggested Courses\" items={suggestedCourses} />\n        <ExercisesSection limit={5} />\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow min-h-[140px] flex flex-col items-center justify-center text-center transition hover:shadow-xl hover:ring-2 hover:ring-indigo-300 w-full\">\n          <h3 class=\"text-lg font-semibold mb-2\">Your Tasks</h3>\n          <p class=\"text-gray-600 dark:text-gray-300\">Manage your study tasks.</p>\n        </div>\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow min-h-[140px] flex flex-col items-center justify-center text-center transition hover:shadow-xl hover:ring-2 hover:ring-indigo-300 w-full\">\n          <h3 class=\"text-lg font-semibold mb-2\">Your Notes</h3>\n          <p class=\"text-gray-600 dark:text-gray-300\">Jot down quick thoughts.</p>\n        </div>\n      </div>\n    </div>\n\n    <ScoreCard />\n\n    <RecommendationsSection limit={5} />\n\n    <RecentActivity />\n\n  {:else}\n    <GeneralWelcome />\n  {/if}\n</div>\n"],"names":["$.fallback","$.escape","$.attr_class","$.stringify","$.attr","$.attr_style","$.store_get"],"mappings":";;;;;;;;;;;;;;AACa,MAAA,yCAAW,OAAO;iRAM0B,QAAQ,CAAA;;;;MCNpD,UAAOA;AAAAA;;;QAEd,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA;;QAGP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA;;QAGP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA;;;;uCAMJ,OAAO;;;QAAI,SAAM,WAAA,OAAA;wOAI+B,OAAO,KAAK,CACT,0DAAAC,YAAA,OAAO,KAAK,CAAA,mGAAAC,WAAA,OAAAC,UAG/C,OAAO,IAAI,CAAA,kBAAA,CAAA;AAAA;;;;;;MC1BvB,UAAsBH,SAAA,QAAA,SAAA,GAAA,MAAA,CAAA,GAAA,IAAA;AACtB,MAAA,mCAAgB,kBAAkB;AAEzC,MAAA,gBAAgB;uCAwCT,OAAO;+KAvB6C,KAAK,CAAA,4NAAAI,KAAA,YAMpD,kBAAkB,GAAC,IAAA,CAAA;;AAQnB,YAAA,OAAA,2MAAAA,KAAA,YAAA,kBAAkB,QAAQ,SAAS,GAAC,IAAA,CAAA;;AAQgD,YAAA,OAAA,kJAAAC,WAAA,0BAAAF,UAAA,gBAAgB,GAAG,CAAA,IAAA,CAAA;;QACjG,SAAM,WAAA,CAAA;;AAEa,eAAA,WAAA,EAAA,QAAA,YAAA,MAAM,eAAa;;;;;;;;;AC5CjD,MAAA,6CAA4B,IAAI;AAChC,MAAA,mCAAuB,IAAI;AAC3B,MAAA,mCAAgB,WAAW;MAC3B,kBAA6CH,SAAA,QAAA,iBAAA,GAAA,CAAI,aAAa;AACvE,YAAQ,IAAI,qBAAqB,SAAS,EAAE;AAAA,GAC7C;MAEG,YAAqB,CAAA;AAIrB,MAAA,cAAc;MAEd,eAAsB,CAAA;AACtB,MAAA,cAAc;AAKT,WAAA,eAAe;AAClB,QAAA,SAAS;AAWT,QAAA,aAAa,SAAS,GAAG;AAC3B,eAAS,OAAO,OAAO,CAAA,OAAM,aAAa,MAAM,CAAA,QAAO,GAAG,MAAM,SAAS,GAAG,CAAA,CAAA;AAAA,IAC9E;QAEI,UAAU,MAAM;AAClB,eAAS,OAAO,MAAM,GAAG,KAAK;AAAA,IAChC;AAAA,EAGF;AAvBG,eAAY;AAkEc,YAAA,OAAA,sIAAAC,YAAA,KAAK,uCACgB,WAAW,CAAA;AAEpD,MAAgC,aAAa,UAAU,aAAW;;AACzC,cAAA,OAAA,4CAAAA,YAAA,aAAa,SAA6C,IAAwB,CAAC,CAAA;AAAA;;;;AAKvG;;;;;;;;;;MCvFV,aAA6B,CAAA;uCA+DtB,UAAU;;;QAAI,WAAQ,WAAA,OAAA;qFAEG,SAAS,KAAK,uEACvB,CAAA,MAAAC,WAAA,OAAA,SAAS,IAAI,SAAS,SAAS,KAAK,6EAGd,SAAS,KAAK,CACnB,0CAAAD,YAAA,SAAS,OAAO,CAAA,8CAAAA,YACX,SAAS,OAAO,CAAA;AAAA;;MAIxD,WAAW,WAAW,GAAC;;;;;;;;;;;;;;AChFrB,MAAA,mCAAgB,CAAC;;AAoDhB;;;;;;;;;;;AC5BA;;;;;;;;;;MCbT;MADQ,OAAc,QAAA,MAAA;MAIrB,UAAiB,CAAA;AAqCrB,YAAgB,MAAA;AAAA,GAIf;AA5CE,qBAAmB,KAAK,oBAAgB,CAAA;;;;;;;;;;;;MAwDD,UAAAK,UAAA,iBAAA,IAAA,SAAA,IAAA,IAAAA,UAAA,iBAAA,IAAA,SAAA,IAAA,EAAA,eAAqBA,UAAA,iBAAA,CAAA,GAAA,SAAA,IAAA,EAAA,SAAS,KAAM;AAAA;;;;;;;;;;;aAYvB;AAAA;;yCACxB,EAAC,CAAA;;;;+CAcC,EAAC,CAAA;;;;;;;;;;;;;"}