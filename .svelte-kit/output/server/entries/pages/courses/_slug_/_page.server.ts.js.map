{"version":3,"file":"_page.server.ts.js","sources":["../../../../../../../src/routes/courses/[slug]/+page.server.ts"],"sourcesContent":["import type { PageServerLoad } from './$types.js';\nimport { error } from '@sveltejs/kit';\n// Use the unified content service function\nimport { getContentNodeByIdentifier } from '$lib/server/contentService';\n\nexport const load: PageServerLoad = async (event) => {\n  const { params } = event; // Removed fetch\n  const identifier = params.slug; // Use identifier instead of slug\n\n  try {\n    // Directly use the service to get the node. It handles finding by path/id and loading content.\n    const node = await getContentNodeByIdentifier('courses', identifier);\n\n    // Service throws 404 if not found, so explicit check might be redundant.\n    // if (!node) {\n    //   throw error(404, 'Content not found');\n    // }\n\n    // Determine if it's a category/container or a content page\n    const containerTypes = ['category', 'root', 'course-category', 'topic'];\n    const isCategory = containerTypes.includes(node.type);\n\n    if (isCategory) {\n      // For categories/containers, return the node and its children\n      return {\n          node: node,\n          isCategory: true,\n          items: node.children || [] // Pass children if available\n      };\n    } else {\n      // For content pages (course, lesson, module), return node and content\n      const content = (node as any).markdownContent || '';\n      const contentLoadingError = (node as any).contentLoadingError;\n\n      if (contentLoadingError) {\n          console.warn(`Content loading error for ${identifier}: ${contentLoadingError}`);\n          // Content will contain the error message loaded by the service\n      }\n\n      return {\n          node: node,\n          content: content,\n          isCategory: false\n      };\n    }\n\n  } catch (err: any) {\n    // Re-throw SvelteKit errors (like 404/500 from the service)\n    if (err.status) {\n      throw err;\n    }\n    // Log unexpected errors and throw a generic 500\n    console.error(`Error loading content for identifier ${identifier}:`, err);\n    throw error(500, `Error loading content: ${err.message || 'Internal Server Error'}`);\n  }\n};"],"names":[],"mappings":";;AAKa,MAAA,OAAuB,OAAO,UAAU;AAC7C,QAAA,EAAE,WAAW;AACnB,QAAM,aAAa,OAAO;AAEtB,MAAA;AAEF,UAAM,OAAO,MAAM,2BAA2B,WAAW,UAAU;AAQnE,UAAM,iBAAiB,CAAC,YAAY,QAAQ,mBAAmB,OAAO;AACtE,UAAM,aAAa,eAAe,SAAS,KAAK,IAAI;AAEpD,QAAI,YAAY;AAEP,aAAA;AAAA,QACH;AAAA,QACA,YAAY;AAAA,QACZ,OAAO,KAAK,YAAY,CAAA;AAAA;AAAA,MAC5B;AAAA,IAAA,OACK;AAEC,YAAA,UAAW,KAAa,mBAAmB;AACjD,YAAM,sBAAuB,KAAa;AAE1C,UAAI,qBAAqB;AACrB,gBAAQ,KAAK,6BAA6B,UAAU,KAAK,mBAAmB,EAAE;AAAA,MAAA;AAI3E,aAAA;AAAA,QACH;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MAChB;AAAA,IAAA;AAAA,WAGK,KAAU;AAEjB,QAAI,IAAI,QAAQ;AACR,YAAA;AAAA,IAAA;AAGR,YAAQ,MAAM,wCAAwC,UAAU,KAAK,GAAG;AACxE,UAAM,MAAM,KAAK,0BAA0B,IAAI,WAAW,uBAAuB,EAAE;AAAA,EAAA;AAEvF;"}