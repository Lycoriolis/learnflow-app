{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/lib/components/Register.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { register, loginWithGoogle } from '$lib/authService.js';\n  import { loading, authError, isAuthenticated } from '$lib/stores/authStore.js';\n  import { onMount } from 'svelte';\n  import { browser } from '$app/environment';\n  import { goto } from '$app/navigation';\n  \n  // Accept redirect parameter to forward users after registration\n  export let redirectTo = '/';\n  \n  let displayName = '';\n  let email = '';\n  let password = '';\n  let confirmPassword = '';\n  let localError = '';\n  let isSubmitting = false;\n  let rememberMe = true;\n  let validationErrors: {displayName?: string; email?: string; password?: string; confirmPassword?: string} = {};\n  \n  onMount(() => {\n    if (browser && $isAuthenticated) {\n      // Already logged in, redirect\n      goto(redirectTo);\n    }\n    \n    // Clear any previous auth errors when component mounts\n    authError.set('');\n  });\n  \n  // Email validation\n  function validateEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const isValid = emailRegex.test(email);\n    \n    if (!isValid) {\n      validationErrors.email = 'Please enter a valid email address';\n    } else {\n      validationErrors.email = undefined;\n    }\n    \n    validationErrors = validationErrors; // Trigger reactivity\n    return isValid;\n  }\n  \n  // Display name validation\n  function validateDisplayName(name: string): boolean {\n    const isValid = name.trim().length >= 2;\n    \n    if (!isValid) {\n      validationErrors.displayName = 'Name must be at least 2 characters';\n    } else {\n      validationErrors.displayName = undefined;\n    }\n    \n    validationErrors = validationErrors;\n    return isValid;\n  }\n  \n  // Password validation\n  function validatePassword(password: string): boolean {\n    let isValid = true;\n    validationErrors.password = undefined;\n    \n    if (password.length < 6) {\n      validationErrors.password = 'Password must be at least 6 characters';\n      isValid = false;\n    }\n    \n    // Check for password complexity if needed\n    // const hasUpperCase = /[A-Z]/.test(password);\n    // const hasNumber = /\\d/.test(password);\n    // if (!hasUpperCase || !hasNumber) {\n    //   validationErrors.password = 'Password must contain at least one uppercase letter and one number';\n    //   isValid = false;\n    // }\n    \n    validationErrors = validationErrors;\n    validateConfirmPassword(confirmPassword, password);\n    return isValid;\n  }\n  \n  // Confirm password validation\n  function validateConfirmPassword(confirmPwd: string, pwd: string = password): boolean {\n    const isValid = confirmPwd === pwd && confirmPwd.length > 0;\n    \n    if (!isValid) {\n      validationErrors.confirmPassword = 'Passwords do not match';\n    } else {\n      validationErrors.confirmPassword = undefined;\n    }\n    \n    validationErrors = validationErrors;\n    return isValid;\n  }\n  \n  // Validate all form fields at once\n  function validateForm(): boolean {\n    const isDisplayNameValid = validateDisplayName(displayName);\n    const isEmailValid = validateEmail(email);\n    const isPasswordValid = validatePassword(password);\n    const isConfirmPasswordValid = validateConfirmPassword(confirmPassword);\n    \n    return isDisplayNameValid && isEmailValid && isPasswordValid && isConfirmPasswordValid;\n  }\n  \n  async function handleRegister(e: SubmitEvent) {\n    if (!browser) return;\n    \n    e.preventDefault();\n    isSubmitting = true;\n    localError = '';\n    authError.set('');\n    \n    // Validate the entire form\n    if (!validateForm()) {\n      isSubmitting = false;\n      return;\n    }\n    \n    try {\n      await register(email, password, displayName, rememberMe);\n      // Registration successful - redirect will be handled by the auth state listener\n    } catch (err) {\n      // Handle specific error messages\n      if (err instanceof Error) {\n        const errorMessage = err.message;\n        if (errorMessage.includes('email-already-in-use')) {\n          localError = 'This email is already in use. Try logging in instead.';\n        } else if (errorMessage.includes('weak-password')) {\n          localError = 'Password is too weak. Please choose a stronger password.';\n        } else if (errorMessage.includes('invalid-email')) {\n          localError = 'Please enter a valid email address.';\n        } else {\n          localError = 'Registration failed. Please try again later.';\n        }\n      } else {\n        localError = 'An unexpected error occurred. Please try again later.';\n      }\n    } finally {\n      isSubmitting = false;\n    }\n  }\n  \n  async function handleGoogleLogin() {\n    if (!browser) return;\n    \n    isSubmitting = true;\n    localError = '';\n    authError.set('');\n    \n    try {\n      await loginWithGoogle(rememberMe);\n      // Login successful - redirect will be handled by the auth state listener\n    } catch (err) {\n      // Handle specific Google auth errors\n      if (err instanceof Error) {\n        const errorMessage = err.message;\n        if (errorMessage.includes('popup-closed-by-user')) {\n          localError = 'Google sign-in was cancelled. Please try again.';\n        } else {\n          localError = 'Google sign-in failed. Please try again later.';\n        }\n      } else {\n        localError = 'An unexpected error occurred. Please try again later.';\n      }\n    } finally {\n      isSubmitting = false;\n    }\n  }\n</script>\n\n<div class=\"w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\">\n  <h2 class=\"text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white\">Create an Account</h2>\n  \n  {#if $authError}\n    <div class=\"bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-800 text-red-700 dark:text-red-300 px-4 py-3 rounded mb-4\" role=\"alert\">\n      <span class=\"block sm:inline\">{$authError}</span>\n    </div>\n  {/if}\n  \n  {#if localError}\n    <div class=\"bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-800 text-red-700 dark:text-red-300 px-4 py-3 rounded mb-4\" role=\"alert\">\n      <span class=\"block sm:inline\">{localError}</span>\n    </div>\n  {/if}\n  \n  <form on:submit={handleRegister} class=\"space-y-4\">\n    <div>\n      <label for=\"displayName\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Full Name</label>\n      <input \n        type=\"text\" \n        id=\"displayName\" \n        bind:value={displayName}\n        on:blur={() => validateDisplayName(displayName)}\n        class=\"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.displayName ? 'border-red-500' : ''}\"\n        required\n        autocomplete=\"name\"\n        aria-invalid={validationErrors.displayName ? 'true' : 'false'}\n        aria-describedby={validationErrors.displayName ? 'name-error' : undefined}\n      />\n      {#if validationErrors.displayName}\n        <p id=\"name-error\" class=\"mt-1 text-sm text-red-600 dark:text-red-400\">{validationErrors.displayName}</p>\n      {/if}\n    </div>\n    \n    <div>\n      <label for=\"email\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Email</label>\n      <input \n        type=\"email\" \n        id=\"email\" \n        bind:value={email}\n        on:blur={() => validateEmail(email)}\n        class=\"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.email ? 'border-red-500' : ''}\"\n        required\n        autocomplete=\"email\"\n        aria-invalid={validationErrors.email ? 'true' : 'false'}\n        aria-describedby={validationErrors.email ? 'email-error' : undefined}\n      />\n      {#if validationErrors.email}\n        <p id=\"email-error\" class=\"mt-1 text-sm text-red-600 dark:text-red-400\">{validationErrors.email}</p>\n      {/if}\n    </div>\n    \n    <div>\n      <label for=\"password\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Password</label>\n      <input \n        type=\"password\" \n        id=\"password\" \n        bind:value={password}\n        on:blur={() => validatePassword(password)}\n        class=\"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.password ? 'border-red-500' : ''}\"\n        required\n        autocomplete=\"new-password\"\n        aria-invalid={validationErrors.password ? 'true' : 'false'}\n        aria-describedby=\"password-requirements\"\n      />\n      <p id=\"password-requirements\" class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">Password must be at least 6 characters long</p>\n      {#if validationErrors.password}\n        <p id=\"password-error\" class=\"mt-1 text-sm text-red-600 dark:text-red-400\">{validationErrors.password}</p>\n      {/if}\n    </div>\n    \n    <div>\n      <label for=\"confirmPassword\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Confirm Password</label>\n      <input \n        type=\"password\" \n        id=\"confirmPassword\" \n        bind:value={confirmPassword}\n        on:blur={() => validateConfirmPassword(confirmPassword)}\n        class=\"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.confirmPassword ? 'border-red-500' : ''}\"\n        required\n        autocomplete=\"new-password\"\n        aria-invalid={validationErrors.confirmPassword ? 'true' : 'false'}\n        aria-describedby={validationErrors.confirmPassword ? 'confirm-password-error' : undefined}\n      />\n      {#if validationErrors.confirmPassword}\n        <p id=\"confirm-password-error\" class=\"mt-1 text-sm text-red-600 dark:text-red-400\">{validationErrors.confirmPassword}</p>\n      {/if}\n    </div>\n    \n    <div class=\"flex items-center\">\n      <input \n        id=\"remember-me\" \n        name=\"remember-me\" \n        type=\"checkbox\" \n        bind:checked={rememberMe}\n        class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n      >\n      <label for=\"remember-me\" class=\"ml-2 block text-sm text-gray-700 dark:text-gray-300\">\n        Stay signed in after registration\n      </label>\n    </div>\n    \n    <div>\n      <button \n        type=\"submit\" \n        class=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n        disabled={$loading || isSubmitting}\n        aria-busy={$loading || isSubmitting}\n      >\n        {#if $loading || isSubmitting}\n          <span class=\"inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" aria-hidden=\"true\"></span>\n          <span>Creating account...</span>\n        {:else}\n          Sign Up\n        {/if}\n      </button>\n    </div>\n  </form>\n  \n  <div class=\"mt-6 relative\">\n    <div class=\"absolute inset-0 flex items-center\">\n      <div class=\"w-full border-t border-gray-300 dark:border-gray-600\"></div>\n    </div>\n    <div class=\"relative flex justify-center text-sm\">\n      <span class=\"px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400\">Or continue with</span>\n    </div>\n  </div>\n  \n  <div class=\"mt-6\">\n    <button \n      type=\"button\"\n      on:click={handleGoogleLogin} \n      class=\"w-full flex justify-center items-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n      disabled={$loading || isSubmitting}\n      aria-busy={$loading || isSubmitting}\n    >\n      {#if $loading || isSubmitting}\n        <span class=\"inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-gray-700 dark:border-gray-200 mr-2\" aria-hidden=\"true\"></span>\n      {:else}\n        <svg class=\"h-5 w-5 mr-2\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n          <path d=\"M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866c-3.431,0.589-6.663-1.727-7.253-5.157c-0.589-3.431,1.727-6.663,5.157-7.253c2.136-0.367,4.296,0.317,5.743,1.878l2.72-2.72c-2.099-2.099-5.271-2.853-8.135-1.879C8.234,3.708,4.766,6.152,3.032,9.686c-2.734,5.63,0.01,12.44,5.639,15.174c5.63,2.734,12.44-0.01,15.174-5.639c1.06-2.17,1.369-4.652,0.845-7.036h-9.687C13.25,12.151,12.545,12.151,12.545,12.151z\" fill=\"#F44336\"/>\n          <path d=\"M12.545,12.151v-3.89h9.687c0.521,2.169,0.246,4.432-0.769,6.406c-0.217,0.436-0.453,0.853-0.725,1.241h-6.284C13.4,15.909,12.545,14.055,12.545,12.151z\" fill=\"#2196F3\"/>\n        </svg>\n        Continue with Google\n      {/if}\n    </button>\n  </div>\n  \n  <div class=\"mt-6 text-center\">\n    <p class=\"text-sm text-gray-600 dark:text-gray-400\">\n      Already have an account? \n      <a href=\"/login\" class=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300\">\n        Log in\n      </a>\n    </p>\n  </div>\n  \n  <div class=\"mt-4 text-center text-xs text-gray-500 dark:text-gray-400\">\n    By creating an account, you agree to our \n    <a href=\"/terms\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300\">Terms of Service</a> and \n    <a href=\"/privacy\" class=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300\">Privacy Policy</a>.\n  </div>\n</div>"],"names":["$.attr_class","$.stringify","$.attr","$.escape","$.store_get"],"mappings":";;;;;;;;AAQa,MAAA,6CAAa,GAAG;AAEvB,MAAA,cAAc;AACd,MAAA,QAAQ;AACR,MAAA,WAAW;AACX,MAAA,kBAAkB;AAElB,MAAA,eAAe;AACf,MAAA,aAAa;MACb,mBAAqG,CAAA;;;;;;;;;;;;2NA+KvF,WAAW,CAAA,GAAAA,WAAA,uLAAAC,UAEqK,iBAAiB,cAAc,mBAAmB,EAAE,CAAA,EAAA,CAAA,gCAAAC,KAAA,gBAGlO,iBAAiB,cAAc,SAAS,OAAO,CAC3C,GAAAA,KAAA,oBAAA,iBAAiB,cAAc,eAAe,MAAS,CAAA;AAEtE,MAAA,iBAAiB,aAAW;;AACyC,cAAA,OAAA,0EAAAC,YAAA,iBAAiB,WAAW,CAAA;AAAA;;;0LASxF,KAAK,CAAA,GAAAH,WAAA,uLAAAC,UAE2K,iBAAiB,QAAQ,mBAAmB,EAAE,CAAA,EAAA,CAAA,iCAAAC,KAAA,gBAG5N,iBAAiB,QAAQ,SAAS,OAAO,CACrC,GAAAA,KAAA,oBAAA,iBAAiB,QAAQ,gBAAgB,MAAS,CAAA;AAEjE,MAAA,iBAAiB,OAAK;;AACgD,cAAA,OAAA,2EAAAC,YAAA,iBAAiB,KAAK,CAAA;AAAA;;;AASnF,YAAA,OAAA,qKAAAD,KAAA,SAAA,QAAQ,CAEwK,GAAAF,WAAA,uLAAAC,UAAA,iBAAiB,WAAW,mBAAmB,EAAE,CAAA,EAAA,CAAA,wCAAAC,KAAA,gBAG/N,iBAAiB,WAAW,SAAS,OAAO,CAAA;AAIvD,MAAA,iBAAiB,UAAQ;;AACgD,cAAA,OAAA,8EAAAC,YAAA,iBAAiB,QAAQ,CAAA;AAAA;;;4NASzF,eAAe,CAAA,GAAAH,WAAA,uLAAAC,UAEiK,iBAAiB,kBAAkB,mBAAmB,EAAE,CAAA,EAAA,CAAA,wCAAAC,KAAA,gBAGtO,iBAAiB,kBAAkB,SAAS,OAAO,CAC/C,GAAAA,KAAA,oBAAA,iBAAiB,kBAAkB,2BAA2B,MAAS,CAAA;AAEtF,MAAA,iBAAiB,iBAAe;;AACiD,cAAA,OAAA,sFAAAC,YAAA,iBAAiB,eAAe,CAAA;AAAA;;;8IAStG,YAAU,IAAA,CAAA,+fAAAD,KAAA,YAAAE,UAAA,iBAAA,CAAA,GAAA,YAAA,OAAA,KAYF,cAAY,IAAA,CAAA,GAAAF,KAAA,aAAAE,UAAA,iBAAA,CAAA,GAAA,YAAA,OAAA,KACX,YAAY,CAAA;6DAElB,cAAY;;;;;;;AAwBT,YAAA,OAAA,ivBAAAF,KAAA,YAAAE,UAAA,iBAAA,CAAA,GAAA,YAAA,OAAA,KAAA,+FACC,YAAY,CAAA;6DAElB,cAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}