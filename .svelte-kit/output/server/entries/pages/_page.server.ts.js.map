{"version":3,"file":"_page.server.ts.js","sources":["../../../../../src/routes/+page.server.ts"],"sourcesContent":["import { getSuggestedContentItems } from '$lib/server/contentService';\nimport type { PageServerLoad } from './$types';\nimport { error } from '@sveltejs/kit'; // Import error helper\n\nexport const load: PageServerLoad = async (event) => {\n    const { parent } = event;\n    // Get parent data with a proper fallback in case userProfile is missing\n    const parentData = await parent();\n    const userProfile = parentData.userProfile || null;\n\n    // Ensure data can be accessed safely even if userProfile is undefined\n    const enrolledCourseIds = userProfile?.preferences?.enrollments?.map((e: any) => e.id) || [];\n    // Assuming similar structure for exercise progress/enrollment if applicable\n    // If not, adjust accordingly or pass an empty array\n    const completedExerciseIds = userProfile?.progress?.exercises?.map((ex: any) => ex.id) || []; // Example structure\n\n    try {\n        // Fetch suggested courses and exercises using the new service function\n        const [suggestedCourses, suggestedExercises] = await Promise.all([\n            getSuggestedContentItems('courses', 'course', enrolledCourseIds),\n            getSuggestedContentItems('exercises', 'exercise', completedExerciseIds) // Use relevant IDs for exercises\n        ]);\n\n        return {\n            suggestedCourses,\n            suggestedExercises,\n            userProfile // Pass userProfile through for the client component\n        };\n    } catch (err: any) {\n        console.error(\"Error loading dashboard data:\", err);\n\n        // Re-throw SvelteKit errors or throw a generic 500\n        if (err.status) {\n            throw err; // Re-throw the error caught from contentService\n        }\n        // Throw a generic 500 error for other unexpected issues\n        error(500, 'Failed to load dashboard data. Please try again later.');\n\n        // SvelteKit's error function halts execution, but for type safety:\n        // return { suggestedCourses: [], suggestedExercises: [] };\n    }\n};\n"],"names":[],"mappings":";;AAIa,MAAA,OAAuB,OAAO,UAAU;AAC3C,QAAA,EAAE,WAAW;AAEb,QAAA,aAAa,MAAM,OAAO;AAC1B,QAAA,cAAc,WAAW,eAAe;AAGxC,QAAA,oBAAoB,aAAa,aAAa,aAAa,IAAI,CAAC,MAAW,EAAE,EAAE,KAAK,CAAC;AAGrF,QAAA,uBAAuB,aAAa,UAAU,WAAW,IAAI,CAAC,OAAY,GAAG,EAAE,KAAK,CAAC;AAEvF,MAAA;AAEA,UAAM,CAAC,kBAAkB,kBAAkB,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC7D,yBAAyB,WAAW,UAAU,iBAAiB;AAAA,MAC/D,yBAAyB,aAAa,YAAY,oBAAoB;AAAA;AAAA,IAAA,CACzE;AAEM,WAAA;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA;AAAA,IACJ;AAAA,WACK,KAAU;AACP,YAAA,MAAM,iCAAiC,GAAG;AAGlD,QAAI,IAAI,QAAQ;AACN,YAAA;AAAA,IAAA;AAGV,UAAM,KAAK,wDAAwD;AAAA,EAAA;AAK3E;"}