{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/routes/tools/chat/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount, onDestroy, afterUpdate } from 'svelte';\n  import { writable } from 'svelte/store';\n  import MarkdownIt from 'markdown-it';\n  import markdownItKatex from 'markdown-it-katex';\n  // Set up Markdown-It with KaTeX for math rendering\n  const md = new MarkdownIt({ html: true }).use(markdownItKatex);\n  import { logStart, logEnd, logEvent } from '$lib/services/activityService';\n\n  const API_URL = 'https://openrouter.ai/api/v1/chat/completions';\n  const API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;\n  const SITE_URL = import.meta.env.VITE_SITE_URL || location.origin;\n  const SITE_NAME = import.meta.env.VITE_SITE_NAME || 'LearnFlow';\n\n  type Role = 'user' | 'assistant';\n  interface ChatMessage { role: Role; text: string; }\n\n  const modes = [\n    { id: 'assist', label: 'Assist Mode', model: 'deepseek/deepseek-prover-v2:free' },\n    { id: 'support', label: 'Support Mode', model: 'google/gemini-2.5-pro-exp-03-25:free' }\n  ];\n\n  let mode = 'assist';\n  let messages: ChatMessage[] = [];\n  let input = '';\n  let loading = false;\n  let error = '';\n  let chatWindow: HTMLElement;\n  let chatViewEventId: string | null = null;\n\n  onMount(async () => {\n    chatViewEventId = await logStart('view_chat', 'chat');\n  });\n\n  onDestroy(() => {\n    if (chatViewEventId) logEnd(chatViewEventId);\n  });\n\n  afterUpdate(() => {\n    if (chatWindow) {\n      chatWindow.scrollTop = chatWindow.scrollHeight;\n    }\n  });\n\n  async function send() {\n    if (!input.trim()) return;\n    await logEvent('send_message', 'chat', { content: input });\n    // add user message\n    messages = [...messages, { role: 'user', text: input }];\n    const userContent = input;\n    input = '';\n    loading = true;\n    error = '';\n    const selected = modes.find(m => m.id === mode);\n    try {\n      // Build request with full chat history for context (memory)\n      // Include full history and enable streaming\n      const body = {\n        model: selected.model,\n        stream: true,\n        messages: messages.map(msg => ({ role: msg.role, content: [{ type: 'text', text: msg.text }] }))\n      };\n      const res = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'HTTP-Referer': SITE_URL,\n          'X-Title': SITE_NAME,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      if (!res.ok) throw new Error(await res.text());\n      // Prepare streaming of assistant reply\n      messages = [...messages, { role: 'assistant', text: '' }];\n      const assistantIndex = messages.length - 1;\n      const reader = res.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let done = false;\n      while (!done) {\n        const { value, done: readerDone } = await reader.read();\n        done = readerDone;\n        buffer += decoder.decode(value || new Uint8Array(), { stream: true });\n        let boundary;\n        while ((boundary = buffer.indexOf('\\n\\n')) !== -1) {\n          const eventStr = buffer.slice(0, boundary);\n          buffer = buffer.slice(boundary + 2);\n          for (const line of eventStr.split(/\\r?\\n/)) {\n            if (!line.startsWith('data: ')) continue;\n            const dataStr = line.slice(6).trim();\n            if (dataStr === '[DONE]') { done = true; break; }\n            try {\n              const json = JSON.parse(dataStr);\n              const delta = json.choices?.[0]?.delta || {};\n              const content = delta.content || delta.text || '';\n              if (content) {\n                messages[assistantIndex].text += content;\n                messages = messages.slice();\n              }\n            } catch {\n              // skip invalid JSON\n            }\n          }\n        }\n      }\n    } catch (e:any) {\n      console.error(e);\n      error = e.message || 'Error fetching AI response';\n    } finally {\n      loading = false;\n    }\n  }\n</script>\n\n<svelte:head>\n  <title>AI Study Chat | LearnFlow</title>\n</svelte:head>\n\n<div class=\"max-w-2xl mx-auto px-4 py-10 flex flex-col h-[75vh]\">\n  <h1 class=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">AI Study Chat</h1>\n  <div class=\"flex space-x-4 mb-4\">\n    {#each modes as m}\n      <button\n        class=\"px-4 py-2 rounded-lg font-semibold transition \n          {mode === m.id \n            ? 'bg-indigo-600 text-white' \n            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600'}\"\n        on:click={() => mode = m.id}\n      >{m.label}</button>\n    {/each}\n  </div>\n  <div bind:this={chatWindow} class=\"flex-1 overflow-y-auto space-y-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-inner\" id=\"chat-window\">\n    {#each messages as msg}\n      <div class=\"flex {msg.role === 'assistant' ? 'justify-start' : 'justify-end'}\">\n        <div class=\"max-w-[80%] p-3 prose dark:prose-invert \n          {msg.role === 'assistant'\n            ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-tr-xl rounded-br-xl rounded-tl-xl'\n            : 'bg-indigo-600 dark:bg-indigo-500 text-white rounded-tl-xl rounded-bl-xl rounded-br-xl'}\">\n          {@html md.render(msg.text)}\n        </div>\n      </div>\n    {/each}\n    {#if loading}\n      <div class=\"flex justify-start mb-3\">\n        <div class=\"loading-dot bg-gray-400 dark:bg-gray-600\"></div>\n        <div class=\"loading-dot bg-gray-400 dark:bg-gray-600\"></div>\n        <div class=\"loading-dot bg-gray-400 dark:bg-gray-600\"></div>\n      </div>\n    {/if}\n    {#if error}\n      <div class=\"text-red-500 text-sm\">{error}</div>\n    {/if}\n  </div>\n  <div class=\"mt-4 flex\">\n    <textarea\n      class=\"flex-1 rounded-lg border border-gray-300 dark:border-gray-600 p-2 resize-none focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n      rows=\"2\"\n      bind:value={input}\n      placeholder=\"Type your question...\"\n      on:keydown={e => e.key === 'Enter' && !e.shiftKey && (e.preventDefault(), send())}\n    ></textarea>\n    <button\n      class=\"ml-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow transition disabled:opacity-50\"\n      on:click={send}\n      disabled={loading || !input.trim()}\n    >Send</button>\n  </div>\n</div>\n\n<style>\n  #chat-window {\n    scrollbar-width: thin;\n  }\n  #chat-window::-webkit-scrollbar {\n    width: 6px;\n  }\n  #chat-window::-webkit-scrollbar-thumb {\n    background-color: rgba(100,100,100,0.4);\n    border-radius: 3px;\n  }\n  .loading-dot {\n    width: 8px;\n    height: 8px;\n    margin-right: 4px;\n    border-radius: 50%;\n    animation: blink 1s infinite ease-in-out;\n  }\n  .loading-dot:nth-child(2) { animation-delay: 0.2s }\n  .loading-dot:nth-child(3) { animation-delay: 0.4s }\n  @keyframes blink {\n    0%, 80%, 100% { opacity: 0 }\n    40% { opacity: 1 }\n  }\n</style>\n"],"names":["$.escape","$.attr_class","$.stringify","$.html"],"mappings":";;;;;;;;;AAMQ,QAAA,KAAE,IAAO,WAAa,EAAA,MAAM,MAAI,EAAI,IAAI,eAAe;QAWvD,QAAK;AAAA;MACP,IAAI;AAAA,MAAU,OAAO;AAAA,MAAe,OAAO;AAAA;;MAC3C,IAAI;AAAA,MAAW,OAAO;AAAA,MAAgB,OAAO;AAAA,IAAA;AAAA;AAG7C,MAAA,OAAO;MACP,WAAuB,CAAA;AACvB,MAAA,QAAQ;AAUZ,YAAgB,MAAA;AAAA,EAC6B,CAC5C;uCAsFQ,KAAK;yCAWL,QAAQ;;;;;;AAXC,QAAA,IAAC,WAAA,OAAA;qGAGV,SAAS,EAAE,KACR,6BACA,wGAAwG,CAAA,IAAA,eAAA,CAAA,IAAAA,YAE9G,EAAE,KAAK,CAAA;AAAA,EAAA;;;AAIQ,QAAA,MAAG,aAAA,SAAA;yDACF,IAAI,SAAS,cAAc,kBAAkB,aAAa,CAEvE,IAAA,eAAA,CAAA,QAAAC,WAAA,2CAAAC,UAAA,IAAI,SAAS,cACV,4GACA,uFAAuF,CAAA,IAAA,eAAA,CAAA,IAAAC,KACpF,GAAG,OAAO,IAAI,IAAI,CAAA,CAAA;AAAA,EAAA;;;;;;;;;;6BAmBjB,KAAK;;;;6LAOA,CAAK,MAAM,KAAA,GAAI,IAAA,CAAA;;;"}