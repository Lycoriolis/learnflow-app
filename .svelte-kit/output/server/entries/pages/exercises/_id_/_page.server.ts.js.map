{"version":3,"file":"_page.server.ts.js","sources":["../../../../../../../src/routes/exercises/[id]/+page.server.ts"],"sourcesContent":["import type { PageServerLoad } from './$types.js';\nimport { error } from '@sveltejs/kit';\n// Use the unified content service function\nimport { getContentNodeByIdentifier, getBreadcrumbs } from '$lib/server/contentService.js';\n\nexport const load: PageServerLoad = async ({ params }) => {\n  // The identifier comes from the route parameter\n  const identifier = params.id;\n\n  try {\n    // Use the unified function to get the node. Content is loaded by the service.\n    const node = await getContentNodeByIdentifier('exercises', identifier);\n\n    // Service throws 404 if not found.\n\n    // Determine if it's a category/container or a specific exercise\n    const containerTypes = ['category', 'root', 'exercise-category', 'topic']; // Add relevant container types for exercises\n    const isCategory = containerTypes.includes(node.type);\n\n    // Fetch breadcrumbs for the current node\n    const breadcrumbs = await getBreadcrumbs('exercises', identifier);\n\n    if (isCategory) {\n      // For categories/containers, return the node and its children\n      return {\n        node: node,\n        isCategory: true,\n        items: node.children || [], // Pass children if available\n        breadcrumbs\n      };\n    } else if (node.type === 'exercise') {\n      // For exercises, the service should have loaded markdownContent\n      const content = (node as any).markdownContent || '';\n      const contentLoadingError = (node as any).contentLoadingError;\n\n      if (contentLoadingError) {\n        console.warn(`Content loading error for exercise ${identifier}: ${contentLoadingError}`);\n        // Content will contain the error message loaded by the service\n      }\n\n      return {\n        node: node, // Renamed from exercise to node for consistency\n        content: content,\n        isCategory: false,\n        breadcrumbs\n      };\n    } else {\n      // Handle unexpected node types\n      console.warn(`Unexpected content node type \\\"${node.type}\\\" for identifier: ${identifier}`);\n      throw error(404, 'Content type not viewable');\n    }\n\n  } catch (err: any) {\n    // Re-throw SvelteKit errors (like 404/500 from the service)\n    if (err.status) {\n      throw err;\n    }\n\n    // Log unexpected errors and throw a generic 500\n    console.error(`Error loading exercise content for identifier ${identifier}:`, err);\n    throw error(500, `Error loading exercise content: ${err.message || 'Internal Server Error'}`);\n  }\n};"],"names":[],"mappings":";;AAKO,MAAM,OAAuB,OAAO,EAAE,aAAa;AAExD,QAAM,aAAa,OAAO;AAEtB,MAAA;AAEF,UAAM,OAAO,MAAM,2BAA2B,aAAa,UAAU;AAKrE,UAAM,iBAAiB,CAAC,YAAY,QAAQ,qBAAqB,OAAO;AACxE,UAAM,aAAa,eAAe,SAAS,KAAK,IAAI;AAGpD,UAAM,cAAc,MAAM,eAAe,aAAa,UAAU;AAEhE,QAAI,YAAY;AAEP,aAAA;AAAA,QACL;AAAA,QACA,YAAY;AAAA,QACZ,OAAO,KAAK,YAAY,CAAC;AAAA;AAAA,QACzB;AAAA,MACF;AAAA,IAAA,WACS,KAAK,SAAS,YAAY;AAE7B,YAAA,UAAW,KAAa,mBAAmB;AACjD,YAAM,sBAAuB,KAAa;AAE1C,UAAI,qBAAqB;AACvB,gBAAQ,KAAK,sCAAsC,UAAU,KAAK,mBAAmB,EAAE;AAAA,MAAA;AAIlF,aAAA;AAAA,QACL;AAAA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACF;AAAA,IAAA,OACK;AAEL,cAAQ,KAAK,iCAAkC,KAAK,IAAI,qBAAsB,UAAU,EAAE;AACpF,YAAA,MAAM,KAAK,2BAA2B;AAAA,IAAA;AAAA,WAGvC,KAAU;AAEjB,QAAI,IAAI,QAAQ;AACR,YAAA;AAAA,IAAA;AAIR,YAAQ,MAAM,iDAAiD,UAAU,KAAK,GAAG;AACjF,UAAM,MAAM,KAAK,mCAAmC,IAAI,WAAW,uBAAuB,EAAE;AAAA,EAAA;AAEhG;"}