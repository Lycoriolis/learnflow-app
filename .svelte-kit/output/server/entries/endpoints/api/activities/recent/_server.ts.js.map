{"version":3,"file":"_server.ts.js","sources":["../../../../../../../../src/lib/firebase.ts","../../../../../../../../src/lib/services/activityService.ts","../../../../../../../../src/routes/api/activities/recent/+server.ts"],"sourcesContent":["import { initializeApp, type FirebaseApp } from 'firebase/app';\nimport { getAuth, connectAuthEmulator, type Auth } from 'firebase/auth';\nimport { getAnalytics, type Analytics } from 'firebase/analytics';\nimport { getFirestore, type Firestore } from 'firebase/firestore';\nimport { browser } from '$app/environment';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-key-for-development\",\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || \"demo-project.firebaseapp.com\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\",\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || \"demo-project.appspot.com\",\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:123456789:web:a1b2c3d4e5f6\",\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || \"G-ABCDEF\"\n};\n\n// For debugging - only log in development\nconst isDev = import.meta.env.DEV;\nconst logDebug = (message: string, data?: any) => {\n  if (isDev && browser) {\n    console.log(message, data);\n  }\n};\n\n// Declare Firebase service variables with proper TypeScript types\nlet app: FirebaseApp;\nlet auth: Auth;\nlet analytics: Analytics | null = null;\nlet db: Firestore;\n\n// Only initialize Firebase in the browser environment\nif (browser) {\n  try {\n    logDebug('Initializing Firebase app');\n    app = initializeApp(firebaseConfig);\n    \n    // Initialize Firebase Authentication\n    auth = getAuth(app);\n    \n    // Initialize Firestore\n    db = getFirestore(app);\n    \n    // Use auth emulator if in development\n    if (isDev && import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true') {\n      logDebug('Connecting to Firebase Auth emulator');\n      connectAuthEmulator(auth, 'http://localhost:9099');\n    }\n\n    // Initialize Analytics\n    try {\n      analytics = getAnalytics(app);\n      logDebug('Firebase analytics initialized');\n    } catch (error) {\n      if (isDev) {\n        console.warn('Failed to initialize Firebase Analytics:', error);\n      }\n    }\n    \n    logDebug('Firebase initialized successfully');\n  } catch (error) {\n    console.error('Error initializing Firebase:', error);\n  }\n} else {\n  // Create empty mock instances for SSR\n  // This prevents errors during server-side rendering\n  const mockApp = {} as FirebaseApp;\n  const mockAuth = {} as Auth;\n  const mockDb = {} as Firestore;\n  \n  app = mockApp;\n  auth = mockAuth;\n  db = mockDb;\n}\n\n// Export Firebase services\nexport { app, auth, db, analytics };","// src/lib/services/activityService.ts\nimport { collection, addDoc, query, where, orderBy, limit as firestoreLimit, getDocs, doc, updateDoc, type DocumentData } from 'firebase/firestore';\nimport { db } from '../firebase.js';\nimport { get } from 'svelte/store';\nimport { user } from '../stores/authStore.js';\n\nexport interface Activity {\n  id: string;\n  userId: string;\n  eventType: string;\n  referenceId?: string;\n  metadata?: Record<string, any>;\n  timestampStart: number;\n  timestampEnd?: number;\n}\n\n/**\n * Start logging an activity\n */\nexport async function logStart(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<string> {\n  const activityData: any = {\n    eventType,\n    timestampStart: Date.now(),\n  };\n  \n  // Get user ID from auth store instead of localStorage\n  const currentUser = get(user);\n  if (currentUser) {\n    activityData.userId = currentUser.uid;\n  } else {\n    // Fallback to localStorage only if needed\n    const localStorageUserId = globalThis?.localStorage?.getItem('userId');\n    if (localStorageUserId) {\n      activityData.userId = localStorageUserId;\n    }\n  }\n  \n  // Only add these fields if they're not undefined\n  if (referenceId !== undefined) {\n    activityData.referenceId = referenceId;\n  }\n  \n  if (metadata !== undefined) {\n    activityData.metadata = metadata;\n  }\n  \n  try {\n    const docRef = await addDoc(collection(db, 'activities'), activityData);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error logging activity start:', error);\n    return '';\n  }\n}\n\n/**\n * Log completion of an activity\n */\nexport async function logEnd(activityId: string): Promise<void> {\n  const activityDoc = doc(db, 'activities', activityId);\n  await updateDoc(activityDoc, {\n    timestampEnd: Date.now()\n  });\n}\n\n/**\n * Log a one-time event\n */\nexport async function logEvent(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<void> {\n  const now = Date.now();\n  const eventData: any = {\n    eventType,\n    timestampStart: now,\n    timestampEnd: now\n  };\n  \n  // Get user ID from auth store instead of localStorage\n  const currentUser = get(user);\n  if (currentUser) {\n    eventData.userId = currentUser.uid;\n  } else {\n    // Fallback to localStorage only if needed\n    const localStorageUserId = globalThis?.localStorage?.getItem('userId');\n    if (localStorageUserId) {\n      eventData.userId = localStorageUserId;\n    }\n  }\n  \n  // Only add these fields if they're not undefined\n  if (referenceId !== undefined) {\n    eventData.referenceId = referenceId;\n  }\n  \n  if (metadata !== undefined) {\n    eventData.metadata = metadata;\n  }\n  \n  try {\n    await addDoc(collection(db, 'activities'), eventData);\n  } catch (error) {\n    console.error('Error logging event:', error);\n  }\n}\n\n/**\n * Fetch recent activities for a user\n */\nexport async function getRecentActivities(userId: string, limitCount: number = 10): Promise<Activity[]> {\n  const q = query(\n    collection(db, 'activities'),\n    where('userId', '==', userId),\n    orderBy('timestampStart', 'desc'),\n    firestoreLimit(limitCount)\n  );\n\n  const snapshot = await getDocs(q);\n  return snapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  })) as Activity[];\n}\n\n/**\n * Fetch recent activities for the current user\n */\nexport async function fetchRecentActivities(limitCount: number = 10): Promise<Activity[]> {\n  const userId = globalThis?.localStorage?.getItem('userId');\n  if (!userId) return [];\n  return getRecentActivities(userId, limitCount);\n}","import { json } from '@sveltejs/kit';\nimport type { RequestEvent } from '@sveltejs/kit';\nimport { getRecentActivities } from '$lib/services/activityService.js';\n\nfunction getUserId(event: RequestEvent): string | null {\n  return event.locals?.user?.uid || null;\n}\n\nexport const GET = async (event: RequestEvent) => {\n  const userId = getUserId(event);\n  if (!userId) {\n    return json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  try {\n    const limit = Number(event.url.searchParams.get('limit')) || 10;\n    const activities = await getRecentActivities(userId, limit);\n    return json(activities);\n  } catch (error) {\n    console.error('Error fetching recent activities:', error);\n    return json({ error: 'Failed to fetch activities' }, { status: 500 });\n  }\n};"],"names":["firestoreLimit","doc","limit"],"mappings":";;;;;;;AA6BA,IAAI;AAkCG;AAKL,QAAM,SAAS,CAAC;AAIX,OAAA;AACP;ACkCsB,eAAA,oBAAoB,QAAgB,aAAqB,IAAyB;AACtG,QAAM,IAAI;AAAA,IACR,WAAW,IAAI,YAAY;AAAA,IAC3B,MAAM,UAAU,MAAM,MAAM;AAAA,IAC5B,QAAQ,kBAAkB,MAAM;AAAA,IAChCA,MAAe,UAAU;AAAA,EAC3B;AAEM,QAAA,WAAW,MAAM,QAAQ,CAAC;AAChC,SAAO,SAAS,KAAK,IAAI,CAAAC,UAAQ;AAAA,IAC/B,IAAIA,KAAI;AAAA,IACR,GAAGA,KAAI,KAAK;AAAA,EAAA,EACZ;AACJ;ACpHA,SAAS,UAAU,OAAoC;AAC9C,SAAA,MAAM,QAAQ,MAAM,OAAO;AACpC;AAEa,MAAA,MAAM,OAAO,UAAwB;AAC1C,QAAA,SAAS,UAAU,KAAK;AAC9B,MAAI,CAAC,QAAQ;AACJ,WAAA,KAAK,EAAE,OAAO,kBAAkB,EAAE,QAAQ,KAAK;AAAA,EAAA;AAGpD,MAAA;AACI,UAAAC,SAAQ,OAAO,MAAM,IAAI,aAAa,IAAI,OAAO,CAAC,KAAK;AAC7D,UAAM,aAAa,MAAM,oBAAoB,QAAQA,MAAK;AAC1D,WAAO,KAAK,UAAU;AAAA,WACf,OAAO;AACN,YAAA,MAAM,qCAAqC,KAAK;AACjD,WAAA,KAAK,EAAE,OAAO,gCAAgC,EAAE,QAAQ,KAAK;AAAA,EAAA;AAExE;"}