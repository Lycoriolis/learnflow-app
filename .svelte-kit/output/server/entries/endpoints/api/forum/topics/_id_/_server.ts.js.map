{"version":3,"file":"_server.ts.js","sources":["../../../../../../../../../src/routes/api/forum/topics/[id]/+server.ts"],"sourcesContent":["import type { RequestHandler } from '@sveltejs/kit';\nimport { updateTopic, deleteTopic } from '$lib/services/forums/forumService';\nimport { getTopic, createPost } from '$lib/services/forums/topicService';\n\nexport const PUT: RequestHandler = async ({ request, params }) => {\n  const topicId = params.id;\n  const data = await request.json();\n  \n  try {\n    const updatedTopic = await updateTopic(topicId, {\n      title: data.title,\n      content: data.content,\n      category_id: data.category_id,\n      is_pinned: data.is_pinned,\n      is_locked: data.is_locked\n    });\n    \n    if (updatedTopic === null) {\n      return new Response(JSON.stringify({ message: 'Topic not found' }), { \n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    return new Response(JSON.stringify(updatedTopic), { \n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error updating topic:', error);\n    return new Response(JSON.stringify({ message: 'Failed to update topic' }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\nexport const DELETE: RequestHandler = async ({ params }) => {\n  const topicId = params.id;\n  \n  try {\n    const success = await deleteTopic(topicId);\n    \n    if (success === false) {\n      return new Response(JSON.stringify({ message: 'Topic not found' }), { \n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    return new Response(JSON.stringify({ message: 'Topic deleted successfully' }), { \n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error deleting topic:', error);\n    return new Response(JSON.stringify({ message: 'Failed to delete topic' }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\nexport async function GET({ params }) {\n  const topic = await getTopic(params.id);\n  return new Response(JSON.stringify(topic));\n}\n\nexport async function POST({ params, request }) {\n  const data = await request.json();\n  const newPost = await createPost(params.id, data);\n  return new Response(JSON.stringify(newPost));\n}"],"names":[],"mappings":";;AAIO,MAAM,MAAsB,OAAO,EAAE,SAAS,aAAa;AAChE,QAAM,UAAU,OAAO;AACjB,QAAA,OAAO,MAAM,QAAQ,KAAK;AAE5B,MAAA;AACI,UAAA,eAAe,MAAM,YAAY,SAAS;AAAA,MAC9C,OAAO,KAAK;AAAA,MACZ,SAAS,KAAK;AAAA,MACd,aAAa,KAAK;AAAA,MAClB,WAAW,KAAK;AAAA,MAChB,WAAW,KAAK;AAAA,IAAA,CACjB;AAED,QAAI,iBAAiB,MAAM;AAClB,aAAA,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,kBAAA,CAAmB,GAAG;AAAA,QAClE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAAA,CAC/C;AAAA,IAAA;AAGH,WAAO,IAAI,SAAS,KAAK,UAAU,YAAY,GAAG;AAAA,MAChD,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAAA,CAC/C;AAAA,WACM,OAAO;AACN,YAAA,MAAM,yBAAyB,KAAK;AACrC,WAAA,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,yBAAA,CAA0B,GAAG;AAAA,MACzE,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAAA,CAC/C;AAAA,EAAA;AAEL;AAEO,MAAM,SAAyB,OAAO,EAAE,aAAa;AAC1D,QAAM,UAAU,OAAO;AAEnB,MAAA;AACI,UAAA,UAAU,MAAM,YAAY,OAAO;AAEzC,QAAI,YAAY,OAAO;AACd,aAAA,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,kBAAA,CAAmB,GAAG;AAAA,QAClE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAAA,CAC/C;AAAA,IAAA;AAGI,WAAA,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,6BAAA,CAA8B,GAAG;AAAA,MAC7E,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAAA,CAC/C;AAAA,WACM,OAAO;AACN,YAAA,MAAM,yBAAyB,KAAK;AACrC,WAAA,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,yBAAA,CAA0B,GAAG;AAAA,MACzE,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAAA,CAC/C;AAAA,EAAA;AAEL;AAEsB,eAAA,IAAI,EAAE,UAAU;AACpC,QAAM,QAAQ,MAAM,SAAS,OAAO,EAAE;AACtC,SAAO,IAAI,SAAS,KAAK,UAAU,KAAK,CAAC;AAC3C;AAEA,eAAsB,KAAK,EAAE,QAAQ,WAAW;AACxC,QAAA,OAAO,MAAM,QAAQ,KAAK;AAChC,QAAM,UAAU,MAAM,WAAW,OAAO,IAAI,IAAI;AAChD,SAAO,IAAI,SAAS,KAAK,UAAU,OAAO,CAAC;AAC7C;"}