{"version":3,"file":"forumStore.js","sources":["../../../../src/lib/stores/forumStore.ts"],"sourcesContent":["import { persistentStore } from './persistentStore.js';\nimport { writable, derived } from 'svelte/store';\nimport type { ForumCategory, ForumTopic, ForumPost } from '$lib/types/forumTypes';\nimport { \n  getCategories, \n  getTopics, \n  getTopic,\n  getPostsByTopicId\n} from '$lib/services/forums/forumService';\nimport { browser } from '$app/environment';\n\n// Store list of subscribed topic IDs\nexport const subscribedTopics = persistentStore<string[]>('learnflow-subscribed-topics', []);\n\n// Create stores\nexport const categories = writable<ForumCategory[]>([]);\nexport const topics = writable<ForumTopic[]>([]);\nexport const currentTopic = writable<ForumTopic | null>(null);\nexport const posts = writable<ForumPost[]>([]);\nexport const isLoading = writable<boolean>(false);\nexport const error = writable<string | null>(null);\nexport const activeTagFilter = writable<string | null>(null);\nexport const forumCategories = writable<ForumCategory[]>([]);\nexport const selectedCategory = writable<ForumCategory | null>(null);\n\n// Initialize categories\nexport async function loadCategories(): Promise<void> {\n  if (!browser) return;\n  \n  isLoading.set(true);\n  error.set(null);\n  \n  try {\n    const result = await getCategories();\n    categories.set(result);\n  } catch (err) {\n    console.error('Error loading forum categories:', err);\n    error.set('Failed to load forum categories');\n  } finally {\n    isLoading.set(false);\n  }\n}\n\n// Load topics for a category\nexport async function loadTopics(categoryId?: string): Promise<void> {\n  if (!browser) return;\n  \n  isLoading.set(true);\n  error.set(null);\n  \n  try {\n    // Call getTopics without parameter if categoryId is undefined\n    const result = await getTopics();\n    \n    // If there's a category ID, filter client-side\n    const filteredTopics = categoryId \n      ? result.filter(topic => topic.category_id === categoryId)\n      : result;\n      \n    topics.set(filteredTopics);\n  } catch (err) {\n    console.error('Error loading forum topics:', err);\n    error.set('Failed to load forum topics');\n  } finally {\n    isLoading.set(false);\n  }\n}\n\n// Load a specific topic and its posts\nexport async function loadTopic(topicId: string): Promise<void> {\n  if (!browser) return;\n  \n  isLoading.set(true);\n  error.set(null);\n  currentTopic.set(null);\n  posts.set([]);\n  \n  try {\n    const [topicResult, postsResult] = await Promise.all([\n      getTopic(topicId),\n      getPostsByTopicId(topicId)\n    ]);\n    \n    if (topicResult) {\n      currentTopic.set(topicResult);\n      posts.set(postsResult);\n    } else {\n      error.set('Topic not found');\n    }\n  } catch (err) {\n    console.error(`Error loading topic ${topicId}:`, err);\n    error.set('Failed to load topic');\n  } finally {\n    isLoading.set(false);\n  }\n}\n\n// Filter topics by tag\nexport async function filterTopicsByTag(tag: string): Promise<void> {\n  if (!browser) return;\n  \n  isLoading.set(true);\n  error.set(null);\n  activeTagFilter.set(tag);\n  \n  try {\n    // Use getTopics and filter client-side instead of using a non-existent getTopicsByTag function\n    const allTopics = await getTopics();\n    const filteredTopics = allTopics.filter(topic => topic.tags?.includes(tag));\n    topics.set(filteredTopics);\n  } catch (err) {\n    console.error(`Error loading topics with tag ${tag}:`, err);\n    error.set('Failed to load topics with the selected tag');\n  } finally {\n    isLoading.set(false);\n  }\n}\n\n// Clear tag filter\nexport function clearTagFilter(): void {\n  activeTagFilter.set(null);\n  loadTopics();\n}\n\n// Derived store for pinned topics\nexport const pinnedTopics = derived(topics, $topics => {\n  return $topics.filter(topic => topic.is_pinned);\n});\n\n// Derived store for recent topics\nexport const recentTopics = derived(topics, $topics => {\n  return $topics\n    .filter(topic => !topic.is_pinned)\n    .sort((a, b) => {\n      const dateA = a.updated_at || a.created_at;\n      const dateB = b.updated_at || b.created_at;\n      if (!dateA || !dateB) return 0;\n      return (dateB instanceof Date ? dateB.getTime() : 0) - \n             (dateA instanceof Date ? dateA.getTime() : 0);\n    })\n    .slice(0, 10);\n});\n\n// Get category by ID\nexport function getCategoryById(id: string): ForumCategory | undefined {\n  let result: ForumCategory | undefined;\n  \n  categories.subscribe(cats => {\n    result = cats.find(cat => cat.id === id);\n  })();\n  \n  return result;\n}"],"names":[],"mappings":";;;;AAYO,MAAM,mBAAmB,gBAA0B,+BAA+B,CAAE,CAAA;AAG9E,MAAA,aAAa,SAA0B,CAAE,CAAA;AACzC,MAAA,SAAS,SAAuB,CAAE,CAAA;AAClC,MAAA,eAAe,SAA4B,IAAI;AAC/C,MAAA,QAAQ,SAAsB,CAAE,CAAA;AAChC,MAAA,YAAY,SAAkB,KAAK;AACnC,MAAA,QAAQ,SAAwB,IAAI;AAyGpC,MAAA,eAAe,QAAQ,QAAQ,CAAW,YAAA;AACrD,SAAO,QAAQ,OAAO,CAAS,UAAA,MAAM,SAAS;AAChD,CAAC;AAGY,MAAA,eAAe,QAAQ,QAAQ,CAAW,YAAA;AAC9C,SAAA,QACJ,OAAO,CAAA,UAAS,CAAC,MAAM,SAAS,EAChC,KAAK,CAAC,GAAG,MAAM;AACR,UAAA,QAAQ,EAAE,cAAc,EAAE;AAC1B,UAAA,QAAQ,EAAE,cAAc,EAAE;AAChC,QAAI,CAAC,SAAS,CAAC,MAAc,QAAA;AACrB,YAAA,iBAAiB,OAAO,MAAM,QAAQ,IAAI,MAC1C,iBAAiB,OAAO,MAAM,QAAA,IAAY;AAAA,EAAA,CACnD,EACA,MAAM,GAAG,EAAE;AAChB,CAAC;AAGM,SAAS,gBAAgB,IAAuC;AACjE,MAAA;AAEJ,aAAW,UAAU,CAAQ,SAAA;AAC3B,aAAS,KAAK,KAAK,CAAO,QAAA,IAAI,OAAO,EAAE;AAAA,EAAA,CACxC,EAAE;AAEI,SAAA;AACT;"}