{"version":3,"file":"FocusTimeChart.js","sources":["../../../../src/lib/components/FocusTimeChart.svelte"],"sourcesContent":["<!-- learnflow-app/src/lib/components/FocusTimeChart.svelte -->\n<script lang=\"ts\">\n  import { onMount, onDestroy } from 'svelte';\n  import { Chart, registerables } from 'chart.js';\n  import type { ChartConfiguration, ChartTypeRegistry, TimeScaleOptions } from 'chart.js';\n  import type { FocusSession } from '$lib/stores/pipStores';\n  import 'chartjs-adapter-date-fns';\n  import { enUS } from 'date-fns/locale';\n  import { browser } from '$app/environment';\n\n  // Only register Chart.js components in the browser\n  if (browser) {\n    Chart.register(...registerables);\n  }\n\n  export let sessions: FocusSession[] = [];\n  export let timeUnit: 'day' | 'week' | 'month' = 'day'; // For x-axis scale\n\n  let canvasElement: HTMLCanvasElement;\n  let chartInstance: Chart | null = null;\n\n  // Function to process data and update chart\n  function updateChart() {\n    if (!browser || !chartInstance || !canvasElement) return;\n\n    // Aggregate data by the selected time unit\n    const aggregatedData: Record<string, number> = {};\n    const now = new Date();\n    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const startOfWeek = new Date(startOfDay);\n    startOfWeek.setDate(startOfDay.getDate() - startOfDay.getDay()); // Sunday start\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n    sessions.forEach(session => {\n      const sessionDate = new Date(session.timestamp);\n      let key = '';\n\n      if (timeUnit === 'day') {\n        // Aggregate by day (e.g., only show last 7 days)\n        const dayDiff = Math.floor((startOfDay.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24));\n        if(dayDiff >= 0 && dayDiff < 7) { // Show last 7 days including today\n          key = sessionDate.toISOString().split('T')[0];\n        }\n      } else if (timeUnit === 'week') {\n        // Aggregate by week (e.g., show last 4 weeks)\n        const weekDiff = Math.floor((startOfWeek.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24 * 7));\n        if(weekDiff >= 0 && weekDiff < 4) { // Show last 4 weeks including this week\n          const weekStartDate = new Date(sessionDate);\n          weekStartDate.setDate(sessionDate.getDate() - sessionDate.getDay());\n          key = weekStartDate.toISOString().split('T')[0]; // Key by Sunday of the week\n        }\n      } else if (timeUnit === 'month') {\n        // Aggregate by month (e.g., show last 6 months)\n        const monthDiff = (startOfMonth.getFullYear() - sessionDate.getFullYear()) * 12 + (startOfMonth.getMonth() - sessionDate.getMonth());\n        if(monthDiff >= 0 && monthDiff < 6) { // Show last 6 months including this month\n          key = `${sessionDate.getFullYear()}-${String(sessionDate.getMonth() + 1).padStart(2, '0')}`; // Key by YYYY-MM\n        }\n      }\n      \n      if (key) { // Only include if within the desired range\n        if (!aggregatedData[key]) {\n          aggregatedData[key] = 0;\n        }\n        aggregatedData[key] += session.duration / 60; // Add duration in minutes\n      }\n    });\n    \n    // Sort keys (dates/months) and prepare labels/data for chart\n    const sortedKeys = Object.keys(aggregatedData).sort();\n    const labels = sortedKeys; \n    const dataPoints = sortedKeys.map(key => aggregatedData[key]);\n\n    // Update chart data\n    chartInstance.data.labels = labels;\n    if (chartInstance.data.datasets && chartInstance.data.datasets[0]) {\n      chartInstance.data.datasets[0].data = dataPoints;\n    }\n\n    // Type-safe update of scales configuration\n    const scales = chartInstance.options?.scales;\n    if (scales && 'x' in scales) {\n      const xScale = scales.x;\n      \n      // Fixed: Properly access TimeScale options with correct typing\n      if (xScale && xScale.type === 'time') {\n        // Create a properly typed time options object\n        const timeOptions: TimeScaleOptions = {\n          unit: timeUnit,\n          tooltipFormat: '',\n          displayFormats: {}\n        };\n        \n        // Set formatting based on time unit\n        if (timeUnit === 'day') {\n          timeOptions.tooltipFormat = 'MMM d, yyyy';\n          timeOptions.displayFormats = { day: 'MMM d' };\n        } else if (timeUnit === 'week') {\n          timeOptions.tooltipFormat = \"'Week of' MMM d, yyyy\";\n          timeOptions.displayFormats = { week: 'MMM d' };\n        } else { // month\n          timeOptions.tooltipFormat = 'MMM yyyy';\n          timeOptions.displayFormats = { month: 'MMM yyyy' };\n        }\n        \n        // Apply the properly typed time options\n        xScale.time = timeOptions;\n      }\n    }\n\n    chartInstance.update();\n  }\n\n  function createChart() {\n    if (!browser || !canvasElement) return;\n    \n    // Configuration with proper TypeScript typing\n    const config: ChartConfiguration<keyof ChartTypeRegistry, number[], string> = {\n      type: 'bar',\n      data: {\n        labels: [], // Initial empty labels\n        datasets: [{\n          label: 'Focus Time (Minutes)',\n          data: [], // Initial empty data\n          backgroundColor: 'rgba(79, 70, 229, 0.6)', // Indigo-600 with opacity\n          borderColor: 'rgba(79, 70, 229, 1)', // Indigo-600\n          borderWidth: 1,\n          borderRadius: 4,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Minutes'\n            },\n            grid: {\n              color: 'rgba(200, 200, 200, 0.1)' // Lighter grid lines\n            }\n          },\n          x: {\n            type: 'time',\n            time: {\n              unit: timeUnit,\n              tooltipFormat: timeUnit === 'day' ? 'MMM d, yyyy' : \n                             timeUnit === 'week' ? \"'Week of' MMM d, yyyy\" : \n                             'MMM yyyy',\n              displayFormats: {\n                day: 'MMM d',\n                week: 'MMM d',\n                month: 'MMM yyyy'\n              }\n            },\n            adapters: {\n              date: { locale: enUS } // Set date-fns locale\n            },\n            grid: {\n              display: false // Hide x-axis grid lines\n            },\n            ticks: {\n              maxRotation: 0,\n              autoSkip: true,\n              source: 'auto' \n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false // Hide legend if only one dataset\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n            titleFont: { size: 14 },\n            bodyFont: { size: 12 },\n            padding: 10,\n          }\n        }\n      }\n    };\n    \n    // Create the chart instance\n    chartInstance = new Chart(canvasElement, config);\n\n    // Initial chart render\n    updateChart();\n  }\n\n  onMount(() => {\n    if (browser) {\n      createChart();\n    }\n  });\n\n  // Cleanup chartInstance on component destruction\n  onDestroy(() => {\n    if (browser && chartInstance) {\n      chartInstance.destroy();\n      chartInstance = null;\n    }\n  });\n\n  // Update chart when props change\n  $: if (browser && chartInstance && sessions) {\n    updateChart();\n  }\n\n  // Watch for timeUnit changes to update chart\n  $: if (browser && chartInstance && timeUnit) {\n    updateChart();\n  }\n</script>\n\n<div class=\"chart-container\" style=\"position: relative; height:300px;\">\n  {#if browser}\n    <canvas bind:this={canvasElement}></canvas>\n  {:else}\n    <div class=\"h-full flex items-center justify-center text-gray-400\">\n      <p>Chart loading...</p>\n    </div>\n  {/if}\n</div>"],"names":["$.fallback"],"mappings":";;;;;;MAea,WAAwBA,SAAA,QAAA,UAAA,GAAA,MAAA,CAAA,GAAA,IAAA;AACxB,MAAA,yCAAqC,KAAK;AAuLrD,YAAgB,MAAA;AAAA,GAKf;;;;;;;;;;"}