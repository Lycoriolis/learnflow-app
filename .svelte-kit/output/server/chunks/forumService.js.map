{"version":3,"file":"forumService.js","sources":["../../../../src/lib/types/shared.ts","../../../../src/lib/services/baseService.ts","../../../../src/lib/services/forums/forumService.ts"],"sourcesContent":["import { Timestamp } from 'firebase/firestore';\n\nexport interface BaseContentNode {\n  id: string;\n  title: string;\n  type: string;\n  slug?: string;\n  path?: string;\n  description?: string;\n  children?: BaseContentNode[];\n}\n\nexport interface ContentNode extends BaseContentNode {\n  markdownContent?: string;\n  contentLoadingError?: string;\n  metadata?: {\n    createdAt: Date;\n    updatedAt: Date;\n    author: string;\n    tags?: string[];\n    category?: string;\n  };\n}\n\nexport interface ContentManifestItem {\n  id: string;\n  title: string;\n  type: string;\n  slug?: string;\n  path?: string;\n  description?: string;\n  children?: ContentManifestItem[];\n  metadata?: {\n    createdAt: Date;\n    updatedAt: Date;\n    author: string;\n    tags?: string[];\n    category?: string;\n  };\n}\n\nexport interface ServiceResponse<T> {\n  data: T | null;\n  error: Error | null;\n}\n\nexport interface ContentMetadata {\n  createdAt: Date;\n  updatedAt: Date;\n  author: string;\n  tags?: string[];\n  category?: string;\n}\n\nexport interface ContentResponse {\n  id: string;\n  title: string;\n  content: string;\n  metadata: ContentMetadata;\n  related: string[];\n}\n\nexport class ServiceError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public status: number = 500\n  ) {\n    super(message);\n    this.name = 'ServiceError';\n  }\n}\n\nexport interface Exercise {\n  id: string;\n  title: string;\n  description?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  estimatedTime?: string;\n  content?: string;\n  category?: string;\n  tags?: string[];\n  points?: number;\n  hints?: string[];\n  solution?: string;\n  relatedExercises?: string[];\n  metadata?: {\n    dateAdded?: Timestamp;\n    popularity?: number;\n    difficulty?: number;\n  };\n  categories?: string[];\n  progressStatus?: 'notStarted' | 'inProgress' | 'completed';\n}\n\nexport interface ExerciseFilterOptions {\n  difficulty?: string;\n  category?: string;\n  tags?: string[];\n  searchTerm?: string;\n  sortBy?: 'newest' | 'oldest' | 'difficulty' | 'popularity';\n  limit?: number;\n  preferCategories?: string[];\n  difficultyRange?: {\n    min?: number;\n    max?: number;\n  };\n}\n\nexport interface ScoredExercise {\n  exercise: Exercise;\n  score: number;\n}\n\nexport interface Lesson {\n  id: string;\n  title: string;\n  content: string;\n  duration?: number;\n  order: number;\n  exercises?: string[];\n  prerequisites?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface Module {\n  id: string;\n  title: string;\n  description?: string;\n  lessons: Lesson[];\n  order: number;\n  duration?: number;\n  prerequisites?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface CourseStructure {\n  id: string;\n  title: string;\n  description?: string;\n  modules: Module[];\n  totalDuration?: number;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  tags?: string[];\n  metadata?: ContentMetadata;\n}\n\nexport interface ForumCategory {\n  id: string;\n  title: string;\n  description: string;\n  slug: string;\n  order: number;\n  topicCount: number;\n  postCount: number;\n  lastActivity?: Timestamp;\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n    author: string;\n  };\n}\n\nexport interface ForumTopic {\n  id: string;\n  title: string;\n  content: string;\n  categoryId: string;\n  authorId: string;\n  authorName: string;\n  slug: string;\n  viewCount: number;\n  replyCount: number;\n  isPinned: boolean;\n  isLocked: boolean;\n  lastActivity?: Timestamp;\n  tags?: string[];\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n  };\n}\n\nexport interface ForumPost {\n  id: string;\n  content: string;\n  topicId: string;\n  authorId: string;\n  authorName: string;\n  parentId?: string;\n  isAnswer: boolean;\n  upvotes: number;\n  downvotes: number;\n  metadata?: {\n    createdAt: Timestamp;\n    updatedAt: Timestamp;\n  };\n}\n\nexport interface UserProgress {\n  userId: string;\n  courseId: string;\n  moduleId: string;\n  lessonId: string;\n  exerciseId?: string;\n  status: 'notStarted' | 'inProgress' | 'completed';\n  score?: number;\n  lastAccessed: Timestamp;\n  metadata?: {\n    timeSpent: number;\n    attempts: number;\n    completionDate?: Timestamp;\n  };\n}\n\nexport interface UserPreferences {\n  userId: string;\n  theme: 'light' | 'dark' | 'system';\n  language: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    frequency: 'immediate' | 'daily' | 'weekly';\n  };\n  accessibility: {\n    fontSize: number;\n    highContrast: boolean;\n    reducedMotion: boolean;\n  };\n  metadata?: {\n    lastUpdated: Timestamp;\n  };\n} ","import type { ServiceResponse } from '../types/shared';\nimport { ServiceError } from '../types/shared';\n\nexport class BaseService {\n  protected async handleRequest<T>(fn: () => Promise<T>): Promise<ServiceResponse<T>> {\n    try {\n      const data = await fn();\n      return { data, error: null };\n    } catch (error) {\n      return this.handleError(error) as ServiceResponse<T>;\n    }\n  }\n\n  protected handleError(error: unknown): ServiceResponse<null> {\n    if (error instanceof ServiceError) {\n      return { data: null, error };\n    }\n    \n    if (error instanceof Error) {\n      return { \n        data: null, \n        error: new ServiceError(error.message, 'INTERNAL_ERROR') \n      };\n    }\n    \n    return { \n      data: null, \n      error: new ServiceError('An unknown error occurred', 'UNKNOWN_ERROR') \n    };\n  }\n\n  protected validateId(id: string | null | undefined): void {\n    if (!id) {\n      throw new ServiceError('Invalid ID provided', 'INVALID_ID', 400);\n    }\n  }\n\n  protected validateInput<T>(input: T | null | undefined, fieldName: string): void {\n    if (!input) {\n      throw new ServiceError(`Invalid ${fieldName} provided`, 'INVALID_INPUT', 400);\n    }\n  }\n}\n\nexport { ServiceError };","// src/lib/services/forums/forumService.ts\nimport { getFirestore, collection, query, where, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, increment, arrayUnion, Timestamp } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { BaseService, ServiceError } from '../baseService';\nimport type { ServiceResponse, ForumCategory, ForumTopic, ForumPost } from '../../types/shared';\n\nexport class ForumService extends BaseService {\n  private db = getFirestore();\n  private auth = getAuth();\n\n  async getForumCategories(): Promise<ServiceResponse<ForumCategory[]>> {\n    return this.handleRequest(async () => {\n      const categoriesRef = collection(this.db, 'forumCategories');\n      const snapshot = await getDocs(categoriesRef);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumCategory[];\n    });\n  }\n\n  async createForumTopic(topic: Omit<ForumTopic, 'id'>): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const user = this.auth.currentUser;\n      if (!user) {\n        throw new ServiceError('Unauthorized', 'UNAUTHORIZED', 401);\n      }\n\n      const topicsRef = collection(this.db, 'forumTopics');\n      const newTopic = {\n        ...topic,\n        authorId: user.uid,\n        authorName: user.displayName || 'Anonymous',\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n        viewCount: 0,\n        replyCount: 0,\n        isPinned: false,\n        isLocked: false\n      };\n\n      const docRef = await addDoc(topicsRef, newTopic);\n      return {\n        id: docRef.id,\n        ...newTopic\n      } as ForumTopic;\n    });\n  }\n\n  async createForumPost(post: Omit<ForumPost, 'id'>): Promise<ServiceResponse<ForumPost>> {\n    return this.handleRequest(async () => {\n      const user = this.auth.currentUser;\n      if (!user) {\n        throw new ServiceError('Unauthorized', 'UNAUTHORIZED', 401);\n      }\n\n      const postsRef = collection(this.db, 'forumPosts');\n      const newPost = {\n        ...post,\n        authorId: user.uid,\n        authorName: user.displayName || 'Anonymous',\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n        upvotes: 0,\n        downvotes: 0,\n        isAnswer: false\n      };\n\n      const docRef = await addDoc(postsRef, newPost);\n      return {\n        id: docRef.id,\n        ...newPost\n      } as ForumPost;\n    });\n  }\n\n  async createCategory(category: Omit<ForumCategory, 'id'>): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoriesRef = collection(this.db, 'forumCategories');\n      const newCategory = {\n        ...category,\n        topicCount: 0,\n        postCount: 0,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      };\n\n      const docRef = await addDoc(categoriesRef, newCategory);\n      return {\n        id: docRef.id,\n        ...newCategory\n      } as ForumCategory;\n    });\n  }\n\n  async deleteCategory(categoryId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      await deleteDoc(categoryRef);\n    });\n  }\n\n  async getCategory(categoryId: string): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      const docSnap = await getDoc(categoryRef);\n      \n      if (!docSnap.exists()) {\n        throw new ServiceError('Category not found', 'NOT_FOUND', 404);\n      }\n\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      } as ForumCategory;\n    });\n  }\n\n  async updateCategory(categoryId: string, updates: Partial<ForumCategory>): Promise<ServiceResponse<ForumCategory>> {\n    return this.handleRequest(async () => {\n      const categoryRef = doc(this.db, 'forumCategories', categoryId);\n      const updatesWithTimestamp = {\n        ...updates,\n        updatedAt: Timestamp.now()\n      };\n\n      await updateDoc(categoryRef, updatesWithTimestamp);\n      const updatedDoc = await getDoc(categoryRef);\n      return {\n        id: updatedDoc.id,\n        ...updatedDoc.data()\n      } as ForumCategory;\n    });\n  }\n\n  async getForumTopic(topicId: string): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      const docSnap = await getDoc(topicRef);\n      \n      if (!docSnap.exists()) {\n        throw new ServiceError('Topic not found', 'NOT_FOUND', 404);\n      }\n\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      } as ForumTopic;\n    });\n  }\n\n  async updateTopic(topicId: string, updates: Partial<ForumTopic>): Promise<ServiceResponse<ForumTopic>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      const updatesWithTimestamp = {\n        ...updates,\n        updatedAt: Timestamp.now()\n      };\n\n      await updateDoc(topicRef, updatesWithTimestamp);\n      const updatedDoc = await getDoc(topicRef);\n      return {\n        id: updatedDoc.id,\n        ...updatedDoc.data()\n      } as ForumTopic;\n    });\n  }\n\n  async deleteTopic(topicId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const topicRef = doc(this.db, 'forumTopics', topicId);\n      await deleteDoc(topicRef);\n    });\n  }\n\n  async getCategories(): Promise<ServiceResponse<ForumCategory[]>> {\n    return this.getForumCategories();\n  }\n\n  async getTopics(categoryId?: string): Promise<ServiceResponse<ForumTopic[]>> {\n    return this.handleRequest(async () => {\n      const topicsRef = collection(this.db, 'forumTopics');\n      let q = query(topicsRef);\n\n      if (categoryId) {\n        q = query(q, where('categoryId', '==', categoryId));\n      }\n\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumTopic[];\n    });\n  }\n\n  async getTopic(topicId: string): Promise<ServiceResponse<ForumTopic>> {\n    return this.getForumTopic(topicId);\n  }\n\n  async getPostsByTopicId(topicId: string): Promise<ServiceResponse<ForumPost[]>> {\n    return this.handleRequest(async () => {\n      const postsRef = collection(this.db, 'forumPosts');\n      const q = query(postsRef, where('topicId', '==', topicId));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as ForumPost[];\n    });\n  }\n\n  async updatePost(postId: string, updates: Partial<ForumPost>): Promise<ServiceResponse<ForumPost>> {\n    return this.handleRequest(async () => {\n      const postRef = doc(this.db, 'forumPosts', postId);\n      const updatesWithTimestamp = { ...updates, updatedAt: Timestamp.now() };\n      await updateDoc(postRef, updatesWithTimestamp);\n      const updatedSnap = await getDoc(postRef);\n      return { id: updatedSnap.id, ...updatedSnap.data() } as ForumPost;\n    });\n  }\n\n  async deletePost(postId: string): Promise<ServiceResponse<void>> {\n    return this.handleRequest(async () => {\n      const postRef = doc(this.db, 'forumPosts', postId);\n      await deleteDoc(postRef);\n    });\n  }\n}\n\n// Export individual functions for direct use\nexport const createForumTopic = async (topic: Omit<ForumTopic, 'id'>): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.createForumTopic(topic);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getForumCategories = async (): Promise<ForumCategory[]> => {\n  const service = new ForumService();\n  const response = await service.getForumCategories();\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const createForumPost = async (post: Omit<ForumPost, 'id'>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.createForumPost(post);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const createCategory = async (category: Omit<ForumCategory, 'id'>): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.createCategory(category);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deleteCategory = async (categoryId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deleteCategory(categoryId);\n  if (response.error) throw response.error;\n};\n\nexport const getCategory = async (categoryId: string): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.getCategory(categoryId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updateCategory = async (categoryId: string, updates: Partial<ForumCategory>): Promise<ForumCategory> => {\n  const service = new ForumService();\n  const response = await service.updateCategory(categoryId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getForumTopic = async (topicId: string): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.getForumTopic(topicId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updateTopic = async (topicId: string, updates: Partial<ForumTopic>): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.updateTopic(topicId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deleteTopic = async (topicId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deleteTopic(topicId);\n  if (response.error) throw response.error;\n};\n\nexport const getCategories = async (): Promise<ForumCategory[]> => {\n  const service = new ForumService();\n  const response = await service.getCategories();\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const getTopics = async (categoryId?: string): Promise<ForumTopic[]> => {\n  const service = new ForumService();\n  const response = await service.getTopics(categoryId);\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const getTopic = async (topicId: string): Promise<ForumTopic> => {\n  const service = new ForumService();\n  const response = await service.getTopic(topicId);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const getPostsByTopicId = async (topicId: string): Promise<ForumPost[]> => {\n  const service = new ForumService();\n  const response = await service.getPostsByTopicId(topicId);\n  if (response.error) throw response.error;\n  return response.data || [];\n};\n\nexport const createPost = async (post: Omit<ForumPost, 'id'>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.createForumPost(post);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const updatePost = async (postId: string, updates: Partial<ForumPost>): Promise<ForumPost> => {\n  const service = new ForumService();\n  const response = await service.updatePost(postId, updates);\n  if (response.error) throw response.error;\n  return response.data!;\n};\n\nexport const deletePost = async (postId: string): Promise<void> => {\n  const service = new ForumService();\n  const response = await service.deletePost(postId);\n  if (response.error) throw response.error;\n};"],"names":["doc"],"mappings":"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"}