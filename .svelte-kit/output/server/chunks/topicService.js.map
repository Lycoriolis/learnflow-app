{"version":3,"file":"topicService.js","sources":["../../../../src/lib/services/forums/topicService.ts"],"sourcesContent":["// src/lib/services/forums/topicService.ts\nimport type { ForumTopic, TopicVote } from '../../types/forumTypes';\nimport { pool } from '../userService.server';\n\n/**\n * Get a specific topic by ID\n */\nexport async function getTopic(id: string): Promise<ForumTopic | null> {\n  try {\n    const result = await pool.query('SELECT * FROM forum_topics WHERE id = $1', [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return result.rows[0];\n  } catch (error) {\n    console.error('Error fetching topic:', error);\n    throw new Error('Failed to fetch topic');\n  }\n}\n\n/**\n * Get all topics\n */\nexport async function getAllTopics(): Promise<ForumTopic[]> {\n  try {\n    const result = await pool.query(`\n      SELECT t.*, \n             c.name as category_name, \n             COUNT(p.id) as post_count, \n             u.username as author_name\n      FROM forum_topics t\n      LEFT JOIN forum_categories c ON t.category_id = c.id\n      LEFT JOIN forum_posts p ON p.topic_id = t.id\n      LEFT JOIN users u ON t.author_id = u.id\n      GROUP BY t.id, c.name, u.username\n      ORDER BY t.is_pinned DESC, t.created_at DESC\n    `);\n    \n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching topics:', error);\n    throw new Error('Failed to fetch topics');\n  }\n}\n\n/**\n * Create a new topic\n */\nexport async function createTopic(data: {\n  title: string;\n  category_id: string;\n  author_id: string;\n  content: string;\n}): Promise<ForumTopic> {\n  try {\n    // Start a transaction\n    await pool.query('BEGIN');\n    \n    // Insert the topic\n    const topicResult = await pool.query(\n      'INSERT INTO forum_topics (title, category_id, author_id) VALUES ($1, $2, $3) RETURNING *',\n      [data.title, data.category_id, data.author_id]\n    );\n    \n    // Insert the first post for this topic\n    await pool.query(\n      'INSERT INTO forum_posts (topic_id, author_id, content) VALUES ($1, $2, $3)',\n      [topicResult.rows[0].id, data.author_id, data.content]\n    );\n    \n    // Commit the transaction\n    await pool.query('COMMIT');\n    \n    return topicResult.rows[0];\n  } catch (error) {\n    // Rollback in case of error\n    await pool.query('ROLLBACK');\n    console.error('Error creating topic:', error);\n    throw new Error('Failed to create topic');\n  }\n}\n\n/**\n * Update a topic\n */\nexport async function updateTopic(\n  id: string, \n  data: Partial<ForumTopic>\n): Promise<ForumTopic | null> {\n  try {\n    // Create SET clause dynamically based on provided fields\n    const fields = Object.keys(data)\n      .filter(key => key !== 'id') // Don't update id\n      .map((key, index) => `${key} = $${index + 2}`);\n    \n    if (fields.length === 0) {\n      return null; // Nothing to update\n    }\n    \n    const values = Object.values(data);\n    \n    const query = `\n      UPDATE forum_topics \n      SET ${fields.join(', ')}, updated_at = NOW()\n      WHERE id = $1\n      RETURNING *\n    `;\n    \n    const result = await pool.query(query, [id, ...values]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return result.rows[0];\n  } catch (error) {\n    console.error('Error updating topic:', error);\n    throw new Error('Failed to update topic');\n  }\n}\n\n/**\n * Delete a topic and all its posts\n */\nexport async function deleteTopic(id: string): Promise<boolean> {\n  try {\n    // Start a transaction\n    await pool.query('BEGIN');\n    \n    // Delete all posts for this topic\n    await pool.query('DELETE FROM forum_posts WHERE topic_id = $1', [id]);\n    \n    // Delete the topic\n    const result = await pool.query('DELETE FROM forum_topics WHERE id = $1 RETURNING id', [id]);\n    \n    // Commit the transaction\n    await pool.query('COMMIT');\n    \n    return result.rows.length > 0;\n  } catch (error) {\n    // Rollback in case of error\n    await pool.query('ROLLBACK');\n    console.error('Error deleting topic:', error);\n    throw new Error('Failed to delete topic');\n  }\n}\n\n/**\n * Handle topic voting (upvote/downvote)\n */\nexport async function handleTopicVote(\n  topicId: string, \n  userId: string, \n  voteType: 1 | -1\n): Promise<{ success: boolean; currentVotes: number }> {\n  try {\n    // Start a transaction\n    await pool.query('BEGIN');\n    \n    // Check if user already voted on this topic\n    const existingVote = await pool.query(\n      'SELECT * FROM topic_votes WHERE topic_id = $1 AND user_id = $2',\n      [topicId, userId]\n    );\n    \n    let result;\n    \n    if (existingVote.rows.length > 0) {\n      // User already voted, update their vote\n      if (existingVote.rows[0].vote_type === voteType) {\n        // Remove vote if clicking the same button\n        await pool.query(\n          'DELETE FROM topic_votes WHERE topic_id = $1 AND user_id = $2',\n          [topicId, userId]\n        );\n      } else {\n        // Change vote type\n        await pool.query(\n          'UPDATE topic_votes SET vote_type = $3 WHERE topic_id = $1 AND user_id = $2',\n          [topicId, userId, voteType]\n        );\n      }\n    } else {\n      // New vote\n      await pool.query(\n        'INSERT INTO topic_votes (topic_id, user_id, vote_type) VALUES ($1, $2, $3)',\n        [topicId, userId, voteType]\n      );\n    }\n    \n    // Get the current total votes\n    const votesResult = await pool.query(\n      'SELECT COALESCE(SUM(vote_type), 0) as total_votes FROM topic_votes WHERE topic_id = $1',\n      [topicId]\n    );\n    \n    // Update the votes count in the topics table\n    await pool.query(\n      'UPDATE forum_topics SET votes = $2 WHERE id = $1',\n      [topicId, votesResult.rows[0].total_votes]\n    );\n    \n    // Commit the transaction\n    await pool.query('COMMIT');\n    \n    return { \n      success: true, \n      currentVotes: parseInt(votesResult.rows[0].total_votes) \n    };\n  } catch (error) {\n    // Rollback in case of error\n    await pool.query('ROLLBACK');\n    console.error('Error handling topic vote:', error);\n    throw new Error('Failed to process vote');\n  }\n}\n\nexport const createPost = async (topicId: string, postData: any) => {\n  // Add post logic\n  return { ...postData, createdAt: new Date() };\n};"],"names":[],"mappings":";AAOA,eAAsB,SAAS,IAAwC;AACjE,MAAA;AACF,UAAM,SAAS,MAAM,KAAK,MAAM,4CAA4C,CAAC,EAAE,CAAC;AAE5E,QAAA,OAAO,KAAK,WAAW,GAAG;AACrB,aAAA;AAAA,IAAA;AAGF,WAAA,OAAO,KAAK,CAAC;AAAA,WACb,OAAO;AACN,YAAA,MAAM,yBAAyB,KAAK;AACtC,UAAA,IAAI,MAAM,uBAAuB;AAAA,EAAA;AAE3C;AAoIsB,eAAA,gBACpB,SACA,QACA,UACqD;AACjD,MAAA;AAEI,UAAA,KAAK,MAAM,OAAO;AAGlB,UAAA,eAAe,MAAM,KAAK;AAAA,MAC9B;AAAA,MACA,CAAC,SAAS,MAAM;AAAA,IAClB;AAEI,QAAA;AAEA,QAAA,aAAa,KAAK,SAAS,GAAG;AAEhC,UAAI,aAAa,KAAK,CAAC,EAAE,cAAc,UAAU;AAE/C,cAAM,KAAK;AAAA,UACT;AAAA,UACA,CAAC,SAAS,MAAM;AAAA,QAClB;AAAA,MAAA,OACK;AAEL,cAAM,KAAK;AAAA,UACT;AAAA,UACA,CAAC,SAAS,QAAQ,QAAQ;AAAA,QAC5B;AAAA,MAAA;AAAA,IACF,OACK;AAEL,YAAM,KAAK;AAAA,QACT;AAAA,QACA,CAAC,SAAS,QAAQ,QAAQ;AAAA,MAC5B;AAAA,IAAA;AAII,UAAA,cAAc,MAAM,KAAK;AAAA,MAC7B;AAAA,MACA,CAAC,OAAO;AAAA,IACV;AAGA,UAAM,KAAK;AAAA,MACT;AAAA,MACA,CAAC,SAAS,YAAY,KAAK,CAAC,EAAE,WAAW;AAAA,IAC3C;AAGM,UAAA,KAAK,MAAM,QAAQ;AAElB,WAAA;AAAA,MACL,SAAS;AAAA,MACT,cAAc,SAAS,YAAY,KAAK,CAAC,EAAE,WAAW;AAAA,IACxD;AAAA,WACO,OAAO;AAER,UAAA,KAAK,MAAM,UAAU;AACnB,YAAA,MAAM,8BAA8B,KAAK;AAC3C,UAAA,IAAI,MAAM,wBAAwB;AAAA,EAAA;AAE5C;AAEa,MAAA,aAAa,OAAO,SAAiB,aAAkB;AAElE,SAAO,EAAE,GAAG,UAAU,WAAW,oBAAI,OAAO;AAC9C;"}