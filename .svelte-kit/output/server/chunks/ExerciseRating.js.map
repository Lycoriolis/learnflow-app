{"version":3,"file":"ExerciseRating.js","sources":["../../../../src/lib/components/courses/exercise/ExerciseMarkdown.svelte","../../../../src/lib/components/courses/exercise/ExerciseRating.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import MarkdownRenderer from '../../shared/MarkdownRenderer.svelte';\n  import MathContent from '../../shared/MathContent.svelte';\n  \n  export let markdown: string = '';\n  \n  // Process any special exercise-specific markdown features\n  let processedMarkdown = markdown;\n  \n  // Look for code exercise placeholders and format them\n  $: processedMarkdown = processMathAndCode(markdown);\n  \n  function processMathAndCode(text: string): string {\n    // Process math expressions\n    let processed = text.replace(/\\$\\$(.*?)\\$\\$/g, (match, p1) => {\n      return `<div class=\"math-block\">${p1}</div>`;\n    });\n    \n    processed = processed.replace(/\\$(.*?)\\$/g, (match, p1) => {\n      return `<span class=\"math-inline\">${p1}</span>`;\n    });\n    \n    // Add special formatting for code exercises\n    processed = processed.replace(/```exercise([\\s\\S]*?)```/g, (match, p1) => {\n      return `<div class=\"code-exercise-container\">\\n\\`\\`\\`${p1}\\`\\`\\`\\n</div>`;\n    });\n    \n    return processed;\n  }\n</script>\n\n<div class=\"exercise-markdown\">\n  <MarkdownRenderer content={processedMarkdown} />\n</div>\n\n<style>\n  .exercise-markdown :global(.code-exercise-container) {\n    border: 1px solid #e5e7eb;\n    border-radius: 0.5rem;\n    padding: 1rem;\n    margin: 1.5rem 0;\n    background-color: #f9fafb;\n  }\n  \n  /* Dark mode */\n  :global(.dark) .exercise-markdown :global(.code-exercise-container) {\n    background-color: #1f2937;\n    border-color: #374151;\n  }\n  \n  .exercise-markdown :global(.math-block),\n  .exercise-markdown :global(.math-inline) {\n    font-family: 'Cambria Math', 'STIX Two Math', serif;\n  }\n</style>","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { getAuth } from 'firebase/auth';\n  import { doc, getDoc, setDoc, getFirestore, updateDoc, increment } from 'firebase/firestore';\n  import Icon from '@iconify/svelte';\n\n  export let exerciseId: string;\n\n  let userRating: number | null = null;\n  let isSubmitted = false;\n  let feedbackText = '';\n  let showFeedback = false;\n\n  onMount(async () => {\n    await loadUserRating();\n  });\n\n  async function loadUserRating() {\n    const auth = getAuth();\n    if (!auth.currentUser) return;\n\n    try {\n      const db = getFirestore();\n      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);\n      const ratingDoc = await getDoc(ratingRef);\n\n      if (ratingDoc.exists()) {\n        const data = ratingDoc.data();\n        userRating = data.rating;\n        feedbackText = data.feedback || '';\n        isSubmitted = true;\n      }\n    } catch (err) {\n      console.error('Error loading rating:', err);\n    }\n  }\n\n  async function submitRating() {\n    if (userRating === null) return;\n\n    const auth = getAuth();\n    if (!auth.currentUser) return;\n\n    try {\n      const db = getFirestore();\n      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);\n      \n      // Save user's rating\n      await setDoc(ratingRef, {\n        rating: userRating,\n        feedback: feedbackText,\n        timestamp: new Date()\n      });\n\n      // Update exercise aggregated ratings\n      const exerciseRef = doc(db, 'exercises', exerciseId);\n      await updateDoc(exerciseRef, {\n        ratingSum: increment(userRating),\n        ratingCount: increment(1),\n        averageRating: increment(0) // This will trigger a Cloud Function to recalculate\n      });\n\n      isSubmitted = true;\n      showFeedback = false;\n    } catch (err) {\n      console.error('Error submitting rating:', err);\n    }\n  }\n\n  function handleRatingClick(rating: number) {\n    if (!isSubmitted) {\n      userRating = rating;\n    }\n  }\n\n  function editRating() {\n    isSubmitted = false;\n  }\n</script>\n\n<div class=\"exercise-rating\">\n  <h3 class=\"text-lg font-semibold mb-2\">Rate this exercise</h3>\n  \n  {#if !isSubmitted}\n    <div class=\"flex flex-col space-y-4\">\n      <div class=\"flex items-center space-x-1\">\n        {#each Array(5) as _, i}\n          <button \n            on:click={() => handleRatingClick(i + 1)}\n            class=\"text-2xl focus:outline-none\" \n            disabled={isSubmitted}\n          >\n            <Icon \n              icon={userRating && i < userRating ? \"mdi:star\" : \"mdi:star-outline\"} \n              class={userRating && i < userRating ? \"text-yellow-400\" : \"text-gray-400 hover:text-yellow-400\"} \n              width=\"28\" \n              height=\"28\"\n            />\n          </button>\n        {/each}\n      </div>\n      \n      <div>\n        <button \n          on:click={() => showFeedback = !showFeedback}\n          class=\"text-sm text-cherry-600 dark:text-cherry-400 hover:underline\"\n        >\n          {showFeedback ? \"Hide feedback form\" : \"Add feedback (optional)\"}\n        </button>\n        \n        {#if showFeedback}\n          <div class=\"mt-2\">\n            <textarea\n              bind:value={feedbackText}\n              class=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-light focus:ring-cherry-500 focus:border-cherry-500 min-h-[80px]\"\n              placeholder=\"What did you think about this exercise?\"\n            ></textarea>\n          </div>\n        {/if}\n      </div>\n      \n      <div>\n        <button \n          on:click={submitRating}\n          disabled={userRating === null}\n          class=\"px-4 py-2 text-sm font-medium rounded-md bg-cherry-600 text-white hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          Submit Rating\n        </button>\n      </div>\n    </div>\n  {:else}\n    <div class=\"flex items-center justify-between\">\n      <div class=\"flex items-center space-x-1\">\n        {#each Array(5) as _, i}\n          <Icon \n            icon={userRating && i < userRating ? \"mdi:star\" : \"mdi:star-outline\"} \n            class={userRating && i < userRating ? \"text-yellow-400\" : \"text-gray-400\"} \n            width=\"24\" \n            height=\"24\"\n          />\n        {/each}\n      </div>\n      \n      <button \n        on:click={editRating}\n        class=\"text-sm text-cherry-600 dark:text-cherry-400 hover:underline\"\n      >\n        Edit Rating\n      </button>\n    </div>\n    \n    {#if feedbackText}\n      <div class=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n        <p class=\"italic\">\"{feedbackText}\"</p>\n      </div>\n    {/if}\n  {/if}\n</div>"],"names":["$.ensure_array_like","$.attr"],"mappings":";;;;;;;AAIa,MAAA,yCAAmB,EAAE;AAG5B,MAAA,oBAAoB;WAKf,mBAAmB,MAAsB;QAE5C,YAAY,KAAK,QAAQ,kBAAmB,CAAA,OAAO,OAAO;wCAC1B,EAAE;AAAA,KACrC;AAED,gBAAY,UAAU,QAAQ,cAAe,CAAA,OAAO,OAAO;0CACrB,EAAE;AAAA,KACvC;AAGD,gBAAY,UAAU,QAAQ,6BAA8B,CAAA,OAAO,OAAO;;QACjB,EAAE;AAAA;AAAA,KAC1D;WAEM;AAAA,EACT;AAlBG,sBAAoB,mBAAmB,QAAQ;;yCAsBvB,kBAAiB,CAAA;;;;;;MC1BjC,aAAkB,QAAA,YAAA;AAEzB,MAAA,aAA4B;AAC5B,MAAA,cAAc;;AA0ED;;AAGJ,UAAA,aAAAA,kBAAA,MAAM,CAAC,CAAA;;;AAAM,iBAAA,CAAA;sFAIN,aAAW,IAAA,CAAA;;QAGb,MAA4C;AAAA,QAC3C,OAAmD;AAAA;;;;;qIAavB,yBAAyB,CAAA;;;;AAiBtD,cAAA,OAAA,8BAAAC,KAAA,YAAA,eAAe,MAAI,IAAA,CAAA;AAAA;;;;;"}