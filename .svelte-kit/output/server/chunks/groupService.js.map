{"version":3,"file":"groupService.js","sources":["../../../../src/lib/services/groupService.ts"],"sourcesContent":["import pkg from 'pg';\nconst { Pool } = pkg;\nimport { env } from '$env/dynamic/private';\n\n// Configure the connection pool\nconst pool = new Pool({\n  connectionString: env.DATABASE_URL\n});\n\n/**\n * Get all groups with member status for a given user\n */\nexport async function getAllGroups(userId: string | null = null) {\n  const client = await pool.connect();\n  try {\n    const groupsRes = await client.query('SELECT * FROM groups ORDER BY created_at DESC');\n    const groups = groupsRes.rows;\n    let memberGroupIds: number[] = [];\n    \n    if (userId) {\n      const memberRes = await client.query(\n        'SELECT group_id FROM group_members WHERE user_id = $1',\n        [userId]\n      );\n      memberGroupIds = memberRes.rows.map((r: any) => r.group_id);\n    }\n    \n    // Attach isMember flag\n    return groups.map((g: any) => ({\n      ...g,\n      isMember: memberGroupIds.includes(g.id)\n    }));\n  } catch (err) {\n    console.error('Error fetching groups:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n\n/**\n * Get a specific group by ID with its members\n */\nexport async function getGroupById(groupId: string) {\n  const client = await pool.connect();\n  try {\n    const groupRes = await client.query(\n      'SELECT * FROM groups WHERE id = $1',\n      [groupId]\n    );\n    \n    if (groupRes.rowCount === 0) {\n      return null;\n    }\n    \n    const group = groupRes.rows[0];\n    const membersRes = await client.query(\n      'SELECT user_id FROM group_members WHERE group_id = $1',\n      [groupId]\n    );\n    \n    return {\n      group,\n      members: membersRes.rows\n    };\n  } catch (err) {\n    console.error('Error fetching group:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n\n/**\n * Create a new group\n */\nexport async function createGroup(data: {\n  name: string;\n  description: string;\n  topic: string;\n  image?: string;\n  is_public?: boolean;\n  created_by: string;\n}) {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    \n    // Create group\n    const groupRes = await client.query(\n      `INSERT INTO groups (name, description, topic, image, is_public, created_by)\n       VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,\n      [data.name, data.description, data.topic, data.image, data.is_public ?? true, data.created_by]\n    );\n    \n    // Add creator as first member\n    await client.query(\n      'INSERT INTO group_members (group_id, user_id) VALUES ($1, $2)',\n      [groupRes.rows[0].id, data.created_by]\n    );\n    \n    await client.query('COMMIT');\n    return groupRes.rows[0];\n  } catch (err) {\n    await client.query('ROLLBACK');\n    console.error('Error creating group:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n\n/**\n * Join a group\n */\nexport async function joinGroup(groupId: string, userId: string) {\n  const client = await pool.connect();\n  try {\n    await client.query(\n      'INSERT INTO group_members (group_id, user_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',\n      [groupId, userId]\n    );\n    return true;\n  } catch (err) {\n    console.error('Error joining group:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n\n/**\n * Leave a group\n */\nexport async function leaveGroup(groupId: string, userId: string) {\n  const client = await pool.connect();\n  try {\n    await client.query(\n      'DELETE FROM group_members WHERE group_id = $1 AND user_id = $2',\n      [groupId, userId]\n    );\n    return true;\n  } catch (err) {\n    console.error('Error leaving group:', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n}"],"names":["env"],"mappings":";;AACA,MAAM,EAAE,KAAS,IAAA;AAIjB,MAAM,OAAO,IAAI,KAAK;AAAA,EACpB,kBAAkBA,YAAI;AACxB,CAAC;AAKqB,eAAA,aAAa,SAAwB,MAAM;AACzD,QAAA,SAAS,MAAM,KAAK,QAAQ;AAC9B,MAAA;AACF,UAAM,YAAY,MAAM,OAAO,MAAM,+CAA+C;AACpF,UAAM,SAAS,UAAU;AACzB,QAAI,iBAA2B,CAAC;AAEhC,QAAI,QAAQ;AACJ,YAAA,YAAY,MAAM,OAAO;AAAA,QAC7B;AAAA,QACA,CAAC,MAAM;AAAA,MACT;AACA,uBAAiB,UAAU,KAAK,IAAI,CAAC,MAAW,EAAE,QAAQ;AAAA,IAAA;AAIrD,WAAA,OAAO,IAAI,CAAC,OAAY;AAAA,MAC7B,GAAG;AAAA,MACH,UAAU,eAAe,SAAS,EAAE,EAAE;AAAA,IAAA,EACtC;AAAA,WACK,KAAK;AACJ,YAAA,MAAM,0BAA0B,GAAG;AACrC,UAAA;AAAA,EAAA,UACN;AACA,WAAO,QAAQ;AAAA,EAAA;AAEnB;AAKA,eAAsB,aAAa,SAAiB;AAC5C,QAAA,SAAS,MAAM,KAAK,QAAQ;AAC9B,MAAA;AACI,UAAA,WAAW,MAAM,OAAO;AAAA,MAC5B;AAAA,MACA,CAAC,OAAO;AAAA,IACV;AAEI,QAAA,SAAS,aAAa,GAAG;AACpB,aAAA;AAAA,IAAA;AAGH,UAAA,QAAQ,SAAS,KAAK,CAAC;AACvB,UAAA,aAAa,MAAM,OAAO;AAAA,MAC9B;AAAA,MACA,CAAC,OAAO;AAAA,IACV;AAEO,WAAA;AAAA,MACL;AAAA,MACA,SAAS,WAAW;AAAA,IACtB;AAAA,WACO,KAAK;AACJ,YAAA,MAAM,yBAAyB,GAAG;AACpC,UAAA;AAAA,EAAA,UACN;AACA,WAAO,QAAQ;AAAA,EAAA;AAEnB;AAKA,eAAsB,YAAY,MAO/B;AACK,QAAA,SAAS,MAAM,KAAK,QAAQ;AAC9B,MAAA;AACI,UAAA,OAAO,MAAM,OAAO;AAGpB,UAAA,WAAW,MAAM,OAAO;AAAA,MAC5B;AAAA;AAAA,MAEA,CAAC,KAAK,MAAM,KAAK,aAAa,KAAK,OAAO,KAAK,OAAO,KAAK,aAAa,MAAM,KAAK,UAAU;AAAA,IAC/F;AAGA,UAAM,OAAO;AAAA,MACX;AAAA,MACA,CAAC,SAAS,KAAK,CAAC,EAAE,IAAI,KAAK,UAAU;AAAA,IACvC;AAEM,UAAA,OAAO,MAAM,QAAQ;AACpB,WAAA,SAAS,KAAK,CAAC;AAAA,WACf,KAAK;AACN,UAAA,OAAO,MAAM,UAAU;AACrB,YAAA,MAAM,yBAAyB,GAAG;AACpC,UAAA;AAAA,EAAA,UACN;AACA,WAAO,QAAQ;AAAA,EAAA;AAEnB;AAKsB,eAAA,UAAU,SAAiB,QAAgB;AACzD,QAAA,SAAS,MAAM,KAAK,QAAQ;AAC9B,MAAA;AACF,UAAM,OAAO;AAAA,MACX;AAAA,MACA,CAAC,SAAS,MAAM;AAAA,IAClB;AACO,WAAA;AAAA,WACA,KAAK;AACJ,YAAA,MAAM,wBAAwB,GAAG;AACnC,UAAA;AAAA,EAAA,UACN;AACA,WAAO,QAAQ;AAAA,EAAA;AAEnB;AAKsB,eAAA,WAAW,SAAiB,QAAgB;AAC1D,QAAA,SAAS,MAAM,KAAK,QAAQ;AAC9B,MAAA;AACF,UAAM,OAAO;AAAA,MACX;AAAA,MACA,CAAC,SAAS,MAAM;AAAA,IAClB;AACO,WAAA;AAAA,WACA,KAAK;AACJ,YAAA,MAAM,wBAAwB,GAAG;AACnC,UAAA;AAAA,EAAA,UACN;AACA,WAAO,QAAQ;AAAA,EAAA;AAEnB;"}