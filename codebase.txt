===== ./static/content/exercises/index.json =====
{
  "exercises": [
    {
      "id": "arithmetique",
      "title": "Arithmétique",
      "description": "Exercices sur les nombres premiers, PGCD, PPCM et congruences",
      "tags": ["Algebra", "Number Theory"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "math",
      "path": "maths/mpsi-maths/arithmetique.md"
    },
    {
      "id": "calculs-algebriques",
      "title": "Calculs Algébriques",
      "description": "Exercices sur les calculs et les manipulations algébriques",
      "tags": ["Algebra", "Calculations"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "category": "math",
      "path": "maths/mpsi-maths/calculs-algebriques.md"
    },
    {
      "id": "equations-differentielles",
      "title": "Équations Différentielles",
      "description": "Exercices sur les équations différentielles linéaires",
      "tags": ["Differential Equations", "Analysis"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "category": "math",
      "path": "maths/mpsi-maths/equations-differentielles.md"
    },
    {
      "id": "espaces-prehilbertiens",
      "title": "Espaces Préhilbertiens",
      "description": "Exercices sur les espaces préhilbertiens et les produits scalaires",
      "tags": ["Linear Algebra", "Inner Product Spaces"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "category": "math",
      "path": "maths/mpsi-maths/espaces-prehilbertiens.md"
    },
    {
      "id": "espaces-vectoriels-applications-lineaires",
      "title": "Espaces Vectoriels et Applications Linéaires",
      "description": "Exercices sur les espaces vectoriels et les applications linéaires",
      "tags": ["Linear Algebra", "Vector Spaces"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "math",
      "path": "maths/mpsi-maths/espaces-vectoriels-applications-lineaires.md"
    },
    {
      "id": "groupes-symetriques-et-determinants",
      "title": "Groupes Symétriques et Déterminants",
      "description": "Exercices sur les groupes de permutations et le calcul de déterminants",
      "tags": ["Linear Algebra", "Group Theory"],
      "difficulty": "advanced",
      "estimatedTime": "50min",
      "category": "math",
      "path": "maths/mpsi-maths/groupes-symetriques-et-determinants.md"
    },
    {
      "id": "integration-espaces-produits",
      "title": "Intégration et Espaces Produits",
      "description": "Exercices sur l'intégration et les espaces produits",
      "tags": ["Analysis", "Integration"],
      "difficulty": "advanced",
      "estimatedTime": "55min",
      "category": "math",
      "path": "maths/mpsi-maths/integration-espaces-produits.md"
    },
    {
      "id": "nombres-complexes-trigonometrie",
      "title": "Nombres Complexes et Trigonométrie",
      "description": "Exercices sur les nombres complexes et les fonctions trigonométriques",
      "tags": ["Complex Numbers", "Trigonometry"],
      "difficulty": "intermediate",
      "estimatedTime": "40min",
      "category": "math",
      "path": "maths/mpsi-maths/nombres-complexes-trigonometrie.md"
    },
    {
      "id": "polynomes",
      "title": "Polynômes",
      "description": "Exercices sur les polynômes et leurs propriétés",
      "tags": ["Algebra", "Polynomials"],
      "difficulty": "intermediate",
      "estimatedTime": "35min",
      "category": "math",
      "path": "maths/mpsi-maths/polynomes.md"
    },
    {
      "id": "raisonnement-et-vocabulaire-ensembliste",
      "title": "Raisonnement et Vocabulaire Ensembliste",
      "description": "Exercices sur la logique mathématique et la théorie des ensembles",
      "tags": ["Set Theory", "Logic"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "category": "math",
      "path": "maths/mpsi-maths/raisonnement-et-vocabulaire-ensembliste.md"
    },
    {
      "id": "series-numeriques",
      "title": "Séries Numériques",
      "description": "Exercices sur les séries et leurs propriétés de convergence",
      "tags": ["Analysis", "Series"],
      "difficulty": "advanced",
      "estimatedTime": "50min",
      "category": "math",
      "path": "maths/mpsi-maths/series-numeriques.md"
    },
    {
      "id": "structures-algebriques",
      "title": "Structures Algébriques",
      "description": "Exercices sur les structures algébriques (groupes, anneaux, corps)",
      "tags": ["Abstract Algebra", "Group Theory"],
      "difficulty": "advanced",
      "estimatedTime": "55min",
      "category": "math",
      "path": "maths/mpsi-maths/structures-algebriques.md"
    },
    {
      "id": "python-basics",
      "title": "Python Basics",
      "description": "Practice exercises for Python fundamentals including variables, loops, and conditionals",
      "tags": ["Python", "Basics"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "category": "programming",
      "path": "programming/python-basics.md"
    },
    {
      "id": "python-data-structures",
      "title": "Python Data Structures",
      "description": "Exercises focused on lists, dictionaries, sets and tuples in Python",
      "tags": ["Python", "Data Structures"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "programming",
      "path": "programming/python-data-structures.md"
    },
    {
      "id": "algorithms",
      "title": "Algorithm Practice",
      "description": "Practice implementing common algorithms in Python",
      "tags": ["Python", "Algorithms"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "category": "programming",
      "path": "programming/algorithms.md"
    }
  ],
  "categories": [
    {
      "id": "math",
      "title": "Mathematics",
      "description": "Practice with mathematics exercises to strengthen your skills",
      "icon": "fa-calculator",
      "type": "exercise-category",
      "subcategoryCount": 3,
      "exerciseCount": 12,
      "path": "maths"
    },
    {
      "id": "programming",
      "title": "Programming",
      "description": "Practice your coding skills with these programming exercises",
      "icon": "fa-code",
      "type": "exercise-category",
      "subcategoryCount": 3,
      "exerciseCount": 3,
      "path": "programming"
    },
    {
      "id": "physics",
      "title": "Physics",
      "description": "Test your understanding of physical principles with these exercises",
      "icon": "fa-atom",
      "type": "exercise-category",
      "subcategoryCount": 0,
      "exerciseCount": 0,
      "comingSoon": true
    }
  ],
  "featuredExercises": [
    {
      "id": "espaces-vectoriels-applications-lineaires",
      "title": "Espaces Vectoriels et Applications Linéaires",
      "description": "Exercices sur les espaces vectoriels et les applications linéaires",
      "tags": ["Linear Algebra", "Vector Spaces"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "math",
      "path": "maths/mpsi-maths/espaces-vectoriels-applications-lineaires.md"
    },
    {
      "id": "python-data-structures",
      "title": "Python Data Structures",
      "description": "Exercises focused on lists, dictionaries, sets and tuples in Python",
      "tags": ["Python", "Data Structures"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "programming",
      "path": "programming/python-data-structures.md"
    }
  ]
}===== ./static/content/exercises/maths/index.json =====
{
  "title": "Mathematics Exercises",
  "description": "Practice with advanced mathematics exercises for higher education",
  "icon": "fa-square-root-alt",
  "subcategories": [
    {
      "id": "mpsi-maths",
      "title": "MPSI - Mathématiques",
      "description": "Exercices de mathématiques pour la filière MPSI",
      "icon": "fa-calculator",
      "count": 12
    }
  ],
  "exercises": [],
  "topics": [
    {
      "name": "Algebra",
      "count": 5
    },
    {
      "name": "Analysis",
      "count": 3
    },
    {
      "name": "Linear Algebra",
      "count": 3
    },
    {
      "name": "Number Theory",
      "count": 1
    }
  ]
}===== ./static/content/exercises/maths/mpsi-maths/nombres-complexes-trigonometrie.md =====
---
title: "Exercices: Nombres complexes et trigonométrie"
tags: ["mpsi-mathematiques","nombres-complexes","trigonometrie"]
---

# Exercices : Nombres complexes et trigonométrie

## Exercice 3.1 : Vrai – Faux

1. Soit $z\in\mathbb{C}$. On a : $\Re(z^{2})\geq 0$ ou $\Im(z^{2})\geq 0$.  
2. Soient $z_{1},z_{2}\in\mathbb{C}$. Si $z_{1}+z_{2}\in\mathbb{R}$ et $z_{1}z_{2}\in\mathbb{R}$, alors $z_{1}$ et $z_{2}$ sont réels.  
3. Soit $z\in\mathbb{C}$ tel que $|z|=1$. Alors il existe $n\in\mathbb{N}^{*}$ tel que $z$ soit une racine $n$-ième de l'unité.  
4. Soit $z\in\mathbb{C}$. Alors : $e^{z}=-1 \Longrightarrow z=i\pi$.  
5. Faux. Prenez par exemple les racines carrées de $-1-i$ ou $\frac{1-i\sqrt{3}}{2}$.  

## Exercice 3.2 : Résolution d'équations dans $\mathbb{C}$

1. $z^{2}-z+i=0$.  
2. $z^{4}-4(1+i)z^{3}+12i z^{2}+8(1-i)z-5=0$.  
3. $z^{6}+7z^{3}-8=0$.  
4. $\bigl(\frac{z+i}{z-i}\bigr)^{3}-\bigl(\frac{z+i}{z-i}\bigr)^{2}+\frac{z+i}{z-i}-1=0$.  
5. $(z+1)^{n}=(z-1)^{n}$, $n\in\mathbb{N}^{*}$.  
6. $e^{z}=3\sqrt{3}-3i$.  
7. $z^{5}=-\tfrac{1}{2}+i\tfrac{\sqrt{3}}{2}$.  
8. $z^{3}-(5+3i)z^{2}+(7+16i)z+3-21i=0$ (indication : chercher d’abord les racines pures imaginaires).  
9. $z^{3}=-25\overline{z^{7}}$.  
10. $z^{n}=-1$, $n\in\mathbb{N}^{*}$.  ===== ./static/content/exercises/maths/mpsi-maths/index.json =====
{
  "title": "MPSI Mathematics Exercises",
  "description": "Collection of mathematics exercises for MPSI students",
  "exercises": [
    {
      "id": "arithmetique",
      "title": "Arithmétique",
      "description": "Exercices sur les nombres premiers, PGCD, PPCM et congruences",
      "tags": ["Algebra", "Number Theory"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "math",
      "path": "arithmetique.md"
    },
    {
      "id": "calculs-algebriques",
      "title": "Calculs Algébriques",
      "description": "Exercices sur les calculs et les manipulations algébriques",
      "tags": ["Algebra", "Calculations"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "category": "math",
      "path": "calculs-algebriques.md"
    },
    {
      "id": "equations-differentielles",
      "title": "Équations Différentielles",
      "description": "Exercices sur les équations différentielles linéaires",
      "tags": ["Differential Equations", "Analysis"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "category": "math",
      "path": "equations-differentielles.md"
    },
    {
      "id": "espaces-prehilbertiens",
      "title": "Espaces Préhilbertiens",
      "description": "Exercices sur les espaces préhilbertiens et les produits scalaires",
      "tags": ["Linear Algebra", "Inner Product Spaces"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "category": "math",
      "path": "espaces-prehilbertiens.md"
    },
    {
      "id": "espaces-vectoriels-applications-lineaires",
      "title": "Espaces Vectoriels et Applications Linéaires",
      "description": "Exercices sur les espaces vectoriels et les applications linéaires",
      "tags": ["Linear Algebra", "Vector Spaces"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "category": "math",
      "path": "espaces-vectoriels-applications-lineaires.md"
    },
    {
      "id": "groupes-symetriques-et-determinants",
      "title": "Groupes Symétriques et Déterminants",
      "description": "Exercices sur les groupes de permutations et le calcul de déterminants",
      "tags": ["Linear Algebra", "Group Theory"],
      "difficulty": "advanced",
      "estimatedTime": "50min",
      "category": "math",
      "path": "groupes-symetriques-et-determinants.md"
    },
    {
      "id": "integration-espaces-produits",
      "title": "Intégration et Espaces Produits",
      "description": "Exercices sur l'intégration et les espaces produits",
      "tags": ["Analysis", "Integration"],
      "difficulty": "advanced",
      "estimatedTime": "55min",
      "category": "math",
      "path": "integration-espaces-produits.md"
    },
    {
      "id": "nombres-complexes-trigonometrie",
      "title": "Nombres Complexes et Trigonométrie",
      "description": "Exercices sur les nombres complexes et les fonctions trigonométriques",
      "tags": ["Complex Numbers", "Trigonometry"],
      "difficulty": "intermediate",
      "estimatedTime": "40min",
      "category": "math",
      "path": "nombres-complexes-trigonometrie.md"
    },
    {
      "id": "polynomes",
      "title": "Polynômes",
      "description": "Exercices sur les polynômes et leurs propriétés",
      "tags": ["Algebra", "Polynomials"],
      "difficulty": "intermediate",
      "estimatedTime": "35min",
      "category": "math",
      "path": "polynomes.md"
    },
    {
      "id": "raisonnement-et-vocabulaire-ensembliste",
      "title": "Raisonnement et Vocabulaire Ensembliste",
      "description": "Exercices sur la logique mathématique et la théorie des ensembles",
      "tags": ["Set Theory", "Logic"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "category": "math",
      "path": "raisonnement-et-vocabulaire-ensembliste.md"
    },
    {
      "id": "series-numeriques",
      "title": "Séries Numériques",
      "description": "Exercices sur les séries et leurs propriétés de convergence",
      "tags": ["Analysis", "Series"],
      "difficulty": "advanced",
      "estimatedTime": "50min",
      "category": "math",
      "path": "series-numeriques.md"
    },
    {
      "id": "structures-algebriques",
      "title": "Structures Algébriques",
      "description": "Exercices sur les structures algébriques (groupes, anneaux, corps)",
      "tags": ["Abstract Algebra", "Group Theory"],
      "difficulty": "advanced",
      "estimatedTime": "55min",
      "category": "math",
      "path": "structures-algebriques.md"
    }
  ],
  "topics": [
    {
      "name": "Algebra",
      "count": 5
    },
    {
      "name": "Analysis",
      "count": 3
    },
    {
      "name": "Linear Algebra",
      "count": 3
    },
    {
      "name": "Set Theory",
      "count": 1
    },
    {
      "name": "Number Theory",
      "count": 1
    }
  ]
}
===== ./static/content/exercises/maths/mpsi-maths/raisonnement-et-vocabulaire-ensembliste.md =====
---
title: "Exercices: Raisonnement et vocabulaire ensembliste"
tags: ["mpsi-mathematiques","logique-raisonnement","ensembles-fonctions-relations"]
---

# Exercices : Raisonnement et vocabulaire ensembliste

## Exercice 1.1 : Vrai – Faux

1. Si $A$ et $B$ sont deux parties d'un ensemble $E$, alors : $\mathcal{P}(A \cap B)=\mathcal{P}(A) \cap \mathcal{P}(B)$.  
2. Si $A$ et $B$ sont deux parties d'un ensemble $E$, alors : $\mathcal{P}(A \cup B)=\mathcal{P}(A) \cup \mathcal{P}(B)$.  
3. Il existe deux applications $f,g:\mathbb{N}\to\mathbb{N}$ telles que $g\circ f=\mathrm{Id}_{\mathbb{N}}$ et $f\circ g\neq\mathrm{Id}_{\mathbb{N}}$.  
4. L'application $f: \mathbb{R}\to\mathbb{R},\;x\mapsto a\sin x + b\cos x$ est surjective.  
5. Si $f: E\to F$ est une bijection et $B\subset F$, alors l'image réciproque $f^{-1}(B)=\{x\in E: f(x)\in B\}$ est égale à l'image directe de $B$ par $f^{-1}$: $f^{-1}(B)=\{f^{-1}(y): y\in B\}$.  

## Exercice 1.2

Soit $\mathcal{F}$ l'ensemble des applications $\mathbb{R}\to\mathbb{R}$.

1. On considère :  
   - $(P):\forall f\in\mathcal{F},\exists x\in\mathbb{R}:f(x)=0$,  
   - $(Q):\exists x\in\mathbb{R},\forall f\in\mathcal{F}:f(x)=0$.  
   Montrer que $(P)\Rightarrow(Q)$ et $(Q)\Rightarrow(P)$ sont-ils vrais ?  

2. On considère :  
   - $(P'):\forall x\in\mathbb{N},\exists y\in\mathbb{R}:y\le x$,  
   - $(Q'):\exists y\in\mathbb{R},\forall x\in\mathbb{N}:y\le x$.  
   Montrer que $(P')$ et $(Q')$ sont vraies mais non équivalentes.  

## Exercice 1.3

Montrer que pour tout $n\in\mathbb{N}^*$ :  
$$
\frac{1}{\sqrt{n+1}} < 2(\sqrt{n+1}-\sqrt{n}) < \frac{1}{\sqrt{n}}.
$$

## Exercice 1.4

Pour $x,y\in\mathbb{R}$, montrer :  
$$
\frac{|x+y|}{1+|x+y|} \le \frac{|x|}{1+|x|} + \frac{|y|}{1+|y|}.
$$

## Exercice 1.5

Pour $0<m<n$ entiers, montrer :  
$$
\sum_{k=m}^{n-1} \frac{1}{\sqrt{k}+\sqrt{k+1}} = \sqrt{n}-\sqrt{m}.
$$===== ./static/content/exercises/maths/mpsi-maths/polynomes.md =====
---
title: "Exercices: Polynômes"
tags: ["mpsi-mathematiques","polynomes"]
---

# Exercices : Polynômes

## Exercice 13.1 : Polynômes irréductibles

1. **Polynôme cyclotomique** : Montrer que le polynôme cyclotomique $\Phi_n(x) = \prod_{1 \leq k \leq n,\ \gcd(k,n)=1} (x - e^{2\pi i k/n})$ est irréductible dans $\mathbb{Q}[x]$ pour tout $n \in \mathbb{N}^*$. 
2. **Polynôme de Chebyshev** : Montrer que le polynôme de Chebyshev $T_n(x) = \cos(n \arccos x)$ est irréductible dans $\mathbb{R}[x]$ pour tout $n \in \mathbb{N}^*$. 
3. **Polynôme de Legendre** : Montrer que le polynôme de Legendre $P_n(x) = \frac{1}{2^n n!} \frac{d^n}{dx^n} (x^2-1)^n$ est irréductible dans $\mathbb{R}[x]$ pour tout $n \in \mathbb{N}^*$. 
4. **Polynôme de Laguerre** : Montrer que le polynôme de Laguerre $L_n(x) = \frac{e^x}{n!} \frac{d^n}{dx^n}(x^n e^{-x})$ est irréductible dans $\mathbb{R}[x]$ pour tout $n \in \mathbb{N}^*$. 
5. **Polynôme de Hermite** : Montrer que le polynôme de Hermite $H_n(x) = (-1)^n e^{x^2} \frac{d^n}{dx^n} e^{-x^2}$ est irréductible dans $\mathbb{R}[x]$ pour tout $n \in \mathbb{N}^*$. 
6. **Exercice difficile** : Montrer que pour tout $n \geq 5$, il existe un polynôme irréductible de degré $n$ dans $\mathbb{Q}[x]$ qui n'est pas un polynôme cyclotomique.

## Exercice 13.2 : Racines multiples

1. **Racines doubles** : Montrer que le polynôme $P(x) = x^4 - 4x^2 + 4$ a des racines doubles et les trouver explicitement.
2. **Racines triples** : Montrer que le polynôme $P(x) = x^5 - 5x^3 + 4x$ a une racine triple et la trouver.
3. **Racines multiples et dérivée** : Montrer que si $P(x)$ a une racine multiple $r$, alors $P'(r) = 0$.
4. **Polynôme avec racines multiples** : Trouver un polynôme de degré $6$ ayant les racines $1$ (multiplicité $2$), $2$ (multiplicité $1$), $3$ (multiplicité $3$).
5. **Polynôme de Wilkinson** : Montrer que le polynôme de Wilkinson $P(x) = \prod_{i=1}^n (x-i)$ a des racines multiples pour certaines valeurs de $n$ (donner un exemple explicite).
6. **Exercice difficile** : Soit $Q(x) = x^6 - 3x^5 + 3x^4 - x^3$. Montrer que $Q(x)$ a une racine d'ordre au moins $3$ et déterminer toutes ses racines et leurs multiplicités.

## Exercice 13.3 : Polynômes symétriques

1. **Fonctions symétriques élémentaires** : Exprimer les fonctions symétriques élémentaires $S_1 = x_1 + x_2 + x_3$, $S_2 = x_1x_2 + x_1x_3 + x_2x_3$, $S_3 = x_1x_2x_3$ en termes des racines du polynôme $P(x) = x^3 + a x^2 + b x + c$.
2. **Polynôme symétrique** : Montrer que le polynôme $P(x_1, x_2, x_3) = x_1^2 + x_2^2 + x_3^2$ est symétrique.
3. **Polynôme symétrique et discriminant** : Montrer que le discriminant $\Delta$ d'un polynôme $P(x) = x^3 + a x^2 + b x + c$ peut s'exprimer en fonction des $S_1, S_2, S_3$.
4. **Polynôme symétrique et racines** : Montrer que si $P(x_1, x_2, x_3)$ est un polynôme symétrique, alors $P(x_1, x_2, x_3) = P(x_2, x_1, x_3)$.
5. **Polynôme symétrique et permutation** : Montrer que si $P(x_1, x_2, x_3)$ est un polynôme symétrique, alors $P(x_1, x_2, x_3) = P(x_3, x_2, x_1)$.
6. **Exercice difficile** : Montrer que tout polynôme symétrique en $n$ variables à coefficients dans $\mathbb{Q}$ peut s'exprimer comme polynôme en les fonctions symétriques élémentaires.

## Exercice 13.4 : Polynômes orthogonaux

1. **Polynômes de Legendre** : Montrer que les polynômes de Legendre $P_n(x)$ sont orthogonaux sur $[-1,1]$ avec le produit scalaire $\langle f, g \rangle = \int_{-1}^1 f(x)g(x)\,dx$.
2. **Polynômes de Chebyshev** : Montrer que les polynômes de Chebyshev $T_n(x)$ sont orthogonaux sur $[-1,1]$ avec le produit scalaire $\langle f, g \rangle = \int_{-1}^1 \frac{f(x)g(x)}{\sqrt{1-x^2}}\,dx$.
3. **Polynômes de Hermite** : Montrer que les polynômes de Hermite $H_n(x)$ sont orthogonaux sur $\mathbb{R}$ avec le produit scalaire $\langle f, g \rangle = \int_{-\infty}^{+\infty} f(x)g(x)e^{-x^2}\,dx$.
4. **Polynômes de Laguerre** : Montrer que les polynômes de Laguerre $L_n(x)$ sont orthogonaux sur $[0, +\infty[$ avec le produit scalaire $\langle f, g \rangle = \int_0^{+\infty} f(x)g(x)e^{-x}\,dx$.
5. **Polynômes de Jacobi** : Montrer que les polynômes de Jacobi $P_n^{(\alpha,\beta)}(x)$ sont orthogonaux sur $[-1,1]$ avec le produit scalaire $\langle f, g \rangle = \int_{-1}^1 f(x)g(x)(1-x)^{\alpha}(1+x)^{\beta}\,dx$.
6. **Exercice difficile** : Montrer que si $\{P_n(x)\}$ est une famille de polynômes orthogonaux sur $[a,b]$ pour un certain produit scalaire, alors il existe une mesure positive $\mu$ sur $[a,b]$ telle que $\langle f, g \rangle = \int_a^b f(x)g(x) d\mu(x)$.

## Exercice 13.5 : Polynômes et fractions rationnelles

1. **Décomposition en éléments simples** : Décomposer la fraction rationnelle $\frac{1}{x^3-6x^2+11x-6}$ en éléments simples.
2. **Décomposition en fractions partielles** : Décomposer la fraction rationnelle $\frac{x^2+3x+2}{x^3-x^2-x+1}$ en fractions partielles.
3. **Décomposition en fractions partielles complexes** : Décomposer la fraction rationnelle $\frac{1}{x^4+4}$ en fractions partielles complexes.
4. **Décomposition en fractions partielles réelles** : Décomposer la fraction rationnelle $\frac{x^2+1}{x^4+1}$ en fractions partielles réelles.
5. **Décomposition en fractions partielles avec racines multiples** : Décomposer la fraction rationnelle $\frac{1}{(x-1)^3(x+2)}$ en fractions partielles.
6. **Exercice difficile** : Décomposer la fraction rationnelle $\frac{x^5+2x^3+1}{(x^2+1)^3}$ en éléments simples sur $\mathbb{R}$ et sur $\mathbb{C}$.
===== ./static/content/exercises/maths/mpsi-maths/espaces-vectoriels-applications-lineaires.md =====
---
title: "Exercices: Espaces vectoriels. Applications linéaires"
tags: ["mpsi-mathematiques","espaces-vectoriels","applications-lineaires"]
---

# Exercices : Espaces vectoriels. Applications linéaires

## Exercice 15.1 : Bases et dimension

1. **Base de $\mathbb{R}^3$** : Montrer que l'ensemble $\{(1,1,0), (1,0,1), (0,1,1)\}$ est une base de $\mathbb{R}^3$.
2. **Base de $\mathbb{R}^4$** : Montrer que l'ensemble $\{(1,1,1,0), (1,1,0,1), (1,0,1,1), (0,1,1,1)\}$ est une base de $\mathbb{R}^4$.
3. **Base de l'espace des polynômes** : Montrer que l'ensemble $\{1, x, x^2, \ldots, x^n\}$ est une base de l'espace des polynômes de degré inférieur ou égal à $n$.
4. **Base de l'espace des matrices** : Montrer que l'ensemble $\{E_{ij}\}_{1 \leq i,j \leq n}$, où $E_{ij}$ est la matrice avec un $1$ en position $(i,j)$ et $0$ ailleurs, est une base de l'espace des matrices carrées d'ordre $n$.
5. **Base de l'espace des fonctions continues** : Montrer que l'ensemble $\{1, x, x^2, \ldots\}$ est une base de l'espace des fonctions polynômiales sur $\mathbb{R}$.
6. **Exercice difficile** : Montrer que tout sous-espace vectoriel de dimension finie de $\mathbb{R}^n$ admet une base orthonormée pour le produit scalaire usuel.

## Exercice 15.2 : Applications linéaires

1. **Noyau et image** : Trouver le noyau et l'image de l'application linéaire $T : \mathbb{R}^3 \to \mathbb{R}^2$ définie par $T(x, y, z) = (x+y, y+z)$.
2. **Rang et nullité** : Montrer que pour toute application linéaire $T : V \to W$, $\dim(V) = \dim(\ker(T)) + \dim(\mathrm{im}(T))$.
3. **Injectivité et surjectivité** : Montrer que l'application linéaire $T : \mathbb{R}^3 \to \mathbb{R}^3$ définie par $T(x, y, z) = (x, y, 0)$ est injective mais non surjective.
4. **Bijectivité** : Montrer que l'application linéaire $T : \mathbb{R}^3 \to \mathbb{R}^3$ définie par $T(x, y, z) = (x, y, z)$ est bijective.
5. **Endomorphisme** : Montrer que l'application linéaire $T : \mathbb{R}^3 \to \mathbb{R}^3$ définie par $T(x, y, z) = (x, y, x+y)$ est un endomorphisme.
6. **Exercice difficile** : Soit $T : \mathbb{R}^n \to \mathbb{R}^n$ une application linéaire diagonalisable. Montrer que $T$ est diagonalisable si et seulement si il existe une base de $\mathbb{R}^n$ formée de vecteurs propres de $T$.

## Exercice 15.3 : Matrices

1. **Déterminant** : Calculer le déterminant de la matrice $A = \begin{pmatrix}1 & 2 & 3 \\ 0 & 1 & 4 \\ 0 & 0 & 1\end{pmatrix}$.
2. **Inverse d'une matrice** : Trouver l'inverse de la matrice $A = \begin{pmatrix}1 & 2 \\ 3 & 4\end{pmatrix}$.
3. **Rang d'une matrice** : Trouver le rang de la matrice $A = \begin{pmatrix}1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9\end{pmatrix}$.
4. **Trace d'une matrice** : Calculer la trace de la matrice $A = \begin{pmatrix}1 & 2 & 3 \\ 0 & 1 & 4 \\ 0 & 0 & 1\end{pmatrix}$.
5. **Diagonalisation** : Diagonaliser la matrice $A = \begin{pmatrix}1 & 2 \\ 3 & 4\end{pmatrix}$.
6. **Exercice difficile** : Soit $A \in M_n(\mathbb{R})$ telle que $A^2 = I_n$. Montrer que $A$ est diagonalisable et déterminer ses valeurs propres possibles.

## Exercice 15.4 : Formes bilinéaires et quadratiques

1. **Forme bilinéaire symétrique** : Montrer que la forme bilinéaire $B(x, y) = x^T A y$ est symétrique si et seulement si $A$ est symétrique.
2. **Forme quadratique** : Montrer que la forme quadratique $Q(x) = x^T A x$ est définie positive si et seulement si $A$ est définie positive.
3. **Réduction d'une forme quadratique** : Réduire la forme quadratique $Q(x, y) = x^2 + 2xy + y^2$ en une somme de carrés.
4. **Signature d'une forme quadratique** : Trouver la signature de la forme quadratique $Q(x, y, z) = x^2 + y^2 - z^2$.
5. **Inertie d'une forme quadratique** : Trouver l'inertie de la forme quadratique $Q(x, y, z) = x^2 + y^2 + z^2$.
6. **Exercice difficile** : Montrer que toute forme quadratique réelle de rang $n$ est équivalente à une forme diagonale $Q(x) = \sum_{i=1}^n \lambda_i x_i^2$.

## Exercice 15.5 : Espaces euclidiens

1. **Produit scalaire** : Montrer que le produit scalaire $\langle x, y \rangle = x^T A y$ est un produit scalaire si et seulement si $A$ est définie positive.
2. **Norme euclidienne** : Montrer que la norme euclidienne $\|x\| = \sqrt{x^T A x}$ est une norme si et seulement si $A$ est définie positive.
3. **Orthogonalité** : Montrer que deux vecteurs $x$ et $y$ sont orthogonaux si et seulement si $\langle x, y \rangle = 0$.
4. **Base orthonormée** : Montrer que l'ensemble $\{(1,0,0), (0,1,0), (0,0,1)\}$ est une base orthonormée de $\mathbb{R}^3$.
5. **Projection orthogonale** : Trouver la projection orthogonale de $x = (1,2,3)$ sur le sous-espace engendré par $y = (1,0,0)$ et $z = (0,1,0)$.
6. **Exercice difficile** : Montrer que toute application linéaire orthogonale de $\mathbb{R}^n$ est diagonalisable sur $\mathbb{C}$ et que ses valeurs propres sont de module $1$.
===== ./static/content/exercises/maths/mpsi-maths/series-numeriques.md =====
---
title: "Exercices: Séries numériques"
tags: ["mpsi-mathematiques","series-numeriques"]
---

# Exercices : Séries numériques

## Exercice 10.1 : Séries à termes positifs

1. **Convergence des séries de Riemann** : Montrer que la série $\sum_{n=1}^{\infty} \frac{1}{n^p}$ converge si et seulement si $p>1$.
2. **Comparaison de séries** : Montrer que si $\sum a_n$ et $\sum b_n$ sont deux séries à termes positifs telles que $a_n \leq b_n$ pour tout $n \geq N$, alors la convergence de $\sum b_n$ implique celle de $\sum a_n$.
3. **Série harmonique alternée** : Montrer que la série $\sum_{n=1}^{\infty} \frac{(-1)^{n+1}}{n}$ converge et trouver sa somme.
4. **Série de Bertrand** : Montrer que la série $\sum_{n=2}^{\infty} \frac{1}{n \log n}$ diverge.
5. **Série de Dirichlet** : Montrer que la série $\sum_{n=1}^{\infty} \frac{1}{n^s}$ converge pour $s>1$ et diverge pour $s\leq 1$.

## Exercice 10.2 : Séries absolument convergentes

1. **Critère de Cauchy** : Montrer que si $\sum |a_n|$ converge, alors $\sum a_n$ converge.
2. **Réarrangement des termes** : Montrer que si $\sum a_n$ est absolument convergente, alors toute permutation des termes de la série converge vers la même somme.
3. **Série de Fourier** : Montrer que la série $\sum_{n=1}^{\infty} \frac{\sin(nx)}{n}$ converge pour tout $x \in \mathbb{R} \setminus 2\pi\mathbb{Z}$.
4. **Série de Taylor** : Montrer que la série $\sum_{n=0}^{\infty} \frac{x^n}{n!}$ converge pour tout $x \in \mathbb{R}$ et que sa somme est $e^x$.
5. **Série de Laurent** : Montrer que la série $\sum_{n=-\infty}^{\infty} a_n z^n$ converge pour $z \in \mathbb{C}$ dans un anneau $r < |z| < R$.

## Exercice 10.3 : Séries semi-convergentes

1. **Série de Grandi** : Montrer que la série $1-1+1-1+\cdots$ diverge mais peut être sommée par la méthode de Césaro à $\frac{1}{2}$.
2. **Série de Leibniz** : Montrer que la série $\sum_{n=0}^{\infty} \frac{(-1)^n}{2n+1}$ converge vers $\frac{\pi}{4}$.
3. **Série de Dirichlet (alternée)** : Montrer que la série $\sum_{n=1}^{\infty} \frac{(-1)^n}{n^s}$ converge pour $s>0$.
4. **Série de Borel** : Montrer que la série $\sum_{n=0}^{\infty} \frac{x^n}{n!}$ converge pour tout $x \in \mathbb{C}$ et que sa somme est $e^x$.
5. **Série de Euler-Maclaurin** : Montrer que la série $\sum_{n=1}^{\infty} \frac{B_{2n}}{(2n)!} x^{2n-1}$ converge pour $|x|<2\pi$, où $B_{2n}$ sont les nombres de Bernoulli.

## Exercice 10.4 : Séries de puissances

1. **Rayon de convergence** : Trouver le rayon de convergence de la série $\sum_{n=0}^{\infty} n! x^n$.
2. **Série géométrique** : Montrer que la série $\sum_{n=0}^{\infty} x^n$ converge pour $|x|<1$ et que sa somme est $\frac{1}{1-x}$.
3. **Série exponentielle** : Montrer que la série $\sum_{n=0}^{\infty} \frac{x^n}{n!}$ converge pour tout $x \in \mathbb{R}$ et que sa somme est $e^x$.
4. **Série binomiale** : Montrer que la série $\sum_{n=0}^{\infty} \binom{x}{n}$ converge pour $|x|<1$ et que sa somme est $(1+x)^x$.
5. **Série de Lagrange** : Montrer que la série $\sum_{n=0}^{\infty} \frac{x^n}{n^2}$ converge pour $|x|<1$ et que sa somme est $\frac{\pi^2}{6}$.

## Exercice 10.5 : Séries de Fourier

1. **Série de Fourier d'une fonction paire** : Montrer que la série de Fourier de $f(x)=\cos(x)$ sur $[-\pi,\pi]$ est $\sum_{n=0}^{\infty} \frac{(-1)^n}{(2n)!} x^{2n}$.
2. **Série de Fourier d'une fonction impaire** : Montrer que la série de Fourier de $f(x)=\sin(x)$ sur $[-\pi,\pi]$ est $\sum_{n=0}^{\infty} \frac{(-1)^n}{(2n+1)!} x^{2n+1}$.
3. **Série de Fourier d'une fonction périodique** : Montrer que la série de Fourier de $f(x)=e^{ix}$ sur $[-\pi,\pi]$ est $\sum_{n=-\infty}^{\infty} \delta_{n,1} e^{inx}$, où $\delta_{n,1}$ est le symbole de Kronecker.
4. **Série de Fourier d'une fonction continue** : Montrer que la série de Fourier de $f(x)=x$ sur $[-\pi,\pi]$ est $\sum_{n=1}^{\infty} \frac{2(-1)^{n+1}}{n} \sin(nx)$.
5. **Série de Fourier d'une fonction discontinue** : Montrer que la série de Fourier de $f(x)=\mathrm{sgn}(x)$ sur $[-\pi,\pi]$ est $\sum_{n=0}^{\infty} \frac{4}{(2n+1)\pi} \sin((2n+1)x)$.
===== ./static/content/exercises/maths/mpsi-maths/calculs-algebriques.md =====
---
title: "Exercices: Calculs algébriques"
tags: ["mpsi-mathematiques","sommations-produits"]
---

# Exercices : Calculs algébriques

## Exercice 2.1 : Sommes simples

1. Montrer que pour tout $n\in\mathbb{N}^*$ :  
   - $1+2+\cdots+n=\frac{n(n+1)}{2}$  
   - $1^2+2^2+\cdots+n^2=\frac{n(n+1)(2n+1)}{6}$  
   - $1^3+2^3+\cdots+n^3=\bigl(\frac{n(n+1)}{2}\bigr)^2$  
2. En déduire la valeur de $S=\sum_{k=1}^n k^4$.

## Exercice 2.2

Calculer les sommes suivantes :

1. $\sum_{1\le i,j\le n} i\,j$
2. $\sum_{1\le i\le j\le n} i\,j$
3. $\sum_{1\le i,j\le n} (i+j)$

## Exercice 2.3

Calculer les sommes partielles :

1. $\sum_{0\le 2k\le n} \binom{n}{2k}$
2. $\sum_{0\le 2k+1\le n} \binom{n}{2k+1}$

## Exercice 2.4

Montrer que, pour $m\le n$ dans $\mathbb{N}^*$ :  
$$
2(\sqrt{n+1}-\sqrt{m}) < \sum_{k=m}^n \frac{1}{\sqrt{k}} < 2(\sqrt{n}-\sqrt{m-1}).
$$

## Exercice 2.5

Soient $n,k\in\mathbb{N}^*$ :  
1. $\displaystyle\sum_{k=0}^n \frac{k}{(k+1)!}$.  
2. $\displaystyle\sum_{k=1}^n \frac{k+1}{(k-1)!+k!+(k+1)!}$.  
3. Application : pour $n\ge3$, montrer que  
$$
1 = \sum_{i=1}^n \frac{1}{m_i},
$$  
où $m_1,\dots,m_n$ sont des diviseurs distincts de $n!$.  En déduire que $n!$ s'écrit comme somme de $n$ de ses diviseurs distincts.
===== ./static/content/exercises/maths/mpsi-maths/structures-algebriques.md =====
---
title: "Exercices: Structures algébriques usuelles"
tags: ["mpsi-mathematiques","structures-algebriques"]
---

# Exercices : Structures algébriques usuelles

## Exercice 14.1 : Groupes

1. **Groupe cyclique** : Montrer que le groupe $(\mathbb{Z}_n, +)$ est cyclique pour tout $n \in \mathbb{N}^*$.
2. **Groupe diédral** : Montrer que le groupe diédral $D_n$ est engendré par deux éléments $r$ et $s$ tels que $r^n = s^2 = (rs)^2 = e$.
3. **Groupe symétrique** : Montrer que le groupe symétrique $S_n$ est engendré par les transpositions $(1,2), (1,3), \ldots, (1,n)$.
4. **Groupe alterné** : Montrer que le groupe alterné $A_n$ est engendré par les cycles de longueur $3$ pour $n \geq 3$.
5. **Groupe de Klein** : Montrer que le groupe de Klein $\mathbb{Z}_2 \times \mathbb{Z}_2$ est isomorphe au groupe des symétries d'un rectangle.
6. **Exercice difficile** : Montrer que tout groupe d'ordre $p^2$ ($p$ premier) est abélien.

## Exercice 14.2 : Anneaux

1. **Anneau commutatif** : Montrer que l'anneau $(\mathbb{Z}[i], +, \times)$ est un anneau commutatif unitaire.
2. **Anneau de polynômes** : Montrer que l'anneau $(\mathbb{R}[x], +, \times)$ est un anneau commutatif unitaire.
3. **Anneau de matrices** : Montrer que l'anneau $(M_n(\mathbb{R}), +, \times)$ est un anneau non commutatif unitaire.
4. **Anneau de fonctions continues** : Montrer que l'anneau $(C([0,1]), +, \times)$ est un anneau commutatif unitaire.
5. **Anneau de séries formelles** : Montrer que l'anneau $(\mathbb{R}[[x]], +, \times)$ est un anneau commutatif unitaire.
6. **Exercice difficile** : Montrer que tout anneau fini sans diviseur de zéro est un corps.

## Exercice 14.3 : Corps

1. **Corps des nombres algébriques** : Montrer que l'ensemble des nombres algébriques forme un corps.
2. **Corps des nombres constructibles** : Montrer que l'ensemble des nombres constructibles forme un corps.
3. **Corps des fractions rationnelles** : Montrer que l'ensemble des fractions rationnelles $\mathbb{R}(x)$ forme un corps.
4. **Corps des nombres réels algébriques** : Montrer que l'ensemble des nombres réels algébriques forme un corps.
5. **Corps des nombres complexes algébriques** : Montrer que l'ensemble des nombres complexes algébriques forme un corps.
6. **Exercice difficile** : Montrer que tout corps fini est isomorphe à $\mathbb{F}_{p^n}$ pour un certain $p$ premier et $n \in \mathbb{N}^*$.

## Exercice 14.4 : Morphismes

1. **Morphism de groupes** : Montrer que l'application $f: \mathbb{Z} \to \mathbb{Z}_n$ définie par $f(k) = k \mod n$ est un morphisme de groupes.
2. **Morphism d'anneaux** : Montrer que l'application $f: \mathbb{Z} \to \mathbb{Z}_n$ définie par $f(k) = k \mod n$ est un morphisme d'anneaux.
3. **Morphism de corps** : Montrer que l'application $f: \mathbb{Q} \to \mathbb{R}$ définie par $f(x) = x$ est un morphisme de corps.
4. **Morphism de groupes cycliques** : Montrer que l'application $f: \mathbb{Z}_n \to \mathbb{Z}_m$ définie par $f(k) = k \mod m$ est un morphisme de groupes si et seulement si $m$ divise $n$.
5. **Morphism de groupes symétriques** : Montrer que l'application $f: S_n \to S_m$ définie par $f(\sigma) = \sigma$ est un morphisme de groupes si et seulement si $m = n$.
6. **Exercice difficile** : Montrer que tout morphisme d'anneaux intègre un morphisme de groupes abéliens.

## Exercice 14.5 : Idéaux et quotients

1. **Idéal principal** : Montrer que l'idéal $(n)$ de $\mathbb{Z}$ est principal pour tout $n \in \mathbb{Z}$.
2. **Idéal maximal** : Montrer que l'idéal $(p)$ de $\mathbb{Z}$ est maximal si et seulement si $p$ est premier.
3. **Quotient d'un anneau** : Montrer que l'anneau quotient $\mathbb{Z}/(n)$ est un corps si et seulement si $n$ est premier.
4. **Quotient d'un groupe** : Montrer que le groupe quotient $\mathbb{Z}/n\mathbb{Z}$ est cyclique pour tout $n \in \mathbb{N}^*$.
5. **Quotient d'un corps** : Montrer que le corps quotient $\mathbb{Q}[x]/(P(x))$ est un corps si et seulement si $P(x)$ est irréductible dans $\mathbb{Q}[x]$.
6. **Exercice difficile** : Montrer que tout idéal maximal d'un anneau commutatif unitaire est premier.
===== ./static/content/exercises/maths/mpsi-maths/espaces-prehilbertiens.md =====
---
title: "Exercices: Espaces préhilbertiens réels"
tags: ["mpsi-mathematiques","espaces-prehilbertiens"]
---

# Exercices : Espaces préhilbertiens réels

## Exercice 9.1 : Produit scalaire

1. Montrer que le produit scalaire défini par :
   $$
   \langle (x_1, x_2), (y_1, y_2) \rangle = x_1y_1 + x_2y_2
   $$
   est un produit scalaire sur $\mathbb{R}^2$.
2. Montrer que le produit scalaire défini par :
   $$
   \langle f, g \rangle = \int_0^1 f(x)g(x)\,dx
   $$
   est un produit scalaire sur l'espace des fonctions continues de $[0,1]$ dans $\mathbb{R}$.
3. Montrer que le produit scalaire défini par :
   $$
   \langle A, B \rangle = \mathrm{tr}(A^T B)
   $$
   est un produit scalaire sur l'espace des matrices carrées d'ordre $n$ à coefficients réels.
4. Montrer que le produit scalaire défini par :
   $$
   \langle p, q \rangle = \sum_{k=0}^n p^{(k)}(0)q^{(k)}(0)
   $$
   est un produit scalaire sur l'espace des polynômes de degré inférieur ou égal à $n$.
5. Montrer que le produit scalaire défini par :
   $$
   \langle f, g \rangle = \int_a^b f(x)g(x)e^{-x^2}\,dx
   $$
   est un produit scalaire sur l'espace des fonctions continues de $[a,b]$ dans $\mathbb{R}$.

## Exercice 9.2 : Orthogonalité

1. Montrer que les vecteurs $(1,1,0)$ et $(1,0,1)$ sont orthogonaux dans $\mathbb{R}^3$ muni du produit scalaire usuel.
2. Montrer que les fonctions $f(x)=\sin(x)$ et $g(x)=\cos(x)$ sont orthogonales dans l'espace des fonctions continues de $[0,2\pi]$ dans $\mathbb{R}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_0^{2\pi} f(x)g(x)\,dx
   $$
3. Montrer que les polynômes $p(x)=x^2-2x+1$ et $q(x)=x^2+2x+1$ sont orthogonaux dans l'espace des polynômes de degré inférieur ou égal à $2$ muni du produit scalaire :
   $$
   \langle p, q \rangle = \int_{-1}^1 p(x)q(x)\,dx
   $$
4. Montrer que les matrices $A=\begin{pmatrix}1&2\\0&1\end{pmatrix}$ et $B=\begin{pmatrix}1&0\\2&1\end{pmatrix}$ sont orthogonales dans l'espace des matrices carrées d'ordre $2$ à coefficients réels muni du produit scalaire :
   $$
   \langle A, B \rangle = \mathrm{tr}(A^T B)
   $$
5. Montrer que les fonctions $f(x)=e^x$ et $g(x)=e^{-x}$ sont orthogonales dans l'espace des fonctions continues de $\mathbb{R}$ dans $\mathbb{R}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_{-\infty}^{+\infty} f(x)g(x)e^{-x^2}\,dx
   $$

## Exercice 9.3 : Espaces euclidiens

1. Montrer que l'espace $\mathbb{R}^3$ muni du produit scalaire usuel est un espace euclidien.
2. Montrer que l'espace des fonctions continues de $[0,1]$ dans $\mathbb{R}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_0^1 f(x)g(x)\,dx
   $$
   est un espace euclidien.
3. Montrer que l'espace des matrices carrées d'ordre $n$ à coefficients réels muni du produit scalaire :
   $$
   \langle A, B \rangle = \mathrm{tr}(A^T B)
   $$
   est un espace euclidien.
4. Montrer que l'espace des polynômes de degré inférieur ou égal à $n$ muni du produit scalaire :
   $$
   \langle p, q \rangle = \sum_{k=0}^n p^{(k)}(0)q^{(k)}(0)
   $$
   est un espace euclidien.
5. Montrer que l'espace des fonctions continues de $\mathbb{R}$ dans $\mathbb{R}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_{-\infty}^{+\infty} f(x)g(x)e^{-x^2}\,dx
   $$
   est un espace euclidien.

## Exercice 9.4 : Projecteurs et symétries orthogonaux

1. Montrer que l'application $P:\mathbb{R}^3\to\mathbb{R}^3$ définie par $P(x,y,z)=(x,y,0)$ est un projecteur orthogonal.
2. Montrer que l'application $S:\mathbb{R}^3\to\mathbb{R}^3$ définie par $S(x,y,z)=(x,0,z)$ est une symétrie orthogonale.
3. Montrer que l'application $P:C[0,1]\to C[0,1]$ définie par $P(f)=f$ est un projecteur orthogonal, où $C[0,1]$ est l'espace des fonctions continues de $[0,1]$ dans $\mathbb{C}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_0^1 f(x)\overline{g(x)}\,dx
   $$
4. Montrer que l'application $S:C[0,1]\to C[0,1]$ définie par $S(f)(x)=f(1-x)$ est une symétrie orthogonale, où $C[0,1]$ est l'espace des fonctions continues de $[0,1]$ dans $\mathbb{C}$ muni du produit scalaire :
   $$
   \langle f, g \rangle = \int_0^1 f(x)\overline{g(x)}\,dx
   $$
5. Montrer que l'application $P:M_n(\mathbb{R})\to M_n(\mathbb{R})$ définie par $P(A)=\frac{A+A^T}{2}$ est un projecteur orthogonal, où $M_n(\mathbb{R})$ est l'espace des matrices carrées d'ordre $n$ à coefficients réels muni du produit scalaire :
   $$
   \langle A, B \rangle = \mathrm{tr}(A^T B)
   $$

## Exercice 9.5 : Hyperplans affines d'un espace euclidien

1. Montrer que l'ensemble des points $(x,y,z)\in\mathbb{R}^3$ tels que $x+y+z=1$ est un hyperplan affine de $\mathbb{R}^3$.
2. Montrer que l'ensemble des points $(x,y,z)\in\mathbb{R}^3$ tels que $x-y=2$ est un hyperplan affine de $\mathbb{R}^3$.
3. Montrer que l'ensemble des points $(x,y,z)\in\mathbb{R}^3$ tels que $x+z=3$ est un hyperplan affine de $\mathbb{R}^3$.
4. Montrer que l'ensemble des points $(x,y,z)\in\mathbb{R}^3$ tels que $x+y+z=0$ est un hyperplan affine de $\mathbb{R}^3$.
5. Montrer que l'ensemble des points $(x,y,z)\in\mathbb{R}^3$ tels que $x-y-z=0$ est un hyperplan affine de $\mathbb{R}^3$.
===== ./static/content/exercises/maths/mpsi-maths/groupes-symetriques-et-determinants.md =====
---
title: "Exercices: Groupes symétriques et déterminants"
tags: ["mpsi-mathematiques","groupes-symetriques","determinants"]
---

# Exercices : Groupes symétriques et déterminants

## Exercice 16.1 : Groupes symétriques

1. **Ordre du groupe symétrique** : Montrer que l'ordre du groupe symétrique $S_n$ est $n!$.
2. **Cycle et transposition** : Décomposer la permutation $\sigma = (1,3,5,2,4)$ en produit de cycles à supports disjoints.
3. **Signature d'une permutation** : Calculer la signature de la permutation $\sigma = (1,3,5,2,4)$.
4. **Permutation paire et impaire** : Montrer que toute permutation peut être écrite comme produit de transpositions et déterminer si elle est paire ou impaire.
5. **Groupe alterné** : Montrer que le groupe alterné $A_n$ est un sous-groupe de $S_n$ pour tout $n \geq 2$.
6. **Exercice difficile** : Montrer que le nombre de permutations paires dans $S_n$ est $n!/2$.

## Exercice 16.2 : Déterminants

1. **Déterminant d'une matrice $2 \times 2$** : Calculer le déterminant de la matrice $A = \begin{pmatrix}a & b \\ c & d\end{pmatrix}$.
2. **Déterminant d'une matrice $3 \times 3$** : Calculer le déterminant de la matrice $A = \begin{pmatrix}1 & 2 & 3 \\ 0 & 1 & 4 \\ 0 & 0 & 1\end{pmatrix}$.
3. **Déterminant et produit de matrices** : Montrer que $\det(AB) = \det(A)\det(B)$ pour toutes matrices carrées $A$ et $B$.
4. **Déterminant et transposée** : Montrer que $\det(A^T) = \det(A)$ pour toute matrice carrée $A$.
5. **Déterminant et inverse** : Montrer que $\det(A^{-1}) = 1/\det(A)$ pour toute matrice inversible $A$.
6. **Exercice difficile** : Montrer que le déterminant d'une matrice antisymétrique d'ordre impair est nul.

## Exercice 16.3 : Déterminants et systèmes linéaires

1. **Système linéaire homogène** : Résoudre le système linéaire homogène $Ax = 0$ où $A = \begin{pmatrix}1 & 2 \\ 3 & 4\end{pmatrix}$.
2. **Système linéaire non homogène** : Résoudre le système linéaire non homogène $Ax = b$ où $A = \begin{pmatrix}1 & 2 \\ 3 & 4\end{pmatrix}$ et $b = \begin{pmatrix}1 \\ 1\end{pmatrix}$.
3. **Déterminant et rang** : Montrer que le rang d'une matrice $A$ est égal à l'ordre du plus grand déterminant non nul d'une sous-matrice de $A$.
4. **Déterminant et nullité** : Montrer que si $\det(A) = 0$, alors le système linéaire $Ax = b$ a une infinité de solutions ou aucune solution.
5. **Déterminant et inversibilité** : Montrer qu'une matrice $A$ est inversible si et seulement si $\det(A) \neq 0$.
6. **Exercice difficile** : Soit $A \in M_n(\mathbb{R})$ telle que $A^k = 0$ pour un certain $k \geq 1$. Montrer que $\det(A) = 0$.

## Exercice 16.4 : Déterminants et applications linéaires

1. **Déterminant d'une application linéaire** : Montrer que le déterminant d'une application linéaire $T : V \to V$ est bien défini si et seulement si $V$ est de dimension finie.
2. **Déterminant et trace** : Montrer que $\det(e^A) = e^{\mathrm{tr}(A)}$ pour toute matrice carrée $A$.
3. **Déterminant et valeurs propres** : Montrer que le déterminant d'une matrice $A$ est le produit de ses valeurs propres.
4. **Déterminant et polynôme caractéristique** : Montrer que le polynôme caractéristique de $A$ est $\det(A - \lambda I) = 0$.
5. **Déterminant et endomorphisme** : Montrer que si $T : V \to V$ est un endomorphisme, alors $\det(T) = \det(T^*)$, où $T^*$ est l'adjoint de $T$.
6. **Exercice difficile** : Montrer que si $A$ est une matrice réelle orthogonale, alors $\det(A) = \pm 1$.

## Exercice 16.5 : Déterminants et géométrie

1. **Déterminant et aire d'un parallélogramme** : Montrer que l'aire d'un parallélogramme formé par les vecteurs $u$ et $v$ est donnée par $|\det(u, v)|$.
2. **Déterminant et volume d'un parallélépipède** : Montrer que le volume d'un parallélépipède formé par les vecteurs $u, v, w$ est donné par $|\det(u, v, w)|$.
3. **Déterminant et orientation** : Montrer que le déterminant d'une matrice $A$ est positif si et seulement si $A$ préserve l'orientation.
4. **Déterminant et produit vectoriel** : Montrer que le produit vectoriel de deux vecteurs $u$ et $v$ est donné par $u \times v = \det(u, v, e_3) e_3$, où $e_3$ est le vecteur unité orthogonal à $u$ et $v$.
5. **Déterminant et produit mixte** : Montrer que le produit mixte de trois vecteurs $u, v, w$ est donné par $\det(u, v, w)$.
6. **Exercice difficile** : Montrer que le volume d'un simplexe de $\mathbb{R}^n$ de sommets $A_0, \ldots, A_n$ est $\frac{1}{n!} |\det(A_1-A_0, \ldots, A_n-A_0)|$.
===== ./static/content/exercises/maths/mpsi-maths/arithmetique.md =====
---
title: "Exercices: Arithmétique"
tags: ["mpsi-mathematiques","arithmetique"]
---

# Exercices : Arithmétique

## Exercice 4.1 : Division euclidienne dans $\mathbb{Z}$

1. Effectuer la division euclidienne de $123456$ par $789$.
2. Montrer que pour tout $n\in\mathbb{N}^*$, il existe un unique couple $(q,r)\in\mathbb{N}\times\llbracket 0,n-1\rrbracket$ tel que $n=q\times 7+r$.
3. Soient $a,b,q,r$ des entiers naturels tels que $a=bq+r$ avec $0\leq r<b$. Montrer que $q$ et $r$ sont uniquement déterminés par $a$ et $b$.
4. Soient $a,b,q,r$ des entiers relatifs tels que $a=bq+r$ avec $0\leq r<|b|$. Montrer que $q$ et $r$ sont uniquement déterminés par $a$ et $b$.
5. Soient $a,b,q,r$ des entiers tels que $a=bq+r$ avec $0\leq r<|b|$. Montrer que $|a|\geq|b|$.

## Exercice 4.2 : PGCD et PPCM

1. Calculer le PGCD et le PPCM des nombres $123456$ et $789$.
2. Montrer que pour tout $n\in\mathbb{N}^*$, $\mathrm{PGCD}(n,n+1)=1$.
3. Montrer que pour tout $n\in\mathbb{N}^*$, $\mathrm{PGCD}(n,n+2)=1$ si $n$ est impair et $2$ si $n$ est pair.
4. Montrer que pour tout $n\in\mathbb{N}^*$, $\mathrm{PGCD}(n,n+3)=1$ si $n$ est impair et $3$ si $n$ est pair.
5. Montrer que pour tout $n\in\mathbb{N}^*$, $\mathrm{PGCD}(n,n+4)=1$ si $n$ est impair et $2$ si $n$ est pair.

## Exercice 4.3 : Nombres premiers

1. Montrer que $29$ est un nombre premier.
2. Montrer que $31$ est un nombre premier.
3. Montrer que $37$ est un nombre premier.
4. Montrer que $41$ est un nombre premier.
5. Montrer que $43$ est un nombre premier.

## Exercice 4.4 : Congruence

1. Résoudre le système suivant dans $\mathbb{Z}$ :
   $$
   \begin{cases}
   x \equiv 1 \pmod{3} \\
   x \equiv 2 \pmod{5}
   \end{cases}
   $$
2. Résoudre le système suivant dans $\mathbb{Z}$ :
   $$
   \begin{cases}
   x \equiv 2 \pmod{3} \\
   x \equiv 3 \pmod{7}
   \end{cases}
   $$
3. Résoudre le système suivant dans $\mathbb{Z}$ :
   $$
   \begin{cases}
   x \equiv 3 \pmod{5} \\
   x \equiv 4 \pmod{7}
   \end{cases}
   $$
4. Résoudre le système suivant dans $\mathbb{Z}$ :
   $$
   \begin{cases}
   x \equiv 4 \pmod{6} \\
   x \equiv 5 \pmod{8}
   \end{cases}
   $$
5. Résoudre le système suivant dans $\mathbb{Z}$ :
   $$
   \begin{cases}
   x \equiv 5 \pmod{9} \\
   x \equiv 6 \pmod{11}
   \end{cases}
   $$

## Exercice 4.5 : Propriétés de la congruence

1. Montrer que si $a\equiv b \pmod{n}$ et $c\equiv d \pmod{n}$, alors $a+c\equiv b+d \pmod{n}$.
2. Montrer que si $a\equiv b \pmod{n}$ et $c\equiv d \pmod{n}$, alors $ac\equiv bd \pmod{n}$.
3. Montrer que si $a\equiv b \pmod{n}$, alors $a^k\equiv b^k \pmod{n}$ pour tout $k\in\mathbb{N}$.
4. Montrer que si $a\equiv b \pmod{n}$ et $c\equiv d \pmod{n}$, alors $ac\equiv bd \pmod{n}$.
5. Montrer que si $a\equiv b \pmod{n}$ et $c\equiv d \pmod{n}$, alors $ca\equiv db \pmod{n}$.
===== ./static/content/exercises/maths/mpsi-maths/integration-espaces-produits.md =====
---
title: "Exercices: Intégration sur les espaces produits"
tags: ["mpsi-mathematiques","integration","espaces-produits"]
---

# Exercices : Intégration sur les espaces produits

## Exercice 11.1 : Intégrales doubles

1. Calcul d'une intégrale double : Calculer $\iint_D (x^2+y^2)\,dA$, où $D$ est le disque unité $x^2+y^2\leq 1$.
2. Changement de variables en coordonnées polaires : Calculer $\iint_D e^{-(x^2+y^2)}\,dA$ en utilisant les coordonnées polaires, où $D$ est le plan entier $\mathbb{R}^2$.
3. Intégrale double impropre : Montrer que $\iint_{\mathbb{R}^2} e^{-(x^2+y^2)}\,dA=\pi$.
4. Intégrale double avec symétrie : Calculer $\iint_D \sin(x^2+y^2)\,dA$, où $D$ est le premier quadrant $x,y\geq 0$.
5. Intégrale double avec fonction discontinue : Calculer $\iint_D \frac{1}{x^2+y^2}\,dA$, où $D$ est le domaine $1\leq x^2+y^2\leq 4$.

## Exercice 11.2 : Intégrales triples

1. Calcul d'une intégrale triple : Calculer $\iiint_E (x^2+y^2+z^2)\,dV$, où $E$ est la boule unité $x^2+y^2+z^2\leq 1$.
2. Changement de variables en coordonnées sphériques : Calculer $\iiint_E e^{-(x^2+y^2+z^2)}\,dV$ en utilisant les coordonnées sphériques, où $E$ est l'espace entier $\mathbb{R}^3$.
3. Intégrale triple impropre : Montrer que $\iiint_{\mathbb{R}^3} e^{-(x^2+y^2+z^2)}\,dV=\pi^{3/2}$.
4. Intégrale triple avec symétrie : Calculer $\iiint_E \sin(x^2+y^2+z^2)\,dV$, où $E$ est le premier octant $x,y,z\geq 0$.
5. Intégrale triple avec fonction discontinue : Calculer $\iiint_E \frac{1}{x^2+y^2+z^2}\,dV$, où $E$ est le domaine $1\leq x^2+y^2+z^2\leq 4$.

## Exercice 11.3 : Théorème de Fubini

1. Application du théorème de Fubini : Montrer que $\int_0^1\int_0^1 \frac{x^2-y^2}{(x^2+y^2)^2}\,dx\,dy=\frac{\pi}{4}$.
2. Intégrale itérée : Calculer $\int_0^1\int_0^1 \frac{1}{1-xy}\,dx\,dy$ en utilisant le théorème de Fubini.
3. Intégrale double avec fonction non intégrable : Montrer que $\int_0^1\int_0^1 \frac{1}{(x^2+y^2)^2}\,dx\,dy$ diverge.
4. Intégrale double avec fonction intégrable : Montrer que $\int_0^1\int_0^1 \frac{1}{x^2+y^2}\,dx\,dy$ converge.
5. Intégrale double avec fonction continue : Montrer que $\int_0^1\int_0^1 \frac{1}{1+x^2y^2}\,dx\,dy=\frac{\pi^2}{4}$.

## Exercice 11.4 : Théorème de la divergence

1. Application du théorème de la divergence : Montrer que $\iiint_E \nabla\cdot F\,dV=\iint_{\partial E} F\cdot n\,dS$, où $E$ est la boule unité et $F=(x,y,z)$.
2. Flux à travers une surface : Calculer le flux de $F=(x^2,y^2,z^2)$ à travers la surface de la boule unité.
3. Champ vectoriel conservatif : Montrer que $F=(\sin(y),\cos(x),0)$ est un champ vectoriel conservatif.
4. Champ vectoriel irrotationnel : Montrer que $F=(y,-x,0)$ est un champ vectoriel irrotationnel.
5. Champ vectoriel solénoïdal : Montrer que $F=(z,0,-x)$ est un champ vectoriel solénoïdal.

## Exercice 11.5 : Théorème de Stokes

1. Application du théorème de Stokes : Montrer que $\oint_{\partial S} F\cdot dr=\iint_S (\nabla\times F)\cdot n\,dS$, où $S$ est le disque unité et $F=(y,z,x)$.
2. Circulation d'un champ vectoriel : Calculer la circulation de $F=(y,-x,0)$ le long du cercle unité.
3. Champ vectoriel irrotationnel : Montrer que $F=(y,x,0)$ est un champ vectoriel irrotationnel.
4. Champ vectoriel solénoïdal : Montrer que $F=(z,0,-x)$ est un champ vectoriel solénoïdal.
5. Champ vectoriel conservatif : Montrer que $F=(\sin(y),\cos(x),0)$ est un champ vectoriel conservatif.
===== ./static/content/exercises/maths/mpsi-maths/groupe-symetrique-et-determinant.md =====
---
title: "Exercices: Groupe symétrique et déterminant"
tags: ["mpsi-mathematiques","groupe-symetrique","determinant"]
---

# Exercices : Groupe symétrique et déterminant

## Exercice 8.1 : Groupe symétrique

### Cycle et transposition

1. Décomposer la permutation suivante en produit de cycles à supports disjoints :
   $$
   \sigma = (1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9\ 3\ 1\ 5\ 7\ 2\ 4\ 6\ 8\ 9)
   $$
2. Décomposer la permutation suivante en produit de transpositions :
   $$
   \tau = (1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9\ 2\ 3\ 1\ 5\ 4\ 7\ 6\ 9\ 8)
   $$

### Signature d'une permutation

3. Calculer la signature des permutations suivantes :
   $$
   \alpha = (1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9\ 5\ 6\ 7\ 8\ 9\ 1\ 2\ 3\ 4)
   $$
   $$
   \beta = (1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9\ 9\ 8\ 7\ 6\ 5\ 4\ 3\ 2\ 1)
   $$
4. Montrer que toute permutation de $S_n$ peut être écrite comme produit de $(n-1)$ transpositions.
5. Montrer que toute permutation paire de $S_n$ peut être écrite comme produit de $2k$ transpositions, où $k\in\mathbb{N}$.

## Exercice 8.2 : Déterminants

### Généralités. Définitions

1. Calculer le déterminant de la matrice suivante :
   $$
   A = \begin{pmatrix} 1 & 2 & 3 \\ 0 & 1 & 4 \\ 0 & 0 & 1 \end{pmatrix}
   $$
2. Montrer que si $A$ est une matrice carrée d'ordre $n$ et si $A^T$ est la transposée de $A$, alors $\det(A) = \det(A^T)$.
3. Montrer que si $A$ et $B$ sont deux matrices carrées d'ordre $n$, alors $\det(AB) = \det(A)\det(B)$.
4. Montrer que si $A$ est une matrice carrée d'ordre $n$ et si $c\in\mathbb{R}$, alors $\det(cA) = c^n\det(A)$.
5. Montrer que si $A$ est une matrice carrée d'ordre $n$ et si $A^T$ est sa transposée, alors $\det(A^T) = \det(A)$.

### Compléments: déterminants et géométrie euclidienne

6. Soient $A,B,C$ trois points du plan euclidien. Montrer que l'aire du triangle $ABC$ est donnée par :
   $$
   \mathrm{Aire}(ABC) = \frac{1}{2} \left| \det\begin{pmatrix} x_B - x_A & x_C - x_A \\ y_B - y_A & y_C - y_A \end{pmatrix} \right|
   $$
   où $(x_A, y_A), (x_B, y_B), (x_C, y_C)$ sont les coordonnées des points $A,B,C$ respectivement.

7. Soient $A,B,C,D$ quatre points du plan euclidien. Montrer que les points $A,B,C,D$ sont cocycliques (c'est-à-dire qu'ils appartiennent à un même cercle) si et seulement si :
   $$
   \det\begin{pmatrix}
   x_B-x_A & x_C-x_A & x_D-x_A \\
   y_B-y_A & y_C-y_A & y_D-y_A \\
   (x_B-x_A)^2+(y_B-y_A)^2 & (x_C-x_A)^2+(y_C-y_A)^2 & (x_D-x_A)^2+(y_D-y_A)^2
   \end{pmatrix} = 0
   $$===== ./static/content/exercises/programming/index.json =====
{
  "title": "Programming Exercises",
  "description": "Practice your coding skills with these programming exercises",
  "icon": "fa-code",
  "exercises": [
    {
      "id": "python-basics",
      "title": "Python Basics",
      "description": "Practice exercises for Python fundamentals including variables, loops, and conditionals",
      "tags": ["Python", "Basics"],
      "difficulty": "beginner",
      "estimatedTime": "30min",
      "path": "python-basics.md"
    },
    {
      "id": "python-data-structures",
      "title": "Python Data Structures",
      "description": "Exercises focused on lists, dictionaries, sets and tuples in Python",
      "tags": ["Python", "Data Structures"],
      "difficulty": "intermediate",
      "estimatedTime": "45min",
      "path": "python-data-structures.md"
    },
    {
      "id": "algorithms",
      "title": "Algorithm Practice",
      "description": "Practice implementing common algorithms in Python",
      "tags": ["Python", "Algorithms"],
      "difficulty": "advanced",
      "estimatedTime": "60min",
      "path": "algorithms.md"
    }
  ]
}===== ./static/content/courses/index.json =====
{
  "categories": [
    {
      "id": "programming",
      "title": "Programming",
      "description": "Learn programming fundamentals and techniques",
      "icon": "fa-code",
      "type": "course-category",
      "path": "programming",
      "courseCount": 1
    },
    {
      "id": "mathematics",
      "title": "Mathematics",
      "description": "Advanced mathematics courses for higher education",
      "icon": "fa-square-root-alt",
      "type": "course-category",
      "path": "maths",
      "courseCount": 1
    }
  ],
  "featuredCourses": [
    {
      "id": "intro-python",
      "title": "Introduction to Python Programming",
      "description": "Learn the fundamentals of Python programming from scratch",
      "difficulty": "beginner",
      "estimatedTime": "6 hours",
      "tags": ["python", "programming", "beginner"]
    },
    {
      "id": "mpsi-maths",
      "title": "MPSI - Mathématiques",
      "description": "Programme complet de mathématiques pour la filière MPSI",
      "difficulty": "advanced",
      "estimatedTime": "120 hours",
      "tags": ["math", "mpsi", "preparation"]
    }
  ]
}===== ./static/content/courses/maths/index.json =====
{
  "title": "Mathematics Courses",
  "description": "Advanced mathematics courses for higher education",
  "icon": "fa-square-root-alt",
  "courses": [
    {
      "id": "mpsi-maths",
      "title": "MPSI - Mathématiques",
      "type": "course-category",
      "description": "Programme complet de mathématiques pour la filière MPSI",
      "difficulty": "advanced",
      "estimatedTime": "120 hours",
      "tags": ["math", "mpsi", "preparation"],
      "path": "maths/mpsi-maths/mpsi-mathematiques.md"
    }
  ]
}===== ./static/content/courses/maths/mpsi-maths/nombres-complexes-trigonometrie.md =====
---
title: Nombres complexes et trigonométrie
description: Étude approfondie des nombres complexes et de leurs applications en trigonométrie
tags: ["math", "mpsi", "complex-numbers", "trigonometry"]
difficulty: intermediate
estimatedTime: 12 hours
---

# Nombres complexes et trigonométrie

## Module: Nombres complexes
### Lesson: Introduction aux nombres complexes
- Définition et forme algébrique
- Opérations de base
- Conjugué et module

### Lesson: Formes trigonométrique et exponentielle
- Forme trigonométrique
- Forme exponentielle
- Formule de Moivre

## Module: Applications en trigonométrie
### Lesson: Formules trigonométriques
- Formules d'addition et de duplication
- Formules de linéarisation
- Applications aux calculs d'intégrales

### Lesson: Équations complexes
- Résolution d'équations dans C
- Applications géométriques
- Racines de l'unité===== ./static/content/courses/maths/mpsi-maths/index.json =====
{
  "title": "MPSI - Mathématiques",
  "description": "Programme complet de mathématiques pour la filière MPSI",
  "courses": [
    {
      "id": "mpsi-mathematiques",
      "title": "MPSI - Mathématiques (Vue d'ensemble)",
      "type": "course",
      "slug": "mpsi-maths/mpsi-mathematiques",
      "description": "Vue d'ensemble du programme de mathématiques MPSI",
      "difficulty": "advanced",
      "estimatedTime": "120 hours",
      "tags": ["math", "mpsi", "preparation"]
    },
    {
      "id": "raisonnement-et-vocabulaire-ensembliste",
      "title": "Raisonnement et vocabulaire ensembliste",
      "type": "course",
      "slug": "mpsi-maths/raisonnement-et-vocabulaire-ensembliste",
      "description": "Introduction aux concepts fondamentaux de la théorie des ensembles",
      "difficulty": "intermediate",
      "estimatedTime": "10 hours",
      "tags": ["math", "mpsi", "set-theory", "logic"]
    },
    {
      "id": "calculs_algebriques",
      "title": "Calculs algébriques",
      "type": "course",
      "slug": "mpsi-maths/calculs_algebriques",
      "description": "Maîtrise des techniques de calcul et des opérations algébriques",
      "difficulty": "intermediate",
      "estimatedTime": "12 hours",
      "tags": ["math", "mpsi", "algebra"]
    },
    {
      "id": "nombres-complexes-trigonometrie",
      "title": "Nombres complexes et trigonométrie",
      "type": "course",
      "slug": "mpsi-maths/nombres-complexes-trigonometrie",
      "description": "Étude approfondie des nombres complexes et de leurs applications en trigonométrie",
      "difficulty": "intermediate",
      "estimatedTime": "12 hours",
      "tags": ["math", "mpsi", "complex-numbers", "trigonometry"]
    },
    {
      "id": "series-numeriques",
      "title": "Séries numériques",
      "type": "course",
      "slug": "mpsi-maths/series-numeriques",
      "description": "Théorie des séries et critères de convergence",
      "difficulty": "advanced",
      "estimatedTime": "10 hours",
      "tags": ["math", "mpsi", "series", "convergence"]
    },
    {
      "id": "integration-espaces-produits",
      "title": "Intégration sur les espaces produits",
      "type": "course",
      "slug": "mpsi-maths/integration-espaces-produits",
      "description": "Théorie de l'intégration multiple et applications",
      "difficulty": "advanced",
      "estimatedTime": "15 hours",
      "tags": ["math", "mpsi", "integration", "multivariable"]
    },
    {
      "id": "equations-differentielles",
      "title": "Équations différentielles",
      "type": "course",
      "slug": "mpsi-maths/equations-differentielles",
      "description": "Résolution et étude qualitative des équations différentielles",
      "difficulty": "advanced",
      "estimatedTime": "15 hours",
      "tags": ["math", "mpsi", "differential-equations"]
    },
    {
      "id": "structures-algebriques",
      "title": "Structures algébriques usuelles",
      "type": "course",
      "slug": "mpsi-maths/structures-algebriques",
      "description": "Introduction aux groupes, anneaux et corps",
      "difficulty": "advanced",
      "estimatedTime": "20 hours",
      "tags": ["math", "mpsi", "algebra", "groups", "rings"]
    },
    {
      "id": "espaces-vectoriels-applications-lineaires",
      "title": "Espaces vectoriels et applications linéaires",
      "type": "course",
      "slug": "mpsi-maths/espaces-vectoriels-applications-lineaires",
      "description": "Théorie des espaces vectoriels et étude des applications linéaires",
      "difficulty": "advanced",
      "estimatedTime": "25 hours",
      "tags": ["math", "mpsi", "linear-algebra", "vector-spaces"]
    },
    {
      "id": "groupes-symetriques-et-determinants",
      "title": "Groupes symétriques et déterminants",
      "type": "course",
      "slug": "mpsi-maths/groupes-symetriques-et-determinants",
      "description": "Étude des permutations et calcul des déterminants",
      "difficulty": "advanced",
      "estimatedTime": "15 hours",
      "tags": ["math", "mpsi", "algebra", "determinants", "permutations"]
    }
  ]
}===== ./static/content/courses/maths/mpsi-maths/raisonnement-et-vocabulaire-ensembliste.md =====
---
title: "Raisonnement et vocabulaire ensembliste"
tags: ["mpsi-mathematiques","logique","ensembles","cours"]
---

# Chapitre 1 : Raisonnement et vocabulaire ensembliste

## Logique et raisonnement

### Assertions

Une assertion (ou proposition) est un assemblage de mots dont la construction obéit à une certaine syntaxe et à laquelle on peut donner une valeur de vérité : vraie (V) ou fausse (F).

**Exemples :**
- « 3 est un nombre impair » est une assertion vraie.
- « 102=101 » est une assertion fausse.
- « 2=3+ » n'est pas une assertion.

### Connecteurs élémentaires

- **Non P** : Vraie si P est fausse, et fausse sinon.
- **P et Q** : Vraie si les deux assertions P et Q sont vraies, et fausse sinon.
- **P ou Q** : Vraie si au moins une des deux assertions est vraie, et fausse sinon.

| P | Q | P et Q | P ou Q |
|---|---|--------|--------|
| V | V |   V    |   V    |
| V | F |   F    |   V    |
| F | V |   F    |   V    |
| F | F |   F    |   F    |

### Implication, équivalence

- **P ⇒ Q** : Vraie si P est fausse ou si Q est vraie.
- **P ⇔ Q** : Vraie si P et Q sont logiquement équivalentes.

| P | Q | P ⇒ Q | P ⇔ Q |
|---|---|-------|-------|
| V | V |   V   |   V   |
| V | F |   F   |   F   |
| F | V |   V   |   F   |
| F | F |   V   |   V   |

### Raisonnements pour montrer que P ⇒ Q

- **Raisonnement direct** : On suppose que P est vraie et on montre que Q est vraie.
- **Raisonnement par contraposée** : On suppose que ¬Q est vraie et on montre que ¬P est vraie.
- **Raisonnement par l'absurde** : On suppose que P est vraie, et on suppose « par l'absurde » que ¬Q est vraie. On cherche alors une contradiction.

### Raisonnement par récurrence

- **Théorème de récurrence** : Soit P une propriété définie sur $\mathbb{N}$. Si :
    - $P(0)$ est vraie,
    - Pour tout $n \in \mathbb{N}$, ($P(n)$ vraie $\Rightarrow P(n+1)$ vraie),
  alors $P(n)$ est vraie pour tout $n \in \mathbb{N}$.

- **Corollaire** : Soit P une propriété définie sur $\{n_0, n_0+1, \ldots\}$ avec $n_0 \in \mathbb{Z}$. Si :
    - $P(n_0)$ est vraie,
    - Pour tout entier $n \geq n_0$, ($P(n)$ vraie $\Rightarrow P(n+1)$ vraie),
  alors $P(n)$ est vraie pour tout $n \geq n_0$.

## Ensembles, fonctions et relations binaires

### Notation et opérations de base

- **Définition d'un ensemble** : Un ensemble est une collection d'objets distincts, appelés éléments.
- **Appartenance** : $x \in E$ signifie que $x$ appartient à l'ensemble $E$ ; sa négation est notée $x \notin E$.
- **Ensemble vide** : Noté $\varnothing$, il n'a aucun élément.
- **Inclusion** : $A \subset B$ signifie que tout élément de $A$ appartient à $B$.
- **Union** : $A \cup B = \{x \mid x \in A \text{ ou } x \in B\}$
- **Intersection** : $A \cap B = \{x \mid x \in A \text{ et } x \in B\}$
- **Complémentaire** : $A^c = \{x \mid x \notin A\}$
- **Différence** : $A \setminus B = \{x \in A \mid x \notin B\}$
- **Produit cartésien** : $A \times B = \{(a, b) \mid a \in A, b \in B\}$

### Quantificateurs

- **Quantificateur universel ($\forall$)** : Se lit « pour tout » ou « quel que soit ».
- **Quantificateur existentiel ($\exists$)** : Se lit « il existe au moins un élément ».
- **Quantificateur d'unicité ($\exists!$)** : Se lit « il existe un et un seul élément ».

#### Négation d'une phrase quantifiée

- $\neg(\forall x \in E, P(x)) \iff \exists x \in E, \neg P(x)$
- $\neg(\exists x \in E, P(x)) \iff \forall x \in E, \neg P(x)$

### Applications et relations

- **Application (fonction)** : Une relation qui associe à chaque élément d'un ensemble un élément d'un autre ensemble.
- **Relation binaire** : Une correspondance entre les éléments de deux ensembles.
- **Injection, surjection, bijection** :
    - $f : E \to F$ est injective si $f(x) = f(y) \Rightarrow x = y$.
    - $f$ est surjective si $\forall y \in F, \exists x \in E, f(x) = y$.
    - $f$ est bijective si elle est injective et surjective.
- **Relation d'équivalence** : Réflexive, symétrique, transitive.
- **Relation d'ordre** : Réflexive, antisymétrique, transitive.

## Limite d’une suite réelle

Soit $(x_n)_{n \geq 0}$ une suite réelle. On dit que $l \in \mathbb{R}$ est limite de $(x_n)_{n \geq 0}$ lorsque :
$$\forall \varepsilon > 0, \exists p \in \mathbb{N}, \forall n \in \mathbb{N}, n \geq p \Rightarrow |x_n - l| \leq \varepsilon.$$

La phrase exprimant qu’un réel $l$ n’est pas limite de $(x_n)_{n \geq 0}$ est alors :
$$\exists \varepsilon > 0, \forall p \in \mathbb{N}, \exists n \in \mathbb{N}, n \geq p \text{ et } |x_n - l| > \varepsilon.$$

## Continuité

Une application $f : \mathbb{R} \to \mathbb{R}$ est continue en $a \in \mathbb{R}$ lorsque :
$$\forall \varepsilon > 0, \exists \eta > 0, \forall x \in \mathbb{R}, |x - a| < \eta \Rightarrow |f(x) - f(a)| \leq \varepsilon.$$

La phrase exprimant que $f$ n’est pas continue en $a$ est alors :
$$\exists \varepsilon > 0, \forall \eta > 0, \exists x \in \mathbb{R}, |x - a| < \eta \text{ et } |f(x) - f(a)| > \varepsilon.$$

## Exercices avancés

1. **Logique avancée** : Montrer que la négation de $P \Rightarrow Q$ est $P \wedge \neg Q$.
2. **Ensembles infinis** : Montrer que l'ensemble $\mathbb{Q}$ des rationnels est dénombrable, mais $\mathbb{R}$ ne l'est pas.
3. **Récurrence forte** : Montrer que tout entier $n \geq 2$ s'écrit comme produit de nombres premiers (unicité non demandée).
4. **Fonctions sur des ensembles infinis** : Existe-t-il une bijection entre $\mathbb{N}$ et $\mathbb{N} \times \mathbb{N}$ ? La construire.
5. **Relations d'équivalence** : Montrer que la relation « $x \sim y$ si $x-y \in \mathbb{Z}$ » sur $\mathbb{R}$ est une relation d'équivalence.
6. **Exercice difficile** : Soit $E$ un ensemble infini. Montrer qu'il existe une injection de $E$ dans $E \times E$.
7. **Exercice difficile** : Montrer que tout ordre total sur $\mathbb{N}$ est isomorphe à l'ordre usuel.

===== ./static/content/courses/maths/mpsi-maths/espaces-vectoriels-applications-lineaires.md =====
---
title: Espaces vectoriels et applications linéaires
description: Théorie des espaces vectoriels et étude des applications linéaires
tags: ["math", "mpsi", "linear-algebra", "vector-spaces"]
difficulty: advanced
estimatedTime: 25 hours
---

# Espaces vectoriels et applications linéaires

## Module: Espaces vectoriels
### Lesson: Concepts fondamentaux
- Définition et exemples
- Sous-espaces vectoriels
- Familles libres et génératrices

### Lesson: Dimension finie
- Base et dimension
- Théorème de la base incomplète
- Somme directe

## Module: Applications linéaires
### Lesson: Propriétés générales
- Définition et exemples
- Noyau et image
- Rang et théorème du rang

### Lesson: Matrices et changements de base
- Matrice d'une application linéaire
- Changements de base
- Similitude===== ./static/content/courses/maths/mpsi-maths/series-numeriques.md =====
---
title: Séries numériques
description: Théorie des séries et critères de convergence
tags: ["math", "mpsi", "series", "convergence"]
difficulty: advanced
estimatedTime: 10 hours
---

# Séries numériques

## Module: Généralités sur les séries
### Lesson: Introduction aux séries
- Définition et somme partielle
- Convergence et divergence
- Propriétés élémentaires

### Lesson: Séries à termes positifs
- Critère de comparaison
- Règle de D'Alembert
- Règle de Cauchy

## Module: Séries alternées et absolues
### Lesson: Convergence absolue
- Séries absolument convergentes
- Théorème de comparaison
- Produit de Cauchy

### Lesson: Séries alternées
- Critère de Leibniz
- Convergence conditionnelle
- Réarrangements et permutations===== ./static/content/courses/maths/mpsi-maths/structures-algebriques.md =====
---
title: Structures algébriques usuelles
description: Introduction aux groupes, anneaux et corps
tags: ["math", "mpsi", "algebra", "groups", "rings"]
difficulty: advanced
estimatedTime: 20 hours
---

# Structures algébriques usuelles

## Module: Théorie des groupes
### Lesson: Groupes et sous-groupes
- Définition et exemples
- Sous-groupes et critères
- Morphismes de groupes

### Lesson: Groupes classiques
- Groupes cycliques
- Groupes quotients
- Théorèmes d'isomorphisme

## Module: Anneaux et corps
### Lesson: Anneaux
- Définition et propriétés
- Idéaux et morphismes
- Anneaux principaux

### Lesson: Corps
- Extensions de corps
- Corps des fractions
- Corps finis===== ./static/content/courses/maths/mpsi-maths/equations-differentielles.md =====
---
title: Équations différentielles
description: Résolution et étude qualitative des équations différentielles
tags: ["math", "mpsi", "differential-equations"]
difficulty: advanced
estimatedTime: 15 hours
---

# Équations différentielles

## Module: Équations différentielles du premier ordre
### Lesson: Généralités
- Définitions et exemples
- Théorème de Cauchy-Lipschitz
- Solutions particulières et générales

### Lesson: Méthodes de résolution
- Équations à variables séparables
- Équations linéaires
- Équations de Bernoulli

## Module: Équations différentielles linéaires
### Lesson: Équations d'ordre 2
- Structure de l'espace des solutions
- Équations homogènes
- Méthode de variation des constantes

### Lesson: Systèmes différentiels
- Systèmes linéaires
- Méthode de diagonalisation
- Portrait de phase===== ./static/content/courses/maths/mpsi-maths/groupes-symetriques-et-determinants.md =====
---
title: Groupes symétriques et déterminants
description: Étude des permutations et calcul des déterminants
tags: ["math", "mpsi", "algebra", "determinants", "permutations"]
difficulty: advanced
estimatedTime: 15 hours
---

# Groupes symétriques et déterminants

## Module: Groupe symétrique
### Lesson: Permutations
- Définitions et notations
- Décomposition en cycles
- Signature d'une permutation

### Lesson: Structure du groupe symétrique
- Générateurs du groupe symétrique
- Sous-groupes remarquables
- Actions de groupe

## Module: Déterminants
### Lesson: Définition et propriétés
- Définition axiomatique
- Développement par ligne ou colonne
- Formule de Leibniz

### Lesson: Applications
- Calcul pratique
- Matrices inversibles
- Applications géométriques===== ./static/content/courses/maths/mpsi-maths/calculs_algebriques.md =====
---
title: "Calculs algébriques"
tags: ["mpsi-mathematiques","sommes","calcul","cours"]
---

# Chapitre 2 : Calculs algébriques

## 2.1 Sommes simples

Soit $(a_k)_{k\in\mathbb{N}}$ une suite de nombres complexes. Pour $n\in\mathbb{N}$, on note :
$$
\sum_{k=0}^n a_k = a_0 + a_1 + \cdots + a_n.
$$

**Proposition 2.1** Soient $(a_k)_{k\in\mathbb{N}}$ et $(b_k)_{k\in\mathbb{N}}$ deux suites de nombres complexes et $\alpha\in\mathbb{C}$. Alors, on a :
$$
\sum_{k=0}^n (a_k + b_k) = \sum_{k=0}^n a_k + \sum_{k=0}^n b_k,\\
\sum_{k=0}^n \alpha a_k = \alpha \sum_{k=0}^n a_k,\\
\sum_{k=0}^n a_k = \sum_{k=0}^n a_{n-k}.
$$
Pour $N\in\mathbb{N}$, on peut définir pour tout $n\geq N$ :
$$
\sum_{k=N}^n a_k = a_N + a_{N+1} + \cdots + a_n.
$$
Les deux premières propriétés restent valables, la troisième devient :
$$
\sum_{k=N}^n a_n = a_n + a_{n-1} + \cdots + a_N = \sum_{k=0}^{n-N} a_{n-k}.
$$

**Sommes géométriques.** Soient $n\in\mathbb{N}$ et $q\in\mathbb{C}$. Par convention $0^0=1$ :
- Pour $q=1$, $\sum_{k=0}^n q^k = n+1$.
- Pour $q\neq 1$, $\sum_{k=0}^n q^k = \dfrac{1-q^{n+1}}{1-q}$.
Plus généralement, pour $N\in\mathbb{N}$ et $n\geq N$ :
$$
\sum_{k=N}^n q^k = q^N \dfrac{1-q^{n-N+1}}{1-q}.
$$

**Sommes télescopiques.**
$$
\sum_{k=1}^n (a_{k+1} - a_k) = a_{n+1} - a_1.
$$

**Somme avec indices pairs et impairs.**
Soit $S = \sum_{k=0}^n a_k$, alors $S = S_{\text{pair}} + S_{\text{impair}}$ avec :
$$
S_{\text{pair}} = \sum_{0 \leq 2p \leq n} a_{2p} = \sum_{p=0}^{\lfloor n/2 \rfloor} a_{2p},\\
S_{\text{impair}} = \sum_{0 \leq 2p+1 \leq n} a_{2p+1} = \sum_{p=0}^{\lfloor (n-1)/2 \rfloor} a_{2p+1}.
$$

## 2.2 La formule du binôme de Newton

**Combinaisons.** Pour $n\in\mathbb{N}$ et $p\in\{0,\ldots,n\}$, on pose :
$$
\binom{n}{p} = \frac{n!}{(n-p)!p!}.
$$
On note que $\binom{n}{0} = 1$, $\binom{n}{p} = \binom{n}{n-p}$ et pour $p\geq 1$ :
$$
\binom{n}{p} = \frac{n(n-1)\cdots(n-p+1)}{p!}.
$$
Par convention, $\binom{n}{p} = 0$ si $p>n$.

**Formule du binôme de Newton.** Soient $(a,b)\in\mathbb{C}^2$ et $n\in\mathbb{N}$ :
$$
(a+b)^n = \sum_{k=0}^n \binom{n}{k} a^k b^{n-k},\\
(a-b)^n = \sum_{k=0}^n \binom{n}{k} (-1)^{n-k} a^k b^{n-k}.
$$
En particulier, pour $(a,b)=(1,1)$ et $(a,b)=(-1,1)$ :
$$
\sum_{k=0}^n \binom{n}{k} = 2^n,\\
\sum_{k=0}^n (-1)^k \binom{n}{k} = 0 \text{ (si $n\geq 1$)}.
$$

**Factorisations remarquables.** Pour $(a,b)\in\mathbb{C}^2$ et $n\in\mathbb{N}^*$ :
$$
a^n-b^n = (a-b) \sum_{k=0}^{n-1} a^k b^{n-1-k},\\
a^n+b^n = (a+b) \sum_{k=0}^{n-1} (-1)^k a^{n-1-k} b^k \text{ (si $n$ impair)}.
$$

## 2.3 Produits simples

Soient $N\in\mathbb{N}$ et $n\geq N$. On considère la suite $(a_k)_{k\geq N}$ de nombres complexes. On note :
$$
\prod_{k=N}^n a_k = a_N \times a_{N+1} \times \cdots \times a_n.
$$
En particulier, $\prod_{k=1}^n k = 1 \times 2 \times \cdots \times n = n!$ (factorielle de $n$), par convention $0! = 1$.

Si $(a_n)_{n\geq 1}$ est une suite de nombres complexes non nuls :
$$
\prod_{k=1}^n \frac{a_{k-1}}{a_k} = \frac{a_0}{a_n}.
$$
Et :
$$
\prod_{k=1}^n a_k b_k = \prod_{k=1}^n a_k \times \prod_{k=1}^n b_k.
$$

## 2.4 Sommes doubles

Soient $n\geq 2$ un entier naturel et $(a_{ij})_{(i,j)\in\{1,\ldots,n\}^2}$ une famille de nombres complexes. Alors :
$$
\sum_{1\leq i,j\leq n} a_{ij} = \sum_{i=1}^n \sum_{j=1}^n a_{ij} = \sum_{j=1}^n \sum_{i=1}^n a_{ij},\\
\sum_{1\leq i\leq j\leq n} a_{ij} = \sum_{i=1}^n \sum_{j=i}^n a_{ij} = \sum_{j=1}^n \sum_{i=1}^j a_{ij},\\
\sum_{1\leq i<j\leq n} a_{ij} = \sum_{i=1}^{n-1} \sum_{j=i+1}^n a_{ij} = \sum_{j=2}^n \sum_{i=1}^{j-1} a_{ij}.
$$

**Développement d’un produit de sommes :**
$$
\left(\sum_{i=1}^n a_i\right)\left(\sum_{j=1}^m b_j\right) = \sum_{1\leq i\leq n,\ 1\leq j\leq m} a_i b_j.
$$
Et :
$$
\left(\sum_{i=1}^n a_i\right)^2 = \sum_{i=1}^n a_i^2 + 2\sum_{1\leq i<j\leq n} a_i a_j.
$$

## 2.5 Systèmes linéaires

La notion de systèmes linéaires sera traitée en détail au chapitre 7. On présente ici quelques notions élémentaires.

**Définition.** Étant donnés $n,p\in\mathbb{N}^*$, un système linéaire de $n$ équations à $p$ inconnues $x_1,\ldots,x_p$ est un système :
$$
\begin{cases}
  a_{11}x_1 + a_{12}x_2 + \cdots + a_{1p}x_p = b_1 \\
  \vdots \\
  a_{n1}x_1 + a_{n2}x_2 + \cdots + a_{np}x_p = b_n
\end{cases}
$$
avec $(a_{ij})_{1\leq i\leq n,\ 1\leq j\leq p}\in K^{n\times p}$ ($K=\mathbb{R}$ ou $\mathbb{C}$), $(b_1,\ldots,b_n)\in K^n$.

- Le $n$-uplet $(b_1,\ldots,b_n)$ est appelé le second membre du système.
- Si $b_1=\cdots=b_n=0$, le système est dit homogène.
- Une solution est un $p$-uplet $(x_1,\ldots,x_p)\in K^p$ vérifiant toutes les équations.
- Le système est compatible s’il admet au moins une solution.
- Tout système homogène est compatible (solution nulle).
- Le système homogène associé est obtenu en remplaçant tous les $b_i$ par $0$.

**Structure affine de l’ensemble des solutions.** Si le système est compatible, l’ensemble des solutions est un sous-espace affine de $K^p$ dirigé par le sous-espace vectoriel des solutions du système homogène associé.

**Définition 2.1 (Systèmes de Cramer).** Un système linéaire de $n$ équations à $n$ inconnues est un système de Cramer si :
- il admet une unique solution,
- le système homogène associé n’a que la solution triviale.

**Méthode du pivot de Gauss.**
On utilise des opérations élémentaires sur les lignes :
- échange de deux lignes,
- multiplication d’une ligne par $\alpha\in K^*$,
- ajout à une ligne d’un multiple d’une autre ligne.

Le but est d’obtenir un système triangulaire supérieur.

**Exemple.** Résoudre le système :
$$
\begin{cases}
  x + 2y + 3z = 1 \\
  -x - 3y + 5z = 2 \\
  x + y + z = 3
\end{cases}
$$

- On ajoute L1 à L2, L3 - L1 :
$$
\begin{cases}
  x + 2y + 3z = 1 \\
  -y + 8z = 3 \\
  -y - 2z = 2
\end{cases}
$$
- L3 - L2 :
$$
\begin{cases}
  x + 2y + 3z = 1 \\
  -y + 8z = 3 \\
  -10z = -1
\end{cases}
$$
- On trouve $z = 1/10$, $y = -11/5$, $x = 51/10$.

---
===== ./static/content/courses/maths/mpsi-maths/integration-espaces-produits.md =====
---
title: Intégration sur les espaces produits
description: Théorie de l'intégration multiple et applications
tags: ["math", "mpsi", "integration", "multivariable"]
difficulty: advanced
estimatedTime: 15 hours
---

# Intégration sur les espaces produits

## Module: Intégrales doubles
### Lesson: Définitions et propriétés
- Définition de l'intégrale double
- Propriétés de base
- Théorème de Fubini

### Lesson: Changement de variables
- Coordonnées polaires
- Jacobien
- Applications géométriques

## Module: Intégrales triples
### Lesson: Calcul d'intégrales triples
- Définition et propriétés
- Coordonnées cylindriques
- Coordonnées sphériques

### Lesson: Applications
- Calcul de volumes
- Moments d'inertie
- Centre de masse===== ./static/content/courses/mpsi-maths/index.json =====
===== ./static/content/courses/intro-python/variables.md =====
---
title: Variables and Data Types
description: Learn about different types of data in Python and how to store them in variables
tags: ['python', 'basics', 'variables']
difficulty: beginner
estimatedTime: 45 minutes
prerequisites: ['none']
---

# Variables and Data Types in Python

Python is a dynamically typed language, which means you don't need to declare variable types explicitly. Let's explore the fundamental data types and how to work with variables.

## Basic Data Types

### Numbers

Python has several numeric types:

```python
# Integer
age = 25

# Float
height = 1.75

# Complex number
z = 3 + 4j
```

### Strings

Text data is represented using strings:

```python
# Single or double quotes
name = "Alice"
message = 'Hello, World!'

# Multi-line strings
description = """
This is a
multi-line string
"""
```

### Boolean

Boolean values are either `True` or `False`:

```python
is_student = True
has_passed = False
```

## Type Conversion

You can convert between types using built-in functions:

```python
# String to integer
age_str = "25"
age_num = int(age_str)

# Integer to string
count = 42
count_str = str(count)

# String to float
price_str = "19.99"
price = float(price_str)
```

## Practice Exercise

Try creating variables of different types and convert between them. Here's a starter exercise:

1. Create a string containing a number
2. Convert it to an integer
3. Multiply it by 2
4. Convert the result back to a string
5. Print the final result

```python
# Your solution here
number_str = "5"
number = int(number_str)
result = number * 2
result_str = str(result)
print(result_str)  # Should print "10"
```

## Key Points

- Variables in Python are created when you first assign a value
- Python determines the type automatically based on the value
- You can check a variable's type using the `type()` function
- Common type conversion functions: `int()`, `float()`, `str()`, `bool()`

## Next Steps

Practice working with different data types and try combining them in meaningful ways. In the next lesson, we'll learn about operators and how to perform operations on these variables.===== ./tailwind.config.cjs =====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        // Main theme colors
        primary: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b',
        },
        cherry: {
          50: '#fff1f2',
          100: '#ffe4e6',
          200: '#fecdd3',
          300: '#fda4af',
          400: '#fb7185',
          500: '#f43f5e',
          600: '#e11d48',
          700: '#be123c',
          800: '#9f1239',
          900: '#881337',
          950: '#4c0519',
        },
        secondary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
          950: '#082f49',
        },
        // Semantic colors
        surface: {
          DEFAULT: '#ffffff',
          dark: '#1a1a1a',
          secondary: '#f8fafc',
          'secondary-dark': '#2d2d2d'
        },
        text: {
          DEFAULT: '#1f2937',
          secondary: '#4b5563',
          light: '#f9fafb',
          'secondary-light': '#d1d5db',
          cherry: '#be123c'
        },
        math: {
          bg: 'rgba(244, 244, 252, 0.8)',
          'bg-dark': 'rgba(30, 41, 59, 0.5)',
          text: '#1e293b',
          'text-dark': '#e2e8f0'
        }
      },
      fontFamily: {
        jakarta: ['Plus Jakarta Sans', 'system-ui', 'sans-serif'],
        manrope: ['Manrope', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', 'monospace'],
        math: ['KaTeX_Math', 'STIXGeneral', 'Georgia', 'serif']
      },
      typography: (theme) => ({
        DEFAULT: {
          css: {
            '--tw-prose-body': theme('colors.text.DEFAULT'),
            '--tw-prose-headings': theme('colors.text.DEFAULT'),
            '--tw-prose-lead': theme('colors.text.secondary'),
            '--tw-prose-links': theme('colors.cherry.600'),
            '--tw-prose-bold': theme('colors.text.DEFAULT'),
            '--tw-prose-counters': theme('colors.text.secondary'),
            '--tw-prose-bullets': theme('colors.cherry.400'),
            '--tw-prose-hr': theme('colors.gray.200'),
            '--tw-prose-quotes': theme('colors.text.DEFAULT'),
            '--tw-prose-quote-borders': theme('colors.cherry.300'),
            '--tw-prose-captions': theme('colors.text.secondary'),
            '--tw-prose-code': theme('colors.cherry.700'),
            '--tw-prose-pre-code': theme('colors.text.light'),
            '--tw-prose-pre-bg': theme('colors.gray.800'),
            '--tw-prose-th-borders': theme('colors.gray.300'),
            '--tw-prose-td-borders': theme('colors.gray.200'),
            '--tw-prose-invert-body': theme('colors.text.light'),
            '--tw-prose-invert-headings': theme('colors.text.light'),
            '--tw-prose-invert-lead': theme('colors.text.secondary-light'),
            '--tw-prose-invert-links': theme('colors.cherry.400'),
            '--tw-prose-invert-bold': theme('colors.text.light'),
            '--tw-prose-invert-counters': theme('colors.text.secondary-light'),
            '--tw-prose-invert-bullets': theme('colors.cherry.500'),
            '--tw-prose-invert-hr': theme('colors.gray.700'),
            '--tw-prose-invert-quotes': theme('colors.text.light'),
            '--tw-prose-invert-quote-borders': theme('colors.cherry.600'),
            '--tw-prose-invert-captions': theme('colors.text.secondary-light'),
            '--tw-prose-invert-code': theme('colors.cherry.400'),
            '--tw-prose-invert-pre-code': theme('colors.gray.300'),
            '--tw-prose-invert-pre-bg': theme('colors.gray.900'),
            '--tw-prose-invert-th-borders': theme('colors.gray.600'),
            '--tw-prose-invert-td-borders': theme('colors.gray.700'),
            maxWidth: 'none',
            'h1, h2, h3, h4': {
              fontWeight: '600',
              fontFamily: theme('fontFamily.jakarta').join(', '),
            },
            'code::before': { content: 'none' },
            'code::after': { content: 'none' },
            '.math-display': {
              margin: '1rem 0',
              'overflow-x': 'auto',
              'overflow-y': 'hidden'
            },
            '.math-inline': {
              display: 'inline-block',
              'vertical-align': 'middle',
              padding: '0 0.2em'
            }
          }
        },
        lg: {
          css: {
            fontSize: '1.125rem',
            lineHeight: '1.75',
          }
        }
      }),
      borderRadius: {
        'squircle': '24px',
        'squircle-sm': '18px',
        'squircle-lg': '28px',
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
        'card': '0 0 25px rgba(0, 0, 0, 0.04), 0 0 10px rgba(0, 0, 0, 0.02)',
        'math': '0 2px 8px rgba(0, 0, 0, 0.05)'
      }
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
  safelist: [
    {
      pattern: /^(bg|text|border|ring|from|to)-(primary|secondary|surface|math|cherry|text)-\d{2,3}$/,
    },
    'squircle',
    'squircle-sm',
    'squircle-lg',
    'math-display',
    'math-inline'
  ]
};
===== ./dist/stores/pipStores.d.ts =====
export declare const pipVisible: import("svelte/store").Writable<boolean>;
export declare const pipMinimized: import("svelte/store").Writable<boolean>;
export declare const activePipTool: import("svelte/store").Writable<null>;
export declare const activeTool: import("svelte/store").Writable<string>;
export interface TimerMode {
    type: 'work' | 'shortBreak' | 'longBreak';
}
export interface TimerState {
    mode: TimerMode;
    timeLeft: number;
    isRunning: boolean;
    cycle: number;
}
export interface TimerSettings {
    workDuration: number;
    shortBreakDuration: number;
    longBreakDuration: number;
    longBreakInterval: number;
}
export declare const timerState: import("svelte/store").Writable<TimerState>;
export declare const timerSettings: import("svelte/store").Writable<TimerSettings>;
export interface TodoItem {
    id: string;
    text: string;
    completed: boolean;
    createdAt: number;
    description?: string;
    deadline?: string;
    emergency?: number;
    tag?: string;
}
export declare const todos: import("svelte/store").Writable<TodoItem[]>;
export interface NoteItem {
    id: string;
    title: string;
    content: string;
    createdAt: number;
    updatedAt: number;
}
export declare const notes: import("svelte/store").Writable<NoteItem[]>;
export declare const notepadContent: import("svelte/store").Writable<string>;
export interface FocusSession {
    timestamp: number;
    duration: number;
}
export declare const focusSessions: import("svelte/store").Writable<FocusSession[]>;
export interface ExerciseSession {
    exerciseId: string;
    timestamp: number;
    completed: boolean;
}
export declare const exerciseSessions: import("svelte/store").Writable<ExerciseSession[]>;
export interface Flashcard {
    id: string;
    front: string;
    back: string;
    lastReviewed?: number;
    nextReview?: number;
    level: number;
    tags: string[];
}
export declare const flashcards: import("svelte/store").Writable<Flashcard[]>;
export declare const flashcardStats: import("svelte/store").Writable<{
    totalReviews: number;
    correctReviews: number;
    streakDays: number;
    lastReviewDate: number | null;
}>;
export declare const calcDisplay: import("svelte/store").Writable<string>;
export declare const calcCurrentInput: import("svelte/store").Writable<string>;
export declare const calcOperator: import("svelte/store").Writable<string | null>;
export declare const calcPreviousValue: import("svelte/store").Writable<number | null>;
export declare const calcWaitingForSecondOperand: import("svelte/store").Writable<boolean>;
===== ./dist/stores/authStore.js =====
import { writable } from 'svelte/store';
import { logout as firebaseLogout } from '../authService.js';
export const isAuthenticated = writable(false);
export const user = writable(null);
export const loading = writable(true);
export const authError = writable(null);
export const logout = firebaseLogout;
===== ./dist/stores/appStore.js =====
import { writable } from 'svelte/store';
import { persistentStore } from './persistentStore.js';
// UI State
export const sidebarOpen = writable(false);
export const courseModalOpen = writable(false);
export const currentCourse = writable(null);
// User-related State
export const user = writable({
    name: 'Alex Morgan',
    email: 'alex@example.com',
    avatar: '',
    streak: 7
});
// Progress stats
export const progressStats = writable({
    coursesInProgress: 3,
    exercisesCompleted: 28,
    learningStreak: 5,
    totalHoursSpent: 42
});
// Modal visibility state
export const modals = writable({
    courseContentOpen: false,
});
===== ./dist/stores/persistentStore.js =====
import { writable } from 'svelte/store';
import { browser } from '$app/environment'; // Ensure code only runs in browser

/**
 * Creates a Svelte writable store that automatically persists to localStorage.
 * @template T
 * @param {string} key The localStorage key.
 * @param {T} initialValue The initial value if nothing is in localStorage.
 * @returns {import('svelte/store').Writable<T>}
 */
export function persistentStore(key, initialValue) {
    let initial = initialValue;
    if (browser) { // Check if running in the browser context
        const storedValue = localStorage.getItem(key);
        if (storedValue !== null) {
            try {
                initial = JSON.parse(storedValue);
            } catch (e) {
                console.error(`Error parsing localStorage key "${key}":`, e);
                localStorage.removeItem(key); // Remove corrupted data
                initial = initialValue;
            }
        }
    }

    const store = writable(initial);

    if (browser) {
        store.subscribe(value => {
            // Prevent writing undefined to localStorage
            if (value !== undefined) {
              localStorage.setItem(key, JSON.stringify(value));
            }
        });
    }

    return store;
}

// Track completed exercises (array of exercise IDs)
export const completedExercises = persistentStore('completedExercises', []);
// Track bookmarked exercises with reason and date
export const bookmarks = persistentStore('bookmarkedExercises', []);===== ./dist/stores/authStore.d.ts =====
import type { User } from 'firebase/auth';
import { logout as firebaseLogout } from '../authService.js';
export declare const isAuthenticated: import("svelte/store").Writable<boolean>;
export declare const user: import("svelte/store").Writable<User | null>;
export declare const loading: import("svelte/store").Writable<boolean>;
export declare const authError: import("svelte/store").Writable<string | null>;
export declare const logout: typeof firebaseLogout;
===== ./dist/stores/adminStore.d.ts =====
export declare const isAdmin: import("svelte/store").Readable<any>;
===== ./dist/stores/userProfileStore.js =====
import { writable } from 'svelte/store';
import { getUserProfile, createUserProfile, updateUserProfile as updateUserProfileService } from '../services/userService.js';
export const userProfile = writable(null);
export const userProfileLoading = writable(false);
export const userProfileError = writable(null);
/**
 * Load or create the user profile for the given UID and email/displayName.
 */
export async function loadUserProfile(uid, email, displayName) {
    userProfileLoading.set(true);
    userProfileError.set(null);
    try {
        let profile = await getUserProfile(uid);
        if (!profile) {
            // create new profile
            const now = Date.now();
            profile = {
                uid,
                email,
                displayName,
                createdAt: now,
                preferences: {
                    enrollments: [],
                    focusSessions: [],
                    tasks: [],
                    notes: ''
                }
            };
            await createUserProfile(profile);
        }
        userProfile.set(profile);
    }
    catch (err) {
        console.error('Error loading user profile:', err);
        userProfileError.set(err.message);
        userProfile.set(null);
    }
    finally {
        userProfileLoading.set(false);
    }
}
export const updateUserProfile = updateUserProfileService;
===== ./dist/stores/pipStores.js =====
import { writable } from 'svelte/store';
import { persistentStore } from './persistentStore.js';
// State for the PiP widget itself
export const pipVisible = writable(false);
export const pipMinimized = writable(false);
export const activePipTool = persistentStore('learnflow-active-pip-tool', null); // Persist active tool
// Currently active tool in the PIP widget
export const activeTool = writable('timer');
const initialTimerState = {
    mode: { type: 'work' },
    timeLeft: 25 * 60, // Default 25 mins work
    isRunning: false,
    cycle: 0
};
// Active timer state (persistent)
export const timerState = persistentStore('learnflow-timer-state', initialTimerState);
// Timer settings with default values
export const timerSettings = persistentStore('learnflow-timer-settings', {
    workDuration: 25 * 60, // 25 minutes
    shortBreakDuration: 5 * 60, // 5 minutes
    longBreakDuration: 15 * 60, // 15 minutes
    longBreakInterval: 4 // Long break after 4 work sessions
});
export const todos = persistentStore('learnflow-todos', []);
export const notes = persistentStore('learnflow-notes', []);
// --- Notepad Content Store ---
export const notepadContent = persistentStore('learnflow-notepad-content', '');
// Store an array of completed focus sessions (persistent)
export const focusSessions = persistentStore('learnflow-focus-sessions', []);
// Store an array of completed exercise sessions (persistent)
export const exerciseSessions = persistentStore('learnflow-exercise-sessions', []);
export const flashcards = persistentStore('learnflow-flashcards', []);
export const flashcardStats = writable({
    totalReviews: 0,
    correctReviews: 0,
    streakDays: 0,
    lastReviewDate: null
});
// --- Calculator Store --- (Transient state)
export const calcDisplay = writable('0');
export const calcCurrentInput = writable('');
export const calcOperator = writable(null);
export const calcPreviousValue = writable(null);
export const calcWaitingForSecondOperand = writable(false);
===== ./dist/stores/forumStore.d.ts =====
export declare const subscribedTopics: import("svelte/store").Writable<string[]>;
===== ./dist/stores/appStore.d.ts =====
export declare const sidebarOpen: import("svelte/store").Writable<boolean>;
export declare const courseModalOpen: import("svelte/store").Writable<boolean>;
export declare const currentCourse: import("svelte/store").Writable<null>;
export declare const user: import("svelte/store").Writable<{
    name: string;
    email: string;
    avatar: string;
    streak: number;
}>;
export interface User {
    id: string;
    name: string;
    email: string;
    avatar: string | null;
    streakDays: number;
}
export declare const progressStats: import("svelte/store").Writable<{
    coursesInProgress: number;
    exercisesCompleted: number;
    learningStreak: number;
    totalHoursSpent: number;
}>;
export declare const modals: import("svelte/store").Writable<{
    courseContentOpen: boolean;
}>;
===== ./dist/stores/forumStore.js =====
import { persistentStore } from './persistentStore.js';
// Store list of subscribed topic IDs
export const subscribedTopics = persistentStore('learnflow-subscribed-topics', []);
===== ./dist/stores/userProfileStore.d.ts =====
import type { UserProfile } from '../services/userService.js';
import { updateUserProfile as updateUserProfileService } from '../services/userService.js';
export declare const userProfile: import("svelte/store").Writable<UserProfile | null>;
export declare const userProfileLoading: import("svelte/store").Writable<boolean>;
export declare const userProfileError: import("svelte/store").Writable<string | null>;
/**
 * Load or create the user profile for the given UID and email/displayName.
 */
export declare function loadUserProfile(uid: string, email: string, displayName?: string): Promise<void>;
export declare const updateUserProfile: typeof updateUserProfileService;
===== ./dist/stores/adminStore.js =====
import { derived } from 'svelte/store';
import { user } from './authStore.js';
import { env } from '$env/dynamic/public';
const ADMIN_EMAILS = (env.PUBLIC_VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());
export const isAdmin = derived(user, $user => {
    if (!$user || !$user.email)
        return false;
    return ADMIN_EMAILS.includes($user.email);
});
===== ./dist/stores/persistentStore.d.ts =====
/**
 * Creates a Svelte writable store that automatically persists to localStorage.
 * @template T
 * @param {string} key The localStorage key.
 * @param {T} initialValue The initial value if nothing is in localStorage.
 * @returns {import('svelte/store').Writable<T>}
 */
export function persistentStore<T>(key: string, initialValue: T): import("svelte/store").Writable<T>;
export const completedExercises: import("svelte/store").Writable<never[]>;
export const bookmarks: import("svelte/store").Writable<never[]>;
===== ./dist/firebase.d.ts =====
import { type Auth } from 'firebase/auth';
declare let app: any;
declare let auth: Auth;
declare let analytics: null;
export { app, auth, analytics };
===== ./dist/firebase.js =====
import { initializeApp } from 'firebase/app';
import { getAuth, connectAuthEmulator } from 'firebase/auth';
import { getAnalytics } from 'firebase/analytics';
// Firebase configuration
// For development, provide sensible defaults if env vars not defined
const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "demo-key-for-development",
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "demo-project.firebaseapp.com",
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "demo-project",
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "demo-project.appspot.com",
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "123456789",
    appId: import.meta.env.VITE_FIREBASE_APP_ID || "1:123456789:web:a1b2c3d4e5f6",
    measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || "G-ABCDEF"
};
// For debugging
console.log('Firebase config:', {
    apiKey: firebaseConfig.apiKey ? (firebaseConfig.apiKey.substring(0, 3) + '...') : 'missing',
    authDomain: firebaseConfig.authDomain || 'missing',
    projectId: firebaseConfig.projectId || 'missing'
});
// Initialize Firebase
let app;
let auth;
let analytics = null;
try {
    console.log('Initializing Firebase app');
    app = initializeApp(firebaseConfig);
    // Initialize Firebase Authentication
    console.log('Initializing Firebase auth');
    auth = getAuth(app);
    // Use auth emulator if in development
    if (import.meta.env.DEV && import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true') {
        console.log('Connecting to Firebase Auth emulator');
        connectAuthEmulator(auth, 'http://localhost:9099');
    }
    // Initialize Analytics if in browser environment
    if (typeof window !== 'undefined') {
        try {
            console.log('Initializing Firebase analytics');
            analytics = getAnalytics(app);
        }
        catch (error) {
            console.warn('Failed to initialize Firebase Analytics:', error);
        }
    }
    console.log('Firebase initialized successfully');
}
catch (error) {
    console.error('Error initializing Firebase:', error);
    // Provide fallback mock implementations for development/testing
    app = { name: 'mock-app' };
    // Simple mock auth with minimal functionality
    auth = {
        currentUser: null,
        // Mock implementation of onAuthStateChanged that immediately calls the callback with null
        // and returns an unsubscribe function
        onAuthStateChanged: (callback) => {
            // Call the callback with null (user not logged in)
            if (typeof callback === 'function') {
                callback(null);
            }
            // Return a function that would normally unsubscribe the listener
            return () => { };
        }
    };
}
export { app, auth, analytics };
===== ./dist/services/contentService.d.ts =====
/**
 * Content Service
 *
 * Handles loading and managing markdown content for courses and exercises
 */
export interface ContentMetadata {
    id: string;
    title: string;
    type: 'course' | 'exercise';
    slug: string;
    description?: string;
    tags?: string[];
    difficulty?: 'beginner' | 'intermediate' | 'advanced';
    prerequisites?: string[];
    estimatedTime?: string;
    created?: string;
    updated?: string;
}
export interface ContentItem extends ContentMetadata {
    content: string;
}
/**
 * Load markdown content from a file
 */
export declare function loadContent(type: 'course' | 'exercise', id: string): Promise<ContentItem | null>;
/**
 * List available content items (with basic metadata)
 */
export declare function listContent(type: 'course' | 'exercise'): Promise<ContentMetadata[]>;
===== ./dist/services/contentService.js =====
/**
 * Content Service
 *
 * Handles loading and managing markdown content for courses and exercises
 */
import { browser } from '$app/environment';
// Content directory paths
const BASE_CONTENT_PATH = '/content';
const COURSES_PATH = `${BASE_CONTENT_PATH}/courses`;
const EXERCISES_PATH = `${BASE_CONTENT_PATH}/exercises`;
/**
 * Extract metadata from markdown content
 * This parses the first h1 as title and looks for metadata in frontmatter or content
 */
function extractMetadata(content, id, type) {
    // Default metadata
    const metadata = {
        id,
        title: id,
        type,
        slug: id,
    };
    try {
        // Extract title from the first h1
        const titleMatch = content.match(/^# (.*$)/m);
        if (titleMatch && titleMatch[1]) {
            metadata.title = titleMatch[1].trim();
        }
        // Extract description from the first paragraph after the title
        const descriptionMatch = content.match(/^# .*$\s+([^#].*)/m);
        if (descriptionMatch && descriptionMatch[1]) {
            metadata.description = descriptionMatch[1].trim();
        }
        // Parse difficulty from content
        if (content.includes('## Difficulty:')) {
            if (content.includes('beginner'))
                metadata.difficulty = 'beginner';
            else if (content.includes('intermediate'))
                metadata.difficulty = 'intermediate';
            else if (content.includes('advanced'))
                metadata.difficulty = 'advanced';
        }
        // Extract estimated time if mentioned
        const timeMatch = content.match(/estimated time:?\s*([^\n]+)/i);
        if (timeMatch && timeMatch[1]) {
            metadata.estimatedTime = timeMatch[1].trim();
        }
        // Extract tags from content if mentioned
        const tagsMatch = content.match(/tags:?\s*([^\n]+)/i);
        if (tagsMatch && tagsMatch[1]) {
            metadata.tags = tagsMatch[1].split(',').map(tag => tag.trim());
        }
    }
    catch (error) {
        console.error('Error extracting metadata:', error);
    }
    return metadata;
}
/**
 * Load markdown content from a file
 */
export async function loadContent(type, id) {
    if (!browser)
        return null;
    try {
        const basePath = type === 'course' ? COURSES_PATH : EXERCISES_PATH;
        const response = await fetch(`${basePath}/${id}.md`);
        if (!response.ok) {
            console.error(`Failed to load ${type} content:`, response.statusText);
            return null;
        }
        const content = await response.text();
        const metadata = extractMetadata(content, id, type);
        return {
            ...metadata,
            content
        };
    }
    catch (error) {
        console.error(`Error loading ${type} content:`, error);
        return null;
    }
}
/**
 * List available content items (with basic metadata)
 */
export async function listContent(type) {
    // In a real application, you would have an API endpoint that returns the list of content items
    // For this example, we'll use a hardcoded list of available content
    if (type === 'course') {
        return [
            {
                id: 'sample-course',
                title: 'Introduction to Web Development',
                type: 'course',
                slug: 'intro-web-dev',
                description: 'Learn the basics of web development with HTML, CSS, and JavaScript',
                difficulty: 'beginner',
                estimatedTime: '3 hours',
                tags: ['html', 'css', 'javascript', 'web']
            },
            {
                id: 'bezout-theorem',
                title: "Bezout's Theorem and Identity",
                type: 'course',
                slug: 'bezout-theorem',
                description: "Understanding Bézout's identity, the extended GCD algorithm, and applications.",
                difficulty: 'intermediate',
                estimatedTime: '90 minutes',
                tags: ['math', 'number theory', 'gcd', 'bezout']
            }
        ];
    }
    else {
        return [
            {
                id: 'html-basics-exercise',
                title: 'HTML Basics Exercise',
                type: 'exercise',
                slug: 'html-basics',
                description: 'Practice creating a simple HTML webpage with various elements',
                difficulty: 'beginner',
                estimatedTime: '45 minutes',
                tags: ['html', 'practice']
            },
            {
                id: 'bezout-identity-exercise',
                title: "Bézout's Identity Exercises",
                type: 'exercise',
                slug: 'bezout-identity',
                description: "Exercises on computing GCD, extended Euclidean algorithm, and Bézout coefficients.",
                difficulty: 'intermediate',
                estimatedTime: '30 minutes',
                tags: ['math', 'number theory', 'gcd', 'bezout']
            }
        ];
    }
}
===== ./dist/services/userService.server.js =====
import pkg from 'pg';
const { Pool } = pkg;
import { env } from '$env/dynamic/private';
const pool = new Pool({
    connectionString: env.DATABASE_URL
});
const ADMIN_EMAILS = (env.VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());
/**
 * Verifies if a user has admin privileges based on their email
 */
export async function verifyUserIsAdmin(email) {
    if (!email)
        return false;
    return ADMIN_EMAILS.includes(email);
}
/**
 * Fetches all user profiles from the database (admin only)
 */
export async function getAllUsers() {
    try {
        const result = await pool.query('SELECT * FROM users');
        return result.rows;
    }
    catch (error) {
        console.error('Error fetching users:', error);
        throw error;
    }
}
===== ./dist/services/forumService.d.ts =====
/**
 * Fetches a topic by its ID from the database.
 * @param {string} topicId The ID of the topic to fetch.
 * @returns {Promise<object|null>} The topic data or null if not found.
 */
export declare function getTopicById(topicId: string): Promise<any>;
/**
 * Get a specific topic by ID - alias for getTopicById for consistent API
 */
export declare function getTopic(id: string): Promise<any>;
/**
 * Updates a forum topic
 */
export declare function updateTopic(id: string, data: {
    title?: string;
    content?: string;
    category_id?: string;
    is_pinned?: boolean;
    is_locked?: boolean;
}): Promise<any>;
/**
 * Deletes a forum topic and all its posts
 */
export declare function deleteTopic(id: string): Promise<boolean>;
/**
 * Fetches a list of all topics from the database.
 * @returns {Promise<object[]>} A list of topics.
 */
export declare function getAllTopics(): Promise<any[]>;
/**
 * Fetches a list of all forum categories from the database.
 * @returns {Promise<object[]>} A list of categories.
 */
export declare function getAllCategories(): Promise<any[]>;
/**
 * Fetches all posts for a given forum topic from the database.
 * @param {string} topicId The ID of the topic to fetch posts for.
 * @returns {Promise<object[]>} A list of posts.
 */
export declare function getPostsByTopicId(topicId: string): Promise<any[]>;
/**
 * Updates a forum category
 */
export declare function updateCategory(id: string, data: {
    name?: string;
    description?: string;
    icon?: string;
    color?: string;
}): Promise<any>;
/**
 * Creates a new forum category
 */
export declare function createCategory(data: {
    name: string;
    description: string;
    icon: string;
    color: string;
}): Promise<any>;
/**
 * Deletes a forum category
 * Note: This will fail if there are topics in this category
 */
export declare function deleteCategory(id: string): Promise<boolean>;
/**
 * Get a specific category by ID
 */
export declare function getCategory(id: string): Promise<any>;
/**
 * Creates a new forum post
 */
export declare function createPost(data: {
    topic_id: string;
    author_id: string;
    content: string;
}): Promise<any>;
/**
 * Updates a forum post
 */
export declare function updatePost(id: string, content: string): Promise<any>;
/**
 * Deletes a forum post
 */
export declare function deletePost(id: string): Promise<boolean>;
/**
 * Creates a new forum topic with an initial post
 */
export declare function createTopic(data: {
    title: string;
    content: string;
    category_id: string;
    author_id: string;
}): Promise<any>;
/**
 * Handles voting on a forum topic
 */
export declare function handleTopicVote(topicId: string, userId: string, voteType: 1 | -1): Promise<{
    upvotes: number;
    downvotes: number;
    userVote: 1 | -1;
}>;
===== ./dist/services/groupService.js =====
import pkg from 'pg';
const { Pool } = pkg;
import { env } from '$env/dynamic/private';
// Configure the connection pool
const pool = new Pool({
    connectionString: env.DATABASE_URL
});
/**
 * Get all groups with member status for a given user
 */
export async function getAllGroups(userId = null) {
    const client = await pool.connect();
    try {
        const groupsRes = await client.query('SELECT * FROM groups ORDER BY created_at DESC');
        const groups = groupsRes.rows;
        let memberGroupIds = [];
        if (userId) {
            const memberRes = await client.query('SELECT group_id FROM group_members WHERE user_id = $1', [userId]);
            memberGroupIds = memberRes.rows.map((r) => r.group_id);
        }
        // Attach isMember flag
        return groups.map((g) => ({
            ...g,
            isMember: memberGroupIds.includes(g.id)
        }));
    }
    catch (err) {
        console.error('Error fetching groups:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Get a specific group by ID with its members
 */
export async function getGroupById(groupId) {
    const client = await pool.connect();
    try {
        const groupRes = await client.query('SELECT * FROM groups WHERE id = $1', [groupId]);
        if (groupRes.rowCount === 0) {
            return null;
        }
        const group = groupRes.rows[0];
        const membersRes = await client.query('SELECT user_id FROM group_members WHERE group_id = $1', [groupId]);
        return {
            group,
            members: membersRes.rows
        };
    }
    catch (err) {
        console.error('Error fetching group:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Create a new group
 */
export async function createGroup(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        // Create group
        const groupRes = await client.query(`INSERT INTO groups (name, description, topic, image, is_public, created_by)
       VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`, [data.name, data.description, data.topic, data.image, data.is_public ?? true, data.created_by]);
        // Add creator as first member
        await client.query('INSERT INTO group_members (group_id, user_id) VALUES ($1, $2)', [groupRes.rows[0].id, data.created_by]);
        await client.query('COMMIT');
        return groupRes.rows[0];
    }
    catch (err) {
        await client.query('ROLLBACK');
        console.error('Error creating group:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Join a group
 */
export async function joinGroup(groupId, userId) {
    const client = await pool.connect();
    try {
        await client.query('INSERT INTO group_members (group_id, user_id) VALUES ($1, $2) ON CONFLICT DO NOTHING', [groupId, userId]);
        return true;
    }
    catch (err) {
        console.error('Error joining group:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Leave a group
 */
export async function leaveGroup(groupId, userId) {
    const client = await pool.connect();
    try {
        await client.query('DELETE FROM group_members WHERE group_id = $1 AND user_id = $2', [groupId, userId]);
        return true;
    }
    catch (err) {
        console.error('Error leaving group:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
===== ./dist/services/groupService.d.ts =====
/**
 * Get all groups with member status for a given user
 */
export declare function getAllGroups(userId?: string | null): Promise<any[]>;
/**
 * Get a specific group by ID with its members
 */
export declare function getGroupById(groupId: string): Promise<{
    group: any;
    members: any[];
} | null>;
/**
 * Create a new group
 */
export declare function createGroup(data: {
    name: string;
    description: string;
    topic: string;
    image?: string;
    is_public?: boolean;
    created_by: string;
}): Promise<any>;
/**
 * Join a group
 */
export declare function joinGroup(groupId: string, userId: string): Promise<boolean>;
/**
 * Leave a group
 */
export declare function leaveGroup(groupId: string, userId: string): Promise<boolean>;
===== ./dist/services/userService.server.d.ts =====
export interface UserProfile {
    uid: string;
    email: string;
    displayName?: string;
    createdAt: number;
    preferences?: Record<string, any>;
}
/**
 * Verifies if a user has admin privileges based on their email
 */
export declare function verifyUserIsAdmin(email: string | null | undefined): Promise<boolean>;
/**
 * Fetches all user profiles from the database (admin only)
 */
export declare function getAllUsers(): Promise<UserProfile[]>;
===== ./dist/services/forumService.js =====
import pkg from 'pg';
const { Pool } = pkg;
import { env } from '$env/dynamic/private';
// Configure the connection pool
const pool = new Pool({
    connectionString: env.DATABASE_URL
});
/**
 * Fetches a topic by its ID from the database.
 * @param {string} topicId The ID of the topic to fetch.
 * @returns {Promise<object|null>} The topic data or null if not found.
 */
export async function getTopicById(topicId) {
    const client = await pool.connect();
    try {
        const res = await client.query(`SELECT 
        t.id, t.title, t.content, t.category_id as category,
        json_build_object('id', u.id, 'name', u.name, 'avatar', u.avatar) as author,
        t.created_at as createdAt,
        t.updated_at as updatedAt,
        (SELECT COUNT(*) FROM forum_posts p WHERE p.topic_id = t.id) as repliesCount,
        COALESCE(t.views_count, 0) as viewsCount
      FROM forum_topics t
      JOIN users u ON t.author_id = u.id
      WHERE t.id = $1`, [topicId]);
        if (res.rows.length > 0) {
            return res.rows[0];
        }
        else {
            return null;
        }
    }
    catch (err) {
        console.error('Error fetching topic by ID:', err);
        // Optionally, re-throw the error or handle it as needed
        throw new Error('Failed to fetch topic from database');
    }
    finally {
        client.release(); // Release the client back to the pool
    }
}
/**
 * Get a specific topic by ID - alias for getTopicById for consistent API
 */
export function getTopic(id) {
    return getTopicById(id);
}
/**
 * Updates a forum topic
 */
export async function updateTopic(id, data) {
    const client = await pool.connect();
    try {
        const updates = [];
        const values = [];
        if (data.title !== undefined) {
            updates.push(`title = $${updates.length + 1}`);
            values.push(data.title);
        }
        if (data.content !== undefined) {
            updates.push(`content = $${updates.length + 1}`);
            values.push(data.content);
        }
        if (data.category_id !== undefined) {
            updates.push(`category_id = $${updates.length + 1}`);
            values.push(data.category_id);
        }
        if (data.is_pinned !== undefined) {
            updates.push(`is_pinned = $${updates.length + 1}`);
            values.push(data.is_pinned);
        }
        if (data.is_locked !== undefined) {
            updates.push(`is_locked = $${updates.length + 1}`);
            values.push(data.is_locked);
        }
        // Add updated_at timestamp
        updates.push(`updated_at = NOW()`);
        if (updates.length === 0) {
            return null; // Nothing to update
        }
        values.push(id);
        const query = `
      UPDATE forum_topics
      SET ${updates.join(', ')}
      WHERE id = $${values.length}
      RETURNING *
    `;
        const res = await client.query(query, values);
        if (res.rows.length === 0) {
            return null;
        }
        return res.rows[0];
    }
    catch (err) {
        console.error('Error updating topic:', err);
        throw new Error('Failed to update topic');
    }
    finally {
        client.release();
    }
}
/**
 * Deletes a forum topic and all its posts
 */
export async function deleteTopic(id) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        // Delete all posts first (foreign key constraint)
        await client.query('DELETE FROM forum_posts WHERE topic_id = $1', [id]);
        // Delete the topic
        const res = await client.query('DELETE FROM forum_topics WHERE id = $1 RETURNING *', [id]);
        await client.query('COMMIT');
        if (res.rows.length === 0) {
            return false;
        }
        return true;
    }
    catch (err) {
        await client.query('ROLLBACK');
        console.error('Error deleting topic:', err);
        throw new Error('Failed to delete topic');
    }
    finally {
        client.release();
    }
}
/**
 * Fetches a list of all topics from the database.
 * @returns {Promise<object[]>} A list of topics.
 */
export async function getAllTopics() {
    const client = await pool.connect();
    try {
        const res = await client.query(`SELECT 
        t.id, t.title, t.category_id as category,
        json_build_object('id', u.id, 'name', u.name, 'avatar', u.avatar) as author,
        t.created_at as createdAt,
        t.updated_at as updatedAt,
        t.is_pinned, t.is_locked,
        (SELECT COUNT(*) FROM forum_posts p WHERE p.topic_id = t.id) as repliesCount,
        COALESCE(t.views_count, 0) as viewsCount
      FROM forum_topics t
      JOIN users u ON t.author_id = u.id
      ORDER BY t.is_pinned DESC, t.updated_at DESC`);
        return res.rows;
    }
    catch (err) {
        console.error('Error fetching topics (forum_topics):', err);
        throw new Error('Failed to fetch topics from database');
    }
    finally {
        client.release();
    }
}
/**
 * Fetches a list of all forum categories from the database.
 * @returns {Promise<object[]>} A list of categories.
 */
export async function getAllCategories() {
    const client = await pool.connect();
    try {
        const res = await client.query('SELECT * FROM forum_categories ORDER BY name ASC');
        console.log('Fetched categories from DB:', res.rows);
        return res.rows;
    }
    catch (err) {
        console.error('Error fetching categories:', err);
        throw new Error('Failed to fetch categories from database');
    }
    finally {
        client.release();
    }
}
/**
 * Fetches all posts for a given forum topic from the database.
 * @param {string} topicId The ID of the topic to fetch posts for.
 * @returns {Promise<object[]>} A list of posts.
 */
export async function getPostsByTopicId(topicId) {
    const client = await pool.connect();
    try {
        const res = await client.query(`SELECT p.*, u.name as author_name, u.avatar as author_avatar
       FROM forum_posts p
       JOIN users u ON p.author_id = u.id
       WHERE p.topic_id = $1
       ORDER BY p.created_at ASC`, [topicId]);
        return res.rows;
    }
    catch (err) {
        console.error('Error fetching posts for topic:', err);
        throw new Error('Failed to fetch posts from database');
    }
    finally {
        client.release();
    }
}
/**
 * Updates a forum category
 */
export async function updateCategory(id, data) {
    const client = await pool.connect();
    try {
        const updates = [];
        const values = [];
        if (data.name !== undefined) {
            updates.push(`name = $${updates.length + 1}`);
            values.push(data.name);
        }
        if (data.description !== undefined) {
            updates.push(`description = $${updates.length + 1}`);
            values.push(data.description);
        }
        if (data.icon !== undefined) {
            updates.push(`icon = $${updates.length + 1}`);
            values.push(data.icon);
        }
        if (data.color !== undefined) {
            updates.push(`color = $${updates.length + 1}`);
            values.push(data.color);
        }
        if (updates.length === 0) {
            return null; // Nothing to update
        }
        values.push(id);
        const query = `
      UPDATE forum_categories
      SET ${updates.join(', ')}
      WHERE id = $${values.length}
      RETURNING *
    `;
        const res = await client.query(query, values);
        if (res.rows.length === 0) {
            return null;
        }
        return res.rows[0];
    }
    catch (err) {
        console.error('Error updating category:', err);
        throw new Error('Failed to update category');
    }
    finally {
        client.release();
    }
}
/**
 * Creates a new forum category
 */
export async function createCategory(data) {
    const client = await pool.connect();
    try {
        const query = `
      INSERT INTO forum_categories (name, description, icon, color)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `;
        const res = await client.query(query, [
            data.name,
            data.description,
            data.icon,
            data.color
        ]);
        return res.rows[0];
    }
    catch (err) {
        console.error('Error creating category:', err);
        throw new Error('Failed to create category');
    }
    finally {
        client.release();
    }
}
/**
 * Deletes a forum category
 * Note: This will fail if there are topics in this category
 */
export async function deleteCategory(id) {
    const client = await pool.connect();
    try {
        // First check if there are topics in this category
        const checkRes = await client.query('SELECT COUNT(*) as topic_count FROM forum_topics WHERE category_id = $1', [id]);
        if (parseInt(checkRes.rows[0].topic_count) > 0) {
            throw new Error('Cannot delete category with topics');
        }
        const res = await client.query('DELETE FROM forum_categories WHERE id = $1 RETURNING *', [id]);
        if (res.rows.length === 0) {
            return false;
        }
        return true;
    }
    catch (err) {
        console.error('Error deleting category:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Get a specific category by ID
 */
export async function getCategory(id) {
    const client = await pool.connect();
    try {
        const res = await client.query('SELECT * FROM forum_categories WHERE id = $1', [id]);
        if (res.rows.length === 0) {
            return null;
        }
        return res.rows[0];
    }
    catch (err) {
        console.error('Error fetching category:', err);
        throw new Error('Failed to fetch category');
    }
    finally {
        client.release();
    }
}
/**
 * Creates a new forum post
 */
export async function createPost(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        // Create the post
        const postRes = await client.query(`
      INSERT INTO forum_posts (topic_id, author_id, content)
      VALUES ($1, $2, $3)
      RETURNING *
    `, [data.topic_id, data.author_id, data.content]);
        // Update topic's updated_at timestamp
        await client.query(`
      UPDATE forum_topics
      SET updated_at = CURRENT_TIMESTAMP
      WHERE id = $1
    `, [data.topic_id]);
        await client.query('COMMIT');
        return postRes.rows[0];
    }
    catch (err) {
        await client.query('ROLLBACK');
        console.error('Error creating post:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Updates a forum post
 */
export async function updatePost(id, content) {
    const client = await pool.connect();
    try {
        const res = await client.query(`
      UPDATE forum_posts
      SET content = $1, updated_at = CURRENT_TIMESTAMP
      WHERE id = $2
      RETURNING *
    `, [content, id]);
        if (res.rows.length === 0) {
            return null;
        }
        return res.rows[0];
    }
    catch (err) {
        console.error('Error updating post:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Deletes a forum post
 */
export async function deletePost(id) {
    const client = await pool.connect();
    try {
        const res = await client.query(`
      DELETE FROM forum_posts
      WHERE id = $1
      RETURNING *
    `, [id]);
        if (res.rows.length === 0) {
            return false;
        }
        return true;
    }
    catch (err) {
        console.error('Error deleting post:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Creates a new forum topic with an initial post
 */
export async function createTopic(data) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        // Create the topic
        const topicRes = await client.query(`
      INSERT INTO forum_topics (title, category_id, author_id, created_at, updated_at)
      VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
      RETURNING *
    `, [data.title, data.category_id, data.author_id]);
        // Create the first post
        await client.query(`
      INSERT INTO forum_posts (topic_id, author_id, content, created_at)
      VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
    `, [topicRes.rows[0].id, data.author_id, data.content]);
        await client.query('COMMIT');
        return topicRes.rows[0];
    }
    catch (err) {
        await client.query('ROLLBACK');
        console.error('Error creating topic:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
/**
 * Handles voting on a forum topic
 */
export async function handleTopicVote(topicId, userId, voteType) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        // Check for existing vote
        const existing = await client.query('SELECT * FROM forum_topic_votes WHERE topic_id = $1 AND user_id = $2', [topicId, userId]);
        let userVote = voteType;
        if (existing.rows.length) {
            if (existing.rows[0].vote_type === voteType) {
                // Toggle off (remove vote)
                await client.query('DELETE FROM forum_topic_votes WHERE id = $1', [existing.rows[0].id]);
                userVote = null;
            }
            else {
                // Update vote
                await client.query('UPDATE forum_topic_votes SET vote_type = $1 WHERE id = $2', [voteType, existing.rows[0].id]);
            }
        }
        else {
            // New vote
            await client.query('INSERT INTO forum_topic_votes (topic_id, user_id, vote_type, created_at) VALUES ($1, $2, $3, NOW())', [topicId, userId, voteType]);
        }
        // Recalculate counts
        const up = await client.query('SELECT COUNT(*) FROM forum_topic_votes WHERE topic_id = $1 AND vote_type = 1', [topicId]);
        const down = await client.query('SELECT COUNT(*) FROM forum_topic_votes WHERE topic_id = $1 AND vote_type = -1', [topicId]);
        // Update topic vote counts
        await client.query('UPDATE forum_topics SET upvotes = $1, downvotes = $2 WHERE id = $3', [up.rows[0].count, down.rows[0].count, topicId]);
        await client.query('COMMIT');
        return {
            upvotes: Number(up.rows[0].count),
            downvotes: Number(down.rows[0].count),
            userVote
        };
    }
    catch (err) {
        await client.query('ROLLBACK');
        console.error('Error processing vote:', err);
        throw err;
    }
    finally {
        client.release();
    }
}
// Add other forum-related functions here (e.g., addReply)
===== ./dist/services/userService.d.ts =====
export interface UserProfile {
    uid: string;
    email: string;
    displayName?: string;
    createdAt: number;
    preferences?: Record<string, any>;
}
/**
 * Load the user profile from Firestore. Returns null if not found.
 */
export declare function getUserProfile(uid: string): Promise<UserProfile | null>;
/**
 * Create a new user profile document in Firestore.
 */
export declare function createUserProfile(profile: UserProfile): Promise<void>;
/**
 * Update existing user profile fields.
 */
export declare function updateUserProfile(uid: string, data: Partial<UserProfile>): Promise<void>;
===== ./dist/services/userService.js =====
/**
 * Load the user profile from Firestore. Returns null if not found.
 */
export async function getUserProfile(uid) {
    if (typeof window === 'undefined')
        return null;
    const { getFirestore, doc, getDoc } = await import('firebase/firestore');
    const { app } = await import('../firebase.js');
    const db = getFirestore(app);
    const ref = doc(db, 'users', uid);
    const snap = await getDoc(ref);
    if (snap.exists()) {
        return snap.data();
    }
    return null;
}
/**
 * Create a new user profile document in Firestore.
 */
export async function createUserProfile(profile) {
    if (typeof window === 'undefined')
        return;
    const { getFirestore, doc, setDoc } = await import('firebase/firestore');
    const { app } = await import('../firebase.js');
    const db = getFirestore(app);
    const ref = doc(db, 'users', profile.uid);
    await setDoc(ref, profile);
}
/**
 * Update existing user profile fields.
 */
export async function updateUserProfile(uid, data) {
    if (typeof window === 'undefined')
        return;
    const { getFirestore, doc, updateDoc } = await import('firebase/firestore');
    const { app } = await import('../firebase.js');
    const db = getFirestore(app);
    const ref = doc(db, 'users', uid);
    await updateDoc(ref, data);
}
===== ./dist/authService.d.ts =====
import { updateProfile, type User } from 'firebase/auth';
declare function initAuth(): import("@firebase/util").Unsubscribe | undefined;
declare function register(email: string, password: string, displayName: string): Promise<void>;
declare function login(email: string, password: string): Promise<void>;
declare function loginWithGoogle(): Promise<void>;
declare function logout(): Promise<void>;
declare function resetPassword(email: string): Promise<void>;
declare function getCurrentUser(): User | null;
export { initAuth, register, login, loginWithGoogle, logout, resetPassword, getCurrentUser, updateProfile };
===== ./dist/components/CourseCarousel.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import CourseCard from './CourseCard.svelte';
  import '@splidejs/splide/dist/css/splide.min.css';
  // Import Splide JS type definitions if you have them installed (`npm install -D @splidejs/splide`)
  // import type Splide from '@splidejs/splide'; // Uncomment if types are installed

  // Sample courses data (remains the same)
  const courses = [
      { id: 'js-advanced', title: 'Ad JavaScript', description: 'Master modern JavaScript concepts', progress: 65, icon: 'fa-code', gradient: { from: 'blue-500', to: 'blue-400' } },
      { id: 'linear-algebra', title: 'Linear Algebra', description: 'Vectors, matrices and transformations', progress: 42, icon: 'fa-calculator', gradient: { from: 'purple-500', to: 'purple-400' } },
      { id: 'spanish', title: 'Spanish for Beginners', description: 'Build your vocabulary and grammar', progress: 78, icon: 'fa-language', gradient: { from: 'green-500', to: 'green-400' } },
      { id: 'quantum', title: 'Quantum Physics', description: 'Introduction to quantum mechanics', progress: 15, icon: 'fa-atom', gradient: { from: 'red-500', to: 'red-400' } }
  ];

  let splideElement: HTMLElement;
  let splideInstance: any = null; // Use `Splide | null = null;` if types installed

  const splideOptions = {
    type       : 'loop', // Or 'slide' if you don't want infinite looping
    perPage    : 3,
    gap        : '1.5rem', // Slightly increased gap
    pagination : false,
    focus      : 0,      // Start focus on the first slide
    omitEnd    : true,   // Useful with loop type to avoid empty space calculation issues
    // Consider adding keyboard navigation if desired: keyboard: 'global',
    breakpoints: {
      1024: {
        perPage: 2,
        gap: '1rem',
      },
      640: {
        perPage: 1,
        gap: '1rem',
      },
    },
  };

  // Function to initialize Splide
  const initSplide = () => {
    // Check if window.Splide exists and the element is available
    if (typeof window !== 'undefined' && window.Splide && splideElement) {
      // Destroy existing instance if it exists (prevents errors on hot reload)
      if (splideInstance) {
          splideInstance.destroy(true);
      }
      // Use 'any' or install types for better type safety
      splideInstance = new (window as any).Splide(splideElement, splideOptions).mount();
    }
  };

  // Function to load Splide script dynamically
  const loadSplideScript = (): Promise<void> => {
    return new Promise((resolve, reject) => {
        // Check if script already exists or is loading
        if (document.querySelector('script[src*="@splidejs/splide"]')) {
            // If Splide might already be loaded but not yet available on window, wait briefly
            const checkSplide = setInterval(() => {
                if (window.Splide) {
                    clearInterval(checkSplide);
                    resolve();
                }
            }, 100);
            // Add a timeout to prevent infinite loop
            setTimeout(() => {
                clearInterval(checkSplide);
                if (!window.Splide) reject(new Error("Splide failed to load"));
            }, 5000); // 5 second timeout
            return;
        }

        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js';
        script.async = true;
        script.onload = () => resolve();
        script.onerror = (err) => reject(err);
        document.head.appendChild(script);
    });
  };

  onMount(async () => {
    if (typeof window !== 'undefined') {
      if (!window.Splide) {
        try {
          await loadSplideScript();
          initSplide();
        } catch (error) {
          console.error("Failed to load Splide script:", error);
          // Handle the error appropriately, maybe show a message to the user
        }
      } else {
        initSplide();
      }
    }
    // Cleanup function to destroy Splide instance when component unmounts
    return () => {
      if (splideInstance) {
        splideInstance.destroy(true); // Pass true to completely remove Splide HTML/listeners
        splideInstance = null;
      }
    };
  });
</script>

<div class="course-carousel-container mb-8 py-4" style="--carousel-bg-rgb: 17, 24, 39;"> <div class="container mx-auto px-4"> <div class="flex justify-between items-center mb-6"> <h2 class="text-xl font-semibold text-gray-100">Continue Learning</h2> <a
        href="/courses"
        class="text-sm text-indigo-400 hover:text-indigo-200 font-medium transition-colors duration-200 ease-in-out"
      >
        View All
      </a>
    </div>

    <div class="splide" bind:this={splideElement}>
      <div class="splide__track">
        <ul class="splide__list">
          {#each courses as course (course.id)}
            <li class="splide__slide">
              <CourseCard {course} />
            </li>
          {/each}
        </ul>
      </div>
       </div>
  </div>
</div>

<style>
  /* Ensure container takes full width if needed */
  .course-carousel-container {
    width: 100%;
    overflow: hidden; /* Prevents fade extending beyond container */
    position: relative; /* Needed for positioning arrows relative to this container */
  }

  /* Splide track positioning for pseudo-elements */
  :global(.splide__track) {
    position: relative;
    /* Add some padding to prevent cards touching the fade effect directly */
    /* Adjust padding based on the fade width */
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    margin-left: -0.5rem; /* Counteract padding for alignment */
    margin-right: -0.5rem;
  }


  /* --- Refined Fade Effect --- */
  :global(.splide__track::before),
  :global(.splide__track::after) {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 6rem; /* Adjust width of the fade */
    z-index: 2; /* Above slides, below arrows */
    pointer-events: none; /* Allow clicks through */
  }

  /* Left edge gradient - uses CSS variable for background */
  :global(.splide__track::before) {
    left: 0;
    background: linear-gradient(to right,
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 1) 15%, /* Start solid */
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 0.7) 50%, /* Fade */
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 0) 100% /* Fully transparent */
    );
  }

  /* Right edge gradient - uses CSS variable for background */
  :global(.splide__track::after) {
    right: 0;
     background: linear-gradient(to left,
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 1) 15%,
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 0.7) 50%,
      rgba(var(--carousel-bg-rgb, 17, 24, 39), 0) 100%
    );
  }


  /* --- Refined Arrow Styling --- */
  :global(.splide__arrow) {
    /* Position adjustments if needed - relative to splide container */
    /* Example: Slightly offset */
    /* top: 50%; transform: translateY(-50%); */

    background: rgba(45, 55, 72, 0.6); /* Darker semi-transparent bg (e.g., gray-700 @ 60%) */
    opacity: 0; /* Hidden by default */
    transition: background-color 0.3s ease, opacity 0.3s ease;
    z-index: 3; /* Ensure arrows are above the fade effect */
    width: 2.5rem; /* Standard size */
    height: 2.5rem;
    border-radius: 50%; /* Make them circular */
  }

  /* Show arrows on hover of the main container */
   .course-carousel-container:hover :global(.splide__arrow) {
     opacity: 0.8;
   }
   :global(.splide__arrow:hover) {
     background: rgba(71, 85, 105, 0.9); /* Slightly darker/more opaque on hover (e.g., gray-600 @ 90%) */
     opacity: 1;
   }

  :global(.splide__arrow svg) {
    fill: #cbd5e1; /* Lighter gray icon (Tailwind slate-300) */
    width: 1.2em;  /* Adjust icon size */
    height: 1.2em;
    transition: fill 0.3s ease;
  }
   :global(.splide__arrow:hover svg) {
       fill: #ffffff; /* White on hover */
   }

  :global(.splide__arrow:disabled) {
    opacity: 0 !important; /* Hide disabled arrows completely */
    cursor: default;
  }

  /* Positioning arrows slightly inside the track area */
   :global(.splide__arrow--prev) {
     left: 1rem; /* Adjust as needed */
   }
   :global(.splide__arrow--next) {
     right: 1rem; /* Adjust as needed */
   }

  /* Ensure slides don't have unwanted background/borders */
  :global(.splide__slide) {
    background: transparent;
    border: none;
    padding: 0.25rem; /* Add slight padding around cards if needed */
  }
</style>===== ./dist/components/Header.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const Header: $$__sveltets_2_IsomorphicComponent<{
    onTogglePip?: () => void;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type Header = InstanceType<typeof Header>;
export default Header;
===== ./dist/components/CourseCarousel.svelte.d.ts =====
import '@splidejs/splide/dist/css/splide.min.css';
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const CourseCarousel: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type CourseCarousel = InstanceType<typeof CourseCarousel>;
export default CourseCarousel;
===== ./dist/components/GeneralWelcome.svelte =====
<!-- src/lib/components/GeneralWelcome.svelte -->
<div class="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white rounded-lg shadow-xl p-8 my-6">
  <h1 class="text-4xl font-bold mb-4">Welcome to LearnFlow!</h1>
  <p class="text-xl mb-6">Your personalized journey to knowledge starts here. Log in or sign up to track your progress, access exclusive content, and connect with fellow learners.</p>
  <p class="text-lg">Discover courses, tackle exercises, and watch your skills grow.</p>
  <!-- You can add a call-to-action button here if needed, though the login is in the header -->
  <!-- Example:
  <button
    class="mt-6 px-6 py-3 bg-white text-indigo-600 font-semibold rounded-lg shadow hover:bg-gray-100 transition duration-200"
    on:click={() => import('../authService.js').then(auth => auth.login())}
  >
    Get Started
  </button>
  -->
</div>

<div class="grid md:grid-cols-3 gap-6 my-8">
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Explore Courses</h2>
    <p class="text-gray-600 dark:text-gray-300">Browse our extensive library of courses across various domains.</p>
  </div>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Practice Exercises</h2>
    <p class="text-gray-600 dark:text-gray-300">Sharpen your skills with interactive exercises and real-time feedback.</p>
  </div>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Track Progress</h2>
    <p class="text-gray-600 dark:text-gray-300">Log in to monitor your learning journey and achievements.</p>
  </div>
</div> ===== ./dist/components/Sidebar.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const Sidebar: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type Sidebar = InstanceType<typeof Sidebar>;
export default Sidebar;
===== ./dist/components/ProgressMetrics.svelte =====
<script>
  export let metrics = [
    {
      title: "Courses in Progress",
      value: "3",
      icon: "fa-book",
      color: "indigo"
    },
    {
      title: "Exercises Completed",
      value: "24",
      icon: "fa-check-circle",
      color: "green"
    },
    {
      title: "Learning Streak",
      value: "7 days",
      icon: "fa-fire",
      color: "yellow"
    }
  ];
</script>

<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
  {#each metrics as metric}
    <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm card-hover">
      <div class="flex justify-between items-start">
        <div>
          <h3 class="text-gray-400 text-sm font-medium">{metric.title}</h3>
          <p class="text-2xl font-bold text-gray-100 mt-1">{metric.value}</p>
        </div>
        <div class="w-12 h-12 bg-indigo-900 rounded-full flex items-center justify-center">
          <i class="fas {metric.icon} text-indigo-300"></i>
        </div>
      </div>
    </div>
  {/each}
</div>
===== ./dist/components/PipWidget.svelte =====
<script lang="ts">
  import { fly } from 'svelte/transition';
  import { quintOut } from 'svelte/easing';
  import { pipVisible, activeTool } from '../stores/pipStores.js';
  import { onMount } from 'svelte';
  
  // Import the tool components
  import PipTimer from './pip/PipTimer.svelte';
  import PipTodo from './pip/PipTodo.svelte';
  import PipNotes from './pip/PipNotes.svelte';
  import PipCalculator from './pip/PipCalculator.svelte';
  import PipFlashcards from './pip/PipFlashcards.svelte';
  import PipDictionary from './pip/PipDictionary.svelte';
  
  // Tools configuration - Updated for Dark Theme
  const tools = [
    { id: 'timer', name: 'Timer', icon: 'fa-stopwatch', bgClass: 'bg-indigo-800', textClass: 'text-indigo-100', hoverClass: 'hover:bg-indigo-700' },
    { id: 'todo', name: 'Todo', icon: 'fa-list-check', bgClass: 'bg-green-800', textClass: 'text-green-100', hoverClass: 'hover:bg-green-700' },
    { id: 'notes', name: 'Notes', icon: 'fa-sticky-note', bgClass: 'bg-yellow-800', textClass: 'text-yellow-100', hoverClass: 'hover:bg-yellow-700' },
    { id: 'calculator', name: 'Calculator', icon: 'fa-calculator', bgClass: 'bg-purple-800', textClass: 'text-purple-100', hoverClass: 'hover:bg-purple-700' },
    { id: 'flashcards', name: 'Flashcards', icon: 'fa-layer-group', bgClass: 'bg-orange-800', textClass: 'text-orange-100', hoverClass: 'hover:bg-orange-700' },
    { id: 'dictionary', name: 'Dictionary', icon: 'fa-book', bgClass: 'bg-cyan-800', textClass: 'text-cyan-100', hoverClass: 'hover:bg-cyan-700' }
  ];
  
  let minimized = false;
  let widgetElement: HTMLElement;
  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let initialLeft = 0;
  let initialTop = 0;
  
  function closePip() {
    pipVisible.set(false);
    minimized = false;
  }
  
  function minimizePip() {
    minimized = !minimized;
  }
  
  function setTool(id: string) {
    activeTool.set(id);
    minimized = false;
  }
  
  // Draggable functionality
  function handleMouseDown(e: MouseEvent) {
    // Only drag via the header (check if the event target is within the header)
    const header = widgetElement.querySelector('.pip-header');
    if (!header || !header.contains(e.target as Node)) return;

    // Prevent dragging if clicking on buttons inside the header
    if (e.target instanceof Element && e.target.closest('button')) return; 

    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    const rect = widgetElement.getBoundingClientRect();
    initialLeft = rect.left;
    initialTop = rect.top;

    // Style changes for dragging state
    widgetElement.style.cursor = 'grabbing';
    document.body.style.userSelect = 'none'; // Prevent text selection
    widgetElement.style.bottom = 'auto'; // Ensure absolute positioning takes over
    widgetElement.style.right = 'auto';
  }
  
  function handleMouseMove(e: MouseEvent) {
    if (!isDragging) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    widgetElement.style.left = `${initialLeft + dx}px`;
    widgetElement.style.top = `${initialTop + dy}px`;
  }
  
  function handleMouseUp() {
    if (isDragging) {
      isDragging = false;
      widgetElement.style.cursor = 'grab';
      document.body.style.userSelect = ''; // Re-enable text selection
    }
  }
  
  onMount(() => {
    // Add event listeners to document for reliable drag tracking
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    
    // Initial cursor style
    if (widgetElement) widgetElement.style.cursor = 'grab';

    // Clean up
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      // Reset body style if component is destroyed mid-drag
      if (isDragging) {
         document.body.style.userSelect = '';
      }
    };
  });
</script>

{#if $pipVisible}
  <div
    bind:this={widgetElement}
    class="pip-widget {minimized ? 'minimized' : ''} bg-gray-800 text-gray-100 rounded-2xl overflow-hidden shadow-lg fixed bottom-4 right-4 z-50 squircle"
    style="position: fixed; bottom: 1rem; right: 1rem; cursor: grab;"
    role="region" 
    aria-label="Quick Tools Widget"
    transition:fly={{ y: 20, duration: 300, easing: quintOut }}
  >
    <div 
      class="pip-header bg-indigo-600 text-white p-2 flex justify-between items-center cursor-grab" 
      on:mousedown={handleMouseDown}
      role="button" 
      tabindex="0"
      aria-label="Drag quick tools widget"
      on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') handleMouseDown(e); }}
    >
      <h3 class="font-medium text-sm pl-2">Quick Tools</h3>
      <div>
        <button 
          on:click={minimizePip} 
          class="p-1 text-indigo-100 hover:bg-indigo-500 rounded-full focus:outline-none focus:ring-2 focus:ring-white"
          aria-label={minimized ? 'Expand widget' : 'Minimize widget'}
        >
          <i class="fas {minimized ? 'fa-expand' : 'fa-window-minimize'} w-3 h-3"></i>
        </button>
        <button 
          on:click={closePip} 
          class="p-1 text-indigo-100 hover:bg-indigo-500 rounded-full ml-1 focus:outline-none focus:ring-2 focus:ring-white"
          aria-label="Close widget"
        >
          <i class="fas fa-times w-3 h-3"></i>
        </button>
      </div>
    </div>
    
    {#if !minimized}
      <div class="p-3 border-b border-gray-700">
        <div class="grid grid-cols-4 gap-2">
          {#each tools as tool}
            <button
              on:click={() => setTool(tool.id)}
              class="p-2 {tool.bgClass} rounded-lg {tool.textClass} {tool.hoverClass} flex flex-col items-center text-center transition duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 { $activeTool === tool.id ? 'ring-2 ring-white' : 'ring-0' }"
            >
              <i class="fas {tool.icon} text-base mb-1"></i>
              <span class="text-xs font-medium">{tool.name}</span>
            </button>
          {/each}
        </div>
      </div>
      
      <div class="p-2 tool-content-area">
        {#if $activeTool === 'timer'}
          <PipTimer />
        {:else if $activeTool === 'todo'}
          <PipTodo />
        {:else if $activeTool === 'notes'}
          <PipNotes />
        {:else if $activeTool === 'calculator'}
          <PipCalculator />
        {:else if $activeTool === 'flashcards'}
          <PipFlashcards />
        {:else if $activeTool === 'dictionary'}
          <PipDictionary />
        {/if}
      </div>
    {/if}
  </div>
{/if}

<style>
  .pip-widget {
    width: 280px; /* Adjust width as needed */
    will-change: transform;
    transition: width 0.2s ease-out, height 0.2s ease-out;
  }
  .pip-widget.minimized {
     height: 44px; /* Adjust to match header height */
     width: auto; /* Or a fixed minimized width */
     overflow: hidden;
  }
  .tool-content-area {
      min-height: 150px; /* Give it some default height */
  }

  /* Custom scrollbar for the content area - Dark Theme */
  .tool-content-area ::-webkit-scrollbar {
      width: 6px;
  }
  .tool-content-area ::-webkit-scrollbar-track {
      background: transparent;
  }
  .tool-content-area ::-webkit-scrollbar-thumb {
      background-color: rgba(156, 163, 175, 0.4); /* gray-400 with opacity */
      border-radius: 3px;
      border: 1px solid transparent;
      background-clip: content-box;
  }
  .tool-content-area ::-webkit-scrollbar-thumb:hover {
      background-color: rgba(156, 163, 175, 0.6);
  }

  /* Add explicit Tailwind color classes for purging */
  .bg-indigo-50 { --tw-bg-opacity: 1; background-color: rgb(239 246 255 / var(--tw-bg-opacity)); }
  .text-indigo-700 { --tw-text-opacity: 1; color: rgb(67 56 202 / var(--tw-text-opacity)); }
  .hover\:bg-indigo-100:hover { --tw-bg-opacity: 1; background-color: rgb(224 231 255 / var(--tw-bg-opacity)); }
  .focus\:ring-indigo-400:focus { --tw-ring-color: rgb(129 140 248 / var(--tw-ring-opacity)); }
  .border-indigo-100 { --tw-border-opacity: 1; border-color: rgb(224 231 255 / var(--tw-border-opacity)); }
  .hover\:border-indigo-200:hover { --tw-border-opacity: 1; border-color: rgb(199 210 254 / var(--tw-border-opacity)); }

  .bg-green-50 { --tw-bg-opacity: 1; background-color: rgb(240 253 244 / var(--tw-bg-opacity)); }
  .text-green-700 { --tw-text-opacity: 1; color: rgb(21 128 61 / var(--tw-text-opacity)); }
  .hover\:bg-green-100:hover { --tw-bg-opacity: 1; background-color: rgb(220 252 231 / var(--tw-bg-opacity)); }
  .focus\:ring-green-400:focus { --tw-ring-color: rgb(74 222 128 / var(--tw-ring-opacity)); }
  .border-green-100 { --tw-border-opacity: 1; border-color: rgb(220 252 231 / var(--tw-border-opacity)); }
  .hover\:border-green-200:hover { --tw-border-opacity: 1; border-color: rgb(187 247 208 / var(--tw-border-opacity)); }

  .bg-blue-50 { --tw-bg-opacity: 1; background-color: rgb(239 246 255 / var(--tw-bg-opacity)); }
  .text-blue-700 { --tw-text-opacity: 1; color: rgb(29 78 216 / var(--tw-text-opacity)); }
  .hover\:bg-blue-100:hover { --tw-bg-opacity: 1; background-color: rgb(219 234 254 / var(--tw-bg-opacity)); }
  .focus\:ring-blue-400:focus { --tw-ring-color: rgb(96 165 250 / var(--tw-ring-opacity)); }
  .border-blue-100 { --tw-border-opacity: 1; border-color: rgb(219 234 254 / var(--tw-border-opacity)); }
  .hover\:border-blue-200:hover { --tw-border-opacity: 1; border-color: rgb(191 219 254 / var(--tw-border-opacity)); }

  .bg-purple-50 { --tw-bg-opacity: 1; background-color: rgb(250 245 255 / var(--tw-bg-opacity)); }
  .text-purple-700 { --tw-text-opacity: 1; color: rgb(126 34 206 / var(--tw-text-opacity)); }
  .hover\:bg-purple-100:hover { --tw-bg-opacity: 1; background-color: rgb(243 232 255 / var(--tw-bg-opacity)); }
  .focus\:ring-purple-400:focus { --tw-ring-color: rgb(192 132 252 / var(--tw-ring-opacity)); }
  .border-purple-100 { --tw-border-opacity: 1; border-color: rgb(243 232 255 / var(--tw-border-opacity)); }
  .hover\:border-purple-200:hover { --tw-border-opacity: 1; border-color: rgb(233 213 255 / var(--tw-border-opacity)); }

  .bg-orange-50 { --tw-bg-opacity: 1; background-color: rgb(255 237 213 / var(--tw-bg-opacity)); }
  .text-orange-700 { --tw-text-opacity: 1; color: rgb(234 88 12 / var(--tw-text-opacity)); }
  .hover\:bg-orange-100:hover { --tw-bg-opacity: 1; background-color: rgb(255 229 200 / var(--tw-bg-opacity)); }
  .focus\:ring-orange-400:focus { --tw-ring-color: rgb(251 146 60 / var(--tw-ring-opacity)); }
  .border-orange-100 { --tw-border-opacity: 1; border-color: rgb(255 229 200 / var(--tw-border-opacity)); }
  .hover\:border-orange-200:hover { --tw-border-opacity: 1; border-color: rgb(255 215 170 / var(--tw-border-opacity)); }
</style>===== ./dist/components/Sidebar.svelte =====
<script lang="ts">
  import { page } from '$app/stores';
  import { onMount } from 'svelte';
  // Import auth state
  import { isAuthenticated, user, loading } from '../stores/authStore.js';
  import { login } from '../authService.js'; // Import login function if needed for a button
  import { goto } from '$app/navigation';
  import { slide } from 'svelte/transition';

  // Navigation item type definitions
  type NavItem = {
    name: string;
    href: string;
    icon: string;
    authRequired: boolean;
  };
  
  type NavCategory = {
    title: string;
    items: NavItem[];
  };
  
  // Main navigation categories
  const navigation: NavCategory[] = [
    {
      title: 'Main',
      items: [
        { name: 'Dashboard', href: '/', icon: 'fa-home', authRequired: false },
        { name: 'Courses', href: '/courses', icon: 'fa-book', authRequired: false },
        { name: 'Exercises', href: '/exercises', icon: 'fa-pencil-alt', authRequired: false },
        { name: 'My Learning', href: '/my-learning', icon: 'fa-graduation-cap', authRequired: true },
        { name: 'Statistics', href: '/statistics', icon: 'fa-chart-line', authRequired: true },
        { name: 'Calendar', href: '/calendar', icon: 'fa-calendar', authRequired: true }
      ]
    },
    {
      title: 'Community',
      items: [
        { name: 'Discussion Forums', href: '/forums', icon: 'fa-comments', authRequired: false },
        { name: 'User Groups', href: '/groups', icon: 'fa-users', authRequired: true },
        { name: 'Events', href: '/events', icon: 'fa-calendar-alt', authRequired: false }
      ]
    },
    {
      title: 'Resources',
      items: [
        { name: 'Help Center', href: '/help', icon: 'fa-question-circle', authRequired: false },
        { name: 'Contact Support', href: '/support', icon: 'fa-headset', authRequired: false }
      ]
    },
    {
      title: 'Tools',
      items: [
        { name: 'Notepad', href: '/tools/notepad', icon: 'fa-sticky-note', authRequired: false },
        { name: 'Tasks', href: '/tools/tasks', icon: 'fa-list-check', authRequired: false },
        { name: 'AI Study Chat', href: '/tools/chat', icon: 'fa-robot', authRequired: false }
      ]
    }
  ];
  
  let mobileMenuOpen = false;
  let sidebarElement: HTMLElement;
  let expanded: Record<string, boolean> = {};
  
  function toggleMobileMenu() {
    mobileMenuOpen = !mobileMenuOpen;
    if (sidebarElement) {
      sidebarElement.classList.toggle('open');
    }
  }
  
  $: path = $page.url.pathname;
  
  function navigateToLogin() {
    goto('/login');
  }
  
  onMount(() => {
    sidebarElement = document.getElementById('sidebar') as HTMLElement;
    navigation.forEach(cat => expanded[cat.title] = true);
  });
</script>

<!-- Mobile Menu Button -->
<div class="lg:hidden fixed top-4 left-4 z-50">
  <button 
    id="mobileMenuBtn"
    on:click={toggleMobileMenu} 
    class="p-2 rounded-full bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-200 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    aria-label="Toggle mobile menu"
  >
    <i class="fas fa-bars"></i>
  </button>
</div>

<!-- Sidebar -->
<div id="sidebar" class="sidebar w-64 bg-gray-50 dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 shadow-lg fixed h-full z-30 transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out flex flex-col">
  <!-- Logo/Header -->
  <div class="p-4">
    <div class="flex items-center mb-6 pt-2 pb-4 border-b border-gray-200 dark:border-gray-700">
      <div class="w-10 h-10 rounded-full bg-indigo-600 flex items-center justify-center mr-3">
        <i class="fas fa-graduation-cap text-white"></i>
      </div>
      <h1 class="text-xl font-bold text-gray-800 dark:text-indigo-300">LearnFlow</h1>
    </div>
  </div>

  <!-- Scrollable Navigation -->
  <div class="flex-1 overflow-y-auto px-4">
    {#each navigation as category}
      <div class="mb-4">
        <button 
          class="w-full flex justify-between items-center px-3 py-2 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider focus:outline-none"
          on:click={() => expanded[category.title] = !expanded[category.title]}
        >
          <span>{category.title}</span>
          <i class={`fas fa-chevron-${expanded[category.title] ? 'down' : 'right'} text-sm transition-transform duration-200`}></i>
        </button>
        {#if expanded[category.title]}
          <ul in:slide={{ duration: 200 }} out:slide={{ duration: 200 }} class="mt-2 space-y-1">
            {#each category.items as item}
              {#if !item.authRequired || $isAuthenticated}
                <li>
                  <a 
                    href={item.href} 
                    class="flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150 ease-in-out {path === item.href 
                      ? 'bg-indigo-100 dark:bg-indigo-700 text-indigo-700 dark:text-indigo-100' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100'}"
                  >
                    <i class="fas {item.icon} mr-3 w-5 text-center"></i>
                    <span>{item.name}</span>
                  </a>
                </li>
              {/if}
            {/each}
          </ul>
        {/if}
      </div>
    {/each}
  </div>

  <!-- Account Section -->
  <div class="p-4 border-t border-gray-200 dark:border-gray-700">
    {#if $loading}
      <div class="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg animate-pulse">
        <div class="flex items-center mb-2">
          <div class="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 mr-2"></div>
          <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4"></div>
        </div>
        <div class="h-8 bg-gray-300 dark:bg-gray-600 rounded w-full"></div>
      </div>
    {:else if $isAuthenticated && $user}
      <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div class="flex items-center mb-3">
          <div class="w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center mr-2 text-white text-sm font-medium">
            {$user.displayName?.charAt(0).toUpperCase() ?? $user.email?.charAt(0).toUpperCase() ?? 'U'}
          </div>
          <span class="font-medium text-sm text-gray-800 dark:text-gray-100 truncate">{$user.displayName ?? $user.email ?? 'User'}</span>
        </div>
        <a href="/settings" class="w-full py-2 px-3 bg-gray-200 dark:bg-gray-700 rounded-md text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 block text-center transition duration-150">
          Account Settings
        </a>
      </div>
    {:else}
       <!-- Logged Out View -->
       <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg text-center">
         <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">Log in to track your progress and access personalized features.</p>
         <button 
           class="w-full py-2 px-3 bg-indigo-600 hover:bg-indigo-700 rounded-md text-sm font-medium text-white transition duration-150"
           on:click={navigateToLogin}
          >
           Log In / Sign Up
         </button>
       </div>
    {/if}
  </div>
</div>

<style>
  /* Add styles for mobile menu */
  @media (max-width: 1023px) {
    .sidebar {
      /* Start hidden off-screen */
    }
    .sidebar.open {
      transform: translateX(0);
    }
  }
</style>===== ./dist/components/Login.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const Login: $$__sveltets_2_IsomorphicComponent<{
    redirectTo?: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type Login = InstanceType<typeof Login>;
export default Login;
===== ./dist/components/FocusTimeChart.svelte =====
<!-- learnflow-app/src/lib/components/FocusTimeChart.svelte -->
<script lang="ts">
  import { onMount, onDestroy, afterUpdate } from 'svelte';
  import { Chart, registerables } from 'chart.js';
  import type { FocusSession } from '../stores/pipStores.js';
  import 'chartjs-adapter-date-fns'; // Import the date adapter
  import { enUS } from 'date-fns/locale';

  Chart.register(...registerables);

  export let sessions: FocusSession[] = [];
  export let timeUnit: 'day' | 'week' | 'month' = 'day'; // For x-axis scale

  let canvasElement: HTMLCanvasElement;
  let chartInstance: Chart | null = null;

  // Function to process data and update chart
  function updateChart() {
    if (!chartInstance || !canvasElement) return;

    // Aggregate data by the selected time unit
    const aggregatedData: { [key: string]: number } = {};
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const startOfWeek = new Date(startOfDay);
    startOfWeek.setDate(startOfDay.getDate() - startOfDay.getDay()); // Sunday start
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    sessions.forEach(session => {
        const sessionDate = new Date(session.timestamp);
        let key = '';

        if (timeUnit === 'day') {
            // Aggregate by day (e.g., only show last 7 days)
             const dayDiff = Math.floor((startOfDay.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24));
             if(dayDiff >= 0 && dayDiff < 7) { // Show last 7 days including today
                key = sessionDate.toISOString().split('T')[0];
             }
        } else if (timeUnit === 'week') {
            // Aggregate by week (e.g., show last 4 weeks)
            const weekDiff = Math.floor((startOfWeek.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24 * 7));
             if(weekDiff >= 0 && weekDiff < 4) { // Show last 4 weeks including this week
                const weekStartDate = new Date(sessionDate);
                weekStartDate.setDate(sessionDate.getDate() - sessionDate.getDay());
                key = weekStartDate.toISOString().split('T')[0]; // Key by Sunday of the week
             }
        } else if (timeUnit === 'month') {
             // Aggregate by month (e.g., show last 6 months)
             const monthDiff = (startOfMonth.getFullYear() - sessionDate.getFullYear()) * 12 + (startOfMonth.getMonth() - sessionDate.getMonth());
              if(monthDiff >= 0 && monthDiff < 6) { // Show last 6 months including this month
                key = `${sessionDate.getFullYear()}-${String(sessionDate.getMonth() + 1).padStart(2, '0')}`; // Key by YYYY-MM
              }
        }
        
        if (key) { // Only include if within the desired range
             if (!aggregatedData[key]) {
                aggregatedData[key] = 0;
             }
             aggregatedData[key] += session.duration / 60; // Add duration in minutes
        }
    });
    
    // Sort keys (dates/months) and prepare labels/data for chart
    const sortedKeys = Object.keys(aggregatedData).sort();
    const labels = sortedKeys; 
    const dataPoints = sortedKeys.map(key => aggregatedData[key]);

    // Update chart data
    chartInstance.data.labels = labels;
    chartInstance.data.datasets[0].data = dataPoints;

    // Adjust x-axis time unit
     chartInstance.options.scales!.x!.time!.unit = timeUnit;
     // Optional: Adjust tooltip/label formats based on unit
     if (timeUnit === 'day') {
         chartInstance.options.scales!.x!.time!.tooltipFormat = 'MMM d, yyyy';
         chartInstance.options.scales!.x!.time!.displayFormats = { day: 'MMM d' };
     } else if (timeUnit === 'week') {
         chartInstance.options.scales!.x!.time!.tooltipFormat = '\'Week of\' MMM d, yyyy';
          chartInstance.options.scales!.x!.time!.displayFormats = { week: 'MMM d' };
     } else { // month
          chartInstance.options.scales!.x!.time!.tooltipFormat = 'MMM yyyy';
          chartInstance.options.scales!.x!.time!.displayFormats = { month: 'MMM yyyy' };
     }

    chartInstance.update();
  }

  onMount(() => {
    chartInstance = new Chart(canvasElement, {
      type: 'bar',
      data: {
        labels: [], // Initial empty labels
        datasets: [{
          label: 'Focus Time (Minutes)',
          data: [], // Initial empty data
          backgroundColor: 'rgba(79, 70, 229, 0.6)', // Indigo-600 with opacity
          borderColor: 'rgba(79, 70, 229, 1)', // Indigo-600
          borderWidth: 1,
          borderRadius: 4,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Minutes'
            },
            grid: {
                 color: 'rgba(200, 200, 200, 0.1)' // Lighter grid lines
            }
          },
          x: {
             type: 'time',
             time: {
                 unit: timeUnit, // Set initial unit
                 // tooltipFormat: 'll', // Example: moment.js format, adjust for date-fns if needed
             },
             adapters: {
                 date: { locale: enUS } // Set date-fns locale
             },
             grid: {
                 display: false // Hide x-axis grid lines
             },
             ticks: {
                 maxRotation: 0,
                 autoSkip: true,
                 // Use source: 'auto' or 'labels' based on aggregation
                 source: 'auto' 
             }
          }
        },
        plugins: {
            legend: {
                display: false // Hide legend if only one dataset
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                 backgroundColor: 'rgba(0, 0, 0, 0.8)',
                 titleFont: { size: 14 },
                 bodyFont: { size: 12 },
                 padding: 10,
            }
        }
      }
    });

    updateChart(); // Initial chart render

    return () => {
      chartInstance?.destroy(); // Cleanup chart instance
    };
  });

  // Update chart when props change
  afterUpdate(() => {
      if (chartInstance) {
         updateChart();
      }
  });

</script>

<div class="chart-container" style="position: relative; height:300px;">
  <canvas bind:this={canvasElement}></canvas>
</div> ===== ./dist/components/Footer.svelte =====
<script lang="ts">
  const currentYear = new Date().getFullYear();
</script>

<footer class="bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-inner py-4 mt-12">
  <div class="max-w-7xl mx-auto px-4 text-center text-sm text-gray-500 dark:text-gray-400">
    © {currentYear} LearnFlow. All rights reserved.
  </div>
</footer>===== ./dist/components/ActivityItem.svelte =====
<script lang="ts">
  export let activity = {
    id: '',
    type: '', // 'completed', 'started', 'achievement'
    title: '',
    description: '',
    timestamp: '',
    icon: 'fa-check-circle',
    color: 'indigo' // indigo, blue, green
  };
  
  // Get appropriate icon and color based on activity type
  $: icon = activity.icon || 
    (activity.type === 'completed' ? 'fa-check-circle' : 
     activity.type === 'started' ? 'fa-book' : 
     activity.type === 'achievement' ? 'fa-trophy' : 'fa-circle');
     
  $: color = activity.color || 
    (activity.type === 'completed' ? 'indigo' : 
     activity.type === 'started' ? 'blue' : 
     activity.type === 'achievement' ? 'green' : 'gray');
</script>

<div class="flex items-start">
  <div class="w-10 h-10 bg-indigo-900 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
    <i class="fas {icon} text-indigo-300"></i>
  </div>
  <div>
    <h3 class="font-medium text-gray-100">{activity.title}</h3>
    <p class="text-gray-300 text-sm">{activity.description}</p>
    <p class="text-gray-400 text-xs mt-1">{activity.timestamp}</p>
  </div>
</div> ===== ./dist/components/ResetPassword.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ResetPassword: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ResetPassword = InstanceType<typeof ResetPassword>;
export default ResetPassword;
===== ./dist/components/ResetPassword.svelte =====
<script lang="ts">
  import { resetPassword } from '../authService.js';
  import { loading, authError } from '../stores/authStore.js';
  
  let email = '';
  let localError = '';
  let successMessage = '';
  
  async function handleResetPassword() {
    localError = '';
    successMessage = '';
    
    if (!email) {
      localError = 'Please enter your email address';
      return;
    }
    
    try {
      await resetPassword(email);
      successMessage = 'Password reset email sent. Check your inbox.';
      email = ''; // Clear form after successful submission
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Reset Password</h2>
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  {#if successMessage}
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{successMessage}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleResetPassword} class="space-y-4">
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
      <p class="text-xs text-gray-500 mt-1">We'll send you a link to reset your password</p>
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading}
      >
        {#if $loading}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Send Reset Link
      </button>
    </div>
  </form>
  
  <div class="mt-4 text-center">
    <a href="/login" class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
      Back to login
    </a>
  </div>
</div> ===== ./dist/components/CourseModal.svelte.d.ts =====
export default CourseModal;
type CourseModal = SvelteComponent<{
    markdownContent?: string | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: string | undefined;
};
declare const CourseModal: $$__sveltets_2_IsomorphicComponent<{
    markdownContent?: string | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
===== ./dist/components/ActivityFeed.svelte =====
<script lang="ts">
  import ActivityItem from './ActivityItem.svelte';
  
  // Sample activity data (in a real app, this would come from an API or store)
  const activities = [
    {
      id: '1',
      type: 'completed',
      title: 'Completed exercise',
      description: 'JavaScript Closure Exercise',
      timestamp: '2 hours ago',
      icon: 'fa-check-circle',
      color: 'indigo'
    },
    {
      id: '2',
      type: 'started',
      title: 'Started new course',
      description: 'Quantum Physics',
      timestamp: 'Yesterday',
      icon: 'fa-book',
      color: 'blue'
    },
    {
      id: '3',
      type: 'achievement',
      title: 'Achievement unlocked',
      description: '7-Day Learning Streak',
      timestamp: '3 days ago',
      icon: 'fa-trophy',
      color: 'green'
    }
  ];
</script>

<div>
  <h2 class="text-lg font-semibold text-gray-100 mb-4">Recent Activity</h2>
  
  <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm">
    <div class="space-y-4">
      {#each activities as activity (activity.id)}
        <ActivityItem {activity} />
      {/each}
    </div>
  </div>
</div> ===== ./dist/components/ActivityItem.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ActivityItem: $$__sveltets_2_IsomorphicComponent<{
    activity?: {
        id: string;
        type: string;
        title: string;
        description: string;
        timestamp: string;
        icon: string;
        color: string;
    };
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ActivityItem = InstanceType<typeof ActivityItem>;
export default ActivityItem;
===== ./dist/components/CourseFlashcardGenerator.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const CourseFlashcardGenerator: $$__sveltets_2_IsomorphicComponent<{
    content?: string;
    courseName?: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type CourseFlashcardGenerator = InstanceType<typeof CourseFlashcardGenerator>;
export default CourseFlashcardGenerator;
===== ./dist/components/WelcomeBanner.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const WelcomeBanner: $$__sveltets_2_IsomorphicComponent<{
    username?: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type WelcomeBanner = InstanceType<typeof WelcomeBanner>;
export default WelcomeBanner;
===== ./dist/components/RecentActivity.svelte.d.ts =====
export default RecentActivity;
type RecentActivity = SvelteComponent<{
    activities?: {
        type: string;
        title: string;
        content: string;
        timeAgo: string;
        icon: string;
        color: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: string | undefined;
};
declare const RecentActivity: $$__sveltets_2_IsomorphicComponent<{
    activities?: {
        type: string;
        title: string;
        content: string;
        timeAgo: string;
        icon: string;
        color: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
===== ./dist/components/Header.svelte =====
<script lang="ts">
  import { pipVisible } from '../stores/pipStores.js';
  import { isAuthenticated, user, loading } from '../stores/authStore.js';
  import { logout } from '../authService.js';
  import { slide } from 'svelte/transition';
  import { goto } from '$app/navigation';

  export let onTogglePip = () => pipVisible.update((v: boolean) => !v);
  
  function navigateToLogin() {
    goto('/login');
  }
</script>

<header class="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40">
  <div class="max-w-full mx-auto px-4 py-3 sm:px-6 lg:px-8 flex justify-between items-center">
    <div class="flex-1">
      <div class="relative max-w-lg">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <i class="fas fa-search text-gray-400"></i>
        </div>
        <input 
          type="text" 
          class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Search courses, exercises..."
        >
      </div>
    </div>

    <div class="ml-4 flex items-center space-x-3">
      <button 
        class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        aria-label="Show notifications"
      >
        <i class="fas fa-bell"></i>
      </button>
      
      <button 
        id="pipToggle" 
        class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        on:click={onTogglePip}
        aria-label="Toggle learning tools widget"
      >
        <i class="fas fa-puzzle-piece"></i>
      </button>

      {#if $loading}
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div>
      {:else if $isAuthenticated && $user}
        <div class="flex items-center space-x-3">
          <div class="h-8 w-8 rounded-full bg-indigo-500 flex items-center justify-center text-white text-sm font-medium">
            {$user.displayName?.charAt(0).toUpperCase() ?? $user.email?.charAt(0).toUpperCase() ?? 'U'}
          </div>
          <button 
            class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
            on:click={logout}
          >
            Log out
          </button>
        </div>
      {:else}
        <button 
          class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
          on:click={navigateToLogin}
        >
          Log in
        </button>
      {/if}
    </div>
  </div>
</header>===== ./dist/components/pip/PipDictionary.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipDictionary: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipDictionary = InstanceType<typeof PipDictionary>;
export default PipDictionary;
===== ./dist/components/pip/PipTodo.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipTodo: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipTodo = InstanceType<typeof PipTodo>;
export default PipTodo;
===== ./dist/components/pip/PipFlashcards.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/pip/PipFlashcards.svelte -->
<script lang="ts">
  import { writable } from 'svelte/store';
  import { persistentStore } from '../../stores/persistentStore';

  interface Flashcard {
    id: string;
    front: string;
    back: string;
    lastReviewed?: number;
    nextReview?: number;
    level: number; // 0-5 for spaced repetition
  }

  const flashcards = persistentStore<Flashcard[]>('learnflow-flashcards', []);
  let currentCard: Flashcard | null = null;
  let showingFront = true;
  let newCardFront = '';
  let newCardBack = '';

  // Get next card based on spaced repetition algorithm
  function getNextCard(): Flashcard | null {
    const now = Date.now();
    const cards = $flashcards.filter(card => !card.nextReview || card.nextReview <= now);
    if (cards.length === 0) return null;
    return cards[Math.floor(Math.random() * cards.length)];
  }

  function addCard() {
    if (!newCardFront.trim() || !newCardBack.trim()) return;
    
    const card: Flashcard = {
      id: crypto.randomUUID(),
      front: newCardFront,
      back: newCardBack,
      level: 0
    };
    
    flashcards.update(cards => [...cards, card]);
    newCardFront = '';
    newCardBack = '';
  }

  function flipCard() {
    showingFront = !showingFront;
  }

  function reviewCard(success: boolean) {
    if (!currentCard) return;
    
    const now = Date.now();
    let nextLevel = success ? currentCard.level + 1 : Math.max(0, currentCard.level - 1);
    nextLevel = Math.min(5, nextLevel);
    
    // Calculate next review time using spaced repetition
    const intervals = [
      1000 * 60 * 30,        // 30 minutes
      1000 * 60 * 60 * 4,    // 4 hours
      1000 * 60 * 60 * 24,   // 1 day
      1000 * 60 * 60 * 24 * 3,  // 3 days
      1000 * 60 * 60 * 24 * 7,  // 1 week
      1000 * 60 * 60 * 24 * 14  // 2 weeks
    ];

    flashcards.update(cards => 
      cards.map(card => 
        card.id === currentCard.id 
          ? {
              ...card,
              level: nextLevel,
              lastReviewed: now,
              nextReview: now + intervals[nextLevel]
            }
          : card
      )
    );

    // Move to next card
    currentCard = getNextCard();
    showingFront = true;
  }

  // Start reviewing
  $: if (!currentCard) {
    currentCard = getNextCard();
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-orange-300 uppercase mb-2">Flashcards</h4>

  {#if $flashcards.length === 0}
    <!-- Add first card form -->
    <div class="text-center p-4">
      <p class="text-gray-300 text-sm mb-4">Create your first flashcard:</p>
      <div class="space-y-2">
        <input
          type="text"
          bind:value={newCardFront}
          placeholder="Front side..."
          class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
        />
        <textarea
          bind:value={newCardBack}
          placeholder="Back side..."
          rows="2"
          class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
        ></textarea>
        <button
          on:click={addCard}
          class="w-full py-2 bg-orange-600 text-white rounded font-medium hover:bg-orange-700 transition"
        >
          Add Card
        </button>
      </div>
    </div>
  {:else}
    <!-- Review interface -->
    {#if currentCard}
      <div class="p-4">
        <div
          class="min-h-[120px] p-4 bg-gray-800 rounded-lg shadow-inner flex items-center justify-center cursor-pointer transition-transform hover:scale-[1.02] select-none"
          on:click={flipCard}
        >
          <p class="text-gray-100 text-center">
            {showingFront ? currentCard.front : currentCard.back}
          </p>
        </div>
        
        <div class="flex justify-between mt-4">
          <button
            on:click={() => reviewCard(false)}
            class="px-4 py-2 bg-red-600 text-white rounded font-medium hover:bg-red-700 transition"
          >
            Again
          </button>
          <button
            on:click={() => reviewCard(true)}
            class="px-4 py-2 bg-green-600 text-white rounded font-medium hover:bg-green-700 transition"
          >
            Good
          </button>
        </div>
      </div>
    {:else}
      <div class="text-center p-4">
        <p class="text-gray-300">No cards due for review!</p>
      </div>
    {/if}

    <!-- Add new card button -->
    <div class="mt-2 border-t border-gray-600 pt-2">
      <details class="text-sm">
        <summary class="text-gray-300 cursor-pointer hover:text-gray-100">Add New Card</summary>
        <div class="mt-2 space-y-2">
          <input
            type="text"
            bind:value={newCardFront}
            placeholder="Front side..."
            class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
          />
          <textarea
            bind:value={newCardBack}
            placeholder="Back side..."
            rows="2"
            class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
          ></textarea>
          <button
            on:click={addCard}
            class="w-full py-2 bg-orange-600 text-white rounded font-medium hover:bg-orange-700 transition"
          >
            Add Card
          </button>
        </div>
      </details>
    </div>
  {/if}
</div>===== ./dist/components/pip/PipDictionary.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/pip/PipDictionary.svelte -->
<script lang="ts">
  interface Definition {
    definition: string;
    example?: string;
  }

  interface Meaning {
    partOfSpeech: string;
    definitions: Definition[];
  }

  interface DictionaryResult {
    word: string;
    phonetic?: string;
    meanings: Meaning[];
  }

  let searchTerm = '';
  let searching = false;
  let result: DictionaryResult | null = null;
  let error: string | null = null;

  async function lookupWord(term: string): Promise<void> {
    if (!term.trim()) return;
    
    searching = true;
    error = null;
    result = null;
    
    try {
      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(term)}`);
      if (!response.ok) throw new Error('Word not found');
      const data = await response.json();
      result = data[0] as DictionaryResult;
    } catch (e: any) {
      error = e.message;
    } finally {
      searching = false;
    }
  }

  function handleSubmit() {
    if (searchTerm.trim()) {
      lookupWord(searchTerm);
    }
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-cyan-300 uppercase mb-2">Dictionary</h4>
  
  <form on:submit|preventDefault={handleSubmit} class="mb-3">
    <div class="flex gap-2">
      <input
        type="text"
        bind:value={searchTerm}
        placeholder="Enter a word..."
        class="flex-1 px-3 py-1.5 bg-gray-800 text-gray-100 rounded border border-gray-600 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500"
      >
      <button
        type="submit"
        class="px-3 py-1.5 bg-cyan-600 text-white rounded hover:bg-cyan-700 transition disabled:opacity-50"
        disabled={searching || !searchTerm.trim()}
      >
        {#if searching}
          <i class="fas fa-spinner fa-spin"></i>
        {:else}
          <i class="fas fa-search"></i>
        {/if}
      </button>
    </div>
  </form>

  {#if error}
    <div class="text-center p-4 text-red-400">
      <i class="fas fa-exclamation-circle mb-2 text-xl"></i>
      <p class="text-sm">{error}</p>
    </div>
  {:else if result}
    <div class="space-y-3">
      <div>
        <div class="flex items-baseline gap-2 mb-1">
          <h3 class="text-lg font-bold text-gray-100">{result.word}</h3>
          {#if result.phonetic}
            <span class="text-sm text-gray-400">{result.phonetic}</span>
          {/if}
        </div>
        {#if result.meanings?.[0]?.definitions?.[0]}
          <p class="text-sm text-gray-300">{result.meanings[0].definitions[0].definition}</p>
        {/if}
      </div>

      {#if result.meanings?.length > 0}
        <div class="border-t border-gray-600 pt-2">
          {#each result.meanings.slice(0, 2) as meaning}
            <div class="mb-2">
              <span class="text-xs font-medium text-cyan-400">{meaning.partOfSpeech}</span>
              <ul class="mt-1 space-y-1">
                {#each meaning.definitions.slice(0, 2) as def}
                  <li class="text-sm text-gray-300">• {def.definition}</li>
                  {#if def.example}
                    <li class="text-xs text-gray-400 italic ml-4">"{def.example}"</li>
                  {/if}
                {/each}
              </ul>
            </div>
          {/each}
        </div>
      {/if}
    </div>
  {:else}
    <div class="text-center p-4 text-gray-400">
      <i class="fas fa-book mb-2 text-xl"></i>
      <p class="text-sm">Search for a word to see its definition</p>
    </div>
  {/if}
</div>===== ./dist/components/pip/PipNotes.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipNotes: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipNotes = InstanceType<typeof PipNotes>;
export default PipNotes;
===== ./dist/components/pip/PipTodo.svelte =====
<script lang="ts">
  import { todos, type TodoItem } from '../../stores/pipStores.js';
  import { flip } from 'svelte/animate';
  import { fade } from 'svelte/transition';

  let newTodoText = '';

  function addTodo() {
    console.log('[PipTodo] addTodo function called.');
    const text = newTodoText.trim();
    if (!text) {
      console.log('[PipTodo] addTodo: No text entered.');
      return;
    }
    const newTodo: TodoItem = {
      id: crypto.randomUUID(),
      text: text,
      completed: false,
      createdAt: Date.now()
    };
    console.log('[PipTodo] Adding new todo:', newTodo);
    todos.update(currentTodos => {
      const updatedTodos = [...currentTodos, newTodo];
      console.log('[PipTodo] Updated todos store:', updatedTodos);
      return updatedTodos;
    });
    newTodoText = ''; // Clear input
  }

  function toggleTodo(id: string) {
    todos.update(currentTodos =>
      currentTodos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  }

  function deleteTodo(id: string) {
      todos.update(currentTodos => currentTodos.filter(todo => todo.id !== id));
  }

  // Handle Enter key press in input
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      addTodo();
    }
  }

</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-green-300 uppercase mb-2">Todo List</h4>
  <div class="flex mb-2">
    <input
      type="text"
      bind:value={newTodoText}
      on:keydown={handleKeydown}
      placeholder="Add a new task..."
      class="flex-1 text-sm bg-gray-600 text-gray-100 border border-gray-500 rounded-l-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500 placeholder-gray-400"
    >
    <button
      on:click={addTodo}
      class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-r-md text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-green-400"
    >
      Add
    </button>
  </div>
  {#if $todos.length > 0}
    <ul class="space-y-1 max-h-40 overflow-y-auto pr-1">
      {#each $todos.sort((a, b) => a.createdAt - b.createdAt) as todo (todo.id)}
        <li
          class="flex items-center text-sm p-1.5 bg-gray-600 rounded-md group"
          animate:flip={{ duration: 200 }}
          transition:fade={{ duration: 150 }}
        >
          <input
            type="checkbox"
            bind:checked={todo.completed}
            on:change={() => toggleTodo(todo.id)}
            class="mr-2 h-4 w-4 form-checkbox bg-gray-500 border-gray-400 text-green-500 focus:ring-green-400 focus:ring-offset-gray-600 rounded"
            aria-labelledby="todo-text-{todo.id}"
          >
          <span
            id="todo-text-{todo.id}"
            class="flex-1 {todo.completed ? 'line-through text-gray-400' : 'text-gray-100'}"
          >
            {todo.text}
          </span>
           <button
             on:click={() => deleteTodo(todo.id)}
             class="ml-2 px-1 text-gray-400 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity duration-150 focus:outline-none"
             aria-label="Delete task"
           >
             <i class="fas fa-trash-alt fa-xs"></i>
           </button>
        </li>
      {/each}
    </ul>
  {:else}
    <p class="text-gray-400 text-xs italic text-center py-2">No tasks yet. Add one above!</p>
  {/if}
</div>
===== ./dist/components/pip/PipNotes.svelte =====
<script lang="ts">
  import { notes, type NoteItem } from '../../stores/pipStores.js';
  import { fade } from 'svelte/transition';
  import { flip } from 'svelte/animate';

  let newNoteContent = '';
  let showNewNoteInput = false;

  function addNote() {
    const content = newNoteContent.trim();
    if (!content) return;

    // Simple title generation (first few words or line)
    const title = content.split('\n')[0].substring(0, 30) || 'Untitled Note';

    const newNote: NoteItem = {
      id: crypto.randomUUID(),
      title: title,
      content: content,
      createdAt: Date.now(),
      updatedAt: Date.now()
    };
    notes.update(currentNotes => [newNote, ...currentNotes]); // Add to top
    newNoteContent = ''; // Clear input
    showNewNoteInput = false; // Hide input
  }

  function startNewNote() {
      showNewNoteInput = true;
      // TODO: Focus the textarea after it appears (requires a tick or timeout)
  }

  function cancelNewNote() {
      showNewNoteInput = false;
      newNoteContent = '';
  }

  // Function to delete a note (optional)
  function deleteNote(id: string) {
    notes.update(currentNotes => currentNotes.filter(note => note.id !== id));
  }

</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <div class="flex justify-between items-center mb-2">
    <h4 class="text-xs font-medium text-blue-300 uppercase">Quick Notes</h4>
    {#if !showNewNoteInput}
      <button
        on:click={startNewNote}
        class="px-2 py-0.5 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-blue-400"
      >
        + New
      </button>
    {/if}
  </div>

  {#if showNewNoteInput}
     <div transition:fade={{duration: 150}}>
       <textarea
         bind:value={newNoteContent}
         placeholder="Start typing your note..."
         rows="3"
         class="w-full text-sm bg-gray-600 text-gray-100 border border-gray-500 rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 placeholder-gray-400 mb-1"
       ></textarea>
        <div class="flex justify-end space-x-2">
           <button
             on:click={cancelNewNote}
             class="px-3 py-1 bg-gray-500 hover:bg-gray-400 text-gray-100 rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-gray-400"
           >
             Cancel
           </button>
           <button
             on:click={addNote}
             disabled={!newNoteContent.trim()}
             class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-blue-400 disabled:opacity-50 disabled:cursor-not-allowed"
           >
             Save Note
           </button>
        </div>
     </div>
  {/if}

  {#if $notes.length > 0 && !showNewNoteInput}
    <ul class="space-y-1 max-h-40 overflow-y-auto pr-1 mt-2">
      {#each $notes.sort((a, b) => b.updatedAt - a.updatedAt) as note (note.id)}
        <li
          class="group flex justify-between items-center text-sm p-1.5 bg-gray-600 hover:bg-gray-500 transition duration-150 rounded-md cursor-pointer"
          animate:flip={{ duration: 200 }}
          transition:fade={{ duration: 150 }}
          title={note.content.substring(0, 100) + (note.content.length > 100 ? '...' : '')}
        >
          <span class="text-gray-100 truncate pr-2">{note.title}</span>
          <button
             on:click|stopPropagation={() => deleteNote(note.id)}
             class="ml-2 px-1 text-gray-400 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity duration-150 focus:outline-none"
             aria-label="Delete note"
           >
             <i class="fas fa-trash-alt fa-xs"></i>
           </button>
        </li>
      {/each}
    </ul>
  {:else if !showNewNoteInput}
    <p class="text-gray-400 text-xs italic text-center py-2">No notes yet. Click '+ New' to add one.</p>
  {/if}
</div>
===== ./dist/components/pip/PipTimer.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipTimer: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipTimer = InstanceType<typeof PipTimer>;
export default PipTimer;
===== ./dist/components/pip/PipTimer.svelte =====
<script lang="ts">
  import { timerState, timerSettings, focusSessions, type FocusSession } from '../../stores/pipStores.js';
  import { onDestroy } from 'svelte';

  let intervalId: ReturnType<typeof setInterval> | null = null;

  // Format time left in seconds to MM:SS
  $: formattedTime = (() => {
    const minutes = Math.floor($timerState.timeLeft / 60);
    const seconds = $timerState.timeLeft % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  })();

  function startTimer() {
    if ($timerState.isRunning || intervalId) return;
    timerState.update(state => ({ ...state, isRunning: true }));

    intervalId = setInterval(() => {
      timerState.update(state => {
        if (state.timeLeft <= 0) {
          nextPhase();
          return state; // State is updated within nextPhase
        }
        return { ...state, timeLeft: state.timeLeft - 1 };
      });
    }, 1000);
  }

  function pauseTimer() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
    }
    timerState.update(state => ({ ...state, isRunning: false }));
  }

  function resetTimer() {
    pauseTimer();
    timerState.update(state => ({
      ...state,
      mode: 'work',
      timeLeft: $timerSettings.workDuration,
      cycle: 0
    }));
  }

  function nextPhase() {
      pauseTimer(); // Stop current interval

      // --- Record completed work session --- 
      if ($timerState.mode === 'work') {
        const completedSession: FocusSession = {
          timestamp: Date.now(),
          duration: $timerSettings.workDuration // Record the planned duration
        };
        focusSessions.update(sessions => [...sessions, completedSession]);
        console.log('Recorded focus session:', completedSession); // Optional logging
      }
      // --- End recording --- 

      let nextMode: typeof $timerState.mode = 'work';
      let nextTimeLeft = $timerSettings.workDuration;
      let nextCycle = $timerState.cycle;

      if ($timerState.mode === 'work') {
          nextCycle++;
          if (nextCycle % $timerSettings.longBreakInterval === 0) {
              nextMode = 'longBreak';
              nextTimeLeft = $timerSettings.longBreakDuration;
          } else {
              nextMode = 'shortBreak';
              nextTimeLeft = $timerSettings.shortBreakDuration;
          }
      } else { // If current mode is shortBreak or longBreak
          nextMode = 'work';
          nextTimeLeft = $timerSettings.workDuration;
      }

      timerState.set({
          mode: nextMode,
          timeLeft: nextTimeLeft,
          isRunning: false, // Start paused in the new phase
          cycle: nextCycle
      });
      
      // Optional: Auto-start the next phase?
      // startTimer(); 
      
      // Optional: Notify user (e.g., with a sound)
      // new Audio('/path/to/notification.mp3').play();
  }

  // Ensure interval is cleared when component is destroyed
  onDestroy(() => {
    pauseTimer();
  });

</script>

<div class="text-center p-2 bg-gray-700 rounded-lg">
  <div class="text-xs font-medium text-indigo-300 uppercase mb-1">{$timerState.mode.replace('B', ' B')}</div>
  <div class="text-3xl font-bold mb-3 text-gray-100 tracking-wider">{formattedTime}</div>
  <div class="flex justify-center space-x-2">
    {#if !$timerState.isRunning}
      <button on:click={startTimer} class="px-4 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-indigo-400">Start</button>
    {:else}
       <button on:click={pauseTimer} class="px-4 py-1 bg-yellow-600 hover:bg-yellow-700 text-white rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-yellow-400">Pause</button>
    {/if}
    <button on:click={resetTimer} class="px-4 py-1 bg-gray-600 text-gray-200 hover:bg-gray-500 rounded text-sm transition duration-150 focus:outline-none focus:ring-2 focus:ring-gray-400">Reset</button>
  </div>
</div>
===== ./dist/components/pip/PipCalculator.svelte =====
<script lang="ts">
  import { calcDisplay, calcCurrentInput, calcOperator, calcPreviousValue, calcWaitingForSecondOperand } from '../../stores/pipStores';

  function inputDigit(digit: string) {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set(digit);
      calcWaitingForSecondOperand.set(false);
    } else {
      calcDisplay.set($calcDisplay === '0' ? digit : $calcDisplay + digit);
    }
    calcCurrentInput.set($calcDisplay);
  }

  function inputDecimal() {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set('0.');
      calcWaitingForSecondOperand.set(false);
      return;
    }

    if (!$calcDisplay.includes('.')) {
      calcDisplay.set($calcDisplay + '.');
      calcCurrentInput.set($calcDisplay);
    }
  }

  function clearAll() {
    calcDisplay.set('0');
    calcCurrentInput.set('');
    calcOperator.set(null);
    calcPreviousValue.set(null);
    calcWaitingForSecondOperand.set(false);
  }

  function handleOperator(nextOperator: string) {
    const inputValue = parseFloat($calcDisplay);

    if ($calcPreviousValue === null) {
      calcPreviousValue.set(inputValue);
    } else if ($calcOperator) {
      const result = performCalculation();
      calcDisplay.set(String(result));
      calcPreviousValue.set(result);
    }

    calcWaitingForSecondOperand.set(true);
    calcOperator.set(nextOperator);
  }

  function performCalculation(): number {
    const prevValue = $calcPreviousValue;
    const currentValue = parseFloat($calcDisplay);

    if (prevValue === null) return currentValue;

    switch ($calcOperator) {
      case '+':
        return prevValue + currentValue;
      case '-':
        return prevValue - currentValue;
      case '*':
        return prevValue * currentValue;
      case '/':
        return prevValue / currentValue;
      default:
        return currentValue;
    }
  }

  function toggleSign() {
    calcDisplay.set(String(-parseFloat($calcDisplay)));
    calcCurrentInput.set($calcDisplay);
  }

  function calculatePercentage() {
    const currentValue = parseFloat($calcDisplay);
    const percentValue = currentValue / 100;
    calcDisplay.set(String(percentValue));
    calcCurrentInput.set($calcDisplay);
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-purple-300 uppercase mb-2">Calculator</h4>
  <input
    type="text"
    class="w-full text-right mb-2 px-2 py-1 border-0 focus:ring-0 text-xl font-mono bg-gray-800 text-gray-100 rounded-md"
    bind:value={$calcDisplay}
    readonly
  >
  <div class="grid grid-cols-4 gap-1">
    {#each ['AC', '+/-', '%', '/', '7', '8', '9', '*', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '='] as key}
      {@const isOperator = ['/', '*', '-', '+', '='].includes(key)}
      {@const isZero = key === '0'}
      {@const isClear = key === 'AC'}
      <button
        on:click={() => {
          if (key === 'AC') clearAll();
          else if (key === '+/-') toggleSign();
          else if (key === '%') calculatePercentage();
          else if (isOperator) handleOperator(key);
          else if (key === '.') inputDecimal();
          else inputDigit(key);
        }}
        class="p-2 rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-offset-gray-700
               {isZero ? 'col-span-2' : ''}
               {isOperator ? 'bg-purple-600 hover:bg-purple-700 text-white focus:ring-purple-400' : ''}
               {isClear ? 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-400' : ''}
               {!isOperator && !isClear ? 'bg-gray-600 hover:bg-gray-500 text-gray-100 focus:ring-gray-400' : ''}"
      >
        {#if key === '/'}÷
        {:else if key === '*'}<i class="fas fa-times"></i>
        {:else if key === '-'}<i class="fas fa-minus"></i>
        {:else if key === '+'}<i class="fas fa-plus"></i>
        {:else if key === '='}<i class="fas fa-equals"></i>
        {:else}{key}{/if}
      </button>
    {/each}
  </div>
</div>
===== ./dist/components/pip/PipCalculator.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipCalculator: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipCalculator = InstanceType<typeof PipCalculator>;
export default PipCalculator;
===== ./dist/components/pip/PipFlashcards.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipFlashcards: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipFlashcards = InstanceType<typeof PipFlashcards>;
export default PipFlashcards;
===== ./dist/components/MarkdownRenderer.svelte =====
/// <reference lib="dom" />
<script lang="ts">
  import { onMount, afterUpdate } from 'svelte';
  import { marked } from 'marked';
  import { browser } from '$app/environment';

  // Static import of highlight.js core and styles
  import hljs from 'highlight.js/lib/core';
  import javascript from 'highlight.js/lib/languages/javascript';
  import typescript from 'highlight.js/lib/languages/typescript';
  import python from 'highlight.js/lib/languages/python';
  import java from 'highlight.js/lib/languages/java';
  import cpp from 'highlight.js/lib/languages/cpp';
  import csharp from 'highlight.js/lib/languages/csharp';
  import ruby from 'highlight.js/lib/languages/ruby';
  import go from 'highlight.js/lib/languages/go';
  import rust from 'highlight.js/lib/languages/rust';
  import bash from 'highlight.js/lib/languages/bash';
  import json from 'highlight.js/lib/languages/json';
  import xml from 'highlight.js/lib/languages/xml';
  import css from 'highlight.js/lib/languages/css';
  import markdown from 'highlight.js/lib/languages/markdown';
  import 'highlight.js/styles/github-dark.css';

  // Register languages once
  hljs.registerLanguage('javascript', javascript);
  hljs.registerLanguage('typescript', typescript);
  hljs.registerLanguage('python', python);
  hljs.registerLanguage('java', java);
  hljs.registerLanguage('cpp', cpp);
  hljs.registerLanguage('csharp', csharp);
  hljs.registerLanguage('ruby', ruby);
  hljs.registerLanguage('go', go);
  hljs.registerLanguage('rust', rust);
  hljs.registerLanguage('bash', bash);
  hljs.registerLanguage('json', json);
  hljs.registerLanguage('xml', xml);
  hljs.registerLanguage('css', css);
  hljs.registerLanguage('markdown', markdown);

  // Props
  export let content: string = '';
  export let className: string = '';
  
  // Local state
  let renderedContent: string = '';
  let markdownContainer: HTMLElement;

  function processMarkdown() {
    if (!content) {
      renderedContent = '';
      return;
    }
    try {
      marked.setOptions({ gfm: true, breaks: true, smartLists: true, smartypants: true });
      renderedContent = marked(content);
    } catch (e) {
      console.error('Error rendering markdown:', e);
      renderedContent = `<p class="text-red-500">Error rendering markdown content</p>`;
    }
  }

  $: if (browser) processMarkdown();

  afterUpdate(() => {
    if (browser && markdownContainer) {
      // highlight code blocks
      markdownContainer.querySelectorAll('pre code').forEach((block: HTMLElement) => {
        hljs.highlightElement(block);
      });
      enhanceContent();
    }
  });

  function enhanceContent() {
    if (!markdownContainer) return;
    // external links
    markdownContainer.querySelectorAll('a').forEach((link: HTMLAnchorElement) => {
      if (link.hostname !== window.location.hostname) {
        link.target = '_blank';
        link.rel = 'noopener noreferrer';
      }
    });
    // responsive images
    markdownContainer.querySelectorAll('img').forEach((img: HTMLImageElement) => {
      img.classList.add('max-w-full', 'h-auto', 'rounded-lg', 'my-4');
    });
    // code copy button
    markdownContainer.querySelectorAll('pre').forEach((pre: HTMLElement) => {
      if (!pre.querySelector('.copy-btn')) {
        const btn = document.createElement('button');
        btn.className = 'copy-btn absolute top-2 right-2 p-1 rounded bg-gray-700 text-gray-200 text-xs hover:bg-gray-600';
        btn.innerHTML = '<i class="fas fa-copy"></i>';
        btn.onclick = () => {
          const code = pre.querySelector('code')?.innerText || '';
          navigator.clipboard.writeText(code).then(() => {
            btn.innerHTML = '<i class="fas fa-check"></i>';
            setTimeout(() => btn.innerHTML = '<i class="fas fa-copy"></i>', 2000);
          });
        };
        pre.style.position = 'relative';
        pre.appendChild(btn);
      }
    });
  }
</script>

<div bind:this={markdownContainer} class="markdown-content prose prose-lg dark:prose-invert max-w-none {className}">
  {@html renderedContent}
</div>

<style>
  /* Basic markdown content styling */
  :global(.markdown-content) {
    line-height: 1.6;
  }
  
  :global(.markdown-content h1) {
    font-size: 2rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-weight: 700;
    border-bottom: 1px solid rgba(125, 125, 125, 0.3);
    padding-bottom: 0.5rem;
  }
  
  :global(.markdown-content h2) {
    font-size: 1.5rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  :global(.markdown-content h3) {
    font-size: 1.25rem;
    margin-top: 1.25rem;
    margin-bottom: 0.5rem;
    font-weight: 600;
  }
  
  :global(.markdown-content pre) {
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    position: relative;
  }
  
  :global(.markdown-content code) {
    font-family: 'Fira Code', monospace, Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono';
    font-size: 0.9em;
  }
  
  :global(.markdown-content p code),
  :global(.markdown-content li code) {
    background-color: rgba(125, 125, 125, 0.1);
    padding: 0.1rem 0.3rem;
    border-radius: 0.25rem;
  }
  
  :global(.markdown-content blockquote) {
    border-left: 4px solid #4f46e5;
    padding-left: 1rem;
    margin-left: 0;
    font-style: italic;
    color: rgba(107, 114, 128, 1);
  }
  
  :global(.markdown-content table) {
    border-collapse: collapse;
    width: 100%;
    margin: 1rem 0;
  }
  
  :global(.markdown-content th),
  :global(.markdown-content td) {
    padding: 0.5rem;
    border: 1px solid rgba(125, 125, 125, 0.3);
  }
  
  :global(.markdown-content th) {
    background-color: rgba(125, 125, 125, 0.1);
  }
  
  /* Dark mode adjustments */
  :global(.dark .markdown-content pre) {
    background-color: #1e1e1e !important;
  }
  
  :global(.dark .markdown-content p code),
  :global(.dark .markdown-content li code) {
    background-color: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
  }
</style>===== ./dist/components/StatCard.svelte =====
<script lang="ts">
  export let title: string;
  export let value: string;
  export let icon: string = 'fa-chart-line';
  export let color: string = 'blue';

  // Map color names to Tailwind CSS classes
  const colorClasses = {
    blue: {
      bg: 'bg-blue-100 dark:bg-blue-900',
      text: 'text-blue-600 dark:text-blue-300'
    },
    green: {
      bg: 'bg-green-100 dark:bg-green-900',
      text: 'text-green-600 dark:text-green-300'
    },
    red: {
      bg: 'bg-red-100 dark:bg-red-900',
      text: 'text-red-600 dark:text-red-300'
    },
    yellow: {
      bg: 'bg-yellow-100 dark:bg-yellow-900',
      text: 'text-yellow-600 dark:text-yellow-300'
    },
    indigo: {
      bg: 'bg-indigo-100 dark:bg-indigo-900',
      text: 'text-indigo-600 dark:text-indigo-300'
    },
    purple: {
      bg: 'bg-purple-100 dark:bg-purple-900',
      text: 'text-purple-600 dark:text-purple-300'
    },
    gray: {
      bg: 'bg-gray-100 dark:bg-gray-800',
      text: 'text-gray-600 dark:text-gray-300'
    }
  };

  // Get color classes based on the color prop, default to blue if not found
  $: colorStyle = colorClasses[color] || colorClasses.blue;
</script>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
  <div class="flex items-center justify-between">
    <div>
      <p class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">{title}</p>
      <p class="text-2xl font-bold text-gray-900 dark:text-white">{value}</p>
    </div>
    <div class="h-12 w-12 {colorStyle.bg} rounded-full flex items-center justify-center {colorStyle.text}">
      <i class="fas {icon} text-xl"></i>
    </div>
  </div>
</div> ===== ./dist/components/forums/ForumList.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ForumList: $$__sveltets_2_IsomorphicComponent<{
    topics?: any[];
    categories?: any[];
    votingTopicId?: string | null;
    subscribingTopicId?: string | null;
    unsubscribingTopicId?: string | null;
}, {
    subscribe: CustomEvent<any>;
    unsubscribe: CustomEvent<any>;
    vote: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ForumList = InstanceType<typeof ForumList>;
export default ForumList;
===== ./dist/components/forums/ForumList.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { subscribedTopics } from '../../stores/forumStore.js';
  import { user } from '../../stores/authStore.js';
  // Helpers from parent page can be moved here
  function formatDate(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    if (diffMinutes < 60) return `${diffMinutes} min${diffMinutes !== 1 ? 's' : ''} ago`;
    if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  }
  function getCategoryById(id: string) {
    return categories.find((c: any) => c.id === id);
  }
  function getCategoryColorClass(color: string, forBg = true) {
    const base = {
      blue: ['blue-100 dark:blue-900/30','blue-800 dark:blue-300','blue-500 dark:blue-400'],
      green: ['green-100 dark:green-900/30','green-800 dark:green-300','green-500 dark:green-400'],
      gray: ['gray-100 dark:gray-700','gray-800 dark:gray-300','gray-500 dark:gray-400']
    }[color] || ['gray-100','gray-800','gray-500'];
    return forBg
      ? `bg-${base[0]} text-${base[2]} dark:bg-${base[1]} dark:text-${base[2]}`
      : `text-${base[2]} dark:text-${base[1]}`;
  }
  export let topics: any[] = [];
  export let categories: any[] = [];
  export let votingTopicId: string | null = null;
  export let subscribingTopicId: string | null = null;
  export let unsubscribingTopicId: string | null = null;
  const dispatch = createEventDispatcher();
  function subscribe(id: string) { dispatch('subscribe', id); }
  function unsubscribe(id: string) { dispatch('unsubscribe', id); }
  function vote(id: string, type: string) { dispatch('vote', { id, type }); }
  $: currentUser = $user;
</script>

{#if topics.length === 0}
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-8 text-center">
    <p class="text-gray-600 dark:text-gray-400">No discussions found.</p>
  </div>
{:else}
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
    <div class="divide-y divide-gray-200 dark:divide-gray-700">
      {#each topics as topic (topic.id)}
        <div class="p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors flex justify-between items-start">
          <div class="flex-1">
            <div class="flex items-start justify-between">
              <div>
                <a href={`/forums/${topic.id}`} class="text-lg font-medium text-gray-900 dark:text-white hover:text-indigo-600 dark:hover:text-indigo-400">
                  {#if topic.isPinned}<i class="fas fa-thumbtack text-indigo-500 mr-1 text-xs"></i>{/if}
                  {#if topic.isLocked}<i class="fas fa-lock text-gray-500 mr-1 text-xs"></i>{/if}
                  {topic.title}
                </a>
                <div class="flex flex-wrap gap-1 mt-1">
                  {#if topic.difficulty}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium 
                      {topic.difficulty === 'beginner' ? 'bg-green-100 text-green-800' : topic.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                      {topic.difficulty.charAt(0).toUpperCase() + topic.difficulty.slice(1)}
                    </span>
                  {/if}
                  {#if topic.hasCodeExamples}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                      <i class="fas fa-code mr-1"></i>Code
                    </span>
                  {/if}
                  {#if topic.isResolved}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                      <i class="fas fa-check-circle mr-1"></i>Resolved
                    </span>
                  {/if}
                </div>
                {#if topic.tags?.length}
                  <div class="flex flex-wrap gap-1 mt-2">
                    {#each topic.tags as tag}
                      <a href={`/forums/tag/${tag}`} class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200">
                        #{tag}
                      </a>
                    {/each}
                  </div>
                {/if}
                {#if topic.resourceLinks}
                  <div class="mt-2">
                    <span class="text-xs text-gray-500">Resources:</span>
                    <div class="flex flex-wrap gap-2 mt-1">
                      {#each topic.resourceLinks as link}
                        <a href={link.url} target="_blank" rel="noopener" class="inline-flex items-center text-xs text-indigo-600 hover:underline">
                          <i class="fas fa-external-link-alt mr-1"></i>{link.title}
                        </a>
                      {/each}
                    </div>
                  </div>
                {/if}
              </div>
              <div class="ml-2">
                {#if getCategoryById(topic.category)}
                  {@const cat = getCategoryById(topic.category)}
                  <a href={`/forums/category/${topic.category}`} class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getCategoryColorClass(cat.color)}">
                    <i class={`fas ${cat.icon} mr-1`}></i> {cat.name}
                  </a>
                {/if}
              </div>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-500">
              <div class="flex items-center">
                {#if topic.author.avatar}<img src={topic.author.avatar} alt={topic.author.name} class="w-5 h-5 rounded-full mr-1.5" />{/if}
                <a href={`/profile/${topic.author.id}`} class="font-medium hover:underline text-gray-700">{topic.author.name}</a>
                <span class="mx-1.5">·</span><span>{formatDate(topic.createdAt)}</span>
              </div>
              <div class="flex items-center ml-auto space-x-4">
                <div class="flex items-center"><i class="fas fa-eye mr-1 text-gray-400"></i><span>{topic.viewsCount}</span></div>
                <div class="flex items-center"><i class="fas fa-comment-alt mr-1 text-gray-400"></i><span>{topic.repliesCount}</span></div>
              </div>
            </div>
            {#if topic.lastPost}
              <div class="mt-2 text-xs text-gray-500 flex items-center">
                <span>Last reply by</span>
                <div class="flex items-center ml-1">
                  {#if topic.lastPost.author.avatar}<img src={topic.lastPost.author.avatar} alt={topic.lastPost.author.name} class="w-4 h-4 rounded-full mr-1" />{/if}
                  <a href={`/profile/${topic.lastPost.author.id}`} class="font-medium hover:underline text-gray-700">{topic.lastPost.author.name}</a>
                </div>
                <span class="mx-1">·</span><span>{formatDate(topic.lastPost.date)}</span>
              </div>
            {/if}
          </div>
          <div class="ml-4 flex flex-col items-end gap-2">
            <!-- Voting controls -->
            <div class="flex flex-col items-center space-y-1">
              <button on:click={() => vote(topic.id, 'up')} class="text-gray-400 hover:text-green-600 {topic.userVote === 'up' ? 'text-green-600 font-bold' : ''}" disabled={votingTopicId === topic.id}>
                <i class="fas fa-arrow-up"></i>
                {#if votingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
              <span class="text-sm text-gray-600 dark:text-gray-400">{topic.upvotes || 0}</span>
              <button on:click={() => vote(topic.id, 'down')} class="text-gray-400 hover:text-red-600 {topic.userVote === 'down' ? 'text-red-600 font-bold' : ''}" disabled={votingTopicId === topic.id}>
                <i class="fas fa-arrow-down"></i>
                {#if votingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
              <span class="text-sm text-gray-600 dark:text-gray-400">{topic.downvotes || 0}</span>
            </div>
            {#if $subscribedTopics.includes(topic.id)}
              <button on:click={() => unsubscribe(topic.id)} class="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded" disabled={unsubscribingTopicId === topic.id}>
                <i class="fas fa-bell-slash mr-1"></i>Unsubscribe
                {#if unsubscribingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
            {:else}
              <button on:click={() => subscribe(topic.id)} class="px-2 py-1 text-xs bg-indigo-100 text-indigo-800 rounded" disabled={subscribingTopicId === topic.id}>
                <i class="fas fa-bell mr-1"></i>Subscribe
                {#if subscribingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
            {/if}
          </div>
        </div>
      {/each}
    </div>
  </div>
{/if}===== ./dist/components/forums/ForumSidebar.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ForumSidebar: $$__sveltets_2_IsomorphicComponent<{
    categories?: Array<{
        id: string;
        name: string;
        icon?: string;
    }>;
    filterCategory: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ForumSidebar = InstanceType<typeof ForumSidebar>;
export default ForumSidebar;
===== ./dist/components/forums/ForumHeader.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  const dispatch = createEventDispatcher();
  function onNewTopic() {
    dispatch('newTopic');
  }
  function onToggleSubscriptions() {
    dispatch('toggleSubscriptions');
  }
</script>

<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
  <div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Community Forums</h1>
    <p class="text-gray-600 dark:text-gray-400">Discuss courses, ask questions, and connect with other learners</p>
  </div>
  <div class="mt-4 md:mt-0 flex space-x-2">
    <button
      class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium flex items-center"
      on:click={onNewTopic}
    >
      <i class="fas fa-plus mr-2"></i>
      New Topic
    </button>
    <button
      class="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md text-sm font-medium flex items-center"
      on:click={onToggleSubscriptions}
    >
      <i class="fas fa-bell mr-2"></i>
      My Subscriptions
    </button>
  </div>
</div>  <!-- Close outer wrapper div -->===== ./dist/components/forums/ForumFilters.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ForumFilters: $$__sveltets_2_IsomorphicComponent<{
    categories?: Array<{
        id: string;
        name: string;
    }>;
    filterCategory: string;
    searchQuery: string;
    sortOption: string;
    difficultyFilter: string;
}, {
    search: CustomEvent<any>;
    category: CustomEvent<any>;
    sort: CustomEvent<any>;
    difficulty: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ForumFilters = InstanceType<typeof ForumFilters>;
export default ForumFilters;
===== ./dist/components/forums/CreateTopicForm.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { user } from '../../stores/authStore.js';
  export let categories = [];

  let title = '';
  let content = '';
  let category_id = '';
  let isLoading = false;
  let errorMessage = '';
  const dispatch = createEventDispatcher();

  $: currentUser = $user;

  async function handleSubmit() {
    if (!title.trim() || !content.trim() || !category_id) {
      errorMessage = 'Please enter title, content, and select a category.';
      return;
    }
    if (!currentUser || !currentUser.uid) {
      errorMessage = 'You must be logged in to create a topic.';
      return;
    }
    isLoading = true;
    errorMessage = '';
    const newTopicData = {
      title: title.trim(),
      content: content.trim(),
      category_id,
      author_id: currentUser.uid
    };
    try {
      const response = await fetch('/api/forum/topics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTopicData)
      });
      if (response.ok) {
        const createdTopic = await response.json();
        dispatch('topicCreated', createdTopic);
        title = '';
        content = '';
        category_id = '';
        alert('Topic created successfully!');
      } else {
        const errorData = await response.json();
        errorMessage = `Failed to create topic: ${errorData.error || response.statusText}. Please try again.`;
      }
    } catch (error) {
      errorMessage = 'An unexpected error occurred. Please check the console and try again.';
    } finally {
      isLoading = false;
    }
  }
</script>

<div class="create-topic-form p-4 border rounded shadow-md">
  <h3 class="text-xl font-semibold mb-4">Create New Topic</h3>
  <form on:submit|preventDefault={handleSubmit}>
    {#if errorMessage}
      <div class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
        {errorMessage}
      </div>
    {/if}
    <div class="mb-4">
      <label for="topic-title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Title</label>
      <input 
        type="text" 
        id="topic-title" 
        bind:value={title} 
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        required
        disabled={isLoading}
      />
    </div>
    <div class="mb-4">
      <label for="topic-category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Category</label>
      <select
        id="topic-category"
        bind:value={category_id}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        required
        disabled={isLoading}
      >
        <option value="" disabled selected>Select a category</option>
        {#each categories as category}
          <option value={category.id}>{category.name}</option>
        {/each}
      </select>
    </div>
    <div class="mb-4">
      <label for="topic-content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Content</label>
      <textarea 
        id="topic-content" 
        bind:value={content} 
        rows="5" 
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        required
        disabled={isLoading}
      ></textarea>
    </div>
    <button 
      type="submit" 
      class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={isLoading}
    >
      {#if isLoading}
        Creating...
      {:else}
        Create Topic
      {/if}
    </button>
  </form>
</div>===== ./dist/components/forums/NewPostForm.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { user } from '../../stores/authStore.js';
  let content = '';
  const dispatch = createEventDispatcher();

  // Track current user for conditional rendering
  $: currentUser = $user;

  function submit() {
    if (!content.trim()) return;
    dispatch('newPost', { content: content.trim() });
    content = '';
  }
</script>

{#if currentUser?.uid}
  <div class="new-post-form">
    <textarea
      bind:value={content}
      class="w-full p-3 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500"
      rows="4"
      placeholder="Write your reply here..."
    />
    <button
      on:click|preventDefault={submit}
      class="mt-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={!content.trim()}
    >
      Post Reply
    </button>
  </div>
{:else}
  <p class="text-gray-600 dark:text-gray-400">
    You must be <a href="/login" class="text-indigo-600 hover:underline">logged in</a> to post a reply.
  </p>
{/if}===== ./dist/components/forums/ForumHeader.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ForumHeader: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    newTopic: CustomEvent<any>;
    toggleSubscriptions: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ForumHeader = InstanceType<typeof ForumHeader>;
export default ForumHeader;
===== ./dist/components/forums/ForumTopic.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ForumTopic: $$__sveltets_2_IsomorphicComponent<{
    topic?: {
        id: string;
        title: string;
        content: string;
        author: {
            id: string;
            name: string;
            avatar?: string;
        } | string;
        createdAt: string;
    };
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ForumTopic = InstanceType<typeof ForumTopic>;
export default ForumTopic;
===== ./dist/components/forums/CreateTopicForm.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const CreateTopicForm: $$__sveltets_2_IsomorphicComponent<{
    categories?: any[];
}, {
    topicCreated: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type CreateTopicForm = InstanceType<typeof CreateTopicForm>;
export default CreateTopicForm;
===== ./dist/components/forums/ForumFilters.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  export let categories: Array<{id: string, name: string}> = [];
  export let filterCategory: string;
  export let searchQuery: string;
  export let sortOption: string;
  export let difficultyFilter: string;
  const dispatch = createEventDispatcher();

  function handleSearch(e: Event) {
    dispatch('search', (e.target as HTMLInputElement).value);
  }
  function handleCategory(e: Event) {
    dispatch('category', (e.target as HTMLSelectElement).value);
  }
  function handleSort(e: Event) {
    dispatch('sort', (e.target as HTMLSelectElement).value);
  }
  function handleDifficulty(e: Event) {
    dispatch('difficulty', (e.target as HTMLSelectElement).value);
  }
</script>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4 mb-8">
  <div class="flex flex-col md:flex-row gap-4">
    <div class="relative flex-grow">
      <input
        type="text"
        class="w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        placeholder="Search topics..."
        value={searchQuery}
        on:input={handleSearch}
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
        <i class="fas fa-search text-gray-400"></i>
      </div>
    </div>
    <div class="flex flex-col sm:flex-row gap-2 sm:gap-4">
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={filterCategory} on:change={handleCategory}>
          <option value="all">All Categories</option>
          {#each categories as category}
            <option value={category.id}>{category.name}</option>
          {/each}
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={sortOption} on:change={handleSort}>
          <option value="latest">Latest Activity</option>
          <option value="created">Created</option>
          <option value="popular">Most Viewed</option>
          <option value="most-replies">Most Replies</option>
          <option value="most-upvoted">Most Upvoted</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={difficultyFilter} on:change={handleDifficulty}>
          <option value="all">All Levels</option>
          <option value="beginner">Beginner</option>
          <option value="intermediate">Intermediate</option>
          <option value="advanced">Advanced</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
    </div>
  </div>
</div>===== ./dist/components/forums/ForumSidebar.svelte =====
<script lang="ts">
  export let categories: Array<{id: string, name: string, icon?: string}> = [];
  export let filterCategory: string;
</script>

<div class="space-y-6">
  <!-- Categories Sidebar -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Categories</h3>
    <ul class="space-y-2">
      <li>
        <a href="/forums"
           class="block px-3 py-2 rounded-md text-sm font-medium transition-colors {filterCategory === 'all' ? 'bg-indigo-100 dark:bg-indigo-700 text-indigo-700 dark:text-indigo-100' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'}">
          <i class="fas fa-list mr-2"></i> All Categories
        </a>
      </li>
      {#each categories as category}
        <li>
          <a href={`/forums/category/${category.id}`}
             class="block px-3 py-2 rounded-md text-sm font-medium transition-colors {filterCategory === category.id ? 'bg-indigo-100 dark:bg-indigo-700 text-indigo-700 dark:text-indigo-100' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'}">
            <i class={`fas ${category.icon} mr-2`}></i> {category.name}
          </a>
        </li>
      {/each}
    </ul>
  </div>

  <!-- Learning Resources -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Learning Resources</h3>
    <ul class="space-y-2 text-sm">
      <li>
        <a href="/resources/study-guides" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-book mr-2"></i> Study Guides
        </a>
      </li>
      <li>
        <a href="/resources/code-examples" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-code mr-2"></i> Code Examples
        </a>
      </li>
      <li>
        <a href="/resources/practice-exercises" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-laptop-code mr-2"></i> Practice Exercises
        </a>
      </li>
      <li>
        <a href="/resources/community-projects" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-project-diagram mr-2"></i> Community Projects
        </a>
      </li>
    </ul>
  </div>
</div>===== ./dist/components/forums/ForumTopic.svelte =====
<script lang="ts">
  import NewPostForm from './NewPostForm.svelte';
  import { onMount } from 'svelte';
  import { user } from '../../stores/authStore.js';
  import MarkdownRenderer from '../MarkdownRenderer.svelte';

  // Define types
  type Post = {
    id: string;
    author_name: string;
    author_avatar?: string;
    created_at?: string;
    content: string;
  };
  type Topic = {
    id: string;
    title: string;
    content: string;
    author: { id: string; name: string; avatar?: string } | string;
    createdAt: string;
  };

  export let topic: Topic = { id: '', title: 'Loading...', content: '', author: '', createdAt: new Date().toISOString() };
  let posts: Post[] = [];
  let loadingReplies = true;
  let repliesError = '';
  let repliesPerPage = 10;
  let currentPage = 1;
  $: paginatedPosts = posts.slice(0, repliesPerPage * currentPage);
  let hasMoreReplies = posts.length > paginatedPosts.length;

  $: currentUser = $user;

  async function fetchReplies() {
    loadingReplies = true;
    repliesError = '';
    try {
      const res = await fetch(`/api/forum/posts?topic_id=${topic.id}`);
      if (res.ok) {
        posts = await res.json();
      } else {
        repliesError = 'Failed to load replies.';
      }
    } catch (e) {
      repliesError = 'Error loading replies.';
    } finally {
      loadingReplies = false;
    }
  }

  function loadMoreReplies() {
    currentPage += 1;
  }

  onMount(() => {
    if (topic.id) fetchReplies();
  });

  async function handleNewPost(event: CustomEvent) {
    const content = event.detail.content;
    if (!currentUser || !currentUser.uid) {
      alert('You must be logged in to reply.');
      return;
    }
    try {
      const res = await fetch('/api/forum/posts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          topic_id: topic.id,
          author_id: currentUser.uid,
          content
        })
      });
      if (res.ok) {
        const newPost = await res.json();
        posts = [...posts, newPost];
      } else {
        alert('Failed to post reply.');
      }
    } catch (e) {
      alert('Error posting reply.');
    }
  }
</script>

<div class="forum-topic p-4">
  <h1 class="text-3xl font-bold mb-2">{topic.title}</h1>
  <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Started by {topic.author} on {new Date(topic.createdAt).toLocaleString()}</p>
  
  <div class="topic-content mb-6 p-4 border rounded bg-gray-50 dark:bg-gray-800">
    <p>{topic.content}</p>
  </div>

  <h2 class="text-2xl font-semibold mb-4">Replies</h2>
  {#if loadingReplies}
    <p>Loading replies...</p>
  {:else if repliesError}
    <p class="text-red-500">{repliesError}</p>
  {:else if posts.length > 0}
    <ul class="space-y-4">
      {#each paginatedPosts as post}
        <li class="post p-3 border rounded bg-white dark:bg-gray-700 shadow-sm">
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-1">By {post.author_name || post.author} on {new Date(post.created_at || post.createdAt).toLocaleString()}</p>
          <div class="post-content">
            <MarkdownRenderer content={post.content} />
          </div>
        </li>
      {/each}
    </ul>
    {#if hasMoreReplies}
      <div class="flex justify-center mt-4">
        <button class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded text-sm font-medium" on:click={loadMoreReplies}>
          Load more replies
        </button>
      </div>
    {/if}
  {:else}
    <p>No replies yet.</p>
  {/if}

  <div class="mt-8">
    <h3 class="text-xl font-semibold mb-3">Add a Reply</h3>
    <NewPostForm on:newPost={handleNewPost} />
  </div>
</div>===== ./dist/components/forums/NewPostForm.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const NewPostForm: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    newPost: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type NewPostForm = InstanceType<typeof NewPostForm>;
export default NewPostForm;
===== ./dist/components/Login.svelte =====
<script lang="ts">
  import { login, loginWithGoogle } from '../authService.js';
  import { loading, authError } from '../stores/authStore.js';
  
  // Accept redirect parameter to forward users after login
  export let redirectTo = '/';
  
  let email = '';
  let password = '';
  let localError = '';
  let validationErrors: {email?: string; password?: string} = {};
  let isSubmitting = false;
  
  // Validate email format
  function validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const isValid = emailRegex.test(email);
    validationErrors.email = isValid ? undefined : 'Please enter a valid email address';
    return isValid;
  }
  
  // Validate password length
  function validatePassword(password: string): boolean {
    const isValid = password.length >= 6;
    validationErrors.password = isValid ? undefined : 'Password must be at least 6 characters';
    return isValid;
  }
  
  async function handleLogin() {
    isSubmitting = true;
    localError = '';
    validationErrors = {};
    
    // Validate form inputs
    const isEmailValid = validateEmail(email);
    const isPasswordValid = validatePassword(password);
    
    if (!isEmailValid || !isPasswordValid) {
      isSubmitting = false;
      return;
    }
    
    try {
      await login(email, password);
      // Login successful - redirect will be handled by the auth state listener
      console.log(`Login successful, will redirect to: ${redirectTo}`);
    } catch (err) {
      // Error is already handled and set in the authError store
    } finally {
      isSubmitting = false;
    }
  }
  
  async function handleGoogleLogin() {
    isSubmitting = true;
    localError = '';
    validationErrors = {};
    
    try {
      await loginWithGoogle();
      // Login successful - redirect will be handled by the auth state listener
      console.log(`Google login successful, will redirect to: ${redirectTo}`);
    } catch (err) {
      // Error is already handled and set in the authError store
    } finally {
      isSubmitting = false;
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Log In</h2>
  
  {#if redirectTo && redirectTo !== '/'}
    <div class="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">You'll be redirected to the requested page after login.</span>
    </div>
  {/if}
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleLogin} class="space-y-4" autocomplete="off">
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        on:blur={() => validateEmail(email)}
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.email ? 'border-red-500' : ''}"
        required
        autocomplete="username"
      />
      {#if validationErrors.email}
        <p class="mt-1 text-sm text-red-600">{validationErrors.email}</p>
      {/if}
    </div>
    
    <div>
      <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
      <input 
        type="password" 
        id="password" 
        bind:value={password} 
        on:blur={() => validatePassword(password)}
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.password ? 'border-red-500' : ''}"
        required
        autocomplete="current-password"
      />
      {#if validationErrors.password}
        <p class="mt-1 text-sm text-red-600">{validationErrors.password}</p>
      {/if}
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading || isSubmitting}
      >
        {#if $loading || isSubmitting}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Log In
      </button>
    </div>
  </form>
  
  <div class="mt-4">
    <button 
      on:click={handleGoogleLogin} 
      class="w-full flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      disabled={$loading || isSubmitting}
    >
      <svg class="h-5 w-5 mr-2" viewBox="0 0 24 24">
        <path d="M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866c-3.431,0.589-6.663-1.727-7.253-5.157c-0.589-3.431,1.727-6.663,5.157-7.253c2.136-0.367,4.296,0.317,5.743,1.878l2.72-2.72c-2.099-2.099-5.271-2.853-8.135-1.879C8.234,3.708,4.766,6.152,3.032,9.686c-2.734,5.63,0.01,12.44,5.639,15.174c5.63,2.734,12.44-0.01,15.174-5.639c1.06-2.17,1.369-4.652,0.845-7.036h-9.687C13.25,12.151,12.545,12.151,12.545,12.151z" fill="#F44336"/>
        <path d="M12.545,12.151v-3.89h9.687c0.521,2.169,0.246,4.432-0.769,6.406c-0.217,0.436-0.453,0.853-0.725,1.241h-6.284C13.4,15.909,12.545,14.055,12.545,12.151z" fill="#2196F3"/>
      </svg>
      Sign in with Google
    </button>
  </div>
  
  <div class="mt-4 text-center">
    <a href="/reset-password" class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
      Forgot password?
    </a>
  </div>
  
  <div class="mt-4 text-center">
    <p class="text-sm text-gray-600 dark:text-gray-400">
      Don't have an account? 
      <a href="/register" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
        Sign up
      </a>
    </p>
  </div>
</div> ===== ./dist/components/ActivityFeed.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ActivityFeed: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ActivityFeed = InstanceType<typeof ActivityFeed>;
export default ActivityFeed;
===== ./dist/components/utils/Draggable.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';

  export let element: HTMLElement | null = null; // Bound element from parent
  export let disabled = false; // Prop to disable dragging
  export let boundaryElement: HTMLElement | 'window' = 'window'; // Optional boundary

  let isDragging = false;
  let startX: number, startY: number;
  let initialLeft: number, initialTop: number;

  function getBoundaryRect(): { top: number; left: number; bottom: number; right: number } {
    if (boundaryElement === 'window' || !boundaryElement) {
      return { top: 0, left: 0, bottom: window.innerHeight, right: window.innerWidth };
    }
    const rect = boundaryElement.getBoundingClientRect();
    return {
      top: rect.top,
      left: rect.left,
      bottom: rect.bottom,
      right: rect.right
    };
  }

  function handleMouseDown(e: MouseEvent) {
      if (!element || disabled || e.button !== 0 || (e.target instanceof Element && e.target.closest('button, input, textarea, select, a'))) {
          // Don't drag if disabled, not left mouse button, or clicking interactive elements/links
          return;
      }
      e.preventDefault(); // Prevent text selection issues
      e.stopPropagation();

      isDragging = true;
      const computedStyle = getComputedStyle(element);
      // Use matrix transformation if available, otherwise fallback to left/top
      const transform = computedStyle.transform;
      if (transform && transform !== 'none') {
          const matrix = new DOMMatrix(transform);
          initialLeft = matrix.e;
          initialTop = matrix.f;
      } else {
          initialLeft = parseFloat(computedStyle.left || '0') || element.offsetLeft;
          initialTop = parseFloat(computedStyle.top || '0') || element.offsetTop;
      }

      startX = e.clientX;
      startY = e.clientY;

      element.style.cursor = 'grabbing';
      element.style.userSelect = 'none';
      // Optional: Add a class for visual feedback during drag
      element.classList.add('dragging');

      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
  }

  function handleMouseMove(e: MouseEvent) {
      if (!isDragging || !element) return;
      e.preventDefault();

      const dx = e.clientX - startX;
      const dy = e.clientY - startY;

      let newLeft = initialLeft + dx;
      let newTop = initialTop + dy;

      // Apply boundary constraints
      const boundary = getBoundaryRect();
      const elRect = element.getBoundingClientRect(); // Current position might be needed
      const parentRect = element.offsetParent?.getBoundingClientRect() ?? { left: 0, top: 0 };

      // Calculate constraints based on transform or left/top
      const elWidth = element.offsetWidth;
      const elHeight = element.offsetHeight;

      // Note: Boundary calculations can be complex depending on positioning (fixed, absolute)
      // This is a simplified version assuming fixed/absolute relative to viewport or boundaryElement
      // Adjust if needed based on specific layout

      // Simple viewport constraint for fixed positioning
      if (getComputedStyle(element).position === 'fixed') {
          newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - elWidth));
          newTop = Math.max(0, Math.min(newTop, window.innerHeight - elHeight));
      }
      // Add more complex boundary logic here if boundaryElement is used with absolute positioning


      // Use transform for better performance
      element.style.transform = `translate3d(${newLeft}px, ${newTop}px, 0)`;
      // Clear left/top if setting transform to avoid conflicts
      element.style.left = '0';
      element.style.top = '0';
  }

  function handleMouseUp(e: MouseEvent) {
      if (!isDragging || !element) return;
      isDragging = false;
      element.style.cursor = 'grab';
      element.style.removeProperty('user-select');
      element.classList.remove('dragging');

      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
  }

  onMount(() => {
    if (element) {
      // Ensure initial positioning is applied if using transform
      if (!element.style.transform) {
         const computedStyle = getComputedStyle(element);
         const transform = computedStyle.transform;
         if (!transform || transform === 'none') {
            const initialLeft = parseFloat(computedStyle.left || '0') || element.offsetLeft;
            const initialTop = parseFloat(computedStyle.top || '0') || element.offsetTop;
            element.style.transform = `translate3d(${initialLeft}px, ${initialTop}px, 0)`;
            element.style.left = '0';
            element.style.top = '0';
         }
      }

      element.addEventListener('mousedown', handleMouseDown);
      element.style.cursor = 'grab';
    }
  });

  onDestroy(() => {
    if (element) {
      element.removeEventListener('mousedown', handleMouseDown);
    }
    // Clean up global listeners
    window.removeEventListener('mousemove', handleMouseMove);
    window.removeEventListener('mouseup', handleMouseUp);
  });

</script>

<!-- Add a slot to wrap the content that should be draggable -->
<slot></slot>

<style>
  /* Optional: Indicate dragging state */
  .dragging {
    /* Example: slightly reduced opacity or different border */
    opacity: 0.9;
    z-index: 1000; /* Ensure it stays on top */
  }
</style> ===== ./dist/components/utils/Draggable.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
type $$__sveltets_2_PropsWithChildren<Props, Slots> = Props & (Slots extends {
    default: any;
} ? Props extends Record<string, never> ? any : {
    children?: any;
} : {});
declare const Draggable: $$__sveltets_2_IsomorphicComponent<$$__sveltets_2_PropsWithChildren<{
    element?: HTMLElement | null;
    disabled?: boolean;
    boundaryElement?: HTMLElement | "window";
}, {
    default: {};
}>, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}, {}, string>;
type Draggable = InstanceType<typeof Draggable>;
export default Draggable;
===== ./dist/components/RecentActivity.svelte =====
<script>
  export let activities = [
    {
      type: "completed",
      title: "Completed exercise",
      content: "JavaScript Closure Exercise",
      timeAgo: "2 hours ago",
      icon: "fa-check-circle",
      color: "indigo"
    },
    {
      type: "started",
      title: "Started new course",
      content: "Quantum Physics",
      timeAgo: "Yesterday",
      icon: "fa-book",
      color: "blue"
    },
    {
      type: "achievement",
      title: "Achievement unlocked",
      content: "7-Day Learning Streak",
      timeAgo: "3 days ago",
      icon: "fa-trophy",
      color: "green"
    }
  ];
</script>

<div>
  <h2 class="text-lg font-semibold text-gray-100 mb-4">Recent Activity</h2>
  
  <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm">
    <div class="space-y-4">
      {#each activities as activity}
        <div class="flex items-start">
          <div class="w-10 h-10 bg-indigo-900 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
            <i class="fas {activity.icon} text-indigo-300"></i>
          </div>
          <div>
            <h3 class="font-medium text-gray-100">{activity.title}</h3>
            <p class="text-gray-300 text-sm">{activity.content}</p>
            <p class="text-gray-400 text-xs mt-1">{activity.timeAgo}</p>
          </div>
        </div>
      {/each}
    </div>
  </div>
</div>
===== ./dist/components/FocusTimeChart.svelte.d.ts =====
import type { FocusSession } from '../stores/pipStores.js';
import 'chartjs-adapter-date-fns';
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const FocusTimeChart: $$__sveltets_2_IsomorphicComponent<{
    sessions?: FocusSession[];
    timeUnit?: "day" | "week" | "month";
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type FocusTimeChart = InstanceType<typeof FocusTimeChart>;
export default FocusTimeChart;
===== ./dist/components/WelcomeBanner.svelte =====
<script lang="ts">
  export let username = "Hakim";
</script>

<div class="bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-2xl p-6 mb-8 text-white squircle">
  <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
    <div>
      <h2 class="text-2xl font-bold mb-2">Welcome back, {username}!</h2>
      <p class="opacity-90 mb-4 md:mb-0">Continue your learning journey with these recommended courses</p>
    </div>
    <a 
      href="/courses" 
      class="bg-indigo-100 text-indigo-800 px-4 py-2 rounded-lg font-medium hover:bg-indigo-200 transition"
    >
      Explore Courses
    </a>
  </div>
</div>===== ./dist/components/MarkdownRenderer.svelte.d.ts =====
import 'highlight.js/styles/github-dark.css';
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const MarkdownRenderer: $$__sveltets_2_IsomorphicComponent<{
    content?: string;
    className?: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type MarkdownRenderer = InstanceType<typeof MarkdownRenderer>;
export default MarkdownRenderer;
===== ./dist/components/ExerciseCard.svelte =====
<script lang="ts">
  export let exercise = {
    id: '',
    title: '',
    description: '',
    category: {
      name: '',
      color: 'blue'
    },
    icon: 'fa-code'
  };
  
  function startExercise() {
    // Navigate to exercise page or open modal
    console.log('Starting exercise:', exercise.id);
  }
</script>

<div class="bg-gray-700 border border-orange-500 p-5 rounded-2xl shadow-sm squircle-sm card-hover">
  <div class="flex items-start mb-4">
    <div class="w-10 h-10 bg-indigo-900 rounded-lg flex items-center justify-center mr-3">
      <i class="fas {exercise.icon} text-indigo-300"></i>
    </div>
    <div>
      <h3 class="font-semibold text-gray-100">{exercise.title}</h3>
      <p class="text-gray-300 text-sm">{exercise.description}</p>
    </div>
  </div>
  <div class="flex justify-between items-center">
    <span class="text-xs px-2 py-1 bg-indigo-800 text-indigo-100 rounded">
      {exercise.category.name}
    </span>
    <button 
      class="text-sm text-indigo-300 hover:text-indigo-100 font-medium"
      on:click={startExercise}
    >
      Start
    </button>
  </div>
</div> ===== ./dist/components/CourseCard.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const CourseCard: $$__sveltets_2_IsomorphicComponent<{
    course?: {
        id: string;
        title: string;
        description: string;
        progress: number;
        icon: string;
        gradient: {
            from: string;
            to: string;
        };
    };
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type CourseCard = InstanceType<typeof CourseCard>;
export default CourseCard;
===== ./dist/components/ExercisesSection.svelte.d.ts =====
export default ExercisesSection;
type ExercisesSection = SvelteComponent<{
    exercises?: {
        title: string;
        description: string;
        icon: string;
        color: string;
        category: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: string | undefined;
};
declare const ExercisesSection: $$__sveltets_2_IsomorphicComponent<{
    exercises?: {
        title: string;
        description: string;
        icon: string;
        color: string;
        category: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
===== ./dist/components/CourseCard.svelte =====
<script lang="ts">
  import { courseModalOpen, currentCourse } from '../stores/appStore';
  
  export let course = {
    id: '',
    title: '',
    description: '',
    progress: 0,
    icon: 'fa-book',
    gradient: {
      from: 'blue-500',
      to: 'blue-400'
    }
  };
  
  function openCourse() {
    currentCourse.set(course);
    courseModalOpen.set(true);
  }

  function handleClick() {
    openCourse();
  }

  // Compute a progress color string based on the gradient "from"
  const progressColor = (course.gradient.from.split('-')[0] === 'blue'
    ? '#3B82F6'
    : course.gradient.from.split('-')[0] === 'green'
    ? '#10B981'
    : course.gradient.from.split('-')[0] === 'purple'
    ? '#8B5CF6'
    : course.gradient.from.split('-')[0] === 'red'
    ? '#EF4444'
    : '#6366F1');
</script>

<div 
  class="bg-gray-700 border border-orange-500 p-5 rounded-2xl shadow-sm squircle-sm card-hover h-full cursor-pointer"
  on:click={handleClick}
  on:keydown={e => e.key === 'Enter' && handleClick()}
  role="button"
  tabindex="0"
>
  <div 
    class="h-32 rounded-xl mb-4 flex items-center justify-center"
    style="background: linear-gradient(to right, #{course.gradient.from}, #{course.gradient.to});"
  >
    <i class="fas {course.icon} text-white text-4xl"></i>
  </div>
  <h3 class="font-semibold text-gray-100 mb-2">{course.title}</h3>
  <p class="text-gray-300 text-sm mb-4 line-clamp-2">{course.description}</p>
  <div class="flex items-center justify-between">
    <div class="w-full bg-gray-600 rounded-full h-2">
      <div 
        class="h-2 rounded-full" 
        style="width: {course.progress}%; background-color: {progressColor};"
      ></div>
    </div>
    <span class="text-xs text-gray-300 ml-2">{course.progress}%</span>
  </div>
</div>===== ./dist/components/ExercisesSection.svelte =====
<script>
  export let exercises = [
    {
      title: "JavaScript Closure Exercise",
      description: "Practice with closures and scope",
      icon: "fa-code",
      color: "blue",
      category: "JavaScript"
    },
    {
      title: "Matrix Multiplication",
      description: "Practice matrix operations",
      icon: "fa-calculator",
      color: "purple",
      category: "Math"
    },
    {
      title: "Spanish Vocabulary Quiz",
      description: "Test your vocabulary knowledge",
      icon: "fa-language",
      color: "green",
      category: "Language"
    }
  ];
</script>

<div class="mb-8">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-lg font-semibold text-gray-100">Recommended Exercises</h2>
    <a href="/exercises" class="text-sm text-indigo-300 hover:text-indigo-100 font-medium">View All</a>
  </div>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {#each exercises as exercise}
      <div 
        class="bg-gray-700 border border-orange-500 p-5 rounded-2xl shadow-sm squircle-sm card-hover"
        role="button"
        tabindex="0"
      >
        <div class="flex items-start mb-4">
          <div class="w-10 h-10 bg-indigo-900 rounded-lg flex items-center justify-center mr-3">
            <i class="fas {exercise.icon} text-indigo-300"></i>
          </div>
          <div>
            <h3 class="font-semibold text-gray-100">{exercise.title}</h3>
            <p class="text-gray-300 text-sm">{exercise.description}</p>
          </div>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-xs px-2 py-1 bg-indigo-800 text-indigo-100 rounded">{exercise.category}</span>
          <button class="text-sm text-indigo-300 hover:text-indigo-100 font-medium">Start</button>
        </div>
      </div>
    {/each}
  </div>
</div>
===== ./dist/components/Register.svelte =====
<script lang="ts">
  import { register, loginWithGoogle } from '../authService.js';
  import { loading, authError } from '../stores/authStore.js';
  
  let displayName = '';
  let email = '';
  let password = '';
  let confirmPassword = '';
  let localError = '';
  
  async function handleRegister() {
    localError = '';
    
    // Form validation
    if (!displayName || !email || !password || !confirmPassword) {
      localError = 'Please fill in all fields';
      return;
    }
    
    if (password !== confirmPassword) {
      localError = 'Passwords do not match';
      return;
    }
    
    if (password.length < 6) {
      localError = 'Password must be at least 6 characters long';
      return;
    }
    
    try {
      await register(email, password, displayName);
      // Registration successful - redirect will be handled by the auth state listener
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
  
  async function handleGoogleLogin() {
    try {
      await loginWithGoogle();
      // Login successful - redirect will be handled by the auth state listener
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Create an Account</h2>
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleRegister} class="space-y-4">
    <div>
      <label for="displayName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
      <input 
        type="text" 
        id="displayName" 
        bind:value={displayName} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
      <input 
        type="password" 
        id="password" 
        bind:value={password} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
      <p class="text-xs text-gray-500 mt-1">Password must be at least 6 characters long</p>
    </div>
    
    <div>
      <label for="confirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Confirm Password</label>
      <input 
        type="password" 
        id="confirmPassword" 
        bind:value={confirmPassword} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading}
      >
        {#if $loading}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Sign Up
      </button>
    </div>
  </form>
  
  <div class="mt-4">
    <button 
      on:click={handleGoogleLogin} 
      class="w-full flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      disabled={$loading}
    >
      <svg class="h-5 w-5 mr-2" viewBox="0 0 24 24">
        <path d="M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866c-3.431,0.589-6.663-1.727-7.253-5.157c-0.589-3.431,1.727-6.663,5.157-7.253c2.136-0.367,4.296,0.317,5.743,1.878l2.72-2.72c-2.099-2.099-5.271-2.853-8.135-1.879C8.234,3.708,4.766,6.152,3.032,9.686c-2.734,5.63,0.01,12.44,5.639,15.174c5.63,2.734,12.44-0.01,15.174-5.639c1.06-2.17,1.369-4.652,0.845-7.036h-9.687C13.25,12.151,12.545,12.151,12.545,12.151z" fill="#F44336"/>
        <path d="M12.545,12.151v-3.89h9.687c0.521,2.169,0.246,4.432-0.769,6.406c-0.217,0.436-0.453,0.853-0.725,1.241h-6.284C13.4,15.909,12.545,14.055,12.545,12.151z" fill="#2196F3"/>
      </svg>
      Continue with Google
    </button>
  </div>
  
  <div class="mt-4 text-center">
    <p class="text-sm text-gray-600 dark:text-gray-400">
      Already have an account? 
      <a href="/login" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
        Log in
      </a>
    </p>
  </div>
</div> ===== ./dist/components/ProgressMetrics.svelte.d.ts =====
export default ProgressMetrics;
type ProgressMetrics = SvelteComponent<{
    metrics?: {
        title: string;
        value: string;
        icon: string;
        color: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: string | undefined;
};
declare const ProgressMetrics: $$__sveltets_2_IsomorphicComponent<{
    metrics?: {
        title: string;
        value: string;
        icon: string;
        color: string;
    }[] | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
===== ./dist/components/ExerciseCard.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const ExerciseCard: $$__sveltets_2_IsomorphicComponent<{
    exercise?: {
        id: string;
        title: string;
        description: string;
        category: {
            name: string;
            color: string;
        };
        icon: string;
    };
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type ExerciseCard = InstanceType<typeof ExerciseCard>;
export default ExerciseCard;
===== ./dist/components/GeneralWelcome.svelte.d.ts =====
export default GeneralWelcome;
type GeneralWelcome = SvelteComponent<{
    [x: string]: never;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: string | undefined;
};
declare const GeneralWelcome: $$__sveltets_2_IsomorphicComponent<{
    [x: string]: never;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
===== ./dist/components/Register.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const Register: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type Register = InstanceType<typeof Register>;
export default Register;
===== ./dist/components/CourseFlashcardGenerator.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/CourseFlashcardGenerator.svelte -->
<script lang="ts">
  import { flashcards } from '../stores/pipStores';
  
  export let content: string = '';
  export let courseName: string = '';
  let generating = false;
  let generatedCards: Array<{front: string, back: string}> = [];
  
  // Simple content parsing to generate flashcards
  function generateCards() {
    generating = true;
    generatedCards = [];
    
    // Split content into sections by headers
    const sections = content.split(/#{2,3}\s+/);
    
    sections.forEach(section => {
      const lines = section.split('\n').filter(l => l.trim());
      if (lines.length < 2) return;
      
      // First line after header is usually a concept/term
      const term = lines[0].trim();
      
      // Next few lines usually contain the explanation
      const explanation = lines.slice(1, 4).join('\n').trim();
      
      if (term && explanation) {
        generatedCards.push({
          front: term,
          back: explanation
        });
      }
      
      // Look for lists that might be definitions
      const lists = section.match(/[-*]\s+(.+?):\s+(.+)/g);
      if (lists) {
        lists.forEach(item => {
          const [, term, def] = item.match(/[-*]\s+(.+?):\s+(.+)/) || [];
          if (term && def) {
            generatedCards.push({
              front: term,
              back: def
            });
          }
        });
      }
    });
    
    generating = false;
  }
  
  function addSelectedCards() {
    const selectedCards = generatedCards.filter(card => 
      !$flashcards.some(existing => 
        existing.front === card.front && existing.back === card.back
      )
    );
    
    if (selectedCards.length === 0) return;
    
    flashcards.update(cards => [
      ...cards,
      ...selectedCards.map(card => ({
        id: crypto.randomUUID(),
        front: card.front,
        back: card.back,
        level: 0,
        tags: [courseName.toLowerCase()]
      }))
    ]);
    
    generatedCards = [];
  }
</script>

<div class="space-y-4">
  <div class="flex justify-between items-center">
    <button
      on:click={generateCards}
      class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition flex items-center"
      disabled={generating || !content}
    >
      {#if generating}
        <i class="fas fa-spinner fa-spin mr-2"></i>
      {:else}
        <i class="fas fa-magic mr-2"></i>
      {/if}
      Generate Flashcards
    </button>
    
    {#if generatedCards.length > 0}
      <button
        on:click={addSelectedCards}
        class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
      >
        Add {generatedCards.length} Cards
      </button>
    {/if}
  </div>
  
  {#if generatedCards.length > 0}
    <div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
      <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Generated Cards</h4>
      <div class="space-y-2">
        {#each generatedCards as card}
          <div class="bg-white dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700">
            <div class="font-medium text-gray-900 dark:text-white">{card.front}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">{card.back}</div>
          </div>
        {/each}
      </div>
    </div>
  {/if}
</div>===== ./dist/components/CourseModal.svelte =====
<script>
  import { onMount } from 'svelte';
  import { courseModalOpen, currentCourse } from '../stores/appStore';
  import * as marked from 'marked';
  
  export let markdownContent = `
# JavaScript Closures

A closure is a combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).

## Understanding Closures

In JavaScript, closures are created every time a function is created, at function creation time.

\`\`\`javascript
function outer() {
  const outerVar = 'I am outside!';
  
  function inner() {
    console.log(outerVar); // Accesses outerVar from the outer function's scope
  }
  
  return inner;
}

const myInner = outer();
myInner(); // Logs: "I am outside!"
\`\`\`

## Practical Uses of Closures

### Data Privacy
Closures can be used to create private variables.

\`\`\`javascript
function createCounter() {
  let count = 0;
  
  return {
    increment: function() { count++; },
    getCount: function() { return count; }
  };
}

const counter = createCounter();
counter.increment();
console.log(counter.getCount()); // 1
console.log(counter.count); // undefined (private)
\`\`\`

### Function Factories
Create specialized functions based on parameters.

\`\`\`javascript
function multiplyBy(factor) {
  return function(number) {
    return number * factor;
  };
}

const double = multiplyBy(2);
console.log(double(5)); // 10
\`\`\`

## Exercise

Create a closure that implements a simple bank account with:
- \`deposit(amount)\` method
- \`withdraw(amount)\` method
- \`getBalance()\` method

The balance should be private and only accessible through these methods.
`;
  
  let renderedContent = '';
  
  function closeModal() {
    courseModalOpen.set(false);
  }
  
  async function renderMarkdown() {
    // Use marked directly and await its result
    renderedContent = await marked.parse(markdownContent);
  }
  
  onMount(() => {
    renderMarkdown();
  });
</script>

{#if $courseModalOpen}
  <div 
    class="fixed inset-0 z-50 overflow-y-auto"
    aria-labelledby="modal-title"
    role="dialog" 
    aria-modal="true"
  >
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Background overlay -->
      <div 
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
        aria-hidden="true"
        on:click={closeModal}
        on:keydown={e => e.key === 'Escape' && closeModal()}
      ></div>
      
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">​</span>
      
      <!-- Modal panel -->
      <div class="inline-block align-bottom bg-gray-800 text-gray-100 rounded-2xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full squircle border border-orange-500">
        <div class="bg-gray-800 px-6 py-4">
          <div class="flex justify-between items-center border-b border-gray-700 pb-4">
            <h3 class="text-lg font-medium text-gray-100">
              {$currentCourse?.title || 'Course Content'}
            </h3>
            <button 
              on:click={closeModal} 
              class="text-gray-400 hover:text-gray-200"
              aria-label="Close modal"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>
          
          <div class="markdown-content py-4">
            {@html renderedContent}
          </div>
          
          <div class="border-t border-gray-700 pt-4 flex justify-between">
            <button class="px-4 py-2 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600">
              Previous
            </button>
            <button class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
              Next Lesson
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
{/if}
===== ./dist/components/Footer.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const Footer: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type Footer = InstanceType<typeof Footer>;
export default Footer;
===== ./dist/components/StatCard.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const StatCard: $$__sveltets_2_IsomorphicComponent<{
    title: string;
    value: string;
    icon?: string;
    color?: string;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type StatCard = InstanceType<typeof StatCard>;
export default StatCard;
===== ./dist/components/PipWidget.svelte.d.ts =====
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
declare const PipWidget: $$__sveltets_2_IsomorphicComponent<Record<string, never>, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, string>;
type PipWidget = InstanceType<typeof PipWidget>;
export default PipWidget;
===== ./dist/authService.js =====
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut as firebaseSignOut, onAuthStateChanged, sendPasswordResetEmail, updateProfile, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
import { auth } from './firebase.js';
import { isAuthenticated, user, loading, authError } from './stores/authStore.js';
import { loadUserProfile } from './stores/userProfileStore.js';
// Flag to track if auth initialization has completed
let authInitialized = false;
// Initialize the auth listener
function initAuth() {
    if (authInitialized) {
        console.log('Auth already initialized, skipping');
        return;
    }
    loading.set(true);
    console.log('Initializing auth listener');
    // Set up an observer to watch for auth state changes
    const unsubscribe = onAuthStateChanged(auth, (userData) => {
        if (userData) {
            console.log('Auth state changed: User authenticated', {
                uid: userData.uid,
                email: userData.email,
                displayName: userData.displayName
            });
            isAuthenticated.set(true);
            user.set(userData);
            // Load or initialize Firestore user profile
            loadUserProfile(userData.uid, userData.email || '', userData.displayName || undefined)
                .catch((err) => console.error('Failed to load user profile:', err));
        }
        else {
            console.log('Auth state changed: User not authenticated');
            isAuthenticated.set(false);
            user.set(null);
        }
        loading.set(false);
        authInitialized = true;
    }, (error) => {
        console.error('Auth state change error:', error);
        authError.set(error.message);
        loading.set(false);
        authInitialized = true;
    });
    // Return unsubscribe function in case we need to detach the listener
    return unsubscribe;
}
// Register a new user with email and password
async function register(email, password, displayName) {
    loading.set(true);
    authError.set(null);
    console.log('Attempting to register user:', { email, displayName });
    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        // Update the user profile with display name
        if (userCredential.user) {
            await updateProfile(userCredential.user, { displayName });
            console.log('User registered successfully');
        }
    }
    catch (error) {
        console.error('Registration error:', error);
        authError.set(error.message);
        throw error;
    }
    finally {
        loading.set(false);
    }
}
// Login with email and password
async function login(email, password) {
    loading.set(true);
    authError.set(null);
    console.log('Attempting to login user:', { email });
    try {
        const result = await signInWithEmailAndPassword(auth, email, password);
        console.log('Login successful:', {
            uid: result.user.uid,
            email: result.user.email,
            displayName: result.user.displayName,
            emailVerified: result.user.emailVerified
        });
    }
    catch (error) {
        console.error('Login error:', error);
        authError.set(error.message);
        throw error;
    }
    finally {
        loading.set(false);
    }
}
// Sign in with Google
async function loginWithGoogle() {
    loading.set(true);
    authError.set(null);
    console.log('Attempting Google sign-in');
    try {
        const provider = new GoogleAuthProvider();
        const result = await signInWithPopup(auth, provider);
        console.log('Google sign-in successful:', {
            uid: result.user.uid,
            email: result.user.email,
            displayName: result.user.displayName
        });
    }
    catch (error) {
        console.error('Google sign-in error:', error);
        authError.set(error.message);
        throw error;
    }
    finally {
        loading.set(false);
    }
}
// Logout the user
async function logout() {
    loading.set(true);
    authError.set(null);
    console.log('Logging out user');
    try {
        await firebaseSignOut(auth);
        console.log('Logout successful');
    }
    catch (error) {
        console.error('Logout error:', error);
        authError.set(error.message);
        throw error;
    }
    finally {
        loading.set(false);
    }
}
// Reset password
async function resetPassword(email) {
    loading.set(true);
    authError.set(null);
    console.log('Requesting password reset for:', { email });
    try {
        await sendPasswordResetEmail(auth, email);
        console.log('Password reset email sent');
    }
    catch (error) {
        console.error('Password reset error:', error);
        authError.set(error.message);
        throw error;
    }
    finally {
        loading.set(false);
    }
}
// Get current user
function getCurrentUser() {
    const currentUser = auth.currentUser;
    console.log('Getting current user:', currentUser ? {
        uid: currentUser.uid,
        email: currentUser.email,
        displayName: currentUser.displayName
    } : 'No user');
    return currentUser;
}
export { initAuth, register, login, loginWithGoogle, logout, resetPassword, getCurrentUser, updateProfile };
===== ./dist/index.d.ts =====
export {};
===== ./dist/utils/markdown.js =====
/**
 * Utility functions for working with markdown
 */

// Simple markdown renderer that doesn't require external libraries
export function renderMarkdown(markdown) {
  // This is a very basic markdown renderer
  // For a real app, you'd want to use a proper library
  if (!markdown) return '';
  
  return markdown
    // Handle headings
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    // Handle code blocks
    .replace(/```(\w*)\n([\s\S]*?)```/gm, '<pre><code class="language-$1">$2</code></pre>')
    // Handle inline code
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Handle bold
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // Handle emphasis
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // Handle links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
    // Handle paragraphs
    .replace(/^\s*(\n)?(.+)/gm, function(m) {
      return /^<(\/)?(h\d|pre|ul|ol|li|blockquote|p|table|tr|td|th)/.test(m) ? m : '<p>' + m + '</p>';
    })
    // Handle line breaks
    .replace(/\n/g, '<br>');
}

// Function to load external markdown renderer from CDN
export function loadMarkedLibrary() {
  return new Promise((resolve) => {
    // If already loaded, resolve immediately
    if (typeof window !== 'undefined' && window.marked) {
      resolve(window.marked);
      return;
    }
    
    // Otherwise load from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/marked@4.3.0/marked.min.js';
    script.onload = () => resolve(window.marked);
    document.head.appendChild(script);
  });
}
===== ./dist/utils/csrfProtection.js =====
/**
 * Client-side CSRF protection utilities
 *
 * This module provides functions to retrieve and manage CSRF tokens
 * to protect against Cross-Site Request Forgery attacks.
 */
// The header name used for CSRF token transmission
export const CSRF_HEADER = 'X-CSRF-Token';
/**
 * Retrieves the CSRF token from the page's meta tags
 * This token is initially set by the server during page load
 */
export function getCsrfToken() {
    // First check for token in meta tag (set during initial page load)
    const metaTag = document.querySelector('meta[name="csrf-token"]');
    if (metaTag && metaTag.getAttribute('content')) {
        return metaTag.getAttribute('content');
    }
    // Fallback to localStorage (may have been set by a previous fetch response)
    return localStorage.getItem('csrf_token');
}
/**
 * Stores a CSRF token for future use
 * This is typically called after receiving a new token from the server
 */
export function storeCsrfToken(token) {
    localStorage.setItem('csrf_token', token);
    // Also update the meta tag if it exists
    let metaTag = document.querySelector('meta[name="csrf-token"]');
    if (!metaTag) {
        metaTag = document.createElement('meta');
        metaTag.setAttribute('name', 'csrf-token');
        document.head.appendChild(metaTag);
    }
    metaTag.setAttribute('content', token);
}
/**
 * Updates the CSRF token from response headers if present
 * Call this after each fetch request to keep the token fresh
 */
export function updateCsrfTokenFromResponse(response) {
    const newToken = response.headers.get(CSRF_HEADER);
    if (newToken) {
        storeCsrfToken(newToken);
    }
}
===== ./dist/utils/secureFetch.d.ts =====
/**
 * Secure Fetch Utility
 *
 * This utility wraps the browser's fetch API with security enhancements:
 * - Automatically adds CSRF token headers for non-GET/HEAD requests
 * - Includes credentials for session cookies
 * - Provides standardized error handling
 */
export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
    status: number;
}
/**
 * Enhanced fetch function with CSRF protection and error handling
 *
 * @param url The URL to fetch
 * @param options Fetch options (similar to the standard fetch API)
 * @returns A promise resolving to the parsed response with standardized format
 */
export declare function safeFetch<T = any>(url: string, options?: RequestInit): Promise<ApiResponse<T>>;
===== ./dist/utils/secureFetch.js =====
/**
 * Secure Fetch Utility
 *
 * This utility wraps the browser's fetch API with security enhancements:
 * - Automatically adds CSRF token headers for non-GET/HEAD requests
 * - Includes credentials for session cookies
 * - Provides standardized error handling
 */
import { getCsrfToken, CSRF_HEADER } from './csrfProtection';
/**
 * Enhanced fetch function with CSRF protection and error handling
 *
 * @param url The URL to fetch
 * @param options Fetch options (similar to the standard fetch API)
 * @returns A promise resolving to the parsed response with standardized format
 */
export async function safeFetch(url, options = {}) {
    try {
        // Default request options
        const requestOptions = {
            credentials: 'same-origin', // Include cookies with the request
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...(options.headers || {})
            }
        };
        // Add CSRF token for non-GET/HEAD requests
        const method = options.method || 'GET';
        if (!['GET', 'HEAD'].includes(method.toUpperCase())) {
            const csrfToken = getCsrfToken();
            if (csrfToken) {
                requestOptions.headers[CSRF_HEADER] = csrfToken;
            }
            else {
                console.warn('CSRF token not available for non-GET request');
            }
        }
        // Make the fetch request
        const response = await fetch(url, requestOptions);
        // Parse the response
        let data = null;
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            data = await response.json();
        }
        else {
            // For non-JSON responses, just get the text
            data = await response.text();
        }
        // Return a standardized response format
        if (response.ok) {
            return {
                success: true,
                data,
                status: response.status
            };
        }
        else {
            // Handle API error responses
            return {
                success: false,
                error: typeof data === 'object' && data.message ? data.message : 'API request failed',
                status: response.status
            };
        }
    }
    catch (error) {
        // Handle network errors or exceptions
        console.error('Fetch error:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error during API request',
            status: 0 // Use 0 to indicate a network/client-side error
        };
    }
}
===== ./dist/utils/csrfProtection.d.ts =====
/**
 * Client-side CSRF protection utilities
 *
 * This module provides functions to retrieve and manage CSRF tokens
 * to protect against Cross-Site Request Forgery attacks.
 */
export declare const CSRF_HEADER = "X-CSRF-Token";
/**
 * Retrieves the CSRF token from the page's meta tags
 * This token is initially set by the server during page load
 */
export declare function getCsrfToken(): string | null;
/**
 * Stores a CSRF token for future use
 * This is typically called after receiving a new token from the server
 */
export declare function storeCsrfToken(token: string): void;
/**
 * Updates the CSRF token from response headers if present
 * Call this after each fetch request to keep the token fresh
 */
export declare function updateCsrfTokenFromResponse(response: Response): void;
===== ./dist/utils/markdown.d.ts =====
/**
 * Utility functions for working with markdown
 */
export function renderMarkdown(markdown: any): any;
export function loadMarkedLibrary(): Promise<any>;
===== ./dist/index.js =====
"use strict";
// Reexport your entry components here
===== ./.svelte-kit/non-ambient.d.ts =====

// this file is generated — do not edit it


declare module "svelte/elements" {
	export interface HTMLAttributes<T> {
		'data-sveltekit-keepfocus'?: true | '' | 'off' | undefined | null;
		'data-sveltekit-noscroll'?: true | '' | 'off' | undefined | null;
		'data-sveltekit-preload-code'?:
			| true
			| ''
			| 'eager'
			| 'viewport'
			| 'hover'
			| 'tap'
			| 'off'
			| undefined
			| null;
		'data-sveltekit-preload-data'?: true | '' | 'hover' | 'tap' | 'off' | undefined | null;
		'data-sveltekit-reload'?: true | '' | 'off' | undefined | null;
		'data-sveltekit-replacestate'?: true | '' | 'off' | undefined | null;
	}
}

export {};
===== ./.svelte-kit/generated/root.svelte =====
<!-- This file is generated by @sveltejs/kit — do not edit it! -->
<svelte:options runes={true} />
<script>
	import { setContext, onMount, tick } from 'svelte';
	import { browser } from '$app/environment';

	// stores
	let { stores, page, constructors, components = [], form, data_0 = null, data_1 = null, data_2 = null } = $props();

	if (!browser) {
		setContext('__svelte__', stores);
	}

	if (browser) {
		$effect.pre(() => stores.page.set(page));
	} else {
		stores.page.set(page);
	}
	$effect(() => {
		stores;page;constructors;components;form;data_0;data_1;data_2;
		stores.page.notify();
	});

	let mounted = $state(false);
	let navigated = $state(false);
	let title = $state(null);

	onMount(() => {
		const unsubscribe = stores.page.subscribe(() => {
			if (mounted) {
				navigated = true;
				tick().then(() => {
					title = document.title || 'untitled page';
				});
			}
		});

		mounted = true;
		return unsubscribe;
	});

	const Pyramid_2=$derived(constructors[2])
</script>

{#if constructors[1]}
	{@const Pyramid_0 = constructors[0]}
							<!-- svelte-ignore binding_property_non_reactive -->
							<Pyramid_0 bind:this={components[0]} data={data_0} {form}>
								{#if constructors[2]}
									{@const Pyramid_1 = constructors[1]}
															<!-- svelte-ignore binding_property_non_reactive -->
															<Pyramid_1 bind:this={components[1]} data={data_1} {form}>
																<!-- svelte-ignore binding_property_non_reactive -->
																		<Pyramid_2 bind:this={components[2]} data={data_2} {form} />
															</Pyramid_1>
									
								{:else}
									{@const Pyramid_1 = constructors[1]}
									<!-- svelte-ignore binding_property_non_reactive -->
									<Pyramid_1 bind:this={components[1]} data={data_1} {form} />
									
								{/if}
							</Pyramid_0>
	
{:else}
	{@const Pyramid_0 = constructors[0]}
	<!-- svelte-ignore binding_property_non_reactive -->
	<Pyramid_0 bind:this={components[0]} data={data_0} {form} />
	
{/if}

{#if mounted}
	<div id="svelte-announcer" aria-live="assertive" aria-atomic="true" style="position: absolute; left: 0; top: 0; clip: rect(0 0 0 0); clip-path: inset(50%); overflow: hidden; white-space: nowrap; width: 1px; height: 1px">
		{#if navigated}
			{title}
		{/if}
	</div>
{/if}===== ./.svelte-kit/generated/client/app.js =====
export { matchers } from './matchers.js';

export const nodes = [
	() => import('./nodes/0'),
	() => import('./nodes/1'),
	() => import('./nodes/2'),
	() => import('./nodes/3'),
	() => import('./nodes/4'),
	() => import('./nodes/5'),
	() => import('./nodes/6'),
	() => import('./nodes/7'),
	() => import('./nodes/8'),
	() => import('./nodes/9'),
	() => import('./nodes/10'),
	() => import('./nodes/11'),
	() => import('./nodes/12'),
	() => import('./nodes/13'),
	() => import('./nodes/14'),
	() => import('./nodes/15'),
	() => import('./nodes/16'),
	() => import('./nodes/17'),
	() => import('./nodes/18'),
	() => import('./nodes/19'),
	() => import('./nodes/20'),
	() => import('./nodes/21'),
	() => import('./nodes/22'),
	() => import('./nodes/23'),
	() => import('./nodes/24'),
	() => import('./nodes/25'),
	() => import('./nodes/26'),
	() => import('./nodes/27'),
	() => import('./nodes/28'),
	() => import('./nodes/29'),
	() => import('./nodes/30'),
	() => import('./nodes/31'),
	() => import('./nodes/32'),
	() => import('./nodes/33'),
	() => import('./nodes/34'),
	() => import('./nodes/35'),
	() => import('./nodes/36'),
	() => import('./nodes/37'),
	() => import('./nodes/38'),
	() => import('./nodes/39'),
	() => import('./nodes/40'),
	() => import('./nodes/41'),
	() => import('./nodes/42'),
	() => import('./nodes/43'),
	() => import('./nodes/44'),
	() => import('./nodes/45'),
	() => import('./nodes/46'),
	() => import('./nodes/47'),
	() => import('./nodes/48')
];

export const server_loads = [0,3];

export const dictionary = {
		"/": [~4],
		"/admin": [5,[3]],
		"/admin/courses": [~6,[3]],
		"/admin/forums": [~7,[3]],
		"/admin/forums/category/[id]/edit": [~8,[3]],
		"/admin/forums/topic/[id]/edit": [~9,[3]],
		"/admin/users": [~10,[3]],
		"/calendar": [11],
		"/category/[slug]": [12],
		"/courses": [~13],
		"/courses/maths/mpsi-maths": [16],
		"/courses/[slug]": [~15],
		"/courses/[...slug]": [~14],
		"/events": [17],
		"/exercises": [~18],
		"/exercises/maths": [21],
		"/exercises/maths/mpsi-maths": [22],
		"/exercises/maths/mpsi-maths/[exerciseId]": [23],
		"/exercises/[id]": [20],
		"/exercises/[...id]": [~19],
		"/forums": [~24],
		"/forums/category/[id]": [~25],
		"/forums/create": [26],
		"/forums/tag/[tag]": [~27],
		"/forums/topic/[id]": [~28],
		"/groups": [29],
		"/groups/create": [31],
		"/groups/[id]": [30],
		"/help": [32],
		"/login": [33],
		"/my-learning": [~34],
		"/progress": [35],
		"/register": [36],
		"/reset-password": [37],
		"/settings": [38],
		"/statistics": [39],
		"/tools": [40],
		"/tools/calculator": [41],
		"/tools/chat": [42],
		"/tools/dictionary": [43],
		"/tools/flashcards": [44],
		"/tools/notepad": [45],
		"/tools/pomodoro": [46],
		"/tools/tasks": [47],
		"/tools/workspace": [48]
	};

export const hooks = {
	handleError: (({ error }) => { console.error(error) }),
	
	reroute: (() => {}),
	transport: {}
};

export const decoders = Object.fromEntries(Object.entries(hooks.transport).map(([k, v]) => [k, v.decode]));

export const hash = false;

export const decode = (type, value) => decoders[type](value);

export { default as root } from '../root.js';===== ./.svelte-kit/generated/client/nodes/21.js =====
export { default as component } from "../../../../src/routes/exercises/maths/+page.svelte";===== ./.svelte-kit/generated/client/nodes/7.js =====
export { default as component } from "../../../../src/routes/admin/forums/+page.svelte";===== ./.svelte-kit/generated/client/nodes/34.js =====
export { default as component } from "../../../../src/routes/my-learning/+page.svelte";===== ./.svelte-kit/generated/client/nodes/29.js =====
export { default as component } from "../../../../src/routes/groups/+page.svelte";===== ./.svelte-kit/generated/client/nodes/46.js =====
export { default as component } from "../../../../src/routes/tools/pomodoro/+page.svelte";===== ./.svelte-kit/generated/client/nodes/45.js =====
export { default as component } from "../../../../src/routes/tools/notepad/+page.svelte";===== ./.svelte-kit/generated/client/nodes/43.js =====
export { default as component } from "../../../../src/routes/tools/dictionary/+page.svelte";===== ./.svelte-kit/generated/client/nodes/8.js =====
export { default as component } from "../../../../src/routes/admin/forums/category/[id]/edit/+page.svelte";===== ./.svelte-kit/generated/client/nodes/19.js =====
export { default as component } from "../../../../src/routes/exercises/[...id]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/12.js =====
import * as universal from "../../../../src/routes/category/[slug]/+page.ts";
export { universal };
export { default as component } from "../../../../src/routes/category/[slug]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/10.js =====
export { default as component } from "../../../../src/routes/admin/users/+page.svelte";===== ./.svelte-kit/generated/client/nodes/11.js =====
export { default as component } from "../../../../src/routes/calendar/+page.svelte";===== ./.svelte-kit/generated/client/nodes/27.js =====
export { default as component } from "../../../../src/routes/forums/tag/[tag]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/0.js =====
export { default as component } from "../../../../src/routes/+layout.svelte";===== ./.svelte-kit/generated/client/nodes/18.js =====
export { default as component } from "../../../../src/routes/exercises/+page.svelte";===== ./.svelte-kit/generated/client/nodes/15.js =====
export { default as component } from "../../../../src/routes/courses/[slug]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/44.js =====
export { default as component } from "../../../../src/routes/tools/flashcards/+page.svelte";===== ./.svelte-kit/generated/client/nodes/13.js =====
export { default as component } from "../../../../src/routes/courses/+page.svelte";===== ./.svelte-kit/generated/client/nodes/17.js =====
export { default as component } from "../../../../src/routes/events/+page.svelte";===== ./.svelte-kit/generated/client/nodes/41.js =====
export { default as component } from "../../../../src/routes/tools/calculator/+page.svelte";===== ./.svelte-kit/generated/client/nodes/23.js =====
export { default as component } from "../../../../src/routes/exercises/maths/mpsi-maths/[exerciseId]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/47.js =====
export { default as component } from "../../../../src/routes/tools/tasks/+page.svelte";===== ./.svelte-kit/generated/client/nodes/28.js =====
export { default as component } from "../../../../src/routes/forums/topic/[id]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/2.js =====
export { default as component } from "../../../../src/routes/(protected)/+layout.svelte";===== ./.svelte-kit/generated/client/nodes/40.js =====
export { default as component } from "../../../../src/routes/tools/+page.svelte";===== ./.svelte-kit/generated/client/nodes/48.js =====
export { default as component } from "../../../../src/routes/tools/workspace/+page.svelte";===== ./.svelte-kit/generated/client/nodes/32.js =====
export { default as component } from "../../../../src/routes/help/+page.svelte";===== ./.svelte-kit/generated/client/nodes/36.js =====
export { default as component } from "../../../../src/routes/register/+page.svelte";===== ./.svelte-kit/generated/client/nodes/26.js =====
export { default as component } from "../../../../src/routes/forums/create/+page.svelte";===== ./.svelte-kit/generated/client/nodes/24.js =====
export { default as component } from "../../../../src/routes/forums/+page.svelte";===== ./.svelte-kit/generated/client/nodes/6.js =====
export { default as component } from "../../../../src/routes/admin/courses/+page.svelte";===== ./.svelte-kit/generated/client/nodes/33.js =====
export { default as component } from "../../../../src/routes/login/+page.svelte";===== ./.svelte-kit/generated/client/nodes/37.js =====
export { default as component } from "../../../../src/routes/reset-password/+page.svelte";===== ./.svelte-kit/generated/client/nodes/16.js =====
export { default as component } from "../../../../src/routes/courses/maths/mpsi-maths/+page.svelte";===== ./.svelte-kit/generated/client/nodes/30.js =====
export { default as component } from "../../../../src/routes/groups/[id]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/42.js =====
export { default as component } from "../../../../src/routes/tools/chat/+page.svelte";===== ./.svelte-kit/generated/client/nodes/14.js =====
===== ./.svelte-kit/generated/client/nodes/35.js =====
export { default as component } from "../../../../src/routes/progress/+page.svelte";===== ./.svelte-kit/generated/client/nodes/38.js =====
export { default as component } from "../../../../src/routes/settings/+page.svelte";===== ./.svelte-kit/generated/client/nodes/9.js =====
export { default as component } from "../../../../src/routes/admin/forums/topic/[id]/edit/+page.svelte";===== ./.svelte-kit/generated/client/nodes/4.js =====
export { default as component } from "../../../../src/routes/+page.svelte";===== ./.svelte-kit/generated/client/nodes/5.js =====
export { default as component } from "../../../../src/routes/admin/+page.svelte";===== ./.svelte-kit/generated/client/nodes/1.js =====
export { default as component } from "../../../../src/routes/+error.svelte";===== ./.svelte-kit/generated/client/nodes/39.js =====
export { default as component } from "../../../../src/routes/statistics/+page.svelte";===== ./.svelte-kit/generated/client/nodes/25.js =====
export { default as component } from "../../../../src/routes/forums/category/[id]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/3.js =====
export { default as component } from "../../../../src/routes/admin/+layout.svelte";===== ./.svelte-kit/generated/client/nodes/22.js =====
export { default as component } from "../../../../src/routes/exercises/maths/mpsi-maths/+page.svelte";===== ./.svelte-kit/generated/client/nodes/20.js =====
export { default as component } from "../../../../src/routes/exercises/[id]/+page.svelte";===== ./.svelte-kit/generated/client/nodes/31.js =====
export { default as component } from "../../../../src/routes/groups/create/+page.svelte";===== ./.svelte-kit/generated/client/matchers.js =====
export const matchers = {};===== ./.svelte-kit/generated/server/internal.js =====

import root from '../root.js';
import { set_building, set_prerendering } from '__sveltekit/environment';
import { set_assets } from '__sveltekit/paths';
import { set_manifest, set_read_implementation } from '__sveltekit/server';
import { set_private_env, set_public_env, set_safe_public_env } from '../../../node_modules/@sveltejs/kit/src/runtime/shared-server.js';

export const options = {
	app_template_contains_nonce: false,
	csp: {"mode":"auto","directives":{"upgrade-insecure-requests":false,"block-all-mixed-content":false},"reportOnly":{"upgrade-insecure-requests":false,"block-all-mixed-content":false}},
	csrf_check_origin: true,
	embedded: false,
	env_public_prefix: 'PUBLIC_',
	env_private_prefix: '',
	hash_routing: false,
	hooks: null, // added lazily, via `get_hooks`
	preload_strategy: "modulepreload",
	root,
	service_worker: false,
	templates: {
		app: ({ head, body, assets, nonce, env }) => "<!DOCTYPE html>\n<html lang=\"fr\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"" + assets + "/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <!-- KaTeX CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css\" integrity=\"sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV\" crossorigin=\"anonymous\">\n    <!-- MathJax Configuration (if needed alongside or instead of KaTeX) -->\n    <!-- <script>\n      MathJax = {\n        tex: {\n          inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n          displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']]\n        },\n        svg: {\n          fontCache: 'global'\n        }\n      };\n    </script>\n    <script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js\"></script> -->\n    <!-- Preload critical fonts -->\n    <link\n      rel=\"preload\"\n      href=\"/node_modules/@fontsource/plus-jakarta-sans/files/plus-jakarta-sans-latin-400-normal.woff2\"\n      as=\"font\"\n      type=\"font/woff2\"\n      crossorigin\n    />\n    <link\n      rel=\"preload\"\n      href=\"/node_modules/@fontsource/plus-jakarta-sans/files/plus-jakarta-sans-latin-600-normal.woff2\"\n      as=\"font\"\n      type=\"font/woff2\"\n      crossorigin\n    />\n    <link\n      rel=\"preload\"\n      href=\"/node_modules/@fontsource/manrope/files/manrope-latin-400-normal.woff2\"\n      as=\"font\"\n      type=\"font/woff2\"\n      crossorigin\n    />\n    " + head + "\n  </head>\n  <body data-sveltekit-preload-data=\"hover\" class=\"bg-surface text-text-DEFAULT\">\n    <div style=\"display: contents\">" + body + "</div>\n  </body>\n</html>\n",
		error: ({ status, message }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>" + message + "</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\t--bg: white;\n\t\t\t\t--fg: #222;\n\t\t\t\t--divider: #ccc;\n\t\t\t\tbackground: var(--bg);\n\t\t\t\tcolor: var(--fg);\n\t\t\t\tfont-family:\n\t\t\t\t\tsystem-ui,\n\t\t\t\t\t-apple-system,\n\t\t\t\t\tBlinkMacSystemFont,\n\t\t\t\t\t'Segoe UI',\n\t\t\t\t\tRoboto,\n\t\t\t\t\tOxygen,\n\t\t\t\t\tUbuntu,\n\t\t\t\t\tCantarell,\n\t\t\t\t\t'Open Sans',\n\t\t\t\t\t'Helvetica Neue',\n\t\t\t\t\tsans-serif;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\theight: 100vh;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.error {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmax-width: 32rem;\n\t\t\t\tmargin: 0 1rem;\n\t\t\t}\n\n\t\t\t.status {\n\t\t\t\tfont-weight: 200;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tline-height: 1;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: -0.05rem;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tborder-left: 1px solid var(--divider);\n\t\t\t\tpadding: 0 0 0 1rem;\n\t\t\t\tmargin: 0 0 0 1rem;\n\t\t\t\tmin-height: 2.5rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t.message h1 {\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t@media (prefers-color-scheme: dark) {\n\t\t\t\tbody {\n\t\t\t\t\t--bg: #222;\n\t\t\t\t\t--fg: #ddd;\n\t\t\t\t\t--divider: #666;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"error\">\n\t\t\t<span class=\"status\">" + status + "</span>\n\t\t\t<div class=\"message\">\n\t\t\t\t<h1>" + message + "</h1>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>\n"
	},
	version_hash: "v2ar85"
};

export async function get_hooks() {
	let handle;
	let handleFetch;
	let handleError;
	let init;
	({ handle, handleFetch, handleError, init } = await import("../../../src/hooks.server.ts"));

	let reroute;
	let transport;
	

	return {
		handle,
		handleFetch,
		handleError,
		init,
		reroute,
		transport
	};
}

export { set_assets, set_building, set_manifest, set_prerendering, set_private_env, set_public_env, set_read_implementation, set_safe_public_env };
===== ./.svelte-kit/generated/root.js =====
import { asClassComponent } from 'svelte/legacy';
import Root from './root.svelte';
export default asClassComponent(Root);===== ./.svelte-kit/types/route_meta_data.json =====
{
	"/(protected)": [],
	"/": [
		"src/routes/+page.server.ts",
		"src/routes/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin": [
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin/courses": [
		"src/routes/admin/courses/+page.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin/forums": [
		"src/routes/admin/forums/+page.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin/forums/category/[id]/edit": [
		"src/routes/admin/forums/category/[id]/edit/+page.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin/forums/topic/[id]/edit": [
		"src/routes/admin/forums/topic/[id]/edit/+page.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/admin/users": [
		"src/routes/admin/users/+page.server.ts",
		"src/routes/admin/+layout.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/api/activities": [
		"src/routes/api/activities/+server.ts"
	],
	"/api/activities/end": [
		"src/routes/api/activities/end/+server.ts"
	],
	"/api/activities/event": [
		"src/routes/api/activities/event/+server.ts"
	],
	"/api/activities/recent": [
		"src/routes/api/activities/recent/+server.ts"
	],
	"/api/activities/start": [
		"src/routes/api/activities/start/+server.ts"
	],
	"/api/csrf/init": [
		"src/routes/api/csrf/init/+server.ts"
	],
	"/api/csrf/refresh": [
		"src/routes/api/csrf/refresh/+server.ts"
	],
	"/api/exercises": [
		"src/routes/api/exercises/+server.ts"
	],
	"/api/forum/categories": [
		"src/routes/api/forum/categories/+server.ts"
	],
	"/api/forum/categories/[id]": [
		"src/routes/api/forum/categories/[id]/+server.ts"
	],
	"/api/forum/posts": [
		"src/routes/api/forum/posts/+server.ts"
	],
	"/api/forum/topics": [
		"src/routes/api/forum/topics/+server.ts"
	],
	"/api/forum/topics/[id]": [
		"src/routes/api/forum/topics/[id]/+server.ts"
	],
	"/api/forum/topics/[id]/vote": [
		"src/routes/api/forum/topics/[id]/vote/+server.ts"
	],
	"/api/groups": [
		"src/routes/api/groups/+server.ts"
	],
	"/api/groups/join": [
		"src/routes/api/groups/join/+server.ts"
	],
	"/api/groups/leave": [
		"src/routes/api/groups/leave/+server.ts"
	],
	"/api/groups/[id]": [
		"src/routes/api/groups/[id]/+server.ts"
	],
	"/api/recommendations": [
		"src/routes/api/recommendations/+server.ts"
	],
	"/api/score": [
		"src/routes/api/score/+server.ts"
	],
	"/calendar": [
		"src/routes/+layout.server.ts"
	],
	"/category/[slug]": [
		"src/routes/category/[slug]/+page.ts",
		"src/routes/+layout.server.ts"
	],
	"/courses": [
		"src/routes/courses/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/courses/maths/mpsi-maths": [
		"src/routes/+layout.server.ts"
	],
	"/courses/[slug]": [
		"src/routes/courses/[slug]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/courses/[...slug]": [
		"src/routes/courses/[...slug]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/events": [
		"src/routes/+layout.server.ts"
	],
	"/exercises": [
		"src/routes/exercises/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/exercises/maths": [
		"src/routes/+layout.server.ts"
	],
	"/exercises/maths/mpsi-maths": [
		"src/routes/+layout.server.ts"
	],
	"/exercises/maths/mpsi-maths/[exerciseId]": [
		"src/routes/+layout.server.ts"
	],
	"/exercises/[id]": [
		"src/routes/+layout.server.ts"
	],
	"/exercises/[...id]": [
		"src/routes/exercises/[...id]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/forums": [
		"src/routes/forums/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/forums/category/[id]": [
		"src/routes/forums/category/[id]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/forums/create": [
		"src/routes/+layout.server.ts"
	],
	"/forums/tag/[tag]": [
		"src/routes/forums/tag/[tag]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/forums/topic/[id]": [
		"src/routes/forums/topic/[id]/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/groups": [
		"src/routes/+layout.server.ts"
	],
	"/groups/create": [
		"src/routes/+layout.server.ts"
	],
	"/groups/[id]": [
		"src/routes/+layout.server.ts"
	],
	"/help": [
		"src/routes/+layout.server.ts"
	],
	"/login": [
		"src/routes/+layout.server.ts"
	],
	"/my-learning": [
		"src/routes/my-learning/+page.server.ts",
		"src/routes/+layout.server.ts"
	],
	"/progress": [
		"src/routes/+layout.server.ts"
	],
	"/register": [
		"src/routes/+layout.server.ts"
	],
	"/reset-password": [
		"src/routes/+layout.server.ts"
	],
	"/settings": [
		"src/routes/+layout.server.ts"
	],
	"/statistics": [
		"src/routes/+layout.server.ts"
	],
	"/tools": [
		"src/routes/+layout.server.ts"
	],
	"/tools/calculator": [
		"src/routes/+layout.server.ts"
	],
	"/tools/chat": [
		"src/routes/+layout.server.ts"
	],
	"/tools/dictionary": [
		"src/routes/+layout.server.ts"
	],
	"/tools/flashcards": [
		"src/routes/+layout.server.ts"
	],
	"/tools/notepad": [
		"src/routes/+layout.server.ts"
	],
	"/tools/pomodoro": [
		"src/routes/+layout.server.ts"
	],
	"/tools/tasks": [
		"src/routes/+layout.server.ts"
	],
	"/tools/workspace": [
		"src/routes/+layout.server.ts"
	]
}===== ./.svelte-kit/types/src/routes/events/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/events';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/login/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/login';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/api/csrf/refresh/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/csrf/refresh';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/csrf/init/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/csrf/init';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/score/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/score';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/exercises/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/exercises';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/recommendations/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/recommendations';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/activities/end/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/activities/end';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/activities/recent/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/activities/recent';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/activities/start/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/activities/start';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/activities/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/activities';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/activities/event/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/activities/event';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/groups/join/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/groups/join';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/groups/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/groups';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/groups/leave/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/groups/leave';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/groups/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/api/groups/[id]';

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/topics/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/forum/topics';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/topics/[id]/vote/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/api/forum/topics/[id]/vote';

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/topics/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/api/forum/topics/[id]';

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/categories/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/forum/categories';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/categories/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/api/forum/categories/[id]';

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/api/forum/posts/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/api/forum/posts';

export type RequestHandler = Kit.RequestHandler<RouteParams, RouteId>;
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/register/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/register';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/category/[slug]/proxy+page.ts =====
// @ts-nocheck
import type { PageLoad } from './$types';

// Simple mapping for demonstration. You might fetch this from an API or a more structured source.
const categoryMap: Record<string, string> = {
    cs: 'Computer Science',
    math: 'Mathematics',
    languages: 'Languages',
    science: 'Science'
};

// Explicitly type params using the PageLoad generic or an inline type
export const load = ({ params }: { params: { slug: string } }) => {
    const slug = params.slug;
    const categoryName = categoryMap[slug] || 'Unknown Category'; // Provide a fallback name

    return {
        slug: slug,
        categoryName: categoryName
    };
}; ;null as any as PageLoad;===== ./.svelte-kit/types/src/routes/category/[slug]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { slug: string };
type RouteId = '/category/[slug]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerData = null;
export type PageLoad<OutputData extends OutputDataShape<PageParentData> = OutputDataShape<PageParentData>> = Kit.Load<RouteParams, PageServerData, PageParentData, OutputData, RouteId>;
export type PageLoadEvent = Parameters<PageLoad>[0];
export type PageData = Expand<Omit<PageParentData, keyof Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.js').load>>>> & OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.js').load>>>>>>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/notepad/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/notepad';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/dictionary/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/dictionary';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/workspace/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/workspace';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/pomodoro/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/pomodoro';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/chat/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/chat';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/calculator/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/calculator';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/flashcards/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/flashcards';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/tools/tasks/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/tools/tasks';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/statistics/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/statistics';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<LayoutServerData>;
type PageParentData = EnsureDefined<LayoutData>;
type LayoutRouteId = RouteId | "/" | "/admin" | "/admin/courses" | "/admin/forums" | "/admin/forums/category/[id]/edit" | "/admin/forums/topic/[id]/edit" | "/admin/users" | "/calendar" | "/category/[slug]" | "/courses" | "/courses/[...slug]" | "/courses/[slug]" | "/courses/maths/mpsi-maths" | "/events" | "/exercises" | "/exercises/[...id]" | "/exercises/[id]" | "/exercises/maths" | "/exercises/maths/mpsi-maths" | "/exercises/maths/mpsi-maths/[exerciseId]" | "/forums" | "/forums/category/[id]" | "/forums/create" | "/forums/tag/[tag]" | "/forums/topic/[id]" | "/groups" | "/groups/[id]" | "/groups/create" | "/help" | "/login" | "/my-learning" | "/progress" | "/register" | "/reset-password" | "/settings" | "/statistics" | "/tools" | "/tools/calculator" | "/tools/chat" | "/tools/dictionary" | "/tools/flashcards" | "/tools/notepad" | "/tools/pomodoro" | "/tools/tasks" | "/tools/workspace" | null
type LayoutParams = RouteParams & { id?: string; slug?: string; exerciseId?: string; tag?: string }
type LayoutServerParentData = EnsureDefined<{}>;
type LayoutParentData = EnsureDefined<{}>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type LayoutServerLoad<OutputData extends OutputDataShape<LayoutServerParentData> = OutputDataShape<LayoutServerParentData>> = Kit.ServerLoad<LayoutParams, LayoutServerParentData, OutputData, LayoutRouteId>;
export type LayoutServerLoadEvent = Parameters<LayoutServerLoad>[0];
export type LayoutServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+layout.server.js').load>>>>>>;
export type LayoutData = Expand<Omit<LayoutParentData, keyof LayoutServerData> & EnsureDefined<LayoutServerData>>;
export type LayoutProps = { data: LayoutData; children: import("svelte").Snippet }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/my-learning/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/my-learning';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/my-learning/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { getAllContentItemsByType } from '$lib/server/contentService';
import { error } from '@sveltejs/kit';

export const load = async ({ parent }: Parameters<PageServerLoad>[0]) => {
  const { userProfile } = await parent(); // Get userProfile from root layout

  if (!userProfile) {
    // This case might be handled by the layout guard, but good to be safe
    return { enrolledCourses: [] }; 
  }

  const enrolledIds = userProfile.preferences?.enrollments?.map((e: { id: string }) => e.id) || [];

  if (enrolledIds.length === 0) {
    return { enrolledCourses: [] };
  }

  try {
    // Fetch metadata for all courses
    const allCourses = await getAllContentItemsByType('courses', 'course');
    
    // Filter courses based on enrollment IDs and add enrollment details
    const enrolledCourses = allCourses
      .filter(course => enrolledIds.includes(course.id))
      .map(course => {
        const enrollment = userProfile.preferences.enrollments.find((e: { id: string }) => e.id === course.id);
        return {
          meta: course, // Contains id, title, description, path etc.
          enrollment: enrollment || { progress: 0, lastAccessed: 0 } // Add default if somehow missing
        };
      });

    return { enrolledCourses };

  } catch (err) {
    console.error("Error loading enrolled courses in /my-learning:", err);
    // Use SvelteKit's error helper for server-side errors
    throw error(500, 'Failed to load enrolled courses.'); 
  }
};
===== ./.svelte-kit/types/src/routes/proxy+page.server.ts =====
// @ts-nocheck
import { getSuggestedContentItems } from '$lib/server/contentService';
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit'; // Import error helper

export const load = async (event: Parameters<PageServerLoad>[0]) => {
    const { parent } = event;
    const { userProfile } = await parent(); // Get userProfile from layout load

    // Ensure userProfile is loaded, otherwise handle appropriately
    // This check might depend on whether anonymous users can see this page
    // If userProfile is required, you might redirect or throw an error earlier
    // For now, we'll proceed assuming userProfile might be null/undefined for guests
    const enrolledCourseIds = userProfile?.preferences?.enrollments?.map((e: any) => e.id) || [];
    // Assuming similar structure for exercise progress/enrollment if applicable
    // If not, adjust accordingly or pass an empty array
    const completedExerciseIds = userProfile?.progress?.exercises?.map((ex: any) => ex.id) || []; // Example structure

    try {
        // Fetch suggested courses and exercises using the new service function
        const [suggestedCourses, suggestedExercises] = await Promise.all([
            getSuggestedContentItems('courses', 'course', enrolledCourseIds),
            getSuggestedContentItems('exercises', 'exercise', completedExerciseIds) // Use relevant IDs for exercises
        ]);

        return {
            suggestedCourses,
            suggestedExercises
        };
    } catch (err: any) {
        console.error("Error loading dashboard data:", err);

        // Re-throw SvelteKit errors or throw a generic 500
        if (err.status) {
            throw err; // Re-throw the error caught from contentService
        }
        // Throw a generic 500 error for other unexpected issues
        error(500, 'Failed to load dashboard data. Please try again later.');

        // SvelteKit's error function halts execution, but for type safety:
        // return { suggestedCourses: [], suggestedExercises: [] };
    }
};
===== ./.svelte-kit/types/src/routes/help/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/help';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/reset-password/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/reset-password';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/calendar/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/calendar';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/forums/category/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/forums/category/[id]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/forums/category/[id]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';
import { error } from '@sveltejs/kit';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  const categories = await getAllCategories();
  const allTopics = await getAllTopics();
  const topics = allTopics.filter(t => t.category === params.id || t.category_id === params.id);
  if (!categories.find(c => c.id === params.id)) {
    throw error(404, 'Category not found');
  }
  return { topics, categories, selectedCategory: params.id };
};===== ./.svelte-kit/types/src/routes/forums/tag/[tag]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { tag: string };
type RouteId = '/forums/tag/[tag]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/forums/tag/[tag]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
import { getAllTopics, getAllCategories } from '$lib/services/forumService';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  const categories = await getAllCategories();
  const allTopics = await getAllTopics();
  const topics = allTopics.filter(t => t.tags?.includes(params.tag));
  if (!topics) {
    throw error(404, 'Tag not found or no topics');
  }
  return { topics, categories, selectedTag: params.tag };
};===== ./.svelte-kit/types/src/routes/forums/create/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/forums/create';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/forums/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/forums';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/forums/proxy+page.server.ts =====
// @ts-nocheck
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';
import type { PageServerLoad } from './$types';

export const load = async () => {
  try {
    const [topics, categories] = await Promise.all([
      getAllTopics(),
      getAllCategories()
    ]);
    return {
      topics,
      categories
    };
  } catch (error) {
    console.error('Error loading forum data:', error);
    return {
      topics: [],
      categories: [],
      error: 'Failed to load forum data'
    };
  }
};;null as any as PageServerLoad;===== ./.svelte-kit/types/src/routes/forums/topic/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/forums/topic/[id]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/forums/topic/[id]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
import { getTopicById, getPostsByTopicId } from '$lib/services/forums/forumService';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  const topic = await getTopicById(params.id);
  if (!topic) {
    throw error(404, 'Topic not found');
  }
  const posts = await getPostsByTopicId(params.id);
  return { topic, posts };
};===== ./.svelte-kit/types/src/routes/(protected)/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/(protected)';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type LayoutRouteId = RouteId
type LayoutParams = RouteParams & {  }
type LayoutParentData = EnsureDefined<{}>;

export type LayoutServerData = null;
export type LayoutData = Expand<LayoutParentData>;
export type LayoutProps = { data: LayoutData; children: import("svelte").Snippet }===== ./.svelte-kit/types/src/routes/admin/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/admin';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = Omit<EnsureDefined<import('../$types.js').LayoutData>, keyof LayoutData> & EnsureDefined<LayoutData>;
type LayoutRouteId = RouteId | "/admin" | "/admin/courses" | "/admin/forums" | "/admin/forums/category/[id]/edit" | "/admin/forums/topic/[id]/edit" | "/admin/users"
type LayoutParams = RouteParams & { id?: string }
type LayoutServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;
type LayoutParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }
export type LayoutServerLoad<OutputData extends OutputDataShape<LayoutServerParentData> = OutputDataShape<LayoutServerParentData>> = Kit.ServerLoad<LayoutParams, LayoutServerParentData, OutputData, LayoutRouteId>;
export type LayoutServerLoadEvent = Parameters<LayoutServerLoad>[0];
export type LayoutServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+layout.server.js').load>>>>>>;
export type LayoutData = Expand<Omit<LayoutParentData, keyof LayoutServerData> & EnsureDefined<LayoutServerData>>;
export type LayoutProps = { data: LayoutData; children: import("svelte").Snippet }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/forums/category/[id]/edit/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/admin/forums/category/[id]/edit';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = Omit<EnsureDefined<import('../../../../../$types.js').LayoutServerData>, keyof import('../../../../$types.js').LayoutServerData> & EnsureDefined<import('../../../../$types.js').LayoutServerData>;
type PageParentData = Omit<EnsureDefined<import('../../../../../$types.js').LayoutData>, keyof import('../../../../$types.js').LayoutData> & EnsureDefined<import('../../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/forums/category/[id]/edit/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { getCategory } from '$lib/services/forumService';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  const category = await getCategory(params.id);
  return { category };
};===== ./.svelte-kit/types/src/routes/admin/forums/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/admin/forums';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = Omit<EnsureDefined<import('../../$types.js').LayoutServerData>, keyof import('../$types.js').LayoutServerData> & EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = Omit<EnsureDefined<import('../../$types.js').LayoutData>, keyof import('../$types.js').LayoutData> & EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/forums/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';

export const load = async () => {
  const topics = await getAllTopics();
  const categories = await getAllCategories();
  return { topics, categories };
};;null as any as PageServerLoad;===== ./.svelte-kit/types/src/routes/admin/forums/topic/[id]/edit/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/admin/forums/topic/[id]/edit';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = Omit<EnsureDefined<import('../../../../../$types.js').LayoutServerData>, keyof import('../../../../$types.js').LayoutServerData> & EnsureDefined<import('../../../../$types.js').LayoutServerData>;
type PageParentData = Omit<EnsureDefined<import('../../../../../$types.js').LayoutData>, keyof import('../../../../$types.js').LayoutData> & EnsureDefined<import('../../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/forums/topic/[id]/edit/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { getAllCategories, getTopic } from '$lib/services/forumService';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  const categories = await getAllCategories();
  const topic = await getTopic(params.id);
  return { topic, categories };
};===== ./.svelte-kit/types/src/routes/admin/users/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/admin/users';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = Omit<EnsureDefined<import('../../$types.js').LayoutServerData>, keyof import('../$types.js').LayoutServerData> & EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = Omit<EnsureDefined<import('../../$types.js').LayoutData>, keyof import('../$types.js').LayoutData> & EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/users/proxy+page.server.ts =====
// @ts-nocheck
import { getAllUsers } from '$lib/services/userService.server';
import type { PageServerLoad } from './$types';

export const load = async () => {
    const users = await getAllUsers();
    return { users };
};;null as any as PageServerLoad;===== ./.svelte-kit/types/src/routes/admin/proxy+layout.server.ts =====
// @ts-nocheck
import { redirect } from '@sveltejs/kit';
import type { LayoutServerLoad } from './$types';
import { env } from '$env/dynamic/private';

export const load = async ({ locals }: Parameters<LayoutServerLoad>[0]) => {
    const user = locals.user;
    const ADMIN_EMAILS = (env.VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());
    
    if (!user || !ADMIN_EMAILS.includes(user.email)) {
        throw redirect(302, '/');
    }
    
    return {
        user
    };
};===== ./.svelte-kit/types/src/routes/admin/courses/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/admin/courses';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = Omit<EnsureDefined<import('../../$types.js').LayoutServerData>, keyof import('../$types.js').LayoutServerData> & EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = Omit<EnsureDefined<import('../../$types.js').LayoutData>, keyof import('../$types.js').LayoutData> & EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/admin/courses/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
// Update import path and function name
import { getAllContentItemsByType } from '$lib/server/contentService';

export const load = async () => {
  // Retrieve course metadata for admin using the new function
  const courses = await getAllContentItemsByType('courses', 'course');
  return { courses };
};;null as any as PageServerLoad;===== ./.svelte-kit/types/src/routes/exercises/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/exercises';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/exercises/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
// Use the unified content service
import { getContentListByCategory, getBreadcrumbs } from '$lib/server/contentService';

export const load = async ({ url }: Parameters<PageServerLoad>[0]) => {
  // Use an empty string for the root category identifier
  const categoryIdentifier = url.searchParams.get('category') || '';

  try {
    // Fetch the list of items (top-level categories/exercises or children of a category)
    const items = await getContentListByCategory('exercises', categoryIdentifier);

    // Fetch breadcrumbs for the current category view
    const breadcrumbs = await getBreadcrumbs('exercises', categoryIdentifier);

    return {
      items, // Renamed from exercises to items for consistency
      breadcrumbs,
      currentCategory: categoryIdentifier
    };
  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }

    // Log unexpected errors and throw a generic 500
    console.error(`Error loading exercises page for category "${categoryIdentifier}":`, err);
    error(500, `Failed to load exercises data. An unexpected error occurred.`);
  }
};===== ./.svelte-kit/types/src/routes/exercises/[...id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/exercises/[...id]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/exercises/[...id]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
// Use the unified content service function
import { getContentNodeByIdentifier, getBreadcrumbs } from '$lib/server/contentService.js';

export const load = async ({ params }: Parameters<PageServerLoad>[0]) => {
  // The identifier comes from the route parameter
  const identifier = params.id;

  try {
    // Use the unified function to get the node. Content is loaded by the service.
    const node = await getContentNodeByIdentifier('exercises', identifier);

    // Service throws 404 if not found.

    // Determine if it's a category/container or a specific exercise
    const containerTypes = ['category', 'root', 'exercise-category', 'topic']; // Add relevant container types for exercises
    const isCategory = containerTypes.includes(node.type);

    // Fetch breadcrumbs for the current node
    const breadcrumbs = await getBreadcrumbs('exercises', identifier);

    if (isCategory) {
      // For categories/containers, return the node and its children
      return {
        node: node,
        isCategory: true,
        items: node.children || [], // Pass children if available
        breadcrumbs
      };
    } else if (node.type === 'exercise') {
      // For exercises, the service should have loaded markdownContent
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
        console.warn(`Content loading error for exercise ${identifier}: ${contentLoadingError}`);
        // Content will contain the error message loaded by the service
      }

      return {
        node: node, // Renamed from exercise to node for consistency
        content: content,
        isCategory: false,
        breadcrumbs
      };
    } else {
      // Handle unexpected node types
      console.warn(`Unexpected content node type \"${node.type}\" for identifier: ${identifier}`);
      throw error(404, 'Content type not viewable');
    }

  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }

    // Log unexpected errors and throw a generic 500
    console.error(`Error loading exercise content for identifier ${identifier}:`, err);
    throw error(500, `Error loading exercise content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./.svelte-kit/types/src/routes/exercises/maths/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/exercises/maths';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/exercises/maths/mpsi-maths/[exerciseId]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { exerciseId: string };
type RouteId = '/exercises/maths/mpsi-maths/[exerciseId]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/exercises/maths/mpsi-maths/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/exercises/maths/mpsi-maths';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/exercises/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/exercises/[id]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/progress/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/progress';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/groups/create/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/groups/create';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/groups/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/groups';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/groups/[id]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { id: string };
type RouteId = '/groups/[id]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/proxy+layout.server.ts =====
// @ts-nocheck
import type { LayoutServerLoad } from './$types.js';
import type { Cookies } from '@sveltejs/kit';
import { setupCsrfToken } from '$lib/utils/csrf.server.js';

export const load = async ({ cookies }: { cookies: Cookies }) => {
  // Generate and set CSRF token in cookies
  const csrfToken = setupCsrfToken(cookies);
  return { csrfToken };
};;null as any as LayoutServerLoad;===== ./.svelte-kit/types/src/routes/settings/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/settings';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/types/src/routes/courses/[slug]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { slug: string };
type RouteId = '/courses/[slug]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/courses/[slug]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
// Use the unified content service function
import { getContentNodeByIdentifier } from '$lib/server/contentService';

export const load = async (event: Parameters<PageServerLoad>[0]) => {
  const { params } = event; // Removed fetch
  const identifier = params.slug; // Use identifier instead of slug

  try {
    // Directly use the service to get the node. It handles finding by path/id and loading content.
    const node = await getContentNodeByIdentifier('courses', identifier);

    // Service throws 404 if not found, so explicit check might be redundant.
    // if (!node) {
    //   throw error(404, 'Content not found');
    // }

    // Determine if it's a category/container or a content page
    const containerTypes = ['category', 'root', 'course-category', 'topic'];
    const isCategory = containerTypes.includes(node.type);

    if (isCategory) {
      // For categories/containers, return the node and its children
      return {
          node: node,
          isCategory: true,
          items: node.children || [] // Pass children if available
      };
    } else {
      // For content pages (course, lesson, module), return node and content
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
          console.warn(`Content loading error for ${identifier}: ${contentLoadingError}`);
          // Content will contain the error message loaded by the service
      }

      return {
          node: node,
          content: content,
          isCategory: false
      };
    }

  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }
    // Log unexpected errors and throw a generic 500
    console.error(`Error loading content for identifier ${identifier}:`, err);
    throw error(500, `Error loading content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./.svelte-kit/types/src/routes/courses/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/courses';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../$types.js').LayoutData>;

export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/courses/proxy+page.server.ts =====
// @ts-nocheck
import { error } from '@sveltejs/kit';
// Updated import to use the new server-side service
import { getContentNodeByPath, getBreadcrumbs } from '$lib/server/contentService';
import type { PageServerLoad } from './$types';

export const load = async ({ url }: Parameters<PageServerLoad>[0]) => {
  const path = url.searchParams.get('path') || ''; // Default to root path if not specified

  try {
    // Use the new service function for courses
    const node = await getContentNodeByPath('courses', path);

    if (!node) {
      // Keep SvelteKit's error helper for 404
      error(404, `Course content not found for path: ${path || '/'}`);
    }

    // Use the new service function for breadcrumbs
    const breadcrumbs = await getBreadcrumbs('courses', path);

    // Return data structure remains similar, but sourced from the new service
    return {
      node, // This can be the root node structure or a specific item node
      breadcrumbs,
      currentPath: path
    };
  } catch (err: any) {
     // Catch potential errors from getContentNodeByPath or getBreadcrumbs
     // Including SvelteKit errors thrown by the service itself
     if (err.status) {
       throw err; // Re-throw SvelteKit errors (like 404 or 500 from the service)
     }

     // Log unexpected errors
     console.error(`Unexpected error loading courses page for path "${path}":`, err);
     // Throw a generic 500 for other server-side issues
     error(500, `Failed to load course data. An unexpected error occurred.`);
  }
};===== ./.svelte-kit/types/src/routes/courses/[...slug]/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = { slug: string };
type RouteId = '/courses/[...slug]';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageServerParentData = EnsureDefined<import('../../$types.js').LayoutServerData>;
type PageParentData = EnsureDefined<import('../../$types.js').LayoutData>;

export type EntryGenerator = () => Promise<Array<RouteParams>> | Array<RouteParams>;
export type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;
export type PageServerLoadEvent = Parameters<PageServerLoad>[0];
export type ActionData = unknown;
export type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.LoadProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;
export type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;
export type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>
export type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>
export type PageProps = { data: PageData; form: ActionData }
export type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;===== ./.svelte-kit/types/src/routes/courses/[...slug]/proxy+page.server.ts =====
// @ts-nocheck
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
import { getContentNodeByIdentifier } from '$lib/server/contentService.js';

export const load = async (event: Parameters<PageServerLoad>[0]) => {
  const { params } = event;
  const identifier = params.slug;

  try {
    const node = await getContentNodeByIdentifier('courses', identifier);

    if (node.type === 'category' || node.type === 'root' || node.type === 'course-category' || node.type === 'topic') {
      return {
        contentNode: node,
        isCategory: true,
        items: node.children || []
      };
    } else if (node.type === 'course' || node.type === 'lesson' || node.type === 'module') {
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
        console.warn(`Content loading error for ${identifier}: ${contentLoadingError}`);
      }

      return {
        contentNode: node,
        content: content,
        isCategory: false
      };
    } else {
      console.warn(`Unexpected content node type "${node.type}" for identifier: ${identifier}`);
      throw error(404, 'Content type not viewable');
    }

  } catch (err: any) {
    if (err.status) throw err;

    console.error(`Error loading content for identifier ${identifier}:`, err);
    throw error(500, `Error loading content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./.svelte-kit/types/src/routes/courses/maths/mpsi-maths/$types.d.ts =====
import type * as Kit from '@sveltejs/kit';

type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;
// @ts-ignore
type MatcherParam<M> = M extends (param : string) => param is infer U ? U extends string ? U : string : string;
type RouteParams = {  };
type RouteId = '/courses/maths/mpsi-maths';
type MaybeWithVoid<T> = {} extends T ? T | void : T;
export type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];
type OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>
type EnsureDefined<T> = T extends null | undefined ? {} : T;
type OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;
export type Snapshot<T = any> = Kit.Snapshot<T>;
type PageParentData = EnsureDefined<import('../../../$types.js').LayoutData>;

export type PageServerData = null;
export type PageData = Expand<PageParentData>;
export type PageProps = { data: PageData }===== ./.svelte-kit/tsconfig.json =====
{
	"compilerOptions": {
		"paths": {
			"$lib": [
				"../src/lib"
			],
			"$lib/*": [
				"../src/lib/*"
			]
		},
		"rootDirs": [
			"..",
			"./types"
		],
		"verbatimModuleSyntax": true,
		"isolatedModules": true,
		"lib": [
			"esnext",
			"DOM",
			"DOM.Iterable"
		],
		"moduleResolution": "bundler",
		"module": "esnext",
		"noEmit": true,
		"target": "esnext"
	},
	"include": [
		"ambient.d.ts",
		"non-ambient.d.ts",
		"./types/**/$types.d.ts",
		"../vite.config.js",
		"../vite.config.ts",
		"../src/**/*.js",
		"../src/**/*.ts",
		"../src/**/*.svelte",
		"../tests/**/*.js",
		"../tests/**/*.ts",
		"../tests/**/*.svelte"
	],
	"exclude": [
		"../node_modules/**",
		"../src/service-worker.js",
		"../src/service-worker/**/*.js",
		"../src/service-worker.ts",
		"../src/service-worker/**/*.ts",
		"../src/service-worker.d.ts",
		"../src/service-worker/**/*.d.ts"
	]
}===== ./.svelte-kit/ambient.d.ts =====

// this file is generated — do not edit it


/// <reference types="@sveltejs/kit" />

/**
 * Environment variables [loaded by Vite](https://vitejs.dev/guide/env-and-mode.html#env-files) from `.env` files and `process.env`. Like [`$env/dynamic/private`](https://svelte.dev/docs/kit/$env-dynamic-private), this module cannot be imported into client-side code. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](https://svelte.dev/docs/kit/configuration#env) _and do_ start with [`config.kit.env.privatePrefix`](https://svelte.dev/docs/kit/configuration#env) (if configured).
 * 
 * _Unlike_ [`$env/dynamic/private`](https://svelte.dev/docs/kit/$env-dynamic-private), the values exported from this module are statically injected into your bundle at build time, enabling optimisations like dead code elimination.
 * 
 * ```ts
 * import { API_KEY } from '$env/static/private';
 * ```
 * 
 * Note that all environment variables referenced in your code should be declared (for example in an `.env` file), even if they don't have a value until the app is deployed:
 * 
 * ```
 * MY_FEATURE_FLAG=""
 * ```
 * 
 * You can override `.env` values from the command line like so:
 * 
 * ```bash
 * MY_FEATURE_FLAG="enabled" npm run dev
 * ```
 */
declare module '$env/static/private' {
	export const VITE_OPENROUTER_API_KEY: string;
	export const VITE_SITE_URL: string;
	export const VITE_SITE_NAME: string;
	export const VITE_FIREBASE_API_KEY: string;
	export const VITE_FIREBASE_AUTH_DOMAIN: string;
	export const VITE_FIREBASE_PROJECT_ID: string;
	export const VITE_FIREBASE_STORAGE_BUCKET: string;
	export const VITE_FIREBASE_MESSAGING_SENDER_ID: string;
	export const VITE_FIREBASE_APP_ID: string;
	export const VITE_FIREBASE_MEASUREMENT_ID: string;
	export const FIREBASE_PROJECT_ID: string;
	export const FIREBASE_ADMIN_CLIENT_EMAIL: string;
	export const FIREBASE_ADMIN_PRIVATE_KEY: string;
	export const DATABASE_URL: string;
	export const VITE_ADMIN_EMAILS: string;
	export const VITE_CSRF_SECRET: string;
	export const USER: string;
	export const SSH_CLIENT: string;
	export const npm_config_user_agent: string;
	export const XDG_SESSION_TYPE: string;
	export const GIT_ASKPASS: string;
	export const npm_node_execpath: string;
	export const SHLVL: string;
	export const BROWSER: string;
	export const npm_config_noproxy: string;
	export const MOTD_SHOWN: string;
	export const HOME: string;
	export const TERM_PROGRAM_VERSION: string;
	export const VSCODE_IPC_HOOK_CLI: string;
	export const npm_package_json: string;
	export const VSCODE_GIT_ASKPASS_MAIN: string;
	export const VSCODE_GIT_ASKPASS_NODE: string;
	export const SSL_CERT_FILE: string;
	export const npm_config_userconfig: string;
	export const npm_config_local_prefix: string;
	export const COLORTERM: string;
	export const COLOR: string;
	export const LOGNAME: string;
	export const _: string;
	export const npm_config_prefix: string;
	export const npm_config_npm_version: string;
	export const XDG_SESSION_CLASS: string;
	export const TERM: string;
	export const XDG_SESSION_ID: string;
	export const npm_config_cache: string;
	export const npm_config_node_gyp: string;
	export const PATH: string;
	export const NODE: string;
	export const npm_package_name: string;
	export const XDG_RUNTIME_DIR: string;
	export const SSL_CERT_DIR: string;
	export const LANG: string;
	export const LS_COLORS: string;
	export const VSCODE_GIT_IPC_HANDLE: string;
	export const TERM_PROGRAM: string;
	export const npm_lifecycle_script: string;
	export const SHELL: string;
	export const npm_package_version: string;
	export const npm_lifecycle_event: string;
	export const VSCODE_GIT_ASKPASS_EXTRA_ARGS: string;
	export const npm_config_globalconfig: string;
	export const npm_config_init_module: string;
	export const PWD: string;
	export const npm_execpath: string;
	export const SSH_CONNECTION: string;
	export const npm_config_global_prefix: string;
	export const npm_command: string;
	export const INIT_CWD: string;
	export const EDITOR: string;
	export const NODE_ENV: string;
}

/**
 * Similar to [`$env/static/private`](https://svelte.dev/docs/kit/$env-static-private), except that it only includes environment variables that begin with [`config.kit.env.publicPrefix`](https://svelte.dev/docs/kit/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.
 * 
 * Values are replaced statically at build time.
 * 
 * ```ts
 * import { PUBLIC_BASE_URL } from '$env/static/public';
 * ```
 */
declare module '$env/static/public' {
	export const PUBLIC_AUTH0_DOMAIN: string;
	export const PUBLIC_AUTH0_CLIENT_ID: string;
}

/**
 * This module provides access to runtime environment variables, as defined by the platform you're running on. For example if you're using [`adapter-node`](https://github.com/sveltejs/kit/tree/main/packages/adapter-node) (or running [`vite preview`](https://svelte.dev/docs/kit/cli)), this is equivalent to `process.env`. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](https://svelte.dev/docs/kit/configuration#env) _and do_ start with [`config.kit.env.privatePrefix`](https://svelte.dev/docs/kit/configuration#env) (if configured).
 * 
 * This module cannot be imported into client-side code.
 * 
 * Dynamic environment variables cannot be used during prerendering.
 * 
 * ```ts
 * import { env } from '$env/dynamic/private';
 * console.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);
 * ```
 * 
 * > In `dev`, `$env/dynamic` always includes environment variables from `.env`. In `prod`, this behavior will depend on your adapter.
 */
declare module '$env/dynamic/private' {
	export const env: {
		VITE_OPENROUTER_API_KEY: string;
		VITE_SITE_URL: string;
		VITE_SITE_NAME: string;
		VITE_FIREBASE_API_KEY: string;
		VITE_FIREBASE_AUTH_DOMAIN: string;
		VITE_FIREBASE_PROJECT_ID: string;
		VITE_FIREBASE_STORAGE_BUCKET: string;
		VITE_FIREBASE_MESSAGING_SENDER_ID: string;
		VITE_FIREBASE_APP_ID: string;
		VITE_FIREBASE_MEASUREMENT_ID: string;
		FIREBASE_PROJECT_ID: string;
		FIREBASE_ADMIN_CLIENT_EMAIL: string;
		FIREBASE_ADMIN_PRIVATE_KEY: string;
		DATABASE_URL: string;
		VITE_ADMIN_EMAILS: string;
		VITE_CSRF_SECRET: string;
		USER: string;
		SSH_CLIENT: string;
		npm_config_user_agent: string;
		XDG_SESSION_TYPE: string;
		GIT_ASKPASS: string;
		npm_node_execpath: string;
		SHLVL: string;
		BROWSER: string;
		npm_config_noproxy: string;
		MOTD_SHOWN: string;
		HOME: string;
		TERM_PROGRAM_VERSION: string;
		VSCODE_IPC_HOOK_CLI: string;
		npm_package_json: string;
		VSCODE_GIT_ASKPASS_MAIN: string;
		VSCODE_GIT_ASKPASS_NODE: string;
		SSL_CERT_FILE: string;
		npm_config_userconfig: string;
		npm_config_local_prefix: string;
		COLORTERM: string;
		COLOR: string;
		LOGNAME: string;
		_: string;
		npm_config_prefix: string;
		npm_config_npm_version: string;
		XDG_SESSION_CLASS: string;
		TERM: string;
		XDG_SESSION_ID: string;
		npm_config_cache: string;
		npm_config_node_gyp: string;
		PATH: string;
		NODE: string;
		npm_package_name: string;
		XDG_RUNTIME_DIR: string;
		SSL_CERT_DIR: string;
		LANG: string;
		LS_COLORS: string;
		VSCODE_GIT_IPC_HANDLE: string;
		TERM_PROGRAM: string;
		npm_lifecycle_script: string;
		SHELL: string;
		npm_package_version: string;
		npm_lifecycle_event: string;
		VSCODE_GIT_ASKPASS_EXTRA_ARGS: string;
		npm_config_globalconfig: string;
		npm_config_init_module: string;
		PWD: string;
		npm_execpath: string;
		SSH_CONNECTION: string;
		npm_config_global_prefix: string;
		npm_command: string;
		INIT_CWD: string;
		EDITOR: string;
		NODE_ENV: string;
		[key: `PUBLIC_${string}`]: undefined;
		[key: `${string}`]: string | undefined;
	}
}

/**
 * Similar to [`$env/dynamic/private`](https://svelte.dev/docs/kit/$env-dynamic-private), but only includes variables that begin with [`config.kit.env.publicPrefix`](https://svelte.dev/docs/kit/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.
 * 
 * Note that public dynamic environment variables must all be sent from the server to the client, causing larger network requests — when possible, use `$env/static/public` instead.
 * 
 * Dynamic environment variables cannot be used during prerendering.
 * 
 * ```ts
 * import { env } from '$env/dynamic/public';
 * console.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);
 * ```
 */
declare module '$env/dynamic/public' {
	export const env: {
		PUBLIC_AUTH0_DOMAIN: string;
		PUBLIC_AUTH0_CLIENT_ID: string;
		[key: `PUBLIC_${string}`]: string | undefined;
	}
}
===== ./vite.config.ts =====
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
  plugins: [sveltekit()],
  server: {
    fs: {
      // Allow serving files from one level up to the project root
      allow: ['..'],
    },
    watch: {
      // Use polling in environments where the file system doesn't support watching
      usePolling: false,
      interval: 1000,
    }
  },
  // Fix dependency optimization issues
  optimizeDeps: {
    exclude: [
      'firebase/auth', 
      'firebase/app', 
      'firebase/firestore', 
      'firebase/analytics'
    ],
    include: [
      'marked',
      'dompurify',
      'highlight.js',
      'katex',
      'clsx',
      'chart.js',
      'chartjs-adapter-date-fns',
      'date-fns/locale'
    ]
  },
  // Increase build performance
  build: {
    target: 'es2015',
    sourcemap: true,
    chunkSizeWarningLimit: 1000,
    // Ensure proper font handling
    assetsInlineLimit: 0, // Don't inline any assets
    // Ensure the server build correctly identifies server-only files
    ssrManifest: true,
  },
  css: {
    // Ensure proper CSS source maps
    devSourcemap: true,
  },
  // Fix potential path aliasing issues
  resolve: {
    alias: {
      $lib: '/src/lib',
      $components: '/src/lib/components'
    }
  }
});
===== ./TECHNICAL_EXPLANATION.md =====
# Technical Explanation: Recommendations, Courses & Exercises Integration

## 1. Recommendations Service

- **Actions Tracked**: `view_lesson`, `flashcard_review`, `start_exercise`, `start_course` events recorded in Firestore `activities` collection.
- **Algorithm**:
  1. Query recent activities for user, sorted by timestamp.
  2. Detect context:
     - Next lesson in a course (`view_lesson`).
     - Flashcards due for review (`flashcard_review`).
     - Exercises related by tag to the last started exercise.
     - Courses related by tag to the last started course.
     - Generic fallback recommendations based on other recent activity types.
  3. Build `Recommendation` objects with `type`, `referenceId`, `title`, `description`, and optional `metadata`.
  4. Return top N (`limit`) items.

- **Service API**: `getRecommendations(userId: string, limit?: number): Promise<Recommendation[]>`

## 2. Content & Course Services

### Content Service (`contentService.ts`)
- **Purpose**: Central service for loading and managing markdown-based content
- **Key Functions**:
  - `listContent('course' | 'exercise')`: Lists available content from index.json
  - `loadContent(type, id)`: Loads content and metadata from markdown files
  - `extractMetadata(content, id, type)`: Parses frontmatter and content for metadata

### Course Service (`courseService.ts`)
- **Purpose**: Course-specific functionality and backward compatibility
- **Key Functions**:
  - `listCourses()`: Returns available courses with structure and progress
  - `getCourse(id)`: Loads a specific course with modules and lessons
  - `extractModulesFromContent(content)`: Parses course structure from markdown

### Content Structure
- **Metadata Interface**:
  ```typescript
  interface ContentMetadata {
    id: string;
    title: string;
    type: 'course' | 'exercise';
    slug: string;
    description?: string;
    tags?: string[];
    difficulty?: 'beginner' | 'intermediate' | 'advanced';
    prerequisites?: string[];
    estimatedTime?: string;
    created?: string;
    updated?: string;
  }
  ```

- **Course Structure Interface**:
  ```typescript
  interface CourseStructure {
    id: string;
    title: string;
    description: string;
    progress: number;
    modules: Module[];
  }

  interface Module {
    id: string;
    title: string;
    lessons: Lesson[];
  }

  interface Lesson {
    id: string;
    title: string;
  }
  ```

### Content Loading Flow
1. List Content:
   ```mermaid
   graph TD
     A[listContent] --> B{Check Content Type}
     B -->|course| C[Load index.json]
     B -->|exercise| D[Call API]
     C --> E[Parse Metadata]
     D --> E
     E --> F[Return ContentMetadata[]]
   ```

2. Load Content:
   ```mermaid
   graph TD
     A[loadContent] --> B[Fetch .md file]
     B --> C{Parse Frontmatter}
     C -->|Success| D[Return ContentItem]
     C -->|Fail| E[Extract Manual]
     E --> D
   ```

### Content Loading Architecture
1. **Index-Based Discovery**:
   ```mermaid
   graph TD
     A[User Requests Course List] --> B[listContent('course')]
     B --> C[Load index.json]
     C --> D[Parse Course Metadata]
     D --> E[For Each Course]
     E --> F[Load .md Content]
     F --> G[Parse Modules/Lessons]
     G --> H[Return Complete Course List]
   ```

2. **Course Content Resolution**:
   ```mermaid
   graph TD
     A[Request Course] --> B[Load index.json metadata]
     B --> C[Find course entry]
     C --> D[Load course.md]
     D --> E[Parse frontmatter]
     E --> F[Extract modules/lessons]
     F --> G[Combine metadata + content]
     G --> H[Return CourseStructure]
   ```

### Hierarchical Course Organization
1. **Category-Based Structure**:
   ```mermaid
   graph TD
     A[Courses Page] --> B[Course Categories]
     A --> C[Standalone Courses]
     B --> D[Category Page]
     D --> E[Subcourses List]
     E --> F[Course Detail]
     C --> F[Course Detail]
   ```

2. **Directory Structure**:
   ```mermaid
   graph TD
     A[/content/courses/] --> B[index.json]
     A --> C[course-file.md]
     A --> D[category-dir/]
     D --> E[index.json]
     D --> F[subcourse-1.md]
     D --> G[subcourse-2.md]
   ```

3. **Navigation Flow**:
   ```mermaid
   graph LR
     A[Courses List] --> B{Is Category?}
     B -->|Yes| C[Category Page]
     B -->|No| D[Course Detail]
     C --> E[Subcourse Detail]
   ```

## 3. Component & Routing Updates

### Course Components
- **CourseCard.svelte**:
  - Dynamic gradient based on course category
  - Activity logging on course start
  - Progress indicator
  - Responsive hover effects
  - Special rendering for course categories

- **Course List** (`/courses/+page.svelte`):
  - Grid layout with responsive breakpoints
  - Loading & error states
  - Activity logging
  - Visual distinction between categories and individual courses
  - Direct fetch from course index.json

- **Category Page** (`/[category]/+page.svelte`):
  - Specialized listing of courses within a category
  - Breadcrumb navigation showing hierarchy
  - Consistent styling with main courses page
  - Derived from category's index.json

- **Course Detail** (`/courses/[slug]/+page.svelte`):
  - Markdown content rendering
  - Module/lesson navigation
  - Breadcrumb trail with category context (if applicable)
  - Smart back-navigation to appropriate parent page
  - Path-aware content loading for nested courses

- **Course Lesson** (`/courses/[slug]/[lessonId]/+page.svelte`):
  - Content loading
  - Navigation between lessons
  - Progress tracking
  - Activity logging

### Admin Interface
- **Course Management** (`/admin/courses/+page.svelte`):
  - Course listing with metadata
  - Edit/Delete actions
  - Validation of required fields
  - Preview functionality

### Visual Styling System
- **Dynamic Course Gradients**:
  ```typescript
  function getCourseGradient(course: CourseStructure) {
    // Match by course ID and title keywords
    const text = (course.id + ' ' + course.title).toLowerCase();
    
    if (text.includes('math') || text.includes('calcul') || text.includes('mpsi')) {
      return { from: 'blue-500', to: 'blue-400' };
    } else if (text.includes('python') || text.includes('programming')) {
      return { from: 'green-500', to: 'green-400' };
    } // ... etc
  }
  ```

- **Category vs Course Display**:
  - Categories: Special hover effects with "Browse courses" action
  - Indicator icons specific to category type
  - Consistent breadcrumb trail showing current level
  - Path-aware navigation that preserves hierarchy

- **Card Styling**:
  - Dark theme optimized backgrounds
  - Consistent text contrast ratios
  - Responsive hover states
  - Accessible color combinations

### Error Handling
1. **Content Not Found**:
   - Graceful fallbacks for missing files
   - User-friendly error messages
   - Logging for content issues

2. **Parse Errors**:
   - Validation of markdown structure
   - Frontmatter schema checking
   - Module/lesson hierarchy verification

## 4. Content Migration

### Migration Strategy
1. **Phase 1** - Dual System:
   - New markdown content
   - Legacy mock data fallback
   - Content validation

2. **Phase 2** - Content Migration:
   - Convert existing courses to markdown
   - Transfer metadata
   - Validate content structure

3. **Phase 3** - Full Migration:
   - Remove mock data
   - Clean up legacy code
   - Update documentation

### Directory Structure
```
/static/content/
├── courses/
│   ├── index.json              # Main courses index
│   ├── intro-python.md         # Standalone course
│   ├── intro-python/           # Course-specific content
│   │   ├── variables.md        # Lesson content
│   │   └── operators.md        # Lesson content
│   └── mpsi-maths/             # Category directory
│       ├── index.json          # Category courses index
│       ├── mpsi-mathematiques.md  # Overview course
│       ├── calculs_algebriques.md # Math subcourse
│       └── nombres-complexes-trigonometrie.md # Math subcourse
└── exercises/
    └── ...
```

## 5. Future Enhancements

1. **Content Management**:
   - Rich text editor for course creation
   - Bulk import/export functionality
   - Version control integration
   - Media asset management

2. **Learning Experience**:
   - Interactive code execution
   - Quiz integration
   - Progress synchronization
   - Social learning features

3. **Performance**:
   - Content caching
   - Lazy loading of lessons
   - Offline support
   - Content preloading

4. **Analytics**:
   - Learning path analysis
   - Completion rates
   - Time spent per lesson
   - Engagement metrics

---

*Last updated: 1 May 2025*
===== ./RECOMMENDATIONS.md =====
# Recommendation API Design

This document outlines the structure and logic of the future recommendations API for LearnFlow.

## 1. Endpoint

GET `/api/recommendations?limit={n}`

- **Query Parameters**
  - `limit` (optional, integer): Maximum number of suggestions to return (default: 10).

- **Authentication**
  - Requires a valid session cookie. Returns 401 if unauthenticated.

- **Response** (200 OK)
  ```json
  {
    "recommendations": [
      {
        "type": "next_lesson",
        "referenceId": "lesson-abc123",
        "title": "Continue: Advanced CSS Grid",
        "description": "Finish Module 2, Lesson 3",
        "metadata": { "courseId": "course-xyz", "moduleIndex": 1, "lessonIndex": 2 }
      },
      {
        "type": "review_flashcards",
        "referenceId": "flashcard-789",
        "title": "Review HTML Basics",
        "description": "Flashcards due today",
        "metadata": {}
      }
      // ... up to `limit` items
    ]
  }
  ```

## 2. Data Model

```ts
interface Recommendation {
  type: string;           // e.g., "next_lesson", "review_flashcards"
  referenceId: string;    // ID of the target resource
  title: string;          // Display title
  description: string;    // Brief call-to-action or context
  metadata?: Record<string, any>; // Additional parameters
}
```

## 3. Service Logic (recommendationService)

1. **Fetch** user activity stream from `activities` table: most recent entries.
2. **Identify** user context:
   - Last viewed course/lesson
   - Incomplete lessons in progress
   - Flashcards due for review
   - Frequently used tools
3. **Score** potential recommendations:
   - Prioritize items by recency and completion status
   - Demote already completed lessons
   - Promote review items due soon
4. **Assemble** a sorted list of `Recommendation` objects.
5. **Return** top N items as API response.

## 4. Future Enhancements

- Collaborative filtering using multiple users’ activity patterns
- Machine learning models for personalized suggestions
- A/B testing and user feedback integration
- Support for recommending external content and community events

---
*Prepared for LearnFlow (Linux), 24 April 2025.*===== ./postcss.config.cjs =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}
===== ./README.md =====
# LearnFlow

LearnFlow is a comprehensive learning management and productivity platform built with SvelteKit, designed to provide an engaging and interactive educational experience.

## 🚀 Features

- **Course Management**
  - Interactive course content with markdown support
  - Course progress tracking
  - Lesson completion system
  - Dynamic course navigation

- **Learning Tools**
  - Calculator
  - Dictionary
  - Flashcards with spaced repetition
  - Note-taking with markdown support
  - Pomodoro timer
  - Task management
  - Chat support

- **Community Features**
  - Discussion forums with categories and topics
  - User groups and collaboration
  - Real-time activity feed
  - User profiles and progress tracking

- **Administrative Features**
  - User management
  - Course content management
  - Forum moderation
  - Analytics and statistics

## 🛠️ Technology Stack

- **Frontend:**
  - SvelteKit 2.x
  - TypeScript
  - TailwindCSS with Typography plugin
  - Chart.js for data visualization
  - Marked/Markdown-it for markdown rendering
  - FontAwesome icons

- **Backend:**
  - Firebase Authentication
  - PostgreSQL database
  - Node.js

- **Additional Tools:**
  - KaTeX for mathematical expressions
  - Highlight.js for code syntax highlighting
  - Splide.js for carousels

## 🚦 Prerequisites

- Node.js (Latest LTS version recommended)
- PostgreSQL database
- Firebase account and project setup
- npm or yarn package manager

## 🔧 Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd learnflow-app
```

2. Install dependencies:
```bash
npm install
```

3. Create a `.env` file in the root directory with the following variables:
```env
VITE_SITE_URL=http://localhost:5173
VITE_SITE_NAME=LearnFlow

# Firebase Configuration
VITE_FIREBASE_API_KEY=your_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_auth_domain
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_storage_bucket
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
VITE_FIREBASE_APP_ID=your_app_id
VITE_FIREBASE_MEASUREMENT_ID=your_measurement_id

# Database Configuration
DATABASE_URL=your_database_url
POSTGRES_USER=your_db_user
POSTGRES_PASSWORD=your_db_password
POSTGRES_DB=your_db_name

# Admin Configuration
VITE_ADMIN_EMAILS=admin@example.com
VITE_CSRF_SECRET=your_csrf_secret
```

## 🚀 Development

To start the development server:

```bash
npm run dev
```

For production build:

```bash
npm run build
```

To preview the production build:

```bash
npm run preview
```

## 🧪 Testing

To run tests:

```bash
npm run check
```

To watch for changes during development:

```bash
npm run check:watch
```

## 📁 Project Structure

```
learnflow-app/
├── src/
│   ├── lib/                 # Shared components and utilities
│   │   ├── components/     # Reusable UI components
│   │   ├── services/      # Business logic and API calls
│   │   ├── stores/        # Svelte stores for state management
│   │   └── utils/         # Utility functions
│   ├── routes/             # SvelteKit routes and pages
│   └── app.html           # HTML template
├── static/                 # Static assets
└── tests/                 # Test files
```

## 🔒 Security

- CSRF protection implemented
- Firebase Authentication
- Secure session management
- Input validation and sanitization
- Protected API endpoints

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 👥 Authors

- Initial work - [Your Name]

## 🙏 Acknowledgments

- SvelteKit team for the amazing framework
- Firebase team for authentication services
- All contributors and users of the platform

## 📚 Content Management

### Course Creation

Courses are managed through a file-based system in the `/static/content/courses/` directory:

1. Add course metadata to `index.json`:
```json
{
  "courses": [
    {
      "id": "course-id",
      "title": "Course Title",
      "type": "course",
      "slug": "course-slug",
      "description": "Course description",
      "difficulty": "beginner|intermediate|advanced",
      "estimatedTime": "duration",
      "tags": ["tag1", "tag2"]
    }
  ]
}
```

2. Create course content in `course-id.md`:
```markdown
---
title: Course Title
description: Course description
tags: ["tag1", "tag2"]
difficulty: beginner
estimatedTime: duration
---

# Course Title

Course introduction...

## Module: Module Title

Module description...

### Lesson: Lesson Title

Lesson content...
```

The course system supports:
- Markdown content with frontmatter metadata
- Mathematical expressions via KaTeX
- Code syntax highlighting
- Module and lesson hierarchy
- Course tagging and categorization

## Course Summaries

Below is a structured summary of the MPSI - Mathématiques course, organized by domain:

### Raisonnement et vocabulaire ensembliste
Key Topics:
- Logique et raisonnement
- Ensembles, fonctions et relations binaires

Summary:
- Logique et raisonnement: assertions, modes de raisonnement formel
- Ensembles : inclusion, opérations (union, intersection, complémentaire)
- Fonctions et relations : définitions, injectivité, surjectivité, bijectivité

Exercises:
- Exercice 1.1 : Vrai/Faux sur les formules logiques
- Exercice 1.2 : Manipulation d’ensembles et relations

### Calculs algébriques
Key Topics:
- Sommations et produits

Summary:
- Sommations simples : séries géométriques, télescopiques
- Produits et factorisations remarquables

Exercises:
- Exercice 2.1 : Calcul de sommes géométriques
- Exercice 2.2 : Factorisation de polynômes

### Nombres complexes et trigonométrie
Key Topics:
- Nombres complexes
- Trigonométrie

Summary:
- Forme algébrique et trigonométrique des complexes
- Applications de la trigonométrie (identités, équations)

Exercises:
- Exercice 3.1 : Opérations sur nombres complexes
- Exercice 3.2 : Résolution d’équations trigonométriques

### Arithmétique
Key Topics:
- Arithmétique dans l’ensemble des entiers

Summary:
- Divisibilité, pgcd, algorithme d’Euclide
- Congruences et théorèmes classiques

Exercises:
- Exercice 4.1 : Calcul de pgcd
- Exercice 4.2 : Problèmes de congruences

### Structures algébriques usuelles
Key Topics:
- Groupes, anneaux, corps élémentaires

Summary:
- Définitions et exemples de structures algébriques
- Propriétés élémentaires (associativité, commutativité)

Exercises:
- Exercice 5.1 : Vérification des axiomes d’un groupe

### Polynômes et fractions rationnelles
Key Topics:
- Polynômes
- Fractions rationnelles

Summary:
- Degré, racines, factorisation
- Décomposition en éléments simples

Exercises:
- Exercice 6.1 : Factorisation polynomiale
- Exercice 6.2 : Décomposition de fractions rationnelles

### Espaces vectoriels et applications linéaires
Key Topics:
- Espaces vectoriels de dimension finie
- Applications linéaires, matrices, changement de base

Summary:
- Bases, dimension, sous-espaces affines
- Représentation matricielle, équivalence, similarité

Exercises:
- Exercice 7.1 : Calcul de dimension et base
- Exercice 7.2 : Passage d’une base à une autre

### Groupe symétrique et déterminant
Key Topics:
- Groupe symétrique
- Déterminant des matrices

Summary:
- Permutations, signature
- Propriétés du déterminant et calcul

Exercises:
- Exercice 8.1 : Calcul de déterminant par développement
- Exercice 8.2 : Signature d’une permutation

### Espaces préhilbertiens réels
Key Topics:
- Produit scalaire, normes
- Orthogonalité, projections

Summary:
- Définition d’un espace préhilbertien réel
- Inégalités de Cauchy-Schwarz et de Minkowski

Exercises:
- Exercice 9.1 : Calcul de produit scalaire
- Exercice 9.2 : Construction de projections orthogonales
===== ./package.json =====
{
	"name": "linux",
	"version": "0.0.1",
	"scripts": {
		"dev": "vite",
		"build": "vite build",
		"preview": "vite preview",
		"test": "vitest"
	},
	"files": [
		"dist",
		"!dist/**/*.test.*",
		"!dist/**/*.spec.*"
	],
	"sideEffects": [
		"**/*.css"
	],
	"svelte": "./dist/index.js",
	"types": "./dist/index.d.ts",
	"type": "module",
	"exports": {
		".": {
			"types": "./dist/index.d.ts",
			"svelte": "./dist/index.js"
		}
	},
	"peerDependencies": {
		"svelte": "^5.0.0"
	},
	"devDependencies": {
		"@splidejs/splide": "^4.1.4",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/package": "^2.0.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/postcss": "^4.0.0",
		"@tailwindcss/typography": "^0.5.16",
		"@types/pg": "^8.11.13",
		"autoprefixer": "^10.4.21",
		"postcss": "^8.5.3",
		"publint": "^0.3.2",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^3.4.17",
		"typescript": "^5.0.0",
		"vite": "^6.0.0",
		"vitest": "^3.1.2"
	},
	"keywords": [
		"svelte"
	],
	"dependencies": {
		"@fontsource/jetbrains-mono": "^5.2.5",
		"@fontsource/manrope": "^5.2.5",
		"@fontsource/plus-jakarta-sans": "^5.2.5",
		"@fortawesome/fontawesome-free": "^6.7.2",
		"@iconify/svelte": "^5.0.0",
		"chart.js": "^4.4.8",
		"chartjs-adapter-date-fns": "^3.0.0",
		"dompurify": "^3.2.5",
		"firebase": "^10.9.0",
		"firebase-admin": "^13.3.0",
		"gray-matter": "^4.0.3",
		"highlight.js": "^11.11.1",
		"katex": "^0.16.22",
		"markdown-it": "^14.1.0",
		"markdown-it-container": "^4.0.0",
		"markdown-it-katex": "^2.0.3",
		"marked": "^15.0.11",
		"pg": "^8.14.1"
	}
}
===== ./package-lock.json =====
{
	"name": "linux",
	"version": "0.0.1",
	"lockfileVersion": 3,
	"requires": true,
	"packages": {
		"": {
			"name": "linux",
			"version": "0.0.1",
			"dependencies": {
				"@fontsource/jetbrains-mono": "^5.2.5",
				"@fontsource/manrope": "^5.2.5",
				"@fontsource/plus-jakarta-sans": "^5.2.5",
				"@fortawesome/fontawesome-free": "^6.7.2",
				"@iconify/svelte": "^5.0.0",
				"chart.js": "^4.4.8",
				"chartjs-adapter-date-fns": "^3.0.0",
				"dompurify": "^3.2.5",
				"firebase": "^10.9.0",
				"firebase-admin": "^13.3.0",
				"gray-matter": "^4.0.3",
				"highlight.js": "^11.11.1",
				"katex": "^0.16.22",
				"markdown-it": "^14.1.0",
				"markdown-it-container": "^4.0.0",
				"markdown-it-katex": "^2.0.3",
				"marked": "^15.0.11",
				"pg": "^8.14.1"
			},
			"devDependencies": {
				"@splidejs/splide": "^4.1.4",
				"@sveltejs/adapter-auto": "^4.0.0",
				"@sveltejs/kit": "^2.16.0",
				"@sveltejs/package": "^2.0.0",
				"@sveltejs/vite-plugin-svelte": "^5.0.0",
				"@tailwindcss/postcss": "^4.0.0",
				"@tailwindcss/typography": "^0.5.16",
				"@types/pg": "^8.11.13",
				"autoprefixer": "^10.4.21",
				"postcss": "^8.5.3",
				"publint": "^0.3.2",
				"svelte": "^5.0.0",
				"svelte-check": "^4.0.0",
				"tailwindcss": "^3.4.17",
				"typescript": "^5.0.0",
				"vite": "^6.0.0",
				"vitest": "^3.1.2"
			},
			"peerDependencies": {
				"svelte": "^5.0.0"
			}
		},
		"node_modules/@alloc/quick-lru": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
			"integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@ampproject/remapping": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
			"integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
			"license": "Apache-2.0",
			"dependencies": {
				"@jridgewell/gen-mapping": "^0.3.5",
				"@jridgewell/trace-mapping": "^0.3.24"
			},
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@esbuild/aix-ppc64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.3.tgz",
			"integrity": "sha512-W8bFfPA8DowP8l//sxjJLSLkD8iEjMc7cBVyP+u4cEv9sM7mdUCkgsj+t0n/BWPFtv7WWCN5Yzj0N6FJNUUqBQ==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"aix"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-arm": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.3.tgz",
			"integrity": "sha512-PuwVXbnP87Tcff5I9ngV0lmiSu40xw1At6i3GsU77U7cjDDB4s0X2cyFuBiDa1SBk9DnvWwnGvVaGBqoFWPb7A==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.3.tgz",
			"integrity": "sha512-XelR6MzjlZuBM4f5z2IQHK6LkK34Cvv6Rj2EntER3lwCBFdg6h2lKbtRjpTTsdEjD/WSe1q8UyPBXP1x3i/wYQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.3.tgz",
			"integrity": "sha512-ogtTpYHT/g1GWS/zKM0cc/tIebFjm1F9Aw1boQ2Y0eUQ+J89d0jFY//s9ei9jVIlkYi8AfOjiixcLJSGNSOAdQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/darwin-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.3.tgz",
			"integrity": "sha512-eESK5yfPNTqpAmDfFWNsOhmIOaQA59tAcF/EfYvo5/QWQCzXn5iUSOnqt3ra3UdzBv073ykTtmeLJZGt3HhA+w==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/darwin-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.3.tgz",
			"integrity": "sha512-Kd8glo7sIZtwOLcPbW0yLpKmBNWMANZhrC1r6K++uDR2zyzb6AeOYtI6udbtabmQpFaxJ8uduXMAo1gs5ozz8A==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/freebsd-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.3.tgz",
			"integrity": "sha512-EJiyS70BYybOBpJth3M0KLOus0n+RRMKTYzhYhFeMwp7e/RaajXvP+BWlmEXNk6uk+KAu46j/kaQzr6au+JcIw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/freebsd-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.3.tgz",
			"integrity": "sha512-Q+wSjaLpGxYf7zC0kL0nDlhsfuFkoN+EXrx2KSB33RhinWzejOd6AvgmP5JbkgXKmjhmpfgKZq24pneodYqE8Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-arm": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.3.tgz",
			"integrity": "sha512-dUOVmAUzuHy2ZOKIHIKHCm58HKzFqd+puLaS424h6I85GlSDRZIA5ycBixb3mFgM0Jdh+ZOSB6KptX30DD8YOQ==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.3.tgz",
			"integrity": "sha512-xCUgnNYhRD5bb1C1nqrDV1PfkwgbswTTBRbAd8aH5PhYzikdf/ddtsYyMXFfGSsb/6t6QaPSzxtbfAZr9uox4A==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-ia32": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.3.tgz",
			"integrity": "sha512-yplPOpczHOO4jTYKmuYuANI3WhvIPSVANGcNUeMlxH4twz/TeXuzEP41tGKNGWJjuMhotpGabeFYGAOU2ummBw==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-loong64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.3.tgz",
			"integrity": "sha512-P4BLP5/fjyihmXCELRGrLd793q/lBtKMQl8ARGpDxgzgIKJDRJ/u4r1A/HgpBpKpKZelGct2PGI4T+axcedf6g==",
			"cpu": [
				"loong64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-mips64el": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.3.tgz",
			"integrity": "sha512-eRAOV2ODpu6P5divMEMa26RRqb2yUoYsuQQOuFUexUoQndm4MdpXXDBbUoKIc0iPa4aCO7gIhtnYomkn2x+bag==",
			"cpu": [
				"mips64el"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-ppc64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.3.tgz",
			"integrity": "sha512-ZC4jV2p7VbzTlnl8nZKLcBkfzIf4Yad1SJM4ZMKYnJqZFD4rTI+pBG65u8ev4jk3/MPwY9DvGn50wi3uhdaghg==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-riscv64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.3.tgz",
			"integrity": "sha512-LDDODcFzNtECTrUUbVCs6j9/bDVqy7DDRsuIXJg6so+mFksgwG7ZVnTruYi5V+z3eE5y+BJZw7VvUadkbfg7QA==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-s390x": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.3.tgz",
			"integrity": "sha512-s+w/NOY2k0yC2p9SLen+ymflgcpRkvwwa02fqmAwhBRI3SC12uiS10edHHXlVWwfAagYSY5UpmT/zISXPMW3tQ==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.3.tgz",
			"integrity": "sha512-nQHDz4pXjSDC6UfOE1Fw9Q8d6GCAd9KdvMZpfVGWSJztYCarRgSDfOVBY5xwhQXseiyxapkiSJi/5/ja8mRFFA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/netbsd-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.3.tgz",
			"integrity": "sha512-1QaLtOWq0mzK6tzzp0jRN3eccmN3hezey7mhLnzC6oNlJoUJz4nym5ZD7mDnS/LZQgkrhEbEiTn515lPeLpgWA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/netbsd-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.3.tgz",
			"integrity": "sha512-i5Hm68HXHdgv8wkrt+10Bc50zM0/eonPb/a/OFVfB6Qvpiirco5gBA5bz7S2SHuU+Y4LWn/zehzNX14Sp4r27g==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/openbsd-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.3.tgz",
			"integrity": "sha512-zGAVApJEYTbOC6H/3QBr2mq3upG/LBEXr85/pTtKiv2IXcgKV0RT0QA/hSXZqSvLEpXeIxah7LczB4lkiYhTAQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/openbsd-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.3.tgz",
			"integrity": "sha512-fpqctI45NnCIDKBH5AXQBsD0NDPbEFczK98hk/aa6HJxbl+UtLkJV2+Bvy5hLSLk3LHmqt0NTkKNso1A9y1a4w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/sunos-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.3.tgz",
			"integrity": "sha512-ROJhm7d8bk9dMCUZjkS8fgzsPAZEjtRJqCAmVgB0gMrvG7hfmPmz9k1rwO4jSiblFjYmNvbECL9uhaPzONMfgA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"sunos"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-arm64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.3.tgz",
			"integrity": "sha512-YWcow8peiHpNBiIXHwaswPnAXLsLVygFwCB3A7Bh5jRkIBFWHGmNQ48AlX4xDvQNoMZlPYzjVOQDYEzWCqufMQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-ia32": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.3.tgz",
			"integrity": "sha512-qspTZOIGoXVS4DpNqUYUs9UxVb04khS1Degaw/MnfMe7goQ3lTfQ13Vw4qY/Nj0979BGvMRpAYbs/BAxEvU8ew==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-x64": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.3.tgz",
			"integrity": "sha512-ICgUR+kPimx0vvRzf+N/7L7tVSQeE3BYY+NhHRHXS1kBuPO7z2+7ea2HbhDyZdTephgvNvKrlDDKUexuCVBVvg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@fastify/busboy": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-3.1.1.tgz",
			"integrity": "sha512-5DGmA8FTdB2XbDeEwc/5ZXBl6UbBAyBOOLlPuBnZ/N1SwdH9Ii+cOX3tBROlDgcTXxjOYnLMVoKk9+FXAw0CJw==",
			"license": "MIT"
		},
		"node_modules/@firebase/analytics": {
			"version": "0.10.8",
			"resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.8.tgz",
			"integrity": "sha512-CVnHcS4iRJPqtIDc411+UmFldk0ShSK3OB+D0bKD8Ck5Vro6dbK5+APZpkuWpbfdL359DIQUnAaMLE+zs/PVyA==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/installations": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/analytics-compat": {
			"version": "0.2.14",
			"resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.14.tgz",
			"integrity": "sha512-unRVY6SvRqfNFIAA/kwl4vK+lvQAL2HVcgu9zTrUtTyYDmtIt/lOuHJynBMYEgLnKm39YKBDhtqdapP2e++ASw==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/analytics": "0.10.8",
				"@firebase/analytics-types": "0.8.2",
				"@firebase/component": "0.6.9",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/analytics-types": {
			"version": "0.8.2",
			"resolved": "https://registry.npmjs.org/@firebase/analytics-types/-/analytics-types-0.8.2.tgz",
			"integrity": "sha512-EnzNNLh+9/sJsimsA/FGqzakmrAUKLeJvjRHlg8df1f97NLUlFidk9600y0ZgWOp3CAxn6Hjtk+08tixlUOWyw==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/app": {
			"version": "0.10.13",
			"resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.10.13.tgz",
			"integrity": "sha512-OZiDAEK/lDB6xy/XzYAyJJkaDqmQ+BCtOEPLqFvxWKUz5JbBmej7IiiRHdtiIOD/twW7O5AxVsfaaGA/V1bNsA==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"idb": "7.1.1",
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/app-check": {
			"version": "0.8.8",
			"resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.8.8.tgz",
			"integrity": "sha512-O49RGF1xj7k6BuhxGpHmqOW5hqBIAEbt2q6POW0lIywx7emYtzPDeQI+ryQpC4zbKX646SoVZ711TN1DBLNSOQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/app-check-compat": {
			"version": "0.3.15",
			"resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.3.15.tgz",
			"integrity": "sha512-zFIvIFFNqDXpOT2huorz9cwf56VT3oJYRFjSFYdSbGYEJYEaXjLJbfC79lx/zjx4Fh+yuN8pry3TtvwaevrGbg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-check": "0.8.8",
				"@firebase/app-check-types": "0.5.2",
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/app-check-interop-types": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.2.tgz",
			"integrity": "sha512-LMs47Vinv2HBMZi49C09dJxp0QT5LwDzFaVGf/+ITHe3BlIhUiLNttkATSXplc89A2lAaeTqjgqVkiRfUGyQiQ==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/app-check-types": {
			"version": "0.5.2",
			"resolved": "https://registry.npmjs.org/@firebase/app-check-types/-/app-check-types-0.5.2.tgz",
			"integrity": "sha512-FSOEzTzL5bLUbD2co3Zut46iyPWML6xc4x+78TeaXMSuJap5QObfb+rVvZJtla3asN4RwU7elaQaduP+HFizDA==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/app-compat": {
			"version": "0.2.43",
			"resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.2.43.tgz",
			"integrity": "sha512-HM96ZyIblXjAC7TzE8wIk2QhHlSvksYkQ4Ukh1GmEenzkucSNUmUX4QvoKrqeWsLEQ8hdcojABeCV8ybVyZmeg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app": "0.10.13",
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/app-types": {
			"version": "0.9.2",
			"resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.2.tgz",
			"integrity": "sha512-oMEZ1TDlBz479lmABwWsWjzHwheQKiAgnuKxE0pz0IXCVx7/rtlkx1fQ6GfgK24WCrxDKMplZrT50Kh04iMbXQ==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/auth": {
			"version": "1.7.9",
			"resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.7.9.tgz",
			"integrity": "sha512-yLD5095kVgDw965jepMyUrIgDklD6qH/BZNHeKOgvu7pchOKNjVM+zQoOVYJIKWMWOWBq8IRNVU6NXzBbozaJg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0",
				"undici": "6.19.7"
			},
			"peerDependencies": {
				"@firebase/app": "0.x",
				"@react-native-async-storage/async-storage": "^1.18.1"
			},
			"peerDependenciesMeta": {
				"@react-native-async-storage/async-storage": {
					"optional": true
				}
			}
		},
		"node_modules/@firebase/auth-compat": {
			"version": "0.5.14",
			"resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.5.14.tgz",
			"integrity": "sha512-2eczCSqBl1KUPJacZlFpQayvpilg3dxXLy9cSMTKtQMTQSmondUtPI47P3ikH3bQAXhzKLOE+qVxJ3/IRtu9pw==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/auth": "1.7.9",
				"@firebase/auth-types": "0.12.2",
				"@firebase/component": "0.6.9",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0",
				"undici": "6.19.7"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/auth-interop-types": {
			"version": "0.2.3",
			"resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.3.tgz",
			"integrity": "sha512-Fc9wuJGgxoxQeavybiuwgyi+0rssr76b+nHpj+eGhXFYAdudMWyfBHvFL/I5fEHniUM/UQdFzi9VXJK2iZF7FQ==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/auth-types": {
			"version": "0.12.2",
			"resolved": "https://registry.npmjs.org/@firebase/auth-types/-/auth-types-0.12.2.tgz",
			"integrity": "sha512-qsEBaRMoGvHO10unlDJhaKSuPn4pyoTtlQuP1ghZfzB6rNQPuhp/N/DcFZxm9i4v0SogjCbf9reWupwIvfmH6w==",
			"license": "Apache-2.0",
			"peerDependencies": {
				"@firebase/app-types": "0.x",
				"@firebase/util": "1.x"
			}
		},
		"node_modules/@firebase/component": {
			"version": "0.6.9",
			"resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.9.tgz",
			"integrity": "sha512-gm8EUEJE/fEac86AvHn8Z/QW8BvR56TBw3hMW0O838J/1mThYQXAIQBgUv75EqlCZfdawpWLrKt1uXvp9ciK3Q==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/data-connect": {
			"version": "0.1.0",
			"resolved": "https://registry.npmjs.org/@firebase/data-connect/-/data-connect-0.1.0.tgz",
			"integrity": "sha512-vSe5s8dY13ilhLnfY0eYRmQsdTbH7PUFZtBbqU6JVX/j8Qp9A6G5gG6//ulbX9/1JFOF1IWNOne9c8S/DOCJaQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/auth-interop-types": "0.2.3",
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/database": {
			"version": "1.0.8",
			"resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.8.tgz",
			"integrity": "sha512-dzXALZeBI1U5TXt6619cv0+tgEhJiwlUtQ55WNZY7vGAjv7Q1QioV969iYwt1AQQ0ovHnEW0YW9TiBfefLvErg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-check-interop-types": "0.3.2",
				"@firebase/auth-interop-types": "0.2.3",
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"faye-websocket": "0.11.4",
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/database-compat": {
			"version": "1.0.8",
			"resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.8.tgz",
			"integrity": "sha512-OpeWZoPE3sGIRPBKYnW9wLad25RaWbGyk7fFQe4xnJQKRzlynWeFBSRRAoLE2Old01WXwskUiucNqUUVlFsceg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/database": "1.0.8",
				"@firebase/database-types": "1.0.5",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/database-types": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.5.tgz",
			"integrity": "sha512-fTlqCNwFYyq/C6W7AJ5OCuq5CeZuBEsEwptnVxlNPkWCo5cTTyukzAHRSO/jaQcItz33FfYrrFk1SJofcu2AaQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-types": "0.9.2",
				"@firebase/util": "1.10.0"
			}
		},
		"node_modules/@firebase/firestore": {
			"version": "4.7.3",
			"resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.7.3.tgz",
			"integrity": "sha512-NwVU+JPZ/3bhvNSJMCSzfcBZZg8SUGyzZ2T0EW3/bkUeefCyzMISSt/TTIfEHc8cdyXGlMqfGe3/62u9s74UEg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"@firebase/webchannel-wrapper": "1.0.1",
				"@grpc/grpc-js": "~1.9.0",
				"@grpc/proto-loader": "^0.7.8",
				"tslib": "^2.1.0",
				"undici": "6.19.7"
			},
			"engines": {
				"node": ">=10.10.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/firestore-compat": {
			"version": "0.3.38",
			"resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.3.38.tgz",
			"integrity": "sha512-GoS0bIMMkjpLni6StSwRJarpu2+S5m346Na7gr9YZ/BZ/W3/8iHGNr9PxC+f0rNZXqS4fGRn88pICjrZEgbkqQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/firestore": "4.7.3",
				"@firebase/firestore-types": "3.0.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/firestore-types": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/@firebase/firestore-types/-/firestore-types-3.0.2.tgz",
			"integrity": "sha512-wp1A+t5rI2Qc/2q7r2ZpjUXkRVPtGMd6zCLsiWurjsQpqPgFin3AhNibKcIzoF2rnToNa/XYtyWXuifjOOwDgg==",
			"license": "Apache-2.0",
			"peerDependencies": {
				"@firebase/app-types": "0.x",
				"@firebase/util": "1.x"
			}
		},
		"node_modules/@firebase/functions": {
			"version": "0.11.8",
			"resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.11.8.tgz",
			"integrity": "sha512-Lo2rTPDn96naFIlSZKVd1yvRRqqqwiJk7cf9TZhUerwnPKgBzXy+aHE22ry+6EjCaQusUoNai6mU6p+G8QZT1g==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-check-interop-types": "0.3.2",
				"@firebase/auth-interop-types": "0.2.3",
				"@firebase/component": "0.6.9",
				"@firebase/messaging-interop-types": "0.2.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0",
				"undici": "6.19.7"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/functions-compat": {
			"version": "0.3.14",
			"resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.3.14.tgz",
			"integrity": "sha512-dZ0PKOKQFnOlMfcim39XzaXonSuPPAVuzpqA4ONTIdyaJK/OnBaIEVs/+BH4faa1a2tLeR+Jy15PKqDRQoNIJw==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/functions": "0.11.8",
				"@firebase/functions-types": "0.6.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/functions-types": {
			"version": "0.6.2",
			"resolved": "https://registry.npmjs.org/@firebase/functions-types/-/functions-types-0.6.2.tgz",
			"integrity": "sha512-0KiJ9lZ28nS2iJJvimpY4nNccV21rkQyor5Iheu/nq8aKXJqtJdeSlZDspjPSBBiHRzo7/GMUttegnsEITqR+w==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/installations": {
			"version": "0.6.9",
			"resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.9.tgz",
			"integrity": "sha512-hlT7AwCiKghOX3XizLxXOsTFiFCQnp/oj86zp1UxwDGmyzsyoxtX+UIZyVyH/oBF5+XtblFG9KZzZQ/h+dpy+Q==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/util": "1.10.0",
				"idb": "7.1.1",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/installations-compat": {
			"version": "0.2.9",
			"resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.9.tgz",
			"integrity": "sha512-2lfdc6kPXR7WaL4FCQSQUhXcPbI7ol3wF+vkgtU25r77OxPf8F/VmswQ7sgIkBBWtymn5ZF20TIKtnOj9rjb6w==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/installations": "0.6.9",
				"@firebase/installations-types": "0.5.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/installations-types": {
			"version": "0.5.2",
			"resolved": "https://registry.npmjs.org/@firebase/installations-types/-/installations-types-0.5.2.tgz",
			"integrity": "sha512-que84TqGRZJpJKHBlF2pkvc1YcXrtEDOVGiDjovP/a3s6W4nlbohGXEsBJo0JCeeg/UG9A+DEZVDUV9GpklUzA==",
			"license": "Apache-2.0",
			"peerDependencies": {
				"@firebase/app-types": "0.x"
			}
		},
		"node_modules/@firebase/logger": {
			"version": "0.4.2",
			"resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.2.tgz",
			"integrity": "sha512-Q1VuA5M1Gjqrwom6I6NUU4lQXdo9IAQieXlujeHZWvRt1b7qQ0KwBaNAjgxG27jgF9/mUwsNmO8ptBCGVYhB0A==",
			"license": "Apache-2.0",
			"dependencies": {
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/messaging": {
			"version": "0.12.12",
			"resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.12.tgz",
			"integrity": "sha512-6q0pbzYBJhZEtUoQx7hnPhZvAbuMNuBXKQXOx2YlWhSrlv9N1m0ZzlNpBbu/ItTzrwNKTibdYzUyaaxdWLg+4w==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/installations": "0.6.9",
				"@firebase/messaging-interop-types": "0.2.2",
				"@firebase/util": "1.10.0",
				"idb": "7.1.1",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/messaging-compat": {
			"version": "0.2.12",
			"resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.12.tgz",
			"integrity": "sha512-pKsiUVZrbmRgdImYqhBNZlkKJbqjlPkVdQRZGRbkTyX4OSGKR0F/oJeCt1a8jEg5UnBp4fdVwSWSp4DuCovvEQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/messaging": "0.12.12",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/messaging-interop-types": {
			"version": "0.2.2",
			"resolved": "https://registry.npmjs.org/@firebase/messaging-interop-types/-/messaging-interop-types-0.2.2.tgz",
			"integrity": "sha512-l68HXbuD2PPzDUOFb3aG+nZj5KA3INcPwlocwLZOzPp9rFM9yeuI9YLl6DQfguTX5eAGxO0doTR+rDLDvQb5tA==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/performance": {
			"version": "0.6.9",
			"resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.6.9.tgz",
			"integrity": "sha512-PnVaak5sqfz5ivhua+HserxTJHtCar/7zM0flCX6NkzBNzJzyzlH4Hs94h2Il0LQB99roBqoE5QT1JqWqcLJHQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/installations": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/performance-compat": {
			"version": "0.2.9",
			"resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.9.tgz",
			"integrity": "sha512-dNl95IUnpsu3fAfYBZDCVhXNkASE0uo4HYaEPd2/PKscfTvsgqFAOxfAXzBEDOnynDWiaGUnb5M1O00JQ+3FXA==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/performance": "0.6.9",
				"@firebase/performance-types": "0.2.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/performance-types": {
			"version": "0.2.2",
			"resolved": "https://registry.npmjs.org/@firebase/performance-types/-/performance-types-0.2.2.tgz",
			"integrity": "sha512-gVq0/lAClVH5STrIdKnHnCo2UcPLjJlDUoEB/tB4KM+hAeHUxWKnpT0nemUPvxZ5nbdY/pybeyMe8Cs29gEcHA==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/remote-config": {
			"version": "0.4.9",
			"resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.4.9.tgz",
			"integrity": "sha512-EO1NLCWSPMHdDSRGwZ73kxEEcTopAxX1naqLJFNApp4hO8WfKfmEpmjxmP5TrrnypjIf2tUkYaKsfbEA7+AMmA==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/installations": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/remote-config-compat": {
			"version": "0.2.9",
			"resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.9.tgz",
			"integrity": "sha512-AxzGpWfWFYejH2twxfdOJt5Cfh/ATHONegTd/a0p5flEzsD5JsxXgfkFToop+mypEL3gNwawxrxlZddmDoNxyA==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/remote-config": "0.4.9",
				"@firebase/remote-config-types": "0.3.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/remote-config-types": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/@firebase/remote-config-types/-/remote-config-types-0.3.2.tgz",
			"integrity": "sha512-0BC4+Ud7y2aPTyhXJTMTFfrGGLqdYXrUB9sJVAB8NiqJswDTc4/2qrE/yfUbnQJhbSi6ZaTTBKyG3n1nplssaA==",
			"license": "Apache-2.0"
		},
		"node_modules/@firebase/storage": {
			"version": "0.13.2",
			"resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.13.2.tgz",
			"integrity": "sha512-fxuJnHshbhVwuJ4FuISLu+/76Aby2sh+44ztjF2ppoe0TELIDxPW6/r1KGlWYt//AD0IodDYYA8ZTN89q8YqUw==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0",
				"undici": "6.19.7"
			},
			"peerDependencies": {
				"@firebase/app": "0.x"
			}
		},
		"node_modules/@firebase/storage-compat": {
			"version": "0.3.12",
			"resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.3.12.tgz",
			"integrity": "sha512-hA4VWKyGU5bWOll+uwzzhEMMYGu9PlKQc1w4DWxB3aIErWYzonrZjF0icqNQZbwKNIdh8SHjZlFeB2w6OSsjfg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.9",
				"@firebase/storage": "0.13.2",
				"@firebase/storage-types": "0.8.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"peerDependencies": {
				"@firebase/app-compat": "0.x"
			}
		},
		"node_modules/@firebase/storage-types": {
			"version": "0.8.2",
			"resolved": "https://registry.npmjs.org/@firebase/storage-types/-/storage-types-0.8.2.tgz",
			"integrity": "sha512-0vWu99rdey0g53lA7IShoA2Lol1jfnPovzLDUBuon65K7uKG9G+L5uO05brD9pMw+l4HRFw23ah3GwTGpEav6g==",
			"license": "Apache-2.0",
			"peerDependencies": {
				"@firebase/app-types": "0.x",
				"@firebase/util": "1.x"
			}
		},
		"node_modules/@firebase/util": {
			"version": "1.10.0",
			"resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.10.0.tgz",
			"integrity": "sha512-xKtx4A668icQqoANRxyDLBLz51TAbDP9KRfpbKGxiCAW346d0BeJe5vN6/hKxxmWwnZ0mautyv39JxviwwQMOQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"tslib": "^2.1.0"
			}
		},
		"node_modules/@firebase/vertexai-preview": {
			"version": "0.0.4",
			"resolved": "https://registry.npmjs.org/@firebase/vertexai-preview/-/vertexai-preview-0.0.4.tgz",
			"integrity": "sha512-EBSqyu9eg8frQlVU9/HjKtHN7odqbh9MtAcVz3WwHj4gLCLOoN9F/o+oxlq3CxvFrd3CNTZwu6d2mZtVlEInng==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-check-interop-types": "0.3.2",
				"@firebase/component": "0.6.9",
				"@firebase/logger": "0.4.2",
				"@firebase/util": "1.10.0",
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"peerDependencies": {
				"@firebase/app": "0.x",
				"@firebase/app-types": "0.x"
			}
		},
		"node_modules/@firebase/webchannel-wrapper": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/@firebase/webchannel-wrapper/-/webchannel-wrapper-1.0.1.tgz",
			"integrity": "sha512-jmEnr/pk0yVkA7mIlHNnxCi+wWzOFUg0WyIotgkKAb2u1J7fAeDBcVNSTjTihbAYNusCLQdW5s9IJ5qwnEufcQ==",
			"license": "Apache-2.0"
		},
		"node_modules/@fontsource/jetbrains-mono": {
			"version": "5.2.5",
			"resolved": "https://registry.npmjs.org/@fontsource/jetbrains-mono/-/jetbrains-mono-5.2.5.tgz",
			"integrity": "sha512-TPZ9b/uq38RMdrlZZkl0RwN8Ju9JxuqMETrw76pUQFbGtE1QbwQaNsLlnUrACNNBNbd0NZRXiJJSkC8ajPgbew==",
			"license": "OFL-1.1",
			"funding": {
				"url": "https://github.com/sponsors/ayuhito"
			}
		},
		"node_modules/@fontsource/manrope": {
			"version": "5.2.5",
			"resolved": "https://registry.npmjs.org/@fontsource/manrope/-/manrope-5.2.5.tgz",
			"integrity": "sha512-4mYUAhsuF8KoXseG8T9woWUc/foznUVluFtE6fCKAqe76WM3kmDNedaINWjzWB73+wly0duFvVpDBma3NXXT0g==",
			"license": "OFL-1.1",
			"funding": {
				"url": "https://github.com/sponsors/ayuhito"
			}
		},
		"node_modules/@fontsource/plus-jakarta-sans": {
			"version": "5.2.5",
			"resolved": "https://registry.npmjs.org/@fontsource/plus-jakarta-sans/-/plus-jakarta-sans-5.2.5.tgz",
			"integrity": "sha512-2QBEymhsrpomwXrDygLwolOPOjRGDLDT+Pezo+SsnapcQ1z0n4qXzhC+EVmTZ0yxrQvqdc0kcb9EUd0eWmj9Jw==",
			"license": "OFL-1.1",
			"funding": {
				"url": "https://github.com/sponsors/ayuhito"
			}
		},
		"node_modules/@fortawesome/fontawesome-free": {
			"version": "6.7.2",
			"resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-free/-/fontawesome-free-6.7.2.tgz",
			"integrity": "sha512-JUOtgFW6k9u4Y+xeIaEiLr3+cjoUPiAuLXoyKOJSia6Duzb7pq+A76P9ZdPDoAoxHdHzq6gE9/jKBGXlZT8FbA==",
			"license": "(CC-BY-4.0 AND OFL-1.1 AND MIT)",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/@google-cloud/firestore": {
			"version": "7.11.0",
			"resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-7.11.0.tgz",
			"integrity": "sha512-88uZ+jLsp1aVMj7gh3EKYH1aulTAMFAp8sH/v5a9w8q8iqSG27RiWLoxSAFr/XocZ9hGiWH1kEnBw+zl3xAgNA==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"@opentelemetry/api": "^1.3.0",
				"fast-deep-equal": "^3.1.1",
				"functional-red-black-tree": "^1.0.1",
				"google-gax": "^4.3.3",
				"protobufjs": "^7.2.6"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@google-cloud/paginator": {
			"version": "5.0.2",
			"resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-5.0.2.tgz",
			"integrity": "sha512-DJS3s0OVH4zFDB1PzjxAsHqJT6sKVbRwwML0ZBP9PbU7Yebtu/7SWMRzvO2J3nUi9pRNITCfu4LJeooM2w4pjg==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"arrify": "^2.0.0",
				"extend": "^3.0.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@google-cloud/projectify": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-4.0.0.tgz",
			"integrity": "sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==",
			"license": "Apache-2.0",
			"optional": true,
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@google-cloud/promisify": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-4.0.0.tgz",
			"integrity": "sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==",
			"license": "Apache-2.0",
			"optional": true,
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/@google-cloud/storage": {
			"version": "7.16.0",
			"resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-7.16.0.tgz",
			"integrity": "sha512-7/5LRgykyOfQENcm6hDKP8SX/u9XxE5YOiWOkgkwcoO+cG8xT/cyOvp9wwN3IxfdYgpHs8CE7Nq2PKX2lNaEXw==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"@google-cloud/paginator": "^5.0.0",
				"@google-cloud/projectify": "^4.0.0",
				"@google-cloud/promisify": "<4.1.0",
				"abort-controller": "^3.0.0",
				"async-retry": "^1.3.3",
				"duplexify": "^4.1.3",
				"fast-xml-parser": "^4.4.1",
				"gaxios": "^6.0.2",
				"google-auth-library": "^9.6.3",
				"html-entities": "^2.5.2",
				"mime": "^3.0.0",
				"p-limit": "^3.0.1",
				"retry-request": "^7.0.0",
				"teeny-request": "^9.0.0",
				"uuid": "^8.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/@google-cloud/storage/node_modules/uuid": {
			"version": "8.3.2",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
			"integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
			"license": "MIT",
			"optional": true,
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/@grpc/grpc-js": {
			"version": "1.9.15",
			"resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.9.15.tgz",
			"integrity": "sha512-nqE7Hc0AzI+euzUwDAy0aY5hCp10r734gMGRdU+qOPX0XSceI2ULrcXB5U2xSc5VkWwalCj4M7GzCAygZl2KoQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@grpc/proto-loader": "^0.7.8",
				"@types/node": ">=12.12.47"
			},
			"engines": {
				"node": "^8.13.0 || >=10.10.0"
			}
		},
		"node_modules/@grpc/proto-loader": {
			"version": "0.7.15",
			"resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
			"integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"lodash.camelcase": "^4.3.0",
				"long": "^5.0.0",
				"protobufjs": "^7.2.5",
				"yargs": "^17.7.2"
			},
			"bin": {
				"proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/@iconify/svelte": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/@iconify/svelte/-/svelte-5.0.0.tgz",
			"integrity": "sha512-Bm5iKnNpIWHuUlWaaf16QgVL1tcbQUUSdPdkvDlpmYXg3nFJSA1SLY9V4rRTd+K4h3QT12ZS7JHFLkf8khQd8Q==",
			"license": "MIT",
			"dependencies": {
				"@iconify/types": "^2.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/cyberalien"
			},
			"peerDependencies": {
				"svelte": ">4.0.0"
			}
		},
		"node_modules/@iconify/types": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/@iconify/types/-/types-2.0.0.tgz",
			"integrity": "sha512-+wluvCrRhXrhyOmRDJ3q8mux9JkKy5SJ/v8ol2tu4FVjyYvtEzkc/3pK15ET6RKg4b4w4BmTk1+gsCUhf21Ykg==",
			"license": "MIT"
		},
		"node_modules/@isaacs/cliui": {
			"version": "8.0.2",
			"resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
			"integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"string-width": "^5.1.2",
				"string-width-cjs": "npm:string-width@^4.2.0",
				"strip-ansi": "^7.0.1",
				"strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
				"wrap-ansi": "^8.1.0",
				"wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@jridgewell/gen-mapping": {
			"version": "0.3.8",
			"resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
			"integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
			"license": "MIT",
			"dependencies": {
				"@jridgewell/set-array": "^1.2.1",
				"@jridgewell/sourcemap-codec": "^1.4.10",
				"@jridgewell/trace-mapping": "^0.3.24"
			},
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/resolve-uri": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
			"integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
			"license": "MIT",
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/set-array": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
			"integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
			"license": "MIT",
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/sourcemap-codec": {
			"version": "1.5.0",
			"resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
			"integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
			"license": "MIT"
		},
		"node_modules/@jridgewell/trace-mapping": {
			"version": "0.3.25",
			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
			"integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
			"license": "MIT",
			"dependencies": {
				"@jridgewell/resolve-uri": "^3.1.0",
				"@jridgewell/sourcemap-codec": "^1.4.14"
			}
		},
		"node_modules/@js-sdsl/ordered-map": {
			"version": "4.4.2",
			"resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
			"integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
			"license": "MIT",
			"optional": true,
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/js-sdsl"
			}
		},
		"node_modules/@kurkle/color": {
			"version": "0.3.4",
			"resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
			"integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
			"license": "MIT"
		},
		"node_modules/@nodelib/fs.scandir": {
			"version": "2.1.5",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@nodelib/fs.stat": "2.0.5",
				"run-parallel": "^1.1.9"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@nodelib/fs.stat": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
			"integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@nodelib/fs.walk": {
			"version": "1.2.8",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
			"integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@nodelib/fs.scandir": "2.1.5",
				"fastq": "^1.6.0"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@opentelemetry/api": {
			"version": "1.9.0",
			"resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
			"integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
			"license": "Apache-2.0",
			"optional": true,
			"engines": {
				"node": ">=8.0.0"
			}
		},
		"node_modules/@pkgjs/parseargs": {
			"version": "0.11.0",
			"resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
			"integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
			"dev": true,
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/@polka/url": {
			"version": "1.0.0-next.29",
			"resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
			"integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@protobufjs/aspromise": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
			"integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/base64": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
			"integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/codegen": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
			"integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/eventemitter": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
			"integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/fetch": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
			"integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
			"license": "BSD-3-Clause",
			"dependencies": {
				"@protobufjs/aspromise": "^1.1.1",
				"@protobufjs/inquire": "^1.1.0"
			}
		},
		"node_modules/@protobufjs/float": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
			"integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/inquire": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
			"integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/path": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
			"integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/pool": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
			"integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@protobufjs/utf8": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
			"integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
			"license": "BSD-3-Clause"
		},
		"node_modules/@publint/pack": {
			"version": "0.1.2",
			"resolved": "https://registry.npmjs.org/@publint/pack/-/pack-0.1.2.tgz",
			"integrity": "sha512-S+9ANAvUmjutrshV4jZjaiG8XQyuJIZ8a4utWmN/vW1sgQ9IfBnPndwkmQYw53QmouOIytT874u65HEmu6H5jw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://bjornlu.com/sponsor"
			}
		},
		"node_modules/@rollup/rollup-android-arm-eabi": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.1.tgz",
			"integrity": "sha512-kxz0YeeCrRUHz3zyqvd7n+TVRlNyTifBsmnmNPtk3hQURUyG9eAB+usz6DAwagMusjx/zb3AjvDUvhFGDAexGw==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			]
		},
		"node_modules/@rollup/rollup-android-arm64": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.1.tgz",
			"integrity": "sha512-PPkxTOisoNC6TpnDKatjKkjRMsdaWIhyuMkA4UsBXT9WEZY4uHezBTjs6Vl4PbqQQeu6oION1w2voYZv9yquCw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			]
		},
		"node_modules/@rollup/rollup-darwin-arm64": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.1.tgz",
			"integrity": "sha512-VWXGISWFY18v/0JyNUy4A46KCFCb9NVsH+1100XP31lud+TzlezBbz24CYzbnA4x6w4hx+NYCXDfnvDVO6lcAA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			]
		},
		"node_modules/@rollup/rollup-darwin-x64": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.1.tgz",
			"integrity": "sha512-nIwkXafAI1/QCS7pxSpv/ZtFW6TXcNUEHAIA9EIyw5OzxJZQ1YDrX+CL6JAIQgZ33CInl1R6mHet9Y/UZTg2Bw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			]
		},
		"node_modules/@rollup/rollup-freebsd-arm64": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.1.tgz",
			"integrity": "sha512-BdrLJ2mHTrIYdaS2I99mriyJfGGenSaP+UwGi1kB9BLOCu9SR8ZpbkmmalKIALnRw24kM7qCN0IOm6L0S44iWw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			]
		},
		"node_modules/@rollup/rollup-freebsd-x64": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.1.tgz",
			"integrity": "sha512-VXeo/puqvCG8JBPNZXZf5Dqq7BzElNJzHRRw3vjBE27WujdzuOPecDPc/+1DcdcTptNBep3861jNq0mYkT8Z6Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			]
		},
		"node_modules/@rollup/rollup-linux-arm-gnueabihf": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.1.tgz",
			"integrity": "sha512-ehSKrewwsESPt1TgSE/na9nIhWCosfGSFqv7vwEtjyAqZcvbGIg4JAcV7ZEh2tfj/IlfBeZjgOXm35iOOjadcg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm-musleabihf": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.1.tgz",
			"integrity": "sha512-m39iO/aaurh5FVIu/F4/Zsl8xppd76S4qoID8E+dSRQvTyZTOI2gVk3T4oqzfq1PtcvOfAVlwLMK3KRQMaR8lg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm64-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.1.tgz",
			"integrity": "sha512-Y+GHnGaku4aVLSgrT0uWe2o2Rq8te9hi+MwqGF9r9ORgXhmHK5Q71N757u0F8yU1OIwUIFy6YiJtKjtyktk5hg==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm64-musl": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.1.tgz",
			"integrity": "sha512-jEwjn3jCA+tQGswK3aEWcD09/7M5wGwc6+flhva7dsQNRZZTe30vkalgIzV4tjkopsTS9Jd7Y1Bsj6a4lzz8gQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-loongarch64-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.1.tgz",
			"integrity": "sha512-ySyWikVhNzv+BV/IDCsrraOAZ3UaC8SZB67FZlqVwXwnFhPihOso9rPOxzZbjp81suB1O2Topw+6Ug3JNegejQ==",
			"cpu": [
				"loong64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.1.tgz",
			"integrity": "sha512-BvvA64QxZlh7WZWqDPPdt0GH4bznuL6uOO1pmgPnnv86rpUpc8ZxgZwcEgXvo02GRIZX1hQ0j0pAnhwkhwPqWg==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-riscv64-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.1.tgz",
			"integrity": "sha512-EQSP+8+1VuSulm9RKSMKitTav89fKbHymTf25n5+Yr6gAPZxYWpj3DzAsQqoaHAk9YX2lwEyAf9S4W8F4l3VBQ==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-riscv64-musl": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.1.tgz",
			"integrity": "sha512-n/vQ4xRZXKuIpqukkMXZt9RWdl+2zgGNx7Uda8NtmLJ06NL8jiHxUawbwC+hdSq1rrw/9CghCpEONor+l1e2gA==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-s390x-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.1.tgz",
			"integrity": "sha512-h8d28xzYb98fMQKUz0w2fMc1XuGzLLjdyxVIbhbil4ELfk5/orZlSTpF/xdI9C8K0I8lCkq+1En2RJsawZekkg==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-x64-gnu": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.1.tgz",
			"integrity": "sha512-XiK5z70PEFEFqcNj3/zRSz/qX4bp4QIraTy9QjwJAb/Z8GM7kVUsD0Uk8maIPeTyPCP03ChdI+VVmJriKYbRHQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-x64-musl": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.1.tgz",
			"integrity": "sha512-2BRORitq5rQ4Da9blVovzNCMaUlyKrzMSvkVR0D4qPuOy/+pMCrh1d7o01RATwVy+6Fa1WBw+da7QPeLWU/1mQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-win32-arm64-msvc": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.1.tgz",
			"integrity": "sha512-b2bcNm9Kbde03H+q+Jjw9tSfhYkzrDUf2d5MAd1bOJuVplXvFhWz7tRtWvD8/ORZi7qSCy0idW6tf2HgxSXQSg==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@rollup/rollup-win32-ia32-msvc": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.1.tgz",
			"integrity": "sha512-DfcogW8N7Zg7llVEfpqWMZcaErKfsj9VvmfSyRjCyo4BI3wPEfrzTtJkZG6gKP/Z92wFm6rz2aDO7/JfiR/whA==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@rollup/rollup-win32-x64-msvc": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.1.tgz",
			"integrity": "sha512-ECyOuDeH3C1I8jH2MK1RtBJW+YPMvSfT0a5NN0nHfQYnDSJ6tUiZH3gzwVP5/Kfh/+Tt7tpWVF9LXNTnhTJ3kA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@splidejs/splide": {
			"version": "4.1.4",
			"resolved": "https://registry.npmjs.org/@splidejs/splide/-/splide-4.1.4.tgz",
			"integrity": "sha512-5I30evTJcAJQXt6vJ26g2xEkG+l1nXcpEw4xpKh0/FWQ8ozmAeTbtniVtVmz2sH1Es3vgfC4SS8B2X4o5JMptA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@sveltejs/acorn-typescript": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@sveltejs/acorn-typescript/-/acorn-typescript-1.0.5.tgz",
			"integrity": "sha512-IwQk4yfwLdibDlrXVE04jTZYlLnwsTT2PIOQQGNLWfjavGifnk1JD1LcZjZaBTRcxZu2FfPfNLOE04DSu9lqtQ==",
			"license": "MIT",
			"peerDependencies": {
				"acorn": "^8.9.0"
			}
		},
		"node_modules/@sveltejs/adapter-auto": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/@sveltejs/adapter-auto/-/adapter-auto-4.0.0.tgz",
			"integrity": "sha512-kmuYSQdD2AwThymQF0haQhM8rE5rhutQXG4LNbnbShwhMO4qQGnKaaTy+88DuNSuoQDi58+thpq8XpHc1+oEKQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"import-meta-resolve": "^4.1.0"
			},
			"peerDependencies": {
				"@sveltejs/kit": "^2.0.0"
			}
		},
		"node_modules/@sveltejs/kit": {
			"version": "2.20.8",
			"resolved": "https://registry.npmjs.org/@sveltejs/kit/-/kit-2.20.8.tgz",
			"integrity": "sha512-ep9qTxL7WALhfm0kFecL3VHeuNew8IccbYGqv5TqL/KSqWRKzEgDG8blNlIu1CkLTTua/kHjI+f5T8eCmWIxKw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@types/cookie": "^0.6.0",
				"cookie": "^0.6.0",
				"devalue": "^5.1.0",
				"esm-env": "^1.2.2",
				"import-meta-resolve": "^4.1.0",
				"kleur": "^4.1.5",
				"magic-string": "^0.30.5",
				"mrmime": "^2.0.0",
				"sade": "^1.8.1",
				"set-cookie-parser": "^2.6.0",
				"sirv": "^3.0.0"
			},
			"bin": {
				"svelte-kit": "svelte-kit.js"
			},
			"engines": {
				"node": ">=18.13"
			},
			"peerDependencies": {
				"@sveltejs/vite-plugin-svelte": "^3.0.0 || ^4.0.0-next.1 || ^5.0.0",
				"svelte": "^4.0.0 || ^5.0.0-next.0",
				"vite": "^5.0.3 || ^6.0.0"
			}
		},
		"node_modules/@sveltejs/package": {
			"version": "2.3.11",
			"resolved": "https://registry.npmjs.org/@sveltejs/package/-/package-2.3.11.tgz",
			"integrity": "sha512-DSMt2U0XNAdoQBYksrmgQi5dKy7jUTVDJLiagS/iXF7AShjAmTbGJQKruBuT/FfYAWvNxfQTSjkXU8eAIjVeNg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"chokidar": "^4.0.3",
				"kleur": "^4.1.5",
				"sade": "^1.8.1",
				"semver": "^7.5.4",
				"svelte2tsx": "~0.7.33"
			},
			"bin": {
				"svelte-package": "svelte-package.js"
			},
			"engines": {
				"node": "^16.14 || >=18"
			},
			"peerDependencies": {
				"svelte": "^3.44.0 || ^4.0.0 || ^5.0.0-next.1"
			}
		},
		"node_modules/@sveltejs/vite-plugin-svelte": {
			"version": "5.0.3",
			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-5.0.3.tgz",
			"integrity": "sha512-MCFS6CrQDu1yGwspm4qtli0e63vaPCehf6V7pIMP15AsWgMKrqDGCPFF/0kn4SP0ii4aySu4Pa62+fIRGFMjgw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@sveltejs/vite-plugin-svelte-inspector": "^4.0.1",
				"debug": "^4.4.0",
				"deepmerge": "^4.3.1",
				"kleur": "^4.1.5",
				"magic-string": "^0.30.15",
				"vitefu": "^1.0.4"
			},
			"engines": {
				"node": "^18.0.0 || ^20.0.0 || >=22"
			},
			"peerDependencies": {
				"svelte": "^5.0.0",
				"vite": "^6.0.0"
			}
		},
		"node_modules/@sveltejs/vite-plugin-svelte-inspector": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte-inspector/-/vite-plugin-svelte-inspector-4.0.1.tgz",
			"integrity": "sha512-J/Nmb2Q2y7mck2hyCX4ckVHcR5tu2J+MtBEQqpDrrgELZ2uvraQcK/ioCV61AqkdXFgriksOKIceDcQmqnGhVw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"debug": "^4.3.7"
			},
			"engines": {
				"node": "^18.0.0 || ^20.0.0 || >=22"
			},
			"peerDependencies": {
				"@sveltejs/vite-plugin-svelte": "^5.0.0",
				"svelte": "^5.0.0",
				"vite": "^6.0.0"
			}
		},
		"node_modules/@tailwindcss/node": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.5.tgz",
			"integrity": "sha512-CBhSWo0vLnWhXIvpD0qsPephiaUYfHUX3U9anwDaHZAeuGpTiB3XmsxPAN6qX7bFhipyGBqOa1QYQVVhkOUGxg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"enhanced-resolve": "^5.18.1",
				"jiti": "^2.4.2",
				"lightningcss": "1.29.2",
				"tailwindcss": "4.1.5"
			}
		},
		"node_modules/@tailwindcss/node/node_modules/tailwindcss": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.5.tgz",
			"integrity": "sha512-nYtSPfWGDiWgCkwQG/m+aX83XCwf62sBgg3bIlNiiOcggnS1x3uVRDAuyelBFL+vJdOPPCGElxv9DjHJjRHiVA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@tailwindcss/oxide": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.5.tgz",
			"integrity": "sha512-1n4br1znquEvyW/QuqMKQZlBen+jxAbvyduU87RS8R3tUSvByAkcaMTkJepNIrTlYhD+U25K4iiCIxE6BGdRYA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 10"
			},
			"optionalDependencies": {
				"@tailwindcss/oxide-android-arm64": "4.1.5",
				"@tailwindcss/oxide-darwin-arm64": "4.1.5",
				"@tailwindcss/oxide-darwin-x64": "4.1.5",
				"@tailwindcss/oxide-freebsd-x64": "4.1.5",
				"@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.5",
				"@tailwindcss/oxide-linux-arm64-gnu": "4.1.5",
				"@tailwindcss/oxide-linux-arm64-musl": "4.1.5",
				"@tailwindcss/oxide-linux-x64-gnu": "4.1.5",
				"@tailwindcss/oxide-linux-x64-musl": "4.1.5",
				"@tailwindcss/oxide-wasm32-wasi": "4.1.5",
				"@tailwindcss/oxide-win32-arm64-msvc": "4.1.5",
				"@tailwindcss/oxide-win32-x64-msvc": "4.1.5"
			}
		},
		"node_modules/@tailwindcss/oxide-android-arm64": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.5.tgz",
			"integrity": "sha512-LVvM0GirXHED02j7hSECm8l9GGJ1RfgpWCW+DRn5TvSaxVsv28gRtoL4aWKGnXqwvI3zu1GABeDNDVZeDPOQrw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-darwin-arm64": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.5.tgz",
			"integrity": "sha512-//TfCA3pNrgnw4rRJOqavW7XUk8gsg9ddi8cwcsWXp99tzdBAZW0WXrD8wDyNbqjW316Pk2hiN/NJx/KWHl8oA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-darwin-x64": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.5.tgz",
			"integrity": "sha512-XQorp3Q6/WzRd9OalgHgaqgEbjP3qjHrlSUb5k1EuS1Z9NE9+BbzSORraO+ecW432cbCN7RVGGL/lSnHxcd+7Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-freebsd-x64": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.5.tgz",
			"integrity": "sha512-bPrLWbxo8gAo97ZmrCbOdtlz/Dkuy8NK97aFbVpkJ2nJ2Jo/rsCbu0TlGx8joCuA3q6vMWTSn01JY46iwG+clg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.5.tgz",
			"integrity": "sha512-1gtQJY9JzMAhgAfvd/ZaVOjh/Ju/nCoAsvOVJenWZfs05wb8zq+GOTnZALWGqKIYEtyNpCzvMk+ocGpxwdvaVg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.5.tgz",
			"integrity": "sha512-dtlaHU2v7MtdxBXoqhxwsWjav7oim7Whc6S9wq/i/uUMTWAzq/gijq1InSgn2yTnh43kR+SFvcSyEF0GCNu1PQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-linux-arm64-musl": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.5.tgz",
			"integrity": "sha512-fg0F6nAeYcJ3CriqDT1iVrqALMwD37+sLzXs8Rjy8Z1ZHshJoYceodfyUwGJEsQoTyWbliFNRs2wMQNXtT7MVA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-linux-x64-gnu": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.5.tgz",
			"integrity": "sha512-SO+F2YEIAHa1AITwc8oPwMOWhgorPzzcbhWEb+4oLi953h45FklDmM8dPSZ7hNHpIk9p/SCZKUYn35t5fjGtHA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-linux-x64-musl": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.5.tgz",
			"integrity": "sha512-6UbBBplywkk/R+PqqioskUeXfKcBht3KU7juTi1UszJLx0KPXUo10v2Ok04iBJIaDPkIFkUOVboXms5Yxvaz+g==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-wasm32-wasi": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.5.tgz",
			"integrity": "sha512-hwALf2K9FHuiXTPqmo1KeOb83fTRNbe9r/Ixv9ZNQ/R24yw8Ge1HOWDDgTdtzntIaIUJG5dfXCf4g9AD4RiyhQ==",
			"bundleDependencies": [
				"@napi-rs/wasm-runtime",
				"@emnapi/core",
				"@emnapi/runtime",
				"@tybys/wasm-util",
				"@emnapi/wasi-threads",
				"tslib"
			],
			"cpu": [
				"wasm32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"@emnapi/core": "^1.4.3",
				"@emnapi/runtime": "^1.4.3",
				"@emnapi/wasi-threads": "^1.0.2",
				"@napi-rs/wasm-runtime": "^0.2.9",
				"@tybys/wasm-util": "^0.9.0",
				"tslib": "^2.8.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.5.tgz",
			"integrity": "sha512-oDKncffWzaovJbkuR7/OTNFRJQVdiw/n8HnzaCItrNQUeQgjy7oUiYpsm9HUBgpmvmDpSSbGaCa2Evzvk3eFmA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/oxide-win32-x64-msvc": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.5.tgz",
			"integrity": "sha512-WiR4dtyrFdbb+ov0LK+7XsFOsG+0xs0PKZKkt41KDn9jYpO7baE3bXiudPVkTqUEwNfiglCygQHl2jklvSBi7Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tailwindcss/postcss": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@tailwindcss/postcss/-/postcss-4.1.5.tgz",
			"integrity": "sha512-5lAC2/pzuyfhsFgk6I58HcNy6vPK3dV/PoPxSDuOTVbDvCddYHzHiJZZInGIY0venvzzfrTEUAXJFULAfFmObg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@alloc/quick-lru": "^5.2.0",
				"@tailwindcss/node": "4.1.5",
				"@tailwindcss/oxide": "4.1.5",
				"postcss": "^8.4.41",
				"tailwindcss": "4.1.5"
			}
		},
		"node_modules/@tailwindcss/postcss/node_modules/tailwindcss": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.5.tgz",
			"integrity": "sha512-nYtSPfWGDiWgCkwQG/m+aX83XCwf62sBgg3bIlNiiOcggnS1x3uVRDAuyelBFL+vJdOPPCGElxv9DjHJjRHiVA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@tailwindcss/typography": {
			"version": "0.5.16",
			"resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.16.tgz",
			"integrity": "sha512-0wDLwCVF5V3x3b1SGXPCDcdsbDHMBe+lkFzBRaHeLvNi+nrrnZ1lA18u+OTWO8iSWU2GxUOCvlXtDuqftc1oiA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"lodash.castarray": "^4.4.0",
				"lodash.isplainobject": "^4.0.6",
				"lodash.merge": "^4.6.2",
				"postcss-selector-parser": "6.0.10"
			},
			"peerDependencies": {
				"tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1"
			}
		},
		"node_modules/@tootallnate/once": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
			"integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@types/body-parser": {
			"version": "1.19.5",
			"resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
			"integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
			"license": "MIT",
			"dependencies": {
				"@types/connect": "*",
				"@types/node": "*"
			}
		},
		"node_modules/@types/caseless": {
			"version": "0.12.5",
			"resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
			"integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/@types/connect": {
			"version": "3.4.38",
			"resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
			"integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
			"license": "MIT",
			"dependencies": {
				"@types/node": "*"
			}
		},
		"node_modules/@types/cookie": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
			"integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@types/estree": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
			"integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
			"license": "MIT"
		},
		"node_modules/@types/express": {
			"version": "4.17.21",
			"resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
			"integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
			"license": "MIT",
			"dependencies": {
				"@types/body-parser": "*",
				"@types/express-serve-static-core": "^4.17.33",
				"@types/qs": "*",
				"@types/serve-static": "*"
			}
		},
		"node_modules/@types/express-serve-static-core": {
			"version": "4.19.6",
			"resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
			"integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
			"license": "MIT",
			"dependencies": {
				"@types/node": "*",
				"@types/qs": "*",
				"@types/range-parser": "*",
				"@types/send": "*"
			}
		},
		"node_modules/@types/http-errors": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
			"integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
			"license": "MIT"
		},
		"node_modules/@types/jsonwebtoken": {
			"version": "9.0.9",
			"resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.9.tgz",
			"integrity": "sha512-uoe+GxEuHbvy12OUQct2X9JenKM3qAscquYymuQN4fMWG9DBQtykrQEFcAbVACF7qaLw9BePSodUL0kquqBJpQ==",
			"license": "MIT",
			"dependencies": {
				"@types/ms": "*",
				"@types/node": "*"
			}
		},
		"node_modules/@types/long": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
			"integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/@types/mime": {
			"version": "1.3.5",
			"resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
			"integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
			"license": "MIT"
		},
		"node_modules/@types/ms": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
			"integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
			"license": "MIT"
		},
		"node_modules/@types/node": {
			"version": "22.15.3",
			"resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.3.tgz",
			"integrity": "sha512-lX7HFZeHf4QG/J7tBZqrCAXwz9J5RD56Y6MpP0eJkka8p+K0RY/yBTW7CYFJ4VGCclxqOLKmiGP5juQc6MKgcw==",
			"license": "MIT",
			"dependencies": {
				"undici-types": "~6.21.0"
			}
		},
		"node_modules/@types/pg": {
			"version": "8.11.14",
			"resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.11.14.tgz",
			"integrity": "sha512-qyD11E5R3u0eJmd1lB0WnWKXJGA7s015nyARWljfz5DcX83TKAIlY+QrmvzQTsbIe+hkiFtkyL2gHC6qwF6Fbg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@types/node": "*",
				"pg-protocol": "*",
				"pg-types": "^4.0.1"
			}
		},
		"node_modules/@types/qs": {
			"version": "6.9.18",
			"resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.18.tgz",
			"integrity": "sha512-kK7dgTYDyGqS+e2Q4aK9X3D7q234CIZ1Bv0q/7Z5IwRDoADNU81xXJK/YVyLbLTZCoIwUoDoffFeF+p/eIklAA==",
			"license": "MIT"
		},
		"node_modules/@types/range-parser": {
			"version": "1.2.7",
			"resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
			"integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
			"license": "MIT"
		},
		"node_modules/@types/request": {
			"version": "2.48.12",
			"resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.12.tgz",
			"integrity": "sha512-G3sY+NpsA9jnwm0ixhAFQSJ3Q9JkpLZpJbI3GMv0mIAT0y3mRabYeINzal5WOChIiaTEGQYlHOKgkaM9EisWHw==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"@types/caseless": "*",
				"@types/node": "*",
				"@types/tough-cookie": "*",
				"form-data": "^2.5.0"
			}
		},
		"node_modules/@types/send": {
			"version": "0.17.4",
			"resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
			"integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
			"license": "MIT",
			"dependencies": {
				"@types/mime": "^1",
				"@types/node": "*"
			}
		},
		"node_modules/@types/serve-static": {
			"version": "1.15.7",
			"resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
			"integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
			"license": "MIT",
			"dependencies": {
				"@types/http-errors": "*",
				"@types/node": "*",
				"@types/send": "*"
			}
		},
		"node_modules/@types/tough-cookie": {
			"version": "4.0.5",
			"resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
			"integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/@types/trusted-types": {
			"version": "2.0.7",
			"resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
			"integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/@vitest/expect": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.1.2.tgz",
			"integrity": "sha512-O8hJgr+zREopCAqWl3uCVaOdqJwZ9qaDwUP7vy3Xigad0phZe9APxKhPcDNqYYi0rX5oMvwJMSCAXY2afqeTSA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/spy": "3.1.2",
				"@vitest/utils": "3.1.2",
				"chai": "^5.2.0",
				"tinyrainbow": "^2.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/mocker": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.1.2.tgz",
			"integrity": "sha512-kOtd6K2lc7SQ0mBqYv/wdGedlqPdM/B38paPY+OwJ1XiNi44w3Fpog82UfOibmHaV9Wod18A09I9SCKLyDMqgw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/spy": "3.1.2",
				"estree-walker": "^3.0.3",
				"magic-string": "^0.30.17"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			},
			"peerDependencies": {
				"msw": "^2.4.9",
				"vite": "^5.0.0 || ^6.0.0"
			},
			"peerDependenciesMeta": {
				"msw": {
					"optional": true
				},
				"vite": {
					"optional": true
				}
			}
		},
		"node_modules/@vitest/pretty-format": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.1.2.tgz",
			"integrity": "sha512-R0xAiHuWeDjTSB3kQ3OQpT8Rx3yhdOAIm/JM4axXxnG7Q/fS8XUwggv/A4xzbQA+drYRjzkMnpYnOGAc4oeq8w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"tinyrainbow": "^2.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/runner": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.1.2.tgz",
			"integrity": "sha512-bhLib9l4xb4sUMPXnThbnhX2Yi8OutBMA8Yahxa7yavQsFDtwY/jrUZwpKp2XH9DhRFJIeytlyGpXCqZ65nR+g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/utils": "3.1.2",
				"pathe": "^2.0.3"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/snapshot": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.1.2.tgz",
			"integrity": "sha512-Q1qkpazSF/p4ApZg1vfZSQ5Yw6OCQxVMVrLjslbLFA1hMDrT2uxtqMaw8Tc/jy5DLka1sNs1Y7rBcftMiaSH/Q==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/pretty-format": "3.1.2",
				"magic-string": "^0.30.17",
				"pathe": "^2.0.3"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/spy": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.1.2.tgz",
			"integrity": "sha512-OEc5fSXMws6sHVe4kOFyDSj/+4MSwst0ib4un0DlcYgQvRuYQ0+M2HyqGaauUMnjq87tmUaMNDxKQx7wNfVqPA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"tinyspy": "^3.0.2"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/utils": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.1.2.tgz",
			"integrity": "sha512-5GGd0ytZ7BH3H6JTj9Kw7Prn1Nbg0wZVrIvou+UWxm54d+WoXXgAgjFJ8wn3LdagWLFSEfpPeyYrByZaGEZHLg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/pretty-format": "3.1.2",
				"loupe": "^3.1.3",
				"tinyrainbow": "^2.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/abort-controller": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
			"integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"event-target-shim": "^5.0.0"
			},
			"engines": {
				"node": ">=6.5"
			}
		},
		"node_modules/acorn": {
			"version": "8.14.1",
			"resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
			"integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
			"license": "MIT",
			"bin": {
				"acorn": "bin/acorn"
			},
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/agent-base": {
			"version": "7.1.3",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
			"integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
			"license": "MIT",
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/ansi-regex": {
			"version": "6.1.0",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
			"integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/ansi-styles": {
			"version": "6.2.1",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/any-promise": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
			"integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/anymatch": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
			"integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"normalize-path": "^3.0.0",
				"picomatch": "^2.0.4"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/anymatch/node_modules/picomatch": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/jonschlinkert"
			}
		},
		"node_modules/arg": {
			"version": "5.0.2",
			"resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
			"integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/argparse": {
			"version": "1.0.10",
			"resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
			"integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
			"license": "MIT",
			"dependencies": {
				"sprintf-js": "~1.0.2"
			}
		},
		"node_modules/aria-query": {
			"version": "5.3.2",
			"resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
			"integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
			"license": "Apache-2.0",
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/arrify": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
			"integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/assertion-error": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-2.0.1.tgz",
			"integrity": "sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/async-retry": {
			"version": "1.3.3",
			"resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
			"integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"retry": "0.13.1"
			}
		},
		"node_modules/asynckit": {
			"version": "0.4.0",
			"resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
			"integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/autoprefixer": {
			"version": "10.4.21",
			"resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
			"integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/autoprefixer"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"browserslist": "^4.24.4",
				"caniuse-lite": "^1.0.30001702",
				"fraction.js": "^4.3.7",
				"normalize-range": "^0.1.2",
				"picocolors": "^1.1.1",
				"postcss-value-parser": "^4.2.0"
			},
			"bin": {
				"autoprefixer": "bin/autoprefixer"
			},
			"engines": {
				"node": "^10 || ^12 || >=14"
			},
			"peerDependencies": {
				"postcss": "^8.1.0"
			}
		},
		"node_modules/axobject-query": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
			"integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
			"license": "Apache-2.0",
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/balanced-match": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
			"integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/base64-js": {
			"version": "1.5.1",
			"resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
			"integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"license": "MIT"
		},
		"node_modules/bignumber.js": {
			"version": "9.3.0",
			"resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.0.tgz",
			"integrity": "sha512-EM7aMFTXbptt/wZdMlBv2t8IViwQL+h6SLHosp8Yf0dqJMTnY6iL32opnAB6kAdL0SZPuvcAzFr31o0c/R3/RA==",
			"license": "MIT",
			"engines": {
				"node": "*"
			}
		},
		"node_modules/binary-extensions": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
			"integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/brace-expansion": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
			"integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"balanced-match": "^1.0.0"
			}
		},
		"node_modules/braces": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
			"integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"fill-range": "^7.1.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/browserslist": {
			"version": "4.24.4",
			"resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
			"integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/browserslist"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"caniuse-lite": "^1.0.30001688",
				"electron-to-chromium": "^1.5.73",
				"node-releases": "^2.0.19",
				"update-browserslist-db": "^1.1.1"
			},
			"bin": {
				"browserslist": "cli.js"
			},
			"engines": {
				"node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
			}
		},
		"node_modules/buffer-equal-constant-time": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
			"integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
			"license": "BSD-3-Clause"
		},
		"node_modules/cac": {
			"version": "6.7.14",
			"resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
			"integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/call-bind-apply-helpers": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
			"integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"es-errors": "^1.3.0",
				"function-bind": "^1.1.2"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/camelcase-css": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
			"integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/caniuse-lite": {
			"version": "1.0.30001716",
			"resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001716.tgz",
			"integrity": "sha512-49/c1+x3Kwz7ZIWt+4DvK3aMJy9oYXXG6/97JKsnjdCk/6n9vVyWL8NAwVt95Lwt9eigI10Hl782kDfZUUlRXw==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/caniuse-lite"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "CC-BY-4.0"
		},
		"node_modules/chai": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/chai/-/chai-5.2.0.tgz",
			"integrity": "sha512-mCuXncKXk5iCLhfhwTc0izo0gtEmpz5CtG2y8GiOINBlMVS6v8TMRc5TaLWKS6692m9+dVVfzgeVxR5UxWHTYw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"assertion-error": "^2.0.1",
				"check-error": "^2.1.1",
				"deep-eql": "^5.0.1",
				"loupe": "^3.1.0",
				"pathval": "^2.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/chart.js": {
			"version": "4.4.9",
			"resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.9.tgz",
			"integrity": "sha512-EyZ9wWKgpAU0fLJ43YAEIF8sr5F2W3LqbS40ZJyHIner2lY14ufqv2VMp69MAiZ2rpwxEUxEhIH/0U3xyRynxg==",
			"license": "MIT",
			"dependencies": {
				"@kurkle/color": "^0.3.0"
			},
			"engines": {
				"pnpm": ">=8"
			}
		},
		"node_modules/chartjs-adapter-date-fns": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/chartjs-adapter-date-fns/-/chartjs-adapter-date-fns-3.0.0.tgz",
			"integrity": "sha512-Rs3iEB3Q5pJ973J93OBTpnP7qoGwvq3nUnoMdtxO+9aoJof7UFcRbWcIDteXuYd1fgAvct/32T9qaLyLuZVwCg==",
			"license": "MIT",
			"peerDependencies": {
				"chart.js": ">=2.8.0",
				"date-fns": ">=2.0.0"
			}
		},
		"node_modules/check-error": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
			"integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 16"
			}
		},
		"node_modules/chokidar": {
			"version": "4.0.3",
			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
			"integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"readdirp": "^4.0.1"
			},
			"engines": {
				"node": ">= 14.16.0"
			},
			"funding": {
				"url": "https://paulmillr.com/funding/"
			}
		},
		"node_modules/cliui": {
			"version": "8.0.1",
			"resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
			"integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
			"license": "ISC",
			"dependencies": {
				"string-width": "^4.2.0",
				"strip-ansi": "^6.0.1",
				"wrap-ansi": "^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/cliui/node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/cliui/node_modules/ansi-styles": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
			"integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
			"license": "MIT",
			"dependencies": {
				"color-convert": "^2.0.1"
			},
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/cliui/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
			"license": "MIT"
		},
		"node_modules/cliui/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"license": "MIT",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/cliui/node_modules/strip-ansi": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/cliui/node_modules/wrap-ansi": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
			"integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
			"license": "MIT",
			"dependencies": {
				"ansi-styles": "^4.0.0",
				"string-width": "^4.1.0",
				"strip-ansi": "^6.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/clsx": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
			"integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/color-convert": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
			"integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
			"license": "MIT",
			"dependencies": {
				"color-name": "~1.1.4"
			},
			"engines": {
				"node": ">=7.0.0"
			}
		},
		"node_modules/color-name": {
			"version": "1.1.4",
			"resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
			"integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
			"license": "MIT"
		},
		"node_modules/combined-stream": {
			"version": "1.0.8",
			"resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
			"integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"delayed-stream": "~1.0.0"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/commander": {
			"version": "8.3.0",
			"resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
			"integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
			"license": "MIT",
			"engines": {
				"node": ">= 12"
			}
		},
		"node_modules/cookie": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
			"integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/cross-spawn": {
			"version": "7.0.6",
			"resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
			"integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"path-key": "^3.1.0",
				"shebang-command": "^2.0.0",
				"which": "^2.0.1"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/cssesc": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
			"integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
			"dev": true,
			"license": "MIT",
			"bin": {
				"cssesc": "bin/cssesc"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/date-fns": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
			"integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
			"license": "MIT",
			"peer": true,
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/kossnocorp"
			}
		},
		"node_modules/debug": {
			"version": "4.4.0",
			"resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
			"integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
			"license": "MIT",
			"dependencies": {
				"ms": "^2.1.3"
			},
			"engines": {
				"node": ">=6.0"
			},
			"peerDependenciesMeta": {
				"supports-color": {
					"optional": true
				}
			}
		},
		"node_modules/dedent-js": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/dedent-js/-/dedent-js-1.0.1.tgz",
			"integrity": "sha512-OUepMozQULMLUmhxS95Vudo0jb0UchLimi3+pQ2plj61Fcy8axbP9hbiD4Sz6DPqn6XG3kfmziVfQ1rSys5AJQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/deep-eql": {
			"version": "5.0.2",
			"resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
			"integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/deepmerge": {
			"version": "4.3.1",
			"resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
			"integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/delayed-stream": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
			"integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/detect-libc": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
			"integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
			"dev": true,
			"license": "Apache-2.0",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/devalue": {
			"version": "5.1.1",
			"resolved": "https://registry.npmjs.org/devalue/-/devalue-5.1.1.tgz",
			"integrity": "sha512-maua5KUiapvEwiEAe+XnlZ3Rh0GD+qI1J/nb9vrJc3muPXvcF/8gXYTWF76+5DAqHyDUtOIImEuo0YKE9mshVw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/didyoumean": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
			"integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
			"dev": true,
			"license": "Apache-2.0"
		},
		"node_modules/dlv": {
			"version": "1.1.3",
			"resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
			"integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/dompurify": {
			"version": "3.2.5",
			"resolved": "https://registry.npmjs.org/dompurify/-/dompurify-3.2.5.tgz",
			"integrity": "sha512-mLPd29uoRe9HpvwP2TxClGQBzGXeEC/we/q+bFlmPPmj2p2Ugl3r6ATu/UU1v77DXNcehiBg9zsr1dREyA/dJQ==",
			"license": "(MPL-2.0 OR Apache-2.0)",
			"optionalDependencies": {
				"@types/trusted-types": "^2.0.7"
			}
		},
		"node_modules/dunder-proto": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
			"integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"call-bind-apply-helpers": "^1.0.1",
				"es-errors": "^1.3.0",
				"gopd": "^1.2.0"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/duplexify": {
			"version": "4.1.3",
			"resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
			"integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"end-of-stream": "^1.4.1",
				"inherits": "^2.0.3",
				"readable-stream": "^3.1.1",
				"stream-shift": "^1.0.2"
			}
		},
		"node_modules/eastasianwidth": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
			"integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/ecdsa-sig-formatter": {
			"version": "1.0.11",
			"resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
			"integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/electron-to-chromium": {
			"version": "1.5.149",
			"resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.149.tgz",
			"integrity": "sha512-UyiO82eb9dVOx8YO3ajDf9jz2kKyt98DEITRdeLPstOEuTlLzDA4Gyq5K9he71TQziU5jUVu2OAu5N48HmQiyQ==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/emoji-regex": {
			"version": "9.2.2",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
			"integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/end-of-stream": {
			"version": "1.4.4",
			"resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
			"integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"once": "^1.4.0"
			}
		},
		"node_modules/enhanced-resolve": {
			"version": "5.18.1",
			"resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.1.tgz",
			"integrity": "sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"graceful-fs": "^4.2.4",
				"tapable": "^2.2.0"
			},
			"engines": {
				"node": ">=10.13.0"
			}
		},
		"node_modules/entities": {
			"version": "4.5.0",
			"resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
			"integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
			"license": "BSD-2-Clause",
			"engines": {
				"node": ">=0.12"
			},
			"funding": {
				"url": "https://github.com/fb55/entities?sponsor=1"
			}
		},
		"node_modules/es-define-property": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
			"integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/es-errors": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
			"integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/es-module-lexer": {
			"version": "1.7.0",
			"resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
			"integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/es-object-atoms": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
			"integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"es-errors": "^1.3.0"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/es-set-tostringtag": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
			"integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"es-errors": "^1.3.0",
				"get-intrinsic": "^1.2.6",
				"has-tostringtag": "^1.0.2",
				"hasown": "^2.0.2"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/esbuild": {
			"version": "0.25.3",
			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.3.tgz",
			"integrity": "sha512-qKA6Pvai73+M2FtftpNKRxJ78GIjmFXFxd/1DVBqGo/qNhLSfv+G12n9pNoWdytJC8U00TrViOwpjT0zgqQS8Q==",
			"dev": true,
			"hasInstallScript": true,
			"license": "MIT",
			"bin": {
				"esbuild": "bin/esbuild"
			},
			"engines": {
				"node": ">=18"
			},
			"optionalDependencies": {
				"@esbuild/aix-ppc64": "0.25.3",
				"@esbuild/android-arm": "0.25.3",
				"@esbuild/android-arm64": "0.25.3",
				"@esbuild/android-x64": "0.25.3",
				"@esbuild/darwin-arm64": "0.25.3",
				"@esbuild/darwin-x64": "0.25.3",
				"@esbuild/freebsd-arm64": "0.25.3",
				"@esbuild/freebsd-x64": "0.25.3",
				"@esbuild/linux-arm": "0.25.3",
				"@esbuild/linux-arm64": "0.25.3",
				"@esbuild/linux-ia32": "0.25.3",
				"@esbuild/linux-loong64": "0.25.3",
				"@esbuild/linux-mips64el": "0.25.3",
				"@esbuild/linux-ppc64": "0.25.3",
				"@esbuild/linux-riscv64": "0.25.3",
				"@esbuild/linux-s390x": "0.25.3",
				"@esbuild/linux-x64": "0.25.3",
				"@esbuild/netbsd-arm64": "0.25.3",
				"@esbuild/netbsd-x64": "0.25.3",
				"@esbuild/openbsd-arm64": "0.25.3",
				"@esbuild/openbsd-x64": "0.25.3",
				"@esbuild/sunos-x64": "0.25.3",
				"@esbuild/win32-arm64": "0.25.3",
				"@esbuild/win32-ia32": "0.25.3",
				"@esbuild/win32-x64": "0.25.3"
			}
		},
		"node_modules/escalade": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
			"integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/esm-env": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/esm-env/-/esm-env-1.2.2.tgz",
			"integrity": "sha512-Epxrv+Nr/CaL4ZcFGPJIYLWFom+YeV1DqMLHJoEd9SYRxNbaFruBwfEX/kkHUJf55j2+TUbmDcmuilbP1TmXHA==",
			"license": "MIT"
		},
		"node_modules/esprima": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
			"integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
			"license": "BSD-2-Clause",
			"bin": {
				"esparse": "bin/esparse.js",
				"esvalidate": "bin/esvalidate.js"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/esrap": {
			"version": "1.4.6",
			"resolved": "https://registry.npmjs.org/esrap/-/esrap-1.4.6.tgz",
			"integrity": "sha512-F/D2mADJ9SHY3IwksD4DAXjTt7qt7GWUf3/8RhCNWmC/67tyb55dpimHmy7EplakFaflV0R/PC+fdSPqrRHAQw==",
			"license": "MIT",
			"dependencies": {
				"@jridgewell/sourcemap-codec": "^1.4.15"
			}
		},
		"node_modules/estree-walker": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
			"integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@types/estree": "^1.0.0"
			}
		},
		"node_modules/event-target-shim": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
			"integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/expect-type": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/expect-type/-/expect-type-1.2.1.tgz",
			"integrity": "sha512-/kP8CAwxzLVEeFrMm4kMmy4CCDlpipyA7MYLVrdJIkV0fYF0UaigQHRsxHiuY/GEea+bh4KSv3TIlgr+2UL6bw==",
			"dev": true,
			"license": "Apache-2.0",
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/extend": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
			"integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
			"license": "MIT"
		},
		"node_modules/extend-shallow": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
			"integrity": "sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==",
			"license": "MIT",
			"dependencies": {
				"is-extendable": "^0.1.0"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/farmhash-modern": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/farmhash-modern/-/farmhash-modern-1.1.0.tgz",
			"integrity": "sha512-6ypT4XfgqJk/F3Yuv4SX26I3doUjt0GTG4a+JgWxXQpxXzTBq8fPUeGHfcYMMDPHJHm3yPOSjaeBwBGAHWXCdA==",
			"license": "MIT",
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/fast-deep-equal": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
			"integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/fast-glob": {
			"version": "3.3.3",
			"resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
			"integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@nodelib/fs.stat": "^2.0.2",
				"@nodelib/fs.walk": "^1.2.3",
				"glob-parent": "^5.1.2",
				"merge2": "^1.3.0",
				"micromatch": "^4.0.8"
			},
			"engines": {
				"node": ">=8.6.0"
			}
		},
		"node_modules/fast-glob/node_modules/glob-parent": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"is-glob": "^4.0.1"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/fast-xml-parser": {
			"version": "4.5.3",
			"resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.5.3.tgz",
			"integrity": "sha512-RKihhV+SHsIUGXObeVy9AXiBbFwkVk7Syp8XgwN5U3JV416+Gwp/GO9i0JYKmikykgz/UHRrrV4ROuZEo/T0ig==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/NaturalIntelligence"
				}
			],
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"strnum": "^1.1.1"
			},
			"bin": {
				"fxparser": "src/cli/cli.js"
			}
		},
		"node_modules/fastq": {
			"version": "1.19.1",
			"resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
			"integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"reusify": "^1.0.4"
			}
		},
		"node_modules/faye-websocket": {
			"version": "0.11.4",
			"resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
			"integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
			"license": "Apache-2.0",
			"dependencies": {
				"websocket-driver": ">=0.5.1"
			},
			"engines": {
				"node": ">=0.8.0"
			}
		},
		"node_modules/fdir": {
			"version": "6.4.4",
			"resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
			"integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
			"dev": true,
			"license": "MIT",
			"peerDependencies": {
				"picomatch": "^3 || ^4"
			},
			"peerDependenciesMeta": {
				"picomatch": {
					"optional": true
				}
			}
		},
		"node_modules/fill-range": {
			"version": "7.1.1",
			"resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
			"integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"to-regex-range": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/firebase": {
			"version": "10.14.1",
			"resolved": "https://registry.npmjs.org/firebase/-/firebase-10.14.1.tgz",
			"integrity": "sha512-0KZxU+Ela9rUCULqFsUUOYYkjh7OM1EWdIfG6///MtXd0t2/uUIf0iNV5i0KariMhRQ5jve/OY985nrAXFaZeQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/analytics": "0.10.8",
				"@firebase/analytics-compat": "0.2.14",
				"@firebase/app": "0.10.13",
				"@firebase/app-check": "0.8.8",
				"@firebase/app-check-compat": "0.3.15",
				"@firebase/app-compat": "0.2.43",
				"@firebase/app-types": "0.9.2",
				"@firebase/auth": "1.7.9",
				"@firebase/auth-compat": "0.5.14",
				"@firebase/data-connect": "0.1.0",
				"@firebase/database": "1.0.8",
				"@firebase/database-compat": "1.0.8",
				"@firebase/firestore": "4.7.3",
				"@firebase/firestore-compat": "0.3.38",
				"@firebase/functions": "0.11.8",
				"@firebase/functions-compat": "0.3.14",
				"@firebase/installations": "0.6.9",
				"@firebase/installations-compat": "0.2.9",
				"@firebase/messaging": "0.12.12",
				"@firebase/messaging-compat": "0.2.12",
				"@firebase/performance": "0.6.9",
				"@firebase/performance-compat": "0.2.9",
				"@firebase/remote-config": "0.4.9",
				"@firebase/remote-config-compat": "0.2.9",
				"@firebase/storage": "0.13.2",
				"@firebase/storage-compat": "0.3.12",
				"@firebase/util": "1.10.0",
				"@firebase/vertexai-preview": "0.0.4"
			}
		},
		"node_modules/firebase-admin": {
			"version": "13.3.0",
			"resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-13.3.0.tgz",
			"integrity": "sha512-MFxv86Aw2rjM/TpKwU86jN7YUFfN1jy6mREYZTLL1aW1rCpZFi4c70b9U12J9Xa4RbJkiXpWBAwth9IVSqR91A==",
			"license": "Apache-2.0",
			"dependencies": {
				"@fastify/busboy": "^3.0.0",
				"@firebase/database-compat": "^2.0.0",
				"@firebase/database-types": "^1.0.6",
				"@types/node": "^22.8.7",
				"farmhash-modern": "^1.1.0",
				"google-auth-library": "^9.14.2",
				"jsonwebtoken": "^9.0.0",
				"jwks-rsa": "^3.1.0",
				"node-forge": "^1.3.1",
				"uuid": "^11.0.2"
			},
			"engines": {
				"node": ">=18"
			},
			"optionalDependencies": {
				"@google-cloud/firestore": "^7.11.0",
				"@google-cloud/storage": "^7.14.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/app-check-interop-types": {
			"version": "0.3.3",
			"resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.3.tgz",
			"integrity": "sha512-gAlxfPLT2j8bTI/qfe3ahl2I2YcBQ8cFIBdhAQA4I2f3TndcO+22YizyGYuttLHPQEpWkhmpFW60VCFEPg4g5A==",
			"license": "Apache-2.0"
		},
		"node_modules/firebase-admin/node_modules/@firebase/app-types": {
			"version": "0.9.3",
			"resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.3.tgz",
			"integrity": "sha512-kRVpIl4vVGJ4baogMDINbyrIOtOxqhkZQg4jTq3l8Lw6WSk0xfpEYzezFu+Kl4ve4fbPl79dvwRtaFqAC/ucCw==",
			"license": "Apache-2.0"
		},
		"node_modules/firebase-admin/node_modules/@firebase/auth-interop-types": {
			"version": "0.2.4",
			"resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.4.tgz",
			"integrity": "sha512-JPgcXKCuO+CWqGDnigBtvo09HeBs5u/Ktc2GaFj2m01hLarbxthLNm7Fk8iOP1aqAtXV+fnnGj7U28xmk7IwVA==",
			"license": "Apache-2.0"
		},
		"node_modules/firebase-admin/node_modules/@firebase/component": {
			"version": "0.6.13",
			"resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.13.tgz",
			"integrity": "sha512-I/Eg1NpAtZ8AAfq8mpdfXnuUpcLxIDdCDtTzWSh+FXnp/9eCKJ3SNbOCKrUCyhLzNa2SiPJYruei0sxVjaOTeg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/util": "1.11.0",
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/database": {
			"version": "1.0.14",
			"resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.14.tgz",
			"integrity": "sha512-9nxYtkHAG02/Nh2Ssms1T4BbWPPjiwohCvkHDUl4hNxnki1kPgsLo5xe9kXNzbacOStmVys+RUXvwzynQSKmUQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-check-interop-types": "0.3.3",
				"@firebase/auth-interop-types": "0.2.4",
				"@firebase/component": "0.6.13",
				"@firebase/logger": "0.4.4",
				"@firebase/util": "1.11.0",
				"faye-websocket": "0.11.4",
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/database-compat": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-2.0.5.tgz",
			"integrity": "sha512-CNf1UbvWh6qIaSf4sn6sx2DTDz/em/D7QxULH1LTxxDQHr9+CeYGvlAqrKnk4ZH0P0eIHyQFQU7RwkUJI0B9gQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/component": "0.6.13",
				"@firebase/database": "1.0.14",
				"@firebase/database-types": "1.0.10",
				"@firebase/logger": "0.4.4",
				"@firebase/util": "1.11.0",
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/database-types": {
			"version": "1.0.10",
			"resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.10.tgz",
			"integrity": "sha512-mH6RC1E9/Pv8jf1/p+M8YFTX+iu+iHDN89hecvyO7wHrI4R1V0TXjxOHvX3nLJN1sfh0CWG6CHZ0VlrSmK/cwg==",
			"license": "Apache-2.0",
			"dependencies": {
				"@firebase/app-types": "0.9.3",
				"@firebase/util": "1.11.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/logger": {
			"version": "0.4.4",
			"resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.4.tgz",
			"integrity": "sha512-mH0PEh1zoXGnaR8gD1DeGeNZtWFKbnz9hDO91dIml3iou1gpOnLqXQ2dJfB71dj6dpmUjcQ6phY3ZZJbjErr9g==",
			"license": "Apache-2.0",
			"dependencies": {
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/firebase-admin/node_modules/@firebase/util": {
			"version": "1.11.0",
			"resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.11.0.tgz",
			"integrity": "sha512-PzSrhIr++KI6y4P6C/IdgBNMkEx0Ex6554/cYd0Hm+ovyFSJtJXqb/3OSIdnBoa2cpwZT1/GW56EmRc5qEc5fQ==",
			"hasInstallScript": true,
			"license": "Apache-2.0",
			"dependencies": {
				"tslib": "^2.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/foreground-child": {
			"version": "3.3.1",
			"resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
			"integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"cross-spawn": "^7.0.6",
				"signal-exit": "^4.0.1"
			},
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/form-data": {
			"version": "2.5.3",
			"resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.3.tgz",
			"integrity": "sha512-XHIrMD0NpDrNM/Ckf7XJiBbLl57KEhT3+i3yY+eWm+cqYZJQTZrKo8Y8AWKnuV5GT4scfuUGt9LzNoIx3dU1nQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"asynckit": "^0.4.0",
				"combined-stream": "^1.0.8",
				"es-set-tostringtag": "^2.1.0",
				"mime-types": "^2.1.35",
				"safe-buffer": "^5.2.1"
			},
			"engines": {
				"node": ">= 0.12"
			}
		},
		"node_modules/fraction.js": {
			"version": "4.3.7",
			"resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
			"integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": "*"
			},
			"funding": {
				"type": "patreon",
				"url": "https://github.com/sponsors/rawify"
			}
		},
		"node_modules/fsevents": {
			"version": "2.3.3",
			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
			"integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
			"dev": true,
			"hasInstallScript": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
			}
		},
		"node_modules/function-bind": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
			"integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
			"devOptional": true,
			"license": "MIT",
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/functional-red-black-tree": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
			"integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/gaxios": {
			"version": "6.7.1",
			"resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
			"integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
			"license": "Apache-2.0",
			"dependencies": {
				"extend": "^3.0.2",
				"https-proxy-agent": "^7.0.1",
				"is-stream": "^2.0.0",
				"node-fetch": "^2.6.9",
				"uuid": "^9.0.1"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/gaxios/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"license": "MIT",
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/gcp-metadata": {
			"version": "6.1.1",
			"resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
			"integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
			"license": "Apache-2.0",
			"dependencies": {
				"gaxios": "^6.1.1",
				"google-logging-utils": "^0.0.2",
				"json-bigint": "^1.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/get-caller-file": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
			"integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
			"license": "ISC",
			"engines": {
				"node": "6.* || 8.* || >= 10.*"
			}
		},
		"node_modules/get-intrinsic": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
			"integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"call-bind-apply-helpers": "^1.0.2",
				"es-define-property": "^1.0.1",
				"es-errors": "^1.3.0",
				"es-object-atoms": "^1.1.1",
				"function-bind": "^1.1.2",
				"get-proto": "^1.0.1",
				"gopd": "^1.2.0",
				"has-symbols": "^1.1.0",
				"hasown": "^2.0.2",
				"math-intrinsics": "^1.1.0"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/get-proto": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
			"integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"dunder-proto": "^1.0.1",
				"es-object-atoms": "^1.0.0"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/glob": {
			"version": "10.4.5",
			"resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
			"integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"foreground-child": "^3.1.0",
				"jackspeak": "^3.1.2",
				"minimatch": "^9.0.4",
				"minipass": "^7.1.2",
				"package-json-from-dist": "^1.0.0",
				"path-scurry": "^1.11.1"
			},
			"bin": {
				"glob": "dist/esm/bin.mjs"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/glob-parent": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
			"integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"is-glob": "^4.0.3"
			},
			"engines": {
				"node": ">=10.13.0"
			}
		},
		"node_modules/google-auth-library": {
			"version": "9.15.1",
			"resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
			"integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
			"license": "Apache-2.0",
			"dependencies": {
				"base64-js": "^1.3.0",
				"ecdsa-sig-formatter": "^1.0.11",
				"gaxios": "^6.1.1",
				"gcp-metadata": "^6.1.0",
				"gtoken": "^7.0.0",
				"jws": "^4.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/google-gax": {
			"version": "4.6.0",
			"resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.6.0.tgz",
			"integrity": "sha512-zKKLeLfcYBVOzzM48Brtn4EQkKcTli9w6c1ilzFK2NbJvcd4ATD8/XqFExImvE/W5IwMlKKwa5qqVufji3ioNQ==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"@grpc/grpc-js": "^1.10.9",
				"@grpc/proto-loader": "^0.7.13",
				"@types/long": "^4.0.0",
				"abort-controller": "^3.0.0",
				"duplexify": "^4.0.0",
				"google-auth-library": "^9.3.0",
				"node-fetch": "^2.7.0",
				"object-hash": "^3.0.0",
				"proto3-json-serializer": "^2.0.2",
				"protobufjs": "^7.3.2",
				"retry-request": "^7.0.0",
				"uuid": "^9.0.1"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/google-gax/node_modules/@grpc/grpc-js": {
			"version": "1.13.3",
			"resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.3.tgz",
			"integrity": "sha512-FTXHdOoPbZrBjlVLHuKbDZnsTxXv2BlHF57xw6LuThXacXvtkahEPED0CKMk6obZDf65Hv4k3z62eyPNpvinIg==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"@grpc/proto-loader": "^0.7.13",
				"@js-sdsl/ordered-map": "^4.4.2"
			},
			"engines": {
				"node": ">=12.10.0"
			}
		},
		"node_modules/google-gax/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"license": "MIT",
			"optional": true,
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/google-logging-utils": {
			"version": "0.0.2",
			"resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
			"integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
			"license": "Apache-2.0",
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/gopd": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
			"integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/graceful-fs": {
			"version": "4.2.11",
			"resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
			"integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/gray-matter": {
			"version": "4.0.3",
			"resolved": "https://registry.npmjs.org/gray-matter/-/gray-matter-4.0.3.tgz",
			"integrity": "sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==",
			"license": "MIT",
			"dependencies": {
				"js-yaml": "^3.13.1",
				"kind-of": "^6.0.2",
				"section-matter": "^1.0.0",
				"strip-bom-string": "^1.0.0"
			},
			"engines": {
				"node": ">=6.0"
			}
		},
		"node_modules/gtoken": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
			"integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
			"license": "MIT",
			"dependencies": {
				"gaxios": "^6.0.0",
				"jws": "^4.0.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/has-symbols": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
			"integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/has-tostringtag": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
			"integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"has-symbols": "^1.0.3"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/hasown": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
			"integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
			"devOptional": true,
			"license": "MIT",
			"dependencies": {
				"function-bind": "^1.1.2"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/highlight.js": {
			"version": "11.11.1",
			"resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-11.11.1.tgz",
			"integrity": "sha512-Xwwo44whKBVCYoliBQwaPvtd/2tYFkRQtXDWj1nackaV2JPXx3L0+Jvd8/qCJ2p+ML0/XVkJ2q+Mr+UVdpJK5w==",
			"license": "BSD-3-Clause",
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/html-entities": {
			"version": "2.6.0",
			"resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
			"integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/mdevils"
				},
				{
					"type": "patreon",
					"url": "https://patreon.com/mdevils"
				}
			],
			"license": "MIT",
			"optional": true
		},
		"node_modules/http-parser-js": {
			"version": "0.5.10",
			"resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
			"integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
			"license": "MIT"
		},
		"node_modules/http-proxy-agent": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
			"integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"@tootallnate/once": "2",
				"agent-base": "6",
				"debug": "4"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/http-proxy-agent/node_modules/agent-base": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
			"integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"debug": "4"
			},
			"engines": {
				"node": ">= 6.0.0"
			}
		},
		"node_modules/https-proxy-agent": {
			"version": "7.0.6",
			"resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
			"integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
			"license": "MIT",
			"dependencies": {
				"agent-base": "^7.1.2",
				"debug": "4"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/idb": {
			"version": "7.1.1",
			"resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
			"integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
			"license": "ISC"
		},
		"node_modules/import-meta-resolve": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/import-meta-resolve/-/import-meta-resolve-4.1.0.tgz",
			"integrity": "sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==",
			"dev": true,
			"license": "MIT",
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/wooorm"
			}
		},
		"node_modules/inherits": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
			"integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
			"license": "ISC",
			"optional": true
		},
		"node_modules/is-binary-path": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
			"integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"binary-extensions": "^2.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/is-core-module": {
			"version": "2.16.1",
			"resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
			"integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"hasown": "^2.0.2"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/is-extendable": {
			"version": "0.1.1",
			"resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
			"integrity": "sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-extglob": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
			"integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/is-glob": {
			"version": "4.0.3",
			"resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
			"integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"is-extglob": "^2.1.1"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-number": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
			"integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.12.0"
			}
		},
		"node_modules/is-reference": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-3.0.3.tgz",
			"integrity": "sha512-ixkJoqQvAP88E6wLydLGGqCJsrFUnqoH6HnaczB8XmDH1oaWU+xxdptvikTgaEhtZ53Ky6YXiBuUI2WXLMCwjw==",
			"license": "MIT",
			"dependencies": {
				"@types/estree": "^1.0.6"
			}
		},
		"node_modules/is-stream": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
			"integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
			"license": "MIT",
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/isexe": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
			"integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/jackspeak": {
			"version": "3.4.3",
			"resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
			"integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
			"dev": true,
			"license": "BlueOak-1.0.0",
			"dependencies": {
				"@isaacs/cliui": "^8.0.2"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			},
			"optionalDependencies": {
				"@pkgjs/parseargs": "^0.11.0"
			}
		},
		"node_modules/jiti": {
			"version": "2.4.2",
			"resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
			"integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
			"dev": true,
			"license": "MIT",
			"bin": {
				"jiti": "lib/jiti-cli.mjs"
			}
		},
		"node_modules/jose": {
			"version": "4.15.9",
			"resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
			"integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
			"license": "MIT",
			"funding": {
				"url": "https://github.com/sponsors/panva"
			}
		},
		"node_modules/js-yaml": {
			"version": "3.14.1",
			"resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
			"integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
			"license": "MIT",
			"dependencies": {
				"argparse": "^1.0.7",
				"esprima": "^4.0.0"
			},
			"bin": {
				"js-yaml": "bin/js-yaml.js"
			}
		},
		"node_modules/json-bigint": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
			"integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
			"license": "MIT",
			"dependencies": {
				"bignumber.js": "^9.0.0"
			}
		},
		"node_modules/jsonwebtoken": {
			"version": "9.0.2",
			"resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
			"integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
			"license": "MIT",
			"dependencies": {
				"jws": "^3.2.2",
				"lodash.includes": "^4.3.0",
				"lodash.isboolean": "^3.0.3",
				"lodash.isinteger": "^4.0.4",
				"lodash.isnumber": "^3.0.3",
				"lodash.isplainobject": "^4.0.6",
				"lodash.isstring": "^4.0.1",
				"lodash.once": "^4.0.0",
				"ms": "^2.1.1",
				"semver": "^7.5.4"
			},
			"engines": {
				"node": ">=12",
				"npm": ">=6"
			}
		},
		"node_modules/jsonwebtoken/node_modules/jwa": {
			"version": "1.4.1",
			"resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
			"integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
			"license": "MIT",
			"dependencies": {
				"buffer-equal-constant-time": "1.0.1",
				"ecdsa-sig-formatter": "1.0.11",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/jsonwebtoken/node_modules/jws": {
			"version": "3.2.2",
			"resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
			"integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
			"license": "MIT",
			"dependencies": {
				"jwa": "^1.4.1",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/jwa": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
			"integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
			"license": "MIT",
			"dependencies": {
				"buffer-equal-constant-time": "1.0.1",
				"ecdsa-sig-formatter": "1.0.11",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/jwks-rsa": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.2.0.tgz",
			"integrity": "sha512-PwchfHcQK/5PSydeKCs1ylNym0w/SSv8a62DgHJ//7x2ZclCoinlsjAfDxAAbpoTPybOum/Jgy+vkvMmKz89Ww==",
			"license": "MIT",
			"dependencies": {
				"@types/express": "^4.17.20",
				"@types/jsonwebtoken": "^9.0.4",
				"debug": "^4.3.4",
				"jose": "^4.15.4",
				"limiter": "^1.1.5",
				"lru-memoizer": "^2.2.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/jws": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
			"integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
			"license": "MIT",
			"dependencies": {
				"jwa": "^2.0.0",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/katex": {
			"version": "0.16.22",
			"resolved": "https://registry.npmjs.org/katex/-/katex-0.16.22.tgz",
			"integrity": "sha512-XCHRdUw4lf3SKBaJe4EvgqIuWwkPSo9XoeO8GjQW94Bp7TWv9hNhzZjZ+OH9yf1UmLygb7DIT5GSFQiyt16zYg==",
			"funding": [
				"https://opencollective.com/katex",
				"https://github.com/sponsors/katex"
			],
			"license": "MIT",
			"dependencies": {
				"commander": "^8.3.0"
			},
			"bin": {
				"katex": "cli.js"
			}
		},
		"node_modules/kind-of": {
			"version": "6.0.3",
			"resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
			"integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/kleur": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
			"integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/lightningcss": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.29.2.tgz",
			"integrity": "sha512-6b6gd/RUXKaw5keVdSEtqFVdzWnU5jMxTUjA2bVcMNPLwSQ08Sv/UodBVtETLCn7k4S1Ibxwh7k68IwLZPgKaA==",
			"dev": true,
			"license": "MPL-2.0",
			"dependencies": {
				"detect-libc": "^2.0.3"
			},
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			},
			"optionalDependencies": {
				"lightningcss-darwin-arm64": "1.29.2",
				"lightningcss-darwin-x64": "1.29.2",
				"lightningcss-freebsd-x64": "1.29.2",
				"lightningcss-linux-arm-gnueabihf": "1.29.2",
				"lightningcss-linux-arm64-gnu": "1.29.2",
				"lightningcss-linux-arm64-musl": "1.29.2",
				"lightningcss-linux-x64-gnu": "1.29.2",
				"lightningcss-linux-x64-musl": "1.29.2",
				"lightningcss-win32-arm64-msvc": "1.29.2",
				"lightningcss-win32-x64-msvc": "1.29.2"
			}
		},
		"node_modules/lightningcss-darwin-arm64": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.29.2.tgz",
			"integrity": "sha512-cK/eMabSViKn/PG8U/a7aCorpeKLMlK0bQeNHmdb7qUnBkNPnL+oV5DjJUo0kqWsJUapZsM4jCfYItbqBDvlcA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-darwin-x64": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.29.2.tgz",
			"integrity": "sha512-j5qYxamyQw4kDXX5hnnCKMf3mLlHvG44f24Qyi2965/Ycz829MYqjrVg2H8BidybHBp9kom4D7DR5VqCKDXS0w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-freebsd-x64": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.29.2.tgz",
			"integrity": "sha512-wDk7M2tM78Ii8ek9YjnY8MjV5f5JN2qNVO+/0BAGZRvXKtQrBC4/cn4ssQIpKIPP44YXw6gFdpUF+Ps+RGsCwg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-linux-arm-gnueabihf": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.29.2.tgz",
			"integrity": "sha512-IRUrOrAF2Z+KExdExe3Rz7NSTuuJ2HvCGlMKoquK5pjvo2JY4Rybr+NrKnq0U0hZnx5AnGsuFHjGnNT14w26sg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-linux-arm64-gnu": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.29.2.tgz",
			"integrity": "sha512-KKCpOlmhdjvUTX/mBuaKemp0oeDIBBLFiU5Fnqxh1/DZ4JPZi4evEH7TKoSBFOSOV3J7iEmmBaw/8dpiUvRKlQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-linux-arm64-musl": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.29.2.tgz",
			"integrity": "sha512-Q64eM1bPlOOUgxFmoPUefqzY1yV3ctFPE6d/Vt7WzLW4rKTv7MyYNky+FWxRpLkNASTnKQUaiMJ87zNODIrrKQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-linux-x64-gnu": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.29.2.tgz",
			"integrity": "sha512-0v6idDCPG6epLXtBH/RPkHvYx74CVziHo6TMYga8O2EiQApnUPZsbR9nFNrg2cgBzk1AYqEd95TlrsL7nYABQg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-linux-x64-musl": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.29.2.tgz",
			"integrity": "sha512-rMpz2yawkgGT8RULc5S4WiZopVMOFWjiItBT7aSfDX4NQav6M44rhn5hjtkKzB+wMTRlLLqxkeYEtQ3dd9696w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-win32-arm64-msvc": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.29.2.tgz",
			"integrity": "sha512-nL7zRW6evGQqYVu/bKGK+zShyz8OVzsCotFgc7judbt6wnB2KbiKKJwBE4SGoDBQ1O94RjW4asrCjQL4i8Fhbw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lightningcss-win32-x64-msvc": {
			"version": "1.29.2",
			"resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.29.2.tgz",
			"integrity": "sha512-EdIUW3B2vLuHmv7urfzMI/h2fmlnOQBk1xlsDxkN1tCWKjNFjfLhGxYk8C8mzpSfr+A6jFFIi8fU6LbQGsRWjA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MPL-2.0",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 12.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/parcel"
			}
		},
		"node_modules/lilconfig": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
			"integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/antonk52"
			}
		},
		"node_modules/limiter": {
			"version": "1.1.5",
			"resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
			"integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
		},
		"node_modules/lines-and-columns": {
			"version": "1.2.4",
			"resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/linkify-it": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-5.0.0.tgz",
			"integrity": "sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==",
			"license": "MIT",
			"dependencies": {
				"uc.micro": "^2.0.0"
			}
		},
		"node_modules/locate-character": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/locate-character/-/locate-character-3.0.0.tgz",
			"integrity": "sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==",
			"license": "MIT"
		},
		"node_modules/lodash.camelcase": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
			"integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
			"license": "MIT"
		},
		"node_modules/lodash.castarray": {
			"version": "4.4.0",
			"resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
			"integrity": "sha512-aVx8ztPv7/2ULbArGJ2Y42bG1mEQ5mGjpdvrbJcJFU3TbYybe+QlLS4pst9zV52ymy2in1KpFPiZnAOATxD4+Q==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/lodash.clonedeep": {
			"version": "4.5.0",
			"resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
			"integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
			"license": "MIT"
		},
		"node_modules/lodash.includes": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
			"integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
			"license": "MIT"
		},
		"node_modules/lodash.isboolean": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
			"integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
			"license": "MIT"
		},
		"node_modules/lodash.isinteger": {
			"version": "4.0.4",
			"resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
			"integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
			"license": "MIT"
		},
		"node_modules/lodash.isnumber": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
			"integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
			"license": "MIT"
		},
		"node_modules/lodash.isplainobject": {
			"version": "4.0.6",
			"resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
			"integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
			"license": "MIT"
		},
		"node_modules/lodash.isstring": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
			"integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
			"license": "MIT"
		},
		"node_modules/lodash.merge": {
			"version": "4.6.2",
			"resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
			"integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/lodash.once": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
			"integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
			"license": "MIT"
		},
		"node_modules/long": {
			"version": "5.3.2",
			"resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
			"integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
			"license": "Apache-2.0"
		},
		"node_modules/loupe": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/loupe/-/loupe-3.1.3.tgz",
			"integrity": "sha512-kkIp7XSkP78ZxJEsSxW3712C6teJVoeHHwgo9zJ380de7IYyJ2ISlxojcH2pC5OFLewESmnRi/+XCDIEEVyoug==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/lower-case": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
			"integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"tslib": "^2.0.3"
			}
		},
		"node_modules/lru-cache": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
			"integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
			"license": "ISC",
			"dependencies": {
				"yallist": "^4.0.0"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/lru-memoizer": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.3.0.tgz",
			"integrity": "sha512-GXn7gyHAMhO13WSKrIiNfztwxodVsP8IoZ3XfrJV4yH2x0/OeTO/FIaAHTY5YekdGgW94njfuKmyyt1E0mR6Ug==",
			"license": "MIT",
			"dependencies": {
				"lodash.clonedeep": "^4.5.0",
				"lru-cache": "6.0.0"
			}
		},
		"node_modules/magic-string": {
			"version": "0.30.17",
			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
			"integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
			"license": "MIT",
			"dependencies": {
				"@jridgewell/sourcemap-codec": "^1.5.0"
			}
		},
		"node_modules/markdown-it": {
			"version": "14.1.0",
			"resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-14.1.0.tgz",
			"integrity": "sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==",
			"license": "MIT",
			"dependencies": {
				"argparse": "^2.0.1",
				"entities": "^4.4.0",
				"linkify-it": "^5.0.0",
				"mdurl": "^2.0.0",
				"punycode.js": "^2.3.1",
				"uc.micro": "^2.1.0"
			},
			"bin": {
				"markdown-it": "bin/markdown-it.mjs"
			}
		},
		"node_modules/markdown-it-container": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/markdown-it-container/-/markdown-it-container-4.0.0.tgz",
			"integrity": "sha512-HaNccxUH0l7BNGYbFbjmGpf5aLHAMTinqRZQAEQbMr2cdD3z91Q6kIo1oUn1CQndkT03jat6ckrdRYuwwqLlQw==",
			"license": "MIT"
		},
		"node_modules/markdown-it-katex": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/markdown-it-katex/-/markdown-it-katex-2.0.3.tgz",
			"integrity": "sha512-nUkkMtRWeg7OpdflamflE/Ho/pWl64Lk9wNBKOmaj33XkQdumhXAIYhI0WO03GeiycPCsxbmX536V5NEXpC3Ng==",
			"license": "MIT",
			"dependencies": {
				"katex": "^0.6.0"
			}
		},
		"node_modules/markdown-it-katex/node_modules/katex": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/katex/-/katex-0.6.0.tgz",
			"integrity": "sha512-rS4mY3SvHYg5LtQV6RBcK0if7ur6plyEukAOV+jGGPqFImuzu8fHL6M752iBmRGoUyF0bhZbAPoezehn7xYksA==",
			"license": "MIT",
			"dependencies": {
				"match-at": "^0.1.0"
			},
			"bin": {
				"katex": "cli.js"
			}
		},
		"node_modules/markdown-it/node_modules/argparse": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
			"integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
			"license": "Python-2.0"
		},
		"node_modules/marked": {
			"version": "15.0.11",
			"resolved": "https://registry.npmjs.org/marked/-/marked-15.0.11.tgz",
			"integrity": "sha512-1BEXAU2euRCG3xwgLVT1y0xbJEld1XOrmRJpUwRCcy7rxhSCwMrmEu9LXoPhHSCJG41V7YcQ2mjKRr5BA3ITIA==",
			"license": "MIT",
			"bin": {
				"marked": "bin/marked.js"
			},
			"engines": {
				"node": ">= 18"
			}
		},
		"node_modules/match-at": {
			"version": "0.1.1",
			"resolved": "https://registry.npmjs.org/match-at/-/match-at-0.1.1.tgz",
			"integrity": "sha512-h4Yd392z9mST+dzc+yjuybOGFNOZjmXIPKWjxBd1Bb23r4SmDOsk2NYCU2BMUBGbSpZqwVsZYNq26QS3xfaT3Q=="
		},
		"node_modules/math-intrinsics": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
			"integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/mdurl": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/mdurl/-/mdurl-2.0.0.tgz",
			"integrity": "sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==",
			"license": "MIT"
		},
		"node_modules/merge2": {
			"version": "1.4.1",
			"resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
			"integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/micromatch": {
			"version": "4.0.8",
			"resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
			"integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"braces": "^3.0.3",
				"picomatch": "^2.3.1"
			},
			"engines": {
				"node": ">=8.6"
			}
		},
		"node_modules/micromatch/node_modules/picomatch": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/jonschlinkert"
			}
		},
		"node_modules/mime": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
			"integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
			"license": "MIT",
			"optional": true,
			"bin": {
				"mime": "cli.js"
			},
			"engines": {
				"node": ">=10.0.0"
			}
		},
		"node_modules/mime-db": {
			"version": "1.52.0",
			"resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
			"integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/mime-types": {
			"version": "2.1.35",
			"resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
			"integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"mime-db": "1.52.0"
			},
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/minimatch": {
			"version": "9.0.5",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
			"integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"brace-expansion": "^2.0.1"
			},
			"engines": {
				"node": ">=16 || 14 >=14.17"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/minipass": {
			"version": "7.1.2",
			"resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
			"integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
			"dev": true,
			"license": "ISC",
			"engines": {
				"node": ">=16 || 14 >=14.17"
			}
		},
		"node_modules/mri": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/mri/-/mri-1.2.0.tgz",
			"integrity": "sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/mrmime": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
			"integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/ms": {
			"version": "2.1.3",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
			"integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
			"license": "MIT"
		},
		"node_modules/mz": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
			"integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"any-promise": "^1.0.0",
				"object-assign": "^4.0.1",
				"thenify-all": "^1.0.0"
			}
		},
		"node_modules/nanoid": {
			"version": "3.3.11",
			"resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
			"integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
			"dev": true,
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"bin": {
				"nanoid": "bin/nanoid.cjs"
			},
			"engines": {
				"node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
			}
		},
		"node_modules/no-case": {
			"version": "3.0.4",
			"resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
			"integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"lower-case": "^2.0.2",
				"tslib": "^2.0.3"
			}
		},
		"node_modules/node-fetch": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
			"integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
			"license": "MIT",
			"dependencies": {
				"whatwg-url": "^5.0.0"
			},
			"engines": {
				"node": "4.x || >=6.0.0"
			},
			"peerDependencies": {
				"encoding": "^0.1.0"
			},
			"peerDependenciesMeta": {
				"encoding": {
					"optional": true
				}
			}
		},
		"node_modules/node-forge": {
			"version": "1.3.1",
			"resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
			"integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
			"license": "(BSD-3-Clause OR GPL-2.0)",
			"engines": {
				"node": ">= 6.13.0"
			}
		},
		"node_modules/node-releases": {
			"version": "2.0.19",
			"resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
			"integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/normalize-path": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
			"integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/normalize-range": {
			"version": "0.1.2",
			"resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
			"integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/object-assign": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
			"integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/object-hash": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
			"integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
			"devOptional": true,
			"license": "MIT",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/obuf": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
			"integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/once": {
			"version": "1.4.0",
			"resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
			"integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
			"license": "ISC",
			"optional": true,
			"dependencies": {
				"wrappy": "1"
			}
		},
		"node_modules/p-limit": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
			"integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"yocto-queue": "^0.1.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/package-json-from-dist": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
			"integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
			"dev": true,
			"license": "BlueOak-1.0.0"
		},
		"node_modules/package-manager-detector": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/package-manager-detector/-/package-manager-detector-1.2.0.tgz",
			"integrity": "sha512-PutJepsOtsqVfUsxCzgTTpyXmiAgvKptIgY4th5eq5UXXFhj5PxfQ9hnGkypMeovpAvVshFRItoFHYO18TCOqA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/pascal-case": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
			"integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"no-case": "^3.0.4",
				"tslib": "^2.0.3"
			}
		},
		"node_modules/path-key": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
			"integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/path-parse": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/path-scurry": {
			"version": "1.11.1",
			"resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
			"integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
			"dev": true,
			"license": "BlueOak-1.0.0",
			"dependencies": {
				"lru-cache": "^10.2.0",
				"minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
			},
			"engines": {
				"node": ">=16 || 14 >=14.18"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/path-scurry/node_modules/lru-cache": {
			"version": "10.4.3",
			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
			"integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/pathe": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
			"integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/pathval": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/pathval/-/pathval-2.0.0.tgz",
			"integrity": "sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 14.16"
			}
		},
		"node_modules/pg": {
			"version": "8.15.6",
			"resolved": "https://registry.npmjs.org/pg/-/pg-8.15.6.tgz",
			"integrity": "sha512-yvao7YI3GdmmrslNVsZgx9PfntfWrnXwtR+K/DjI0I/sTKif4Z623um+sjVZ1hk5670B+ODjvHDAckKdjmPTsg==",
			"license": "MIT",
			"dependencies": {
				"pg-connection-string": "^2.8.5",
				"pg-pool": "^3.9.6",
				"pg-protocol": "^1.9.5",
				"pg-types": "^2.1.0",
				"pgpass": "1.x"
			},
			"engines": {
				"node": ">= 8.0.0"
			},
			"optionalDependencies": {
				"pg-cloudflare": "^1.2.5"
			},
			"peerDependencies": {
				"pg-native": ">=3.0.1"
			},
			"peerDependenciesMeta": {
				"pg-native": {
					"optional": true
				}
			}
		},
		"node_modules/pg-cloudflare": {
			"version": "1.2.5",
			"resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.5.tgz",
			"integrity": "sha512-OOX22Vt0vOSRrdoUPKJ8Wi2OpE/o/h9T8X1s4qSkCedbNah9ei2W2765be8iMVxQUsvgT7zIAT2eIa9fs5+vtg==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/pg-connection-string": {
			"version": "2.8.5",
			"resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.8.5.tgz",
			"integrity": "sha512-Ni8FuZ8yAF+sWZzojvtLE2b03cqjO5jNULcHFfM9ZZ0/JXrgom5pBREbtnAw7oxsxJqHw9Nz/XWORUEL3/IFow==",
			"license": "MIT"
		},
		"node_modules/pg-int8": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
			"integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
			"license": "ISC",
			"engines": {
				"node": ">=4.0.0"
			}
		},
		"node_modules/pg-numeric": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/pg-numeric/-/pg-numeric-1.0.2.tgz",
			"integrity": "sha512-BM/Thnrw5jm2kKLE5uJkXqqExRUY/toLHda65XgFTBTFYZyopbKjBe29Ii3RbkvlsMoFwD+tHeGaCjjv0gHlyw==",
			"dev": true,
			"license": "ISC",
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/pg-pool": {
			"version": "3.9.6",
			"resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.9.6.tgz",
			"integrity": "sha512-rFen0G7adh1YmgvrmE5IPIqbb+IgEzENUm+tzm6MLLDSlPRoZVhzU1WdML9PV2W5GOdRA9qBKURlbt1OsXOsPw==",
			"license": "MIT",
			"peerDependencies": {
				"pg": ">=8.0"
			}
		},
		"node_modules/pg-protocol": {
			"version": "1.9.5",
			"resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.9.5.tgz",
			"integrity": "sha512-DYTWtWpfd5FOro3UnAfwvhD8jh59r2ig8bPtc9H8Ds7MscE/9NYruUQWFAOuraRl29jwcT2kyMFQ3MxeaVjUhg==",
			"license": "MIT"
		},
		"node_modules/pg-types": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/pg-types/-/pg-types-4.0.2.tgz",
			"integrity": "sha512-cRL3JpS3lKMGsKaWndugWQoLOCoP+Cic8oseVcbr0qhPzYD5DWXK+RZ9LY9wxRf7RQia4SCwQlXk0q6FCPrVng==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"pg-int8": "1.0.1",
				"pg-numeric": "1.0.2",
				"postgres-array": "~3.0.1",
				"postgres-bytea": "~3.0.0",
				"postgres-date": "~2.1.0",
				"postgres-interval": "^3.0.0",
				"postgres-range": "^1.1.1"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/pg/node_modules/pg-types": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
			"integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
			"license": "MIT",
			"dependencies": {
				"pg-int8": "1.0.1",
				"postgres-array": "~2.0.0",
				"postgres-bytea": "~1.0.0",
				"postgres-date": "~1.0.4",
				"postgres-interval": "^1.1.0"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/pg/node_modules/postgres-array": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
			"integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
			"license": "MIT",
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/pg/node_modules/postgres-bytea": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
			"integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/pg/node_modules/postgres-date": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
			"integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/pg/node_modules/postgres-interval": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
			"integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
			"license": "MIT",
			"dependencies": {
				"xtend": "^4.0.0"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/pgpass": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
			"integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
			"license": "MIT",
			"dependencies": {
				"split2": "^4.1.0"
			}
		},
		"node_modules/picocolors": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
			"integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/picomatch": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
			"integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/jonschlinkert"
			}
		},
		"node_modules/pify": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
			"integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/pirates": {
			"version": "4.0.7",
			"resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
			"integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/postcss": {
			"version": "8.5.3",
			"resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
			"integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/postcss"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"nanoid": "^3.3.8",
				"picocolors": "^1.1.1",
				"source-map-js": "^1.2.1"
			},
			"engines": {
				"node": "^10 || ^12 || >=14"
			}
		},
		"node_modules/postcss-import": {
			"version": "15.1.0",
			"resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
			"integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"postcss-value-parser": "^4.0.0",
				"read-cache": "^1.0.0",
				"resolve": "^1.1.7"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			}
		},
		"node_modules/postcss-js": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
			"integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"camelcase-css": "^2.0.1"
			},
			"engines": {
				"node": "^12 || ^14 || >= 16"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/postcss/"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			}
		},
		"node_modules/postcss-load-config": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
			"integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"lilconfig": "^3.0.0",
				"yaml": "^2.3.4"
			},
			"engines": {
				"node": ">= 14"
			},
			"peerDependencies": {
				"postcss": ">=8.0.9",
				"ts-node": ">=9.0.0"
			},
			"peerDependenciesMeta": {
				"postcss": {
					"optional": true
				},
				"ts-node": {
					"optional": true
				}
			}
		},
		"node_modules/postcss-nested": {
			"version": "6.2.0",
			"resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
			"integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"postcss-selector-parser": "^6.1.1"
			},
			"engines": {
				"node": ">=12.0"
			},
			"peerDependencies": {
				"postcss": "^8.2.14"
			}
		},
		"node_modules/postcss-nested/node_modules/postcss-selector-parser": {
			"version": "6.1.2",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/postcss-selector-parser": {
			"version": "6.0.10",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
			"integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/postcss-value-parser": {
			"version": "4.2.0",
			"resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
			"integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/postgres-array": {
			"version": "3.0.4",
			"resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-3.0.4.tgz",
			"integrity": "sha512-nAUSGfSDGOaOAEGwqsRY27GPOea7CNipJPOA7lPbdEpx5Kg3qzdP0AaWC5MlhTWV9s4hFX39nomVZ+C4tnGOJQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/postgres-bytea": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
			"integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"obuf": "~1.1.2"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/postgres-date": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-2.1.0.tgz",
			"integrity": "sha512-K7Juri8gtgXVcDfZttFKVmhglp7epKb1K4pgrkLxehjqkrgPhfG6OO8LHLkfaqkbpjNRnra018XwAr1yQFWGcA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/postgres-interval": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-3.0.0.tgz",
			"integrity": "sha512-BSNDnbyZCXSxgA+1f5UU2GmwhoI0aU5yMxRGO8CdFEcY2BQF9xm/7MqKnYoM1nJDk8nONNWDk9WeSmePFhQdlw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/postgres-range": {
			"version": "1.1.4",
			"resolved": "https://registry.npmjs.org/postgres-range/-/postgres-range-1.1.4.tgz",
			"integrity": "sha512-i/hbxIE9803Alj/6ytL7UHQxRvZkI9O4Sy+J3HGc4F4oo/2eQAjTSNJ0bfxyse3bH0nuVesCk+3IRLaMtG3H6w==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/proto3-json-serializer": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
			"integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"protobufjs": "^7.2.5"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/protobufjs": {
			"version": "7.5.0",
			"resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.0.tgz",
			"integrity": "sha512-Z2E/kOY1QjoMlCytmexzYfDm/w5fKAiRwpSzGtdnXW1zC88Z2yXazHHrOtwCzn+7wSxyE8PYM4rvVcMphF9sOA==",
			"hasInstallScript": true,
			"license": "BSD-3-Clause",
			"dependencies": {
				"@protobufjs/aspromise": "^1.1.2",
				"@protobufjs/base64": "^1.1.2",
				"@protobufjs/codegen": "^2.0.4",
				"@protobufjs/eventemitter": "^1.1.0",
				"@protobufjs/fetch": "^1.1.0",
				"@protobufjs/float": "^1.0.2",
				"@protobufjs/inquire": "^1.1.0",
				"@protobufjs/path": "^1.1.2",
				"@protobufjs/pool": "^1.1.0",
				"@protobufjs/utf8": "^1.1.0",
				"@types/node": ">=13.7.0",
				"long": "^5.0.0"
			},
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/publint": {
			"version": "0.3.12",
			"resolved": "https://registry.npmjs.org/publint/-/publint-0.3.12.tgz",
			"integrity": "sha512-1w3MMtL9iotBjm1mmXtG3Nk06wnq9UhGNRpQ2j6n1Zq7YAD6gnxMMZMIxlRPAydVjVbjSm+n0lhwqsD1m4LD5w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@publint/pack": "^0.1.2",
				"package-manager-detector": "^1.1.0",
				"picocolors": "^1.1.1",
				"sade": "^1.8.1"
			},
			"bin": {
				"publint": "src/cli.js"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://bjornlu.com/sponsor"
			}
		},
		"node_modules/punycode.js": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/punycode.js/-/punycode.js-2.3.1.tgz",
			"integrity": "sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==",
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/queue-microtask": {
			"version": "1.2.3",
			"resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
			"integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
			"dev": true,
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"license": "MIT"
		},
		"node_modules/read-cache": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
			"integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"pify": "^2.3.0"
			}
		},
		"node_modules/readable-stream": {
			"version": "3.6.2",
			"resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
			"integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"inherits": "^2.0.3",
				"string_decoder": "^1.1.1",
				"util-deprecate": "^1.0.1"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/readdirp": {
			"version": "4.1.2",
			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
			"integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 14.18.0"
			},
			"funding": {
				"type": "individual",
				"url": "https://paulmillr.com/funding/"
			}
		},
		"node_modules/require-directory": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
			"integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/resolve": {
			"version": "1.22.10",
			"resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
			"integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"is-core-module": "^2.16.0",
				"path-parse": "^1.0.7",
				"supports-preserve-symlinks-flag": "^1.0.0"
			},
			"bin": {
				"resolve": "bin/resolve"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/retry": {
			"version": "0.13.1",
			"resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
			"integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">= 4"
			}
		},
		"node_modules/retry-request": {
			"version": "7.0.2",
			"resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
			"integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"@types/request": "^2.48.8",
				"extend": "^3.0.2",
				"teeny-request": "^9.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/reusify": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
			"integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"iojs": ">=1.0.0",
				"node": ">=0.10.0"
			}
		},
		"node_modules/rollup": {
			"version": "4.40.1",
			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.1.tgz",
			"integrity": "sha512-C5VvvgCCyfyotVITIAv+4efVytl5F7wt+/I2i9q9GZcEXW9BP52YYOXC58igUi+LFZVHukErIIqQSWwv/M3WRw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@types/estree": "1.0.7"
			},
			"bin": {
				"rollup": "dist/bin/rollup"
			},
			"engines": {
				"node": ">=18.0.0",
				"npm": ">=8.0.0"
			},
			"optionalDependencies": {
				"@rollup/rollup-android-arm-eabi": "4.40.1",
				"@rollup/rollup-android-arm64": "4.40.1",
				"@rollup/rollup-darwin-arm64": "4.40.1",
				"@rollup/rollup-darwin-x64": "4.40.1",
				"@rollup/rollup-freebsd-arm64": "4.40.1",
				"@rollup/rollup-freebsd-x64": "4.40.1",
				"@rollup/rollup-linux-arm-gnueabihf": "4.40.1",
				"@rollup/rollup-linux-arm-musleabihf": "4.40.1",
				"@rollup/rollup-linux-arm64-gnu": "4.40.1",
				"@rollup/rollup-linux-arm64-musl": "4.40.1",
				"@rollup/rollup-linux-loongarch64-gnu": "4.40.1",
				"@rollup/rollup-linux-powerpc64le-gnu": "4.40.1",
				"@rollup/rollup-linux-riscv64-gnu": "4.40.1",
				"@rollup/rollup-linux-riscv64-musl": "4.40.1",
				"@rollup/rollup-linux-s390x-gnu": "4.40.1",
				"@rollup/rollup-linux-x64-gnu": "4.40.1",
				"@rollup/rollup-linux-x64-musl": "4.40.1",
				"@rollup/rollup-win32-arm64-msvc": "4.40.1",
				"@rollup/rollup-win32-ia32-msvc": "4.40.1",
				"@rollup/rollup-win32-x64-msvc": "4.40.1",
				"fsevents": "~2.3.2"
			}
		},
		"node_modules/run-parallel": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
			"integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
			"dev": true,
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"license": "MIT",
			"dependencies": {
				"queue-microtask": "^1.2.2"
			}
		},
		"node_modules/sade": {
			"version": "1.8.1",
			"resolved": "https://registry.npmjs.org/sade/-/sade-1.8.1.tgz",
			"integrity": "sha512-xal3CZX1Xlo/k4ApwCFrHVACi9fBqJ7V+mwhBsuf/1IOKbBy098Fex+Wa/5QMubw09pSZ/u8EY8PWgevJsXp1A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"mri": "^1.1.0"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/safe-buffer": {
			"version": "5.2.1",
			"resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
			"integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"license": "MIT"
		},
		"node_modules/section-matter": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/section-matter/-/section-matter-1.0.0.tgz",
			"integrity": "sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==",
			"license": "MIT",
			"dependencies": {
				"extend-shallow": "^2.0.1",
				"kind-of": "^6.0.0"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/semver": {
			"version": "7.7.1",
			"resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
			"integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
			"license": "ISC",
			"bin": {
				"semver": "bin/semver.js"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/set-cookie-parser": {
			"version": "2.7.1",
			"resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
			"integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/shebang-command": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
			"integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"shebang-regex": "^3.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/shebang-regex": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
			"integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/siginfo": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
			"integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
			"dev": true,
			"license": "ISC"
		},
		"node_modules/signal-exit": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
			"integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
			"dev": true,
			"license": "ISC",
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/sirv": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/sirv/-/sirv-3.0.1.tgz",
			"integrity": "sha512-FoqMu0NCGBLCcAkS1qA+XJIQTR6/JHfQXl+uGteNCQ76T91DMUjPa9xfmeqMY3z80nLSg9yQmNjK0Px6RWsH/A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@polka/url": "^1.0.0-next.24",
				"mrmime": "^2.0.0",
				"totalist": "^3.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/source-map-js": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
			"integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
			"dev": true,
			"license": "BSD-3-Clause",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/split2": {
			"version": "4.2.0",
			"resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
			"integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
			"license": "ISC",
			"engines": {
				"node": ">= 10.x"
			}
		},
		"node_modules/sprintf-js": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
			"integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
			"license": "BSD-3-Clause"
		},
		"node_modules/stackback": {
			"version": "0.0.2",
			"resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
			"integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/std-env": {
			"version": "3.9.0",
			"resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
			"integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/stream-events": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
			"integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"stubs": "^3.0.0"
			}
		},
		"node_modules/stream-shift": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
			"integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/string_decoder": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
			"integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"safe-buffer": "~5.2.0"
			}
		},
		"node_modules/string-width": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
			"integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"eastasianwidth": "^0.2.0",
				"emoji-regex": "^9.2.2",
				"strip-ansi": "^7.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/string-width-cjs": {
			"name": "string-width",
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/string-width-cjs/node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/string-width-cjs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/string-width-cjs/node_modules/strip-ansi": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/strip-ansi-cjs": {
			"name": "strip-ansi",
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-bom-string": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/strip-bom-string/-/strip-bom-string-1.0.0.tgz",
			"integrity": "sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==",
			"license": "MIT",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/strnum": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/strnum/-/strnum-1.1.2.tgz",
			"integrity": "sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/NaturalIntelligence"
				}
			],
			"license": "MIT",
			"optional": true
		},
		"node_modules/stubs": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
			"integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
			"license": "MIT",
			"optional": true
		},
		"node_modules/sucrase": {
			"version": "3.35.0",
			"resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
			"integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@jridgewell/gen-mapping": "^0.3.2",
				"commander": "^4.0.0",
				"glob": "^10.3.10",
				"lines-and-columns": "^1.1.6",
				"mz": "^2.7.0",
				"pirates": "^4.0.1",
				"ts-interface-checker": "^0.1.9"
			},
			"bin": {
				"sucrase": "bin/sucrase",
				"sucrase-node": "bin/sucrase-node"
			},
			"engines": {
				"node": ">=16 || 14 >=14.17"
			}
		},
		"node_modules/sucrase/node_modules/commander": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
			"integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/supports-preserve-symlinks-flag": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/svelte": {
			"version": "5.28.2",
			"resolved": "https://registry.npmjs.org/svelte/-/svelte-5.28.2.tgz",
			"integrity": "sha512-FbWBxgWOpQfhKvoGJv/TFwzqb4EhJbwCD17dB0tEpQiw1XyUEKZJtgm4nA4xq3LLsMo7hu5UY/BOFmroAxKTMg==",
			"license": "MIT",
			"dependencies": {
				"@ampproject/remapping": "^2.3.0",
				"@jridgewell/sourcemap-codec": "^1.5.0",
				"@sveltejs/acorn-typescript": "^1.0.5",
				"@types/estree": "^1.0.5",
				"acorn": "^8.12.1",
				"aria-query": "^5.3.1",
				"axobject-query": "^4.1.0",
				"clsx": "^2.1.1",
				"esm-env": "^1.2.1",
				"esrap": "^1.4.6",
				"is-reference": "^3.0.3",
				"locate-character": "^3.0.0",
				"magic-string": "^0.30.11",
				"zimmerframe": "^1.1.2"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/svelte-check": {
			"version": "4.1.6",
			"resolved": "https://registry.npmjs.org/svelte-check/-/svelte-check-4.1.6.tgz",
			"integrity": "sha512-P7w/6tdSfk3zEVvfsgrp3h3DFC75jCdZjTQvgGJtjPORs1n7/v2VMPIoty3PWv7jnfEm3x0G/p9wH4pecTb0Wg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@jridgewell/trace-mapping": "^0.3.25",
				"chokidar": "^4.0.1",
				"fdir": "^6.2.0",
				"picocolors": "^1.0.0",
				"sade": "^1.7.4"
			},
			"bin": {
				"svelte-check": "bin/svelte-check"
			},
			"engines": {
				"node": ">= 18.0.0"
			},
			"peerDependencies": {
				"svelte": "^4.0.0 || ^5.0.0-next.0",
				"typescript": ">=5.0.0"
			}
		},
		"node_modules/svelte2tsx": {
			"version": "0.7.36",
			"resolved": "https://registry.npmjs.org/svelte2tsx/-/svelte2tsx-0.7.36.tgz",
			"integrity": "sha512-nBlERuCZRwmpebC8m0vDqZ9oaKsqW8frQS2l3zwFQW1voQIkItYtHxh1F5OTZEmE0meDIH6cxU36eIOQVOxlCw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"dedent-js": "^1.0.1",
				"pascal-case": "^3.1.1"
			},
			"peerDependencies": {
				"svelte": "^3.55 || ^4.0.0-next.0 || ^4.0 || ^5.0.0-next.0",
				"typescript": "^4.9.4 || ^5.0.0"
			}
		},
		"node_modules/tailwindcss": {
			"version": "3.4.17",
			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
			"integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@alloc/quick-lru": "^5.2.0",
				"arg": "^5.0.2",
				"chokidar": "^3.6.0",
				"didyoumean": "^1.2.2",
				"dlv": "^1.1.3",
				"fast-glob": "^3.3.2",
				"glob-parent": "^6.0.2",
				"is-glob": "^4.0.3",
				"jiti": "^1.21.6",
				"lilconfig": "^3.1.3",
				"micromatch": "^4.0.8",
				"normalize-path": "^3.0.0",
				"object-hash": "^3.0.0",
				"picocolors": "^1.1.1",
				"postcss": "^8.4.47",
				"postcss-import": "^15.1.0",
				"postcss-js": "^4.0.1",
				"postcss-load-config": "^4.0.2",
				"postcss-nested": "^6.2.0",
				"postcss-selector-parser": "^6.1.2",
				"resolve": "^1.22.8",
				"sucrase": "^3.35.0"
			},
			"bin": {
				"tailwind": "lib/cli.js",
				"tailwindcss": "lib/cli.js"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/tailwindcss/node_modules/chokidar": {
			"version": "3.6.0",
			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
			"integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"anymatch": "~3.1.2",
				"braces": "~3.0.2",
				"glob-parent": "~5.1.2",
				"is-binary-path": "~2.1.0",
				"is-glob": "~4.0.1",
				"normalize-path": "~3.0.0",
				"readdirp": "~3.6.0"
			},
			"engines": {
				"node": ">= 8.10.0"
			},
			"funding": {
				"url": "https://paulmillr.com/funding/"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.2"
			}
		},
		"node_modules/tailwindcss/node_modules/chokidar/node_modules/glob-parent": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"is-glob": "^4.0.1"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/tailwindcss/node_modules/jiti": {
			"version": "1.21.7",
			"resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
			"integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
			"dev": true,
			"license": "MIT",
			"bin": {
				"jiti": "bin/jiti.js"
			}
		},
		"node_modules/tailwindcss/node_modules/picomatch": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/jonschlinkert"
			}
		},
		"node_modules/tailwindcss/node_modules/postcss-selector-parser": {
			"version": "6.1.2",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/tailwindcss/node_modules/readdirp": {
			"version": "3.6.0",
			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
			"integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"picomatch": "^2.2.1"
			},
			"engines": {
				"node": ">=8.10.0"
			}
		},
		"node_modules/tapable": {
			"version": "2.2.1",
			"resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
			"integrity": "sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/teeny-request": {
			"version": "9.0.0",
			"resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
			"integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
			"license": "Apache-2.0",
			"optional": true,
			"dependencies": {
				"http-proxy-agent": "^5.0.0",
				"https-proxy-agent": "^5.0.0",
				"node-fetch": "^2.6.9",
				"stream-events": "^1.0.5",
				"uuid": "^9.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/teeny-request/node_modules/agent-base": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
			"integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"debug": "4"
			},
			"engines": {
				"node": ">= 6.0.0"
			}
		},
		"node_modules/teeny-request/node_modules/https-proxy-agent": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
			"integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"agent-base": "6",
				"debug": "4"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/teeny-request/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"license": "MIT",
			"optional": true,
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/thenify": {
			"version": "3.3.1",
			"resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
			"integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"any-promise": "^1.0.0"
			}
		},
		"node_modules/thenify-all": {
			"version": "1.6.0",
			"resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
			"integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"thenify": ">= 3.1.0 < 4"
			},
			"engines": {
				"node": ">=0.8"
			}
		},
		"node_modules/tinybench": {
			"version": "2.9.0",
			"resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
			"integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/tinyexec": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.2.tgz",
			"integrity": "sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/tinyglobby": {
			"version": "0.2.13",
			"resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
			"integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"fdir": "^6.4.4",
				"picomatch": "^4.0.2"
			},
			"engines": {
				"node": ">=12.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/SuperchupuDev"
			}
		},
		"node_modules/tinypool": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.0.2.tgz",
			"integrity": "sha512-al6n+QEANGFOMf/dmUMsuS5/r9B06uwlyNjZZql/zv8J7ybHCgoihBNORZCY2mzUuAnomQa2JdhyHKzZxPCrFA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": "^18.0.0 || >=20.0.0"
			}
		},
		"node_modules/tinyrainbow": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/tinyrainbow/-/tinyrainbow-2.0.0.tgz",
			"integrity": "sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/tinyspy": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-3.0.2.tgz",
			"integrity": "sha512-n1cw8k1k0x4pgA2+9XrOkFydTerNcJ1zWCO5Nn9scWHTD+5tp8dghT2x1uduQePZTZgd3Tupf+x9BxJjeJi77Q==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/to-regex-range": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
			"integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"is-number": "^7.0.0"
			},
			"engines": {
				"node": ">=8.0"
			}
		},
		"node_modules/totalist": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
			"integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/tr46": {
			"version": "0.0.3",
			"resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
			"integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
			"license": "MIT"
		},
		"node_modules/ts-interface-checker": {
			"version": "0.1.13",
			"resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
			"integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
			"dev": true,
			"license": "Apache-2.0"
		},
		"node_modules/tslib": {
			"version": "2.8.1",
			"resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
			"integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
			"license": "0BSD"
		},
		"node_modules/typescript": {
			"version": "5.8.3",
			"resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
			"integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
			"dev": true,
			"license": "Apache-2.0",
			"bin": {
				"tsc": "bin/tsc",
				"tsserver": "bin/tsserver"
			},
			"engines": {
				"node": ">=14.17"
			}
		},
		"node_modules/uc.micro": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-2.1.0.tgz",
			"integrity": "sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==",
			"license": "MIT"
		},
		"node_modules/undici": {
			"version": "6.19.7",
			"resolved": "https://registry.npmjs.org/undici/-/undici-6.19.7.tgz",
			"integrity": "sha512-HR3W/bMGPSr90i8AAp2C4DM3wChFdJPLrWYpIS++LxS8K+W535qftjt+4MyjNYHeWabMj1nvtmLIi7l++iq91A==",
			"license": "MIT",
			"engines": {
				"node": ">=18.17"
			}
		},
		"node_modules/undici-types": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
			"integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
			"license": "MIT"
		},
		"node_modules/update-browserslist-db": {
			"version": "1.1.3",
			"resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
			"integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/browserslist"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"license": "MIT",
			"dependencies": {
				"escalade": "^3.2.0",
				"picocolors": "^1.1.1"
			},
			"bin": {
				"update-browserslist-db": "cli.js"
			},
			"peerDependencies": {
				"browserslist": ">= 4.21.0"
			}
		},
		"node_modules/util-deprecate": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
			"integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
			"devOptional": true,
			"license": "MIT"
		},
		"node_modules/uuid": {
			"version": "11.1.0",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
			"integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"license": "MIT",
			"bin": {
				"uuid": "dist/esm/bin/uuid"
			}
		},
		"node_modules/vite": {
			"version": "6.3.4",
			"resolved": "https://registry.npmjs.org/vite/-/vite-6.3.4.tgz",
			"integrity": "sha512-BiReIiMS2fyFqbqNT/Qqt4CVITDU9M9vE+DKcVAsB+ZV0wvTKd+3hMbkpxz1b+NmEDMegpVbisKiAZOnvO92Sw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"esbuild": "^0.25.0",
				"fdir": "^6.4.4",
				"picomatch": "^4.0.2",
				"postcss": "^8.5.3",
				"rollup": "^4.34.9",
				"tinyglobby": "^0.2.13"
			},
			"bin": {
				"vite": "bin/vite.js"
			},
			"engines": {
				"node": "^18.0.0 || ^20.0.0 || >=22.0.0"
			},
			"funding": {
				"url": "https://github.com/vitejs/vite?sponsor=1"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.3"
			},
			"peerDependencies": {
				"@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
				"jiti": ">=1.21.0",
				"less": "*",
				"lightningcss": "^1.21.0",
				"sass": "*",
				"sass-embedded": "*",
				"stylus": "*",
				"sugarss": "*",
				"terser": "^5.16.0",
				"tsx": "^4.8.1",
				"yaml": "^2.4.2"
			},
			"peerDependenciesMeta": {
				"@types/node": {
					"optional": true
				},
				"jiti": {
					"optional": true
				},
				"less": {
					"optional": true
				},
				"lightningcss": {
					"optional": true
				},
				"sass": {
					"optional": true
				},
				"sass-embedded": {
					"optional": true
				},
				"stylus": {
					"optional": true
				},
				"sugarss": {
					"optional": true
				},
				"terser": {
					"optional": true
				},
				"tsx": {
					"optional": true
				},
				"yaml": {
					"optional": true
				}
			}
		},
		"node_modules/vite-node": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.1.2.tgz",
			"integrity": "sha512-/8iMryv46J3aK13iUXsei5G/A3CUlW4665THCPS+K8xAaqrVWiGB4RfXMQXCLjpK9P2eK//BczrVkn5JLAk6DA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"cac": "^6.7.14",
				"debug": "^4.4.0",
				"es-module-lexer": "^1.6.0",
				"pathe": "^2.0.3",
				"vite": "^5.0.0 || ^6.0.0"
			},
			"bin": {
				"vite-node": "vite-node.mjs"
			},
			"engines": {
				"node": "^18.0.0 || ^20.0.0 || >=22.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/vitefu": {
			"version": "1.0.6",
			"resolved": "https://registry.npmjs.org/vitefu/-/vitefu-1.0.6.tgz",
			"integrity": "sha512-+Rex1GlappUyNN6UfwbVZne/9cYC4+R2XDk9xkNXBKMw6HQagdX9PgZ8V2v1WUSK1wfBLp7qbI1+XSNIlB1xmA==",
			"dev": true,
			"license": "MIT",
			"workspaces": [
				"tests/deps/*",
				"tests/projects/*"
			],
			"peerDependencies": {
				"vite": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0"
			},
			"peerDependenciesMeta": {
				"vite": {
					"optional": true
				}
			}
		},
		"node_modules/vitest": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/vitest/-/vitest-3.1.2.tgz",
			"integrity": "sha512-WaxpJe092ID1C0mr+LH9MmNrhfzi8I65EX/NRU/Ld016KqQNRgxSOlGNP1hHN+a/F8L15Mh8klwaF77zR3GeDQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@vitest/expect": "3.1.2",
				"@vitest/mocker": "3.1.2",
				"@vitest/pretty-format": "^3.1.2",
				"@vitest/runner": "3.1.2",
				"@vitest/snapshot": "3.1.2",
				"@vitest/spy": "3.1.2",
				"@vitest/utils": "3.1.2",
				"chai": "^5.2.0",
				"debug": "^4.4.0",
				"expect-type": "^1.2.1",
				"magic-string": "^0.30.17",
				"pathe": "^2.0.3",
				"std-env": "^3.9.0",
				"tinybench": "^2.9.0",
				"tinyexec": "^0.3.2",
				"tinyglobby": "^0.2.13",
				"tinypool": "^1.0.2",
				"tinyrainbow": "^2.0.0",
				"vite": "^5.0.0 || ^6.0.0",
				"vite-node": "3.1.2",
				"why-is-node-running": "^2.3.0"
			},
			"bin": {
				"vitest": "vitest.mjs"
			},
			"engines": {
				"node": "^18.0.0 || ^20.0.0 || >=22.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			},
			"peerDependencies": {
				"@edge-runtime/vm": "*",
				"@types/debug": "^4.1.12",
				"@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
				"@vitest/browser": "3.1.2",
				"@vitest/ui": "3.1.2",
				"happy-dom": "*",
				"jsdom": "*"
			},
			"peerDependenciesMeta": {
				"@edge-runtime/vm": {
					"optional": true
				},
				"@types/debug": {
					"optional": true
				},
				"@types/node": {
					"optional": true
				},
				"@vitest/browser": {
					"optional": true
				},
				"@vitest/ui": {
					"optional": true
				},
				"happy-dom": {
					"optional": true
				},
				"jsdom": {
					"optional": true
				}
			}
		},
		"node_modules/webidl-conversions": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
			"integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
			"license": "BSD-2-Clause"
		},
		"node_modules/websocket-driver": {
			"version": "0.7.4",
			"resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
			"integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
			"license": "Apache-2.0",
			"dependencies": {
				"http-parser-js": ">=0.5.1",
				"safe-buffer": ">=5.1.0",
				"websocket-extensions": ">=0.1.1"
			},
			"engines": {
				"node": ">=0.8.0"
			}
		},
		"node_modules/websocket-extensions": {
			"version": "0.1.4",
			"resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
			"integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
			"license": "Apache-2.0",
			"engines": {
				"node": ">=0.8.0"
			}
		},
		"node_modules/whatwg-url": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
			"integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
			"license": "MIT",
			"dependencies": {
				"tr46": "~0.0.3",
				"webidl-conversions": "^3.0.0"
			}
		},
		"node_modules/which": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
			"integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
			"dev": true,
			"license": "ISC",
			"dependencies": {
				"isexe": "^2.0.0"
			},
			"bin": {
				"node-which": "bin/node-which"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/why-is-node-running": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
			"integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"siginfo": "^2.0.0",
				"stackback": "0.0.2"
			},
			"bin": {
				"why-is-node-running": "cli.js"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrap-ansi": {
			"version": "8.1.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
			"integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-styles": "^6.1.0",
				"string-width": "^5.0.1",
				"strip-ansi": "^7.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/wrap-ansi-cjs": {
			"name": "wrap-ansi",
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
			"integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-styles": "^4.0.0",
				"string-width": "^4.1.0",
				"strip-ansi": "^6.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
			"integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"color-convert": "^2.0.1"
			},
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/wrap-ansi-cjs/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrappy": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
			"integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
			"license": "ISC",
			"optional": true
		},
		"node_modules/xtend": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
			"integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
			"license": "MIT",
			"engines": {
				"node": ">=0.4"
			}
		},
		"node_modules/y18n": {
			"version": "5.0.8",
			"resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
			"integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
			"license": "ISC",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/yallist": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
			"integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
			"license": "ISC"
		},
		"node_modules/yaml": {
			"version": "2.7.1",
			"resolved": "https://registry.npmjs.org/yaml/-/yaml-2.7.1.tgz",
			"integrity": "sha512-10ULxpnOCQXxJvBgxsn9ptjq6uviG/htZKk9veJGhlqn3w/DxQ631zFF+nlQXLwmImeS5amR2dl2U8sg6U9jsQ==",
			"dev": true,
			"license": "ISC",
			"bin": {
				"yaml": "bin.mjs"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/yargs": {
			"version": "17.7.2",
			"resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
			"integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
			"license": "MIT",
			"dependencies": {
				"cliui": "^8.0.1",
				"escalade": "^3.1.1",
				"get-caller-file": "^2.0.5",
				"require-directory": "^2.1.1",
				"string-width": "^4.2.3",
				"y18n": "^5.0.5",
				"yargs-parser": "^21.1.1"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/yargs-parser": {
			"version": "21.1.1",
			"resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
			"integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
			"license": "ISC",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/yargs/node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"license": "MIT",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/yargs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
			"license": "MIT"
		},
		"node_modules/yargs/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"license": "MIT",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/yargs/node_modules/strip-ansi": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"license": "MIT",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/yocto-queue": {
			"version": "0.1.0",
			"resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
			"integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
			"license": "MIT",
			"optional": true,
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/zimmerframe": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/zimmerframe/-/zimmerframe-1.1.2.tgz",
			"integrity": "sha512-rAbqEGa8ovJy4pyBxZM70hg4pE6gDgaQ0Sl9M3enG3I0d6H4XSAM3GeNGLKnsBpuijUow064sf7ww1nutC5/3w==",
			"license": "MIT"
		}
	}
}
===== ./src/hooks.server.ts =====
// hooks.server.ts - Server-side only hooks
import type { Handle } from '@sveltejs/kit';
import { sequence } from '@sveltejs/kit/hooks';
import { csrfProtect } from './routes/api/csrfMiddleware.server.js';
import { authMiddleware, requireAuth } from './routes/api/authMiddleware.server.js';

// Define API routes that require authentication
const authRequiredPaths = [
  '/api/score',
  '/api/recommendations',
  '/api/activities'
];

// Chain middleware functions based on route
export const handle: Handle = async ({ event, resolve }) => {
  // For API routes 
  if (event.url.pathname.startsWith('/api')) {
    // Get base route without query parameters
    const path = event.url.pathname;
    
    // For most API routes, apply authentication check after CSRF
    if (authRequiredPaths.some(route => path.startsWith(route))) {
      // Apply sequence of middlewares: first CSRF, then require authentication
      return sequence(csrfProtect, requireAuth)({ event, resolve });
    }
    
    // For other API routes like CSRF token refresh, just apply CSRF protection
    return sequence(csrfProtect, authMiddleware)({ event, resolve });
  }
  
  // For non-API routes, just pass through
  return resolve(event);
};===== ./src/lib/firebase/firebase.ts =====
import { initializeApp, getApps, type FirebaseApp } from 'firebase/app';
import { getAuth, type Auth } from 'firebase/auth';
import { getFirestore, type Firestore } from 'firebase/firestore';
import { getAnalytics, type Analytics, isSupported } from 'firebase/analytics';

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "placeholder-api-key",
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "your-app.firebaseapp.com",
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "your-project-id",
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "your-app.appspot.com",
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "123456789",
  appId: import.meta.env.VITE_FIREBASE_APP_ID || "1:123456789:web:abcdef123456",
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || "G-ABCDEFGHIJ"
};

// Initialize Firebase - ensure we don't initialize multiple times
let firebaseApp: FirebaseApp;
let auth: Auth;
let firestore: Firestore;
let analytics: Analytics | null = null;

function initializeFirebase() {
  console.log('Initializing Firebase app', getApps().length);
  
  if (getApps().length === 0) {
    firebaseApp = initializeApp(firebaseConfig);
    console.log('Firebase initialized successfully', firebaseApp.name);
  } else {
    firebaseApp = getApps()[0];
  }
  
  auth = getAuth(firebaseApp);
  firestore = getFirestore(firebaseApp);
  
  // Only initialize analytics in browser environment
  if (typeof window !== 'undefined') {
    isSupported().then(supported => {
      if (supported) {
        analytics = getAnalytics(firebaseApp);
      }
    });
  }
  
  return { firebaseApp, auth, firestore, analytics };
}

export const firebase = initializeFirebase();
export const db = firebase.firestore;
export const authService = firebase.auth;
===== ./src/lib/authService.ts =====
import { 
	createUserWithEmailAndPassword,
	signInWithEmailAndPassword,
	signOut as firebaseSignOut,
	onAuthStateChanged,
	sendPasswordResetEmail,
	updateProfile,
	GoogleAuthProvider,
	signInWithPopup,
	type User,
	type UserCredential,
	type AuthError,
	type Auth
} from 'firebase/auth';
import { auth } from './firebase.js';
import { isAuthenticated, user, loading, authError } from './stores/authStore.js';
import { loadUserProfile } from './stores/userProfileStore.js';

// Flag to track if auth initialization has completed
let authInitialized = false;

// Initialize the auth listener
function initAuth() {
	if (authInitialized) {
		console.log('Auth already initialized, skipping');
		return;
	}
	
	loading.set(true);
	console.log('Initializing auth listener');
	
	// Set up an observer to watch for auth state changes
	const unsubscribe = onAuthStateChanged(auth, 
		(userData: User | null) => {
			if (userData) {
				console.log('Auth state changed: User authenticated', {
					uid: userData.uid,
					email: userData.email,
					displayName: userData.displayName
				});
				isAuthenticated.set(true);
				user.set(userData);
				// Load or initialize Firestore user profile
				loadUserProfile(userData.uid, userData.email || '', userData.displayName || undefined)
						.catch((err: Error) => console.error('Failed to load user profile:', err));
			} else {
				console.log('Auth state changed: User not authenticated');
				isAuthenticated.set(false);
				user.set(null);
			}
			loading.set(false);
			authInitialized = true;
		}, 
		(error: Error) => {
			console.error('Auth state change error:', error);
			authError.set(error.message);
			loading.set(false);
			authInitialized = true;
		}
	);
	
	// Return unsubscribe function in case we need to detach the listener
	return unsubscribe;
}

// Register a new user with email and password
async function register(email: string, password: string, displayName: string): Promise<void> {
	loading.set(true);
	authError.set(null);
	console.log('Attempting to register user:', { email, displayName });
	try {
		const userCredential = await createUserWithEmailAndPassword(auth, email, password);
		// Update the user profile with display name
		if (userCredential.user) {
			await updateProfile(userCredential.user, { displayName });
			console.log('User registered successfully');
		}
	} catch (error: any) {
		console.error('Registration error:', error);
		authError.set(error.message);
		throw error;
	} finally {
		loading.set(false);
	}
}

// Login with email and password
async function login(email: string, password: string): Promise<void> {
	loading.set(true);
	authError.set(null);
	console.log('Attempting to login user:', { email });
	try {
		const result = await signInWithEmailAndPassword(auth, email, password);
		console.log('Login successful:', { 
			uid: result.user.uid,
			email: result.user.email,
			displayName: result.user.displayName,
			emailVerified: result.user.emailVerified
		});
	} catch (error: any) {
		console.error('Login error:', error);
		authError.set(error.message);
		throw error;
	} finally {
		loading.set(false);
	}
}

// Sign in with Google
async function loginWithGoogle(): Promise<void> {
	loading.set(true);
	authError.set(null);
	console.log('Attempting Google sign-in');
	try {
		const provider = new GoogleAuthProvider();
		const result = await signInWithPopup(auth, provider);
		console.log('Google sign-in successful:', { 
			uid: result.user.uid,
			email: result.user.email,
			displayName: result.user.displayName
		});
	} catch (error: any) {
		console.error('Google sign-in error:', error);
		authError.set(error.message);
		throw error;
	} finally {
		loading.set(false);
	}
}

// Logout the user
async function logout(): Promise<void> {
	loading.set(true);
	authError.set(null);
	console.log('Logging out user');
	try {
		await firebaseSignOut(auth);
		console.log('Logout successful');
	} catch (error: any) {
		console.error('Logout error:', error);
		authError.set(error.message);
		throw error;
	} finally {
		loading.set(false);
	}
}

// Reset password
async function resetPassword(email: string): Promise<void> {
	loading.set(true);
	authError.set(null);
	console.log('Requesting password reset for:', { email });
	try {
		await sendPasswordResetEmail(auth, email);
		console.log('Password reset email sent');
	} catch (error: any) {
		console.error('Password reset error:', error);
		authError.set(error.message);
		throw error;
	} finally {
		loading.set(false);
	}
}

// Get current user
function getCurrentUser(): User | null {
	const currentUser = auth.currentUser;
	console.log('Getting current user:', currentUser ? {
		uid: currentUser.uid,
		email: currentUser.email,
		displayName: currentUser.displayName
	} : 'No user');
	return currentUser;
}

export {
	initAuth,
	register,
	login,
	loginWithGoogle,
	logout,
	resetPassword,
	getCurrentUser,
	updateProfile
};===== ./src/lib/stores/appStore.ts =====
import { writable } from 'svelte/store';
import { persistentStore } from './persistentStore.js';

// UI State
export const sidebarOpen = writable(false);
export const courseModalOpen = writable(false);
export const currentCourse = writable(null);

// User-related State
export const user = writable({
  name: 'Alex Morgan',
  email: 'alex@example.com',
  avatar: '',
  streak: 7
});

// Types
export interface User {
  id: string;
  name: string;
  email: string;
  avatar: string | null;
  streakDays: number;
}

// Progress stats
export const progressStats = writable({
  coursesInProgress: 3,
  exercisesCompleted: 28,
  learningStreak: 5,
  totalHoursSpent: 42
});

// Modal visibility state
export const modals = writable({
  courseContentOpen: false,
});===== ./src/lib/stores/authStore.ts =====
import { writable, derived } from 'svelte/store';
import type { User } from 'firebase/auth';
import { logout as firebaseLogout } from '../authService.js';

export const isAuthenticated = writable<boolean>(false);
export const user = writable<User | null>(null);
export const loading = writable<boolean>(true);
export const authError = writable<string | null>(null);

export const isAdmin = derived(user, ($user) => {
  // Example: check for a custom claim or email
  if (!$user) return false;
  // You can customize this logic as needed
  return $user.email === 'admin@example.com' || $user?.isAdmin === true;
});

export const logout = firebaseLogout;===== ./src/lib/stores/sidebarStore.ts =====
import { writable } from 'svelte/store';

// true = collapsed (icons only), false = expanded (full width)
export const sidebarCollapsed = writable(false);===== ./src/lib/stores/persistentStore.js =====
import { writable } from 'svelte/store';
import { browser } from '$app/environment'; // Ensure code only runs in browser

/**
 * Creates a Svelte writable store that automatically persists to localStorage.
 * @template T
 * @param {string} key The localStorage key.
 * @param {T} initialValue The initial value if nothing is in localStorage.
 * @returns {import('svelte/store').Writable<T>}
 */
export function persistentStore(key, initialValue) {
    let initial = initialValue;
    if (browser) { // Check if running in the browser context
        const storedValue = localStorage.getItem(key);
        if (storedValue !== null) {
            try {
                initial = JSON.parse(storedValue);
            } catch (e) {
                console.error(`Error parsing localStorage key "${key}":`, e);
                localStorage.removeItem(key); // Remove corrupted data
                initial = initialValue;
            }
        }
    }

    const store = writable(initial);

    if (browser) {
        store.subscribe(value => {
            // Prevent writing undefined to localStorage
            if (value !== undefined) {
              localStorage.setItem(key, JSON.stringify(value));
            }
        });
    }

    return store;
}

// Track completed exercises (array of exercise IDs)
export const completedExercises = persistentStore('completedExercises', []);
// Track bookmarked exercises with reason and date
export const bookmarks = persistentStore('bookmarkedExercises', []);===== ./src/lib/stores/courseStore.ts =====
import { writable, derived } from 'svelte/store';
import type { ContentNode } from '$lib/services/courses/courseService';
import { fetchCourses, fetchCourseCategories } from '$lib/services/courses/courseService';
import { browser } from '$app/environment';

// Create stores
export const courseItems = writable<ContentNode[]>([]);
export const courseCategories = writable<any[]>([]);
export const selectedCourse = writable<ContentNode | null>(null);
export const isLoading = writable(false);
export const error = writable<string | null>(null);

// Initialize the store data
export async function initCourseStore() {
  if (!browser) return; // Don't run on server
  
  isLoading.set(true);
  error.set(null);
  
  try {
    const [courses, categories] = await Promise.all([
      fetchCourses(),
      fetchCourseCategories()
    ]);
    
    courseItems.set(courses);
    courseCategories.set(categories);
  } catch (err) {
    console.error('Error initializing course store:', err);
    error.set('Failed to load courses. Please try again later.');
  } finally {
    isLoading.set(false);
  }
}

// Filter courses by category
export function filterCoursesByCategory(categoryId: string) {
  isLoading.set(true);
  
  return derived(courseItems, ($courseItems) => {
    isLoading.set(false);
    if (!categoryId || categoryId === 'all') {
      return $courseItems;
    }
    return $courseItems.filter(course => course.category === categoryId);
  });
}

// Select a course
export function selectCourse(course: ContentNode) {
  selectedCourse.set(course);
}

// Clear selection
export function clearSelection() {
  selectedCourse.set(null);
}
===== ./src/lib/stores/adminStore.ts =====
import { derived } from 'svelte/store';
import { user } from './authStore.js';
import { env } from '$env/dynamic/public';

const ADMIN_EMAILS = (env.PUBLIC_VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());

export const isAdmin = derived(user, $user => {
    if (!$user || !$user.email) return false;
    return ADMIN_EMAILS.includes($user.email);
});===== ./src/lib/stores/pipStores.ts =====
import { writable } from 'svelte/store';
import { persistentStore } from './persistentStore.js';

// State for the PiP widget itself
export const pipVisible = writable(false);
export const pipMinimized = writable(false);
export const activePipTool = persistentStore('learnflow-active-pip-tool', null); // Persist active tool

// Currently active tool in the PIP widget
export const activeTool = writable('timer');

// --- Timer Store --- (Types defined inline for simplicity, move to $types later if needed)
export interface TimerMode {
	type: 'work' | 'shortBreak' | 'longBreak';
}

export interface TimerState {
	mode: TimerMode;
	timeLeft: number;
	isRunning: boolean;
	cycle: number; // Number of work cycles completed
}

export interface TimerSettings {
	workDuration: number;        // in seconds
	shortBreakDuration: number;  // in seconds
	longBreakDuration: number;   // in seconds
	longBreakInterval: number;   // number of work sessions before long break
}

const initialTimerState: TimerState = {
	mode: { type: 'work' },
	timeLeft: 25 * 60, // Default 25 mins work
	isRunning: false,
	cycle: 0
};

// Active timer state (persistent)
export const timerState = persistentStore<TimerState>('learnflow-timer-state', initialTimerState);

// Timer settings with default values
export const timerSettings = persistentStore<TimerSettings>('learnflow-timer-settings', {
	workDuration: 25 * 60,        // 25 minutes
	shortBreakDuration: 5 * 60,   // 5 minutes
	longBreakDuration: 15 * 60,   // 15 minutes
	longBreakInterval: 4          // Long break after 4 work sessions
});

// --- Todo Store ---
export interface TodoItem {
	id: string;
	text: string;
	completed: boolean;
	createdAt: number;
	description?: string;
	deadline?: string; // ISO date string
	emergency?: number; // 1-5 scale
	tag?: string;
}
export const todos = persistentStore<TodoItem[]>('learnflow-todos', []);

// --- Notes Store ---
export interface NoteItem {
	id: string;
	title: string;
	content: string; // Markdown content
	createdAt: number;
	updatedAt: number;
}
export const notes = persistentStore<NoteItem[]>('learnflow-notes', []);

// --- Notepad Content Store ---
export const notepadContent = persistentStore<string>('learnflow-notepad-content', '');

// --- Focus Session Store ---
export interface FocusSession {
	timestamp: number; // When the session ended (Date.now())
	duration: number;  // Duration in seconds
}

// Store an array of completed focus sessions (persistent)
export const focusSessions = persistentStore<FocusSession[]>('learnflow-focus-sessions', []);

// --- Exercise Sessions Store ---
export interface ExerciseSession {
  exerciseId: string;
  timestamp: number;
  completed: boolean;
}
// Store an array of completed exercise sessions (persistent)
export const exerciseSessions = persistentStore<ExerciseSession[]>('learnflow-exercise-sessions', []);

// --- Flashcards Store ---
export interface Flashcard {
  id: string;
  front: string;
  back: string;
  lastReviewed?: number;
  nextReview?: number;
  level: number; // 0-5 for spaced repetition
  tags: string[];
}

export const flashcards = persistentStore<Flashcard[]>('learnflow-flashcards', []);
export const flashcardStats = writable({
  totalReviews: 0,
  correctReviews: 0,
  streakDays: 0,
  lastReviewDate: null as number | null
});

// --- Calculator Store --- (Transient state)
export const calcDisplay = writable('0');
export const calcCurrentInput = writable('');
export const calcOperator = writable<string | null>(null);
export const calcPreviousValue = writable<number | null>(null);
export const calcWaitingForSecondOperand = writable(false);===== ./src/lib/stores/forumStore.ts =====
import { persistentStore } from './persistentStore.js';
import { writable, derived } from 'svelte/store';
import type { ForumCategory, ForumTopic, ForumPost } from '$lib/types/forumTypes';
import { 
  getForumCategories, 
  getForumTopics, 
  getForumTopic, 
  getForumPosts,
  getTopicsByTag
} from '$lib/services/forums/forumService';
import { browser } from '$app/environment';

// Store list of subscribed topic IDs
export const subscribedTopics = persistentStore<string[]>('learnflow-subscribed-topics', []);

// Create stores
export const categories = writable<ForumCategory[]>([]);
export const topics = writable<ForumTopic[]>([]);
export const currentTopic = writable<ForumTopic | null>(null);
export const posts = writable<ForumPost[]>([]);
export const isLoading = writable<boolean>(false);
export const error = writable<string | null>(null);
export const activeTagFilter = writable<string | null>(null);
export const forumCategories = writable<ForumCategory[]>([]);
export const selectedCategory = writable<ForumCategory | null>(null);

// Initialize categories
export async function loadCategories(): Promise<void> {
  if (!browser) return;
  
  isLoading.set(true);
  error.set(null);
  
  try {
    const result = await getForumCategories();
    categories.set(result);
  } catch (err) {
    console.error('Error loading forum categories:', err);
    error.set('Failed to load forum categories');
  } finally {
    isLoading.set(false);
  }
}

// Load topics for a category
export async function loadTopics(categoryId?: string): Promise<void> {
  if (!browser) return;
  
  isLoading.set(true);
  error.set(null);
  
  try {
    const result = await getForumTopics(categoryId);
    topics.set(result);
  } catch (err) {
    console.error('Error loading forum topics:', err);
    error.set('Failed to load forum topics');
  } finally {
    isLoading.set(false);
  }
}

// Load a specific topic and its posts
export async function loadTopic(topicId: string): Promise<void> {
  if (!browser) return;
  
  isLoading.set(true);
  error.set(null);
  currentTopic.set(null);
  posts.set([]);
  
  try {
    const [topicResult, postsResult] = await Promise.all([
      getForumTopic(topicId),
      getForumPosts(topicId)
    ]);
    
    if (topicResult) {
      currentTopic.set(topicResult);
      posts.set(postsResult);
    } else {
      error.set('Topic not found');
    }
  } catch (err) {
    console.error(`Error loading topic ${topicId}:`, err);
    error.set('Failed to load topic');
  } finally {
    isLoading.set(false);
  }
}

// Filter topics by tag
export async function filterTopicsByTag(tag: string): Promise<void> {
  if (!browser) return;
  
  isLoading.set(true);
  error.set(null);
  activeTagFilter.set(tag);
  
  try {
    const result = await getTopicsByTag(tag);
    topics.set(result);
  } catch (err) {
    console.error(`Error loading topics with tag ${tag}:`, err);
    error.set('Failed to load topics with the selected tag');
  } finally {
    isLoading.set(false);
  }
}

// Clear tag filter
export function clearTagFilter(): void {
  activeTagFilter.set(null);
  loadTopics();
}

// Derived store for pinned topics
export const pinnedTopics = derived(topics, $topics => {
  return $topics.filter(topic => topic.isPinned);
});

// Derived store for recent topics
export const recentTopics = derived(topics, $topics => {
  return $topics
    .filter(topic => !topic.isPinned)
    .sort((a, b) => {
      const dateA = a.lastReplyAt || a.createdAt;
      const dateB = b.lastReplyAt || b.createdAt;
      return dateB.getTime() - dateA.getTime();
    })
    .slice(0, 10);
});

// Get category by ID
export function getCategoryById(id: string): ForumCategory | undefined {
  let result: ForumCategory | undefined;
  
  categories.subscribe(cats => {
    result = cats.find(cat => cat.id === id);
  })();
  
  return result;
}===== ./src/lib/stores/userProfileStore.ts =====
import { writable } from 'svelte/store';
import type { User } from 'firebase/auth';
import type { UserProfile } from '../services/userService.js';
import { getUserProfile, createUserProfile, updateUserProfile as updateUserProfileService } from '../services/userService.js';

export const userProfile = writable<UserProfile | null>(null);
export const userProfileLoading = writable<boolean>(false);
export const userProfileError = writable<string | null>(null);

/**
 * Load or create the user profile for the given UID and email/displayName.
 */
export async function loadUserProfile(uid: string, email: string, displayName?: string): Promise<void> {
  userProfileLoading.set(true);
  userProfileError.set(null);

  try {
    let profile = await getUserProfile(uid);
    if (!profile) {
      // create new profile
      const now = Date.now();
      profile = {
        uid,
        email,
        displayName,
        createdAt: now,
        preferences: {
          enrollments: [],
          focusSessions: [],
          tasks: [],
          notes: ''
        }
      };
      await createUserProfile(profile);
    }
    userProfile.set(profile);
  } catch (err: any) {
    console.error('Error loading user profile:', err);
    userProfileError.set(err.message);
    userProfile.set(null);
  } finally {
    userProfileLoading.set(false);
  }
}

export const updateUserProfile = updateUserProfileService;===== ./src/lib/firebase.ts =====
import { initializeApp } from 'firebase/app';
import { getAuth, connectAuthEmulator, type Auth } from 'firebase/auth';
import { getAnalytics } from 'firebase/analytics';
import { getFirestore, type Firestore } from 'firebase/firestore';

// Firebase configuration
// For development, provide sensible defaults if env vars not defined
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "demo-key-for-development",
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "demo-project.firebaseapp.com",
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "demo-project",
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "demo-project.appspot.com",
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "123456789",
  appId: import.meta.env.VITE_FIREBASE_APP_ID || "1:123456789:web:a1b2c3d4e5f6",
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || "G-ABCDEF"
};

// For debugging - only log in development
const isDev = import.meta.env.DEV;
const logDebug = (message: string, data?: any) => {
  if (isDev) {
    console.log(message, data);
  }
};

// Initialize Firebase
let app;
let auth: Auth;
let analytics = null;
let db: Firestore;

try {
  logDebug('Initializing Firebase app');
  app = initializeApp(firebaseConfig);
  
  // Initialize Firebase Authentication
  auth = getAuth(app);
  
  // Initialize Firestore
  db = getFirestore(app);
  
  // Use auth emulator if in development
  if (isDev && import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true') {
    logDebug('Connecting to Firebase Auth emulator');
    connectAuthEmulator(auth, 'http://localhost:9099');
  }

  // Initialize Analytics if in browser environment
  if (typeof window !== 'undefined') {
    try {
      analytics = getAnalytics(app);
      logDebug('Firebase analytics initialized');
    } catch (error) {
      if (isDev) {
        console.warn('Failed to initialize Firebase Analytics:', error);
      }
    }
  }
  
  logDebug('Firebase initialized successfully');
} catch (error) {
  console.error('Error initializing Firebase:', error);
}

// Export Firebase services
export { app, auth, db, analytics };===== ./src/lib/index.ts =====
// Reexport your entry components here
===== ./src/lib/services/exerciseService.ts =====
import { 
  fetchContent, 
  fetchContentById, 
  fetchContentBySlug, 
  type ContentNode 
} from './contentService';
import { getAuth } from 'firebase/auth';
import { 
  doc, 
  getDoc, 
  getFirestore, 
  setDoc, 
  collection, 
  query, 
  where, 
  getDocs,
  serverTimestamp,
  updateDoc,
  arrayUnion
} from 'firebase/firestore';

/**
 * Fetch all exercises
 */
export async function getAllExercises(): Promise<ContentNode[]> {
  return await fetchContent('exercises');
}

/**
 * Fetch exercises by category
 */
export async function getExercisesByCategory(category: string): Promise<ContentNode[]> {
  const exercises = await fetchContent('exercises');
  return exercises.filter(exercise => exercise.category === category);
}

/**
 * Fetch exercise by ID
 */
export async function getExerciseById(id: string): Promise<ContentNode | null> {
  return await fetchContentById('exercises', id);
}

/**
 * Fetch exercise by slug
 */
export async function getExerciseBySlug(slug: string): Promise<ContentNode | null> {
  return await fetchContentBySlug('exercises', slug);
}

/**
 * Track exercise progress for the current user
 */
export async function trackExerciseProgress(exerciseId: string, status: 'started' | 'completed' | 'reset'): Promise<boolean> {
  const auth = getAuth();
  if (!auth.currentUser) return false;

  try {
    const db = getFirestore();
    const userId = auth.currentUser.uid;
    const userProgressRef = doc(db, 'users', userId, 'progress', 'exercises');

    // Update the progress based on the status
    if (status === 'started') {
      await setDoc(userProgressRef, {
        inProgress: { [exerciseId]: true },
        timestamp: serverTimestamp()
      }, { merge: true });
    } else if (status === 'completed') {
      await setDoc(userProgressRef, {
        completed: { [exerciseId]: true },
        inProgress: { [exerciseId]: false },
        timestamp: serverTimestamp()
      }, { merge: true });
      
      // Also update user stats
      const userStatsRef = doc(db, 'users', userId, 'stats', 'exercises');
      await setDoc(userStatsRef, {
        completedCount: { $increment: 1 },
        lastCompletedAt: serverTimestamp(),
        completedExercises: arrayUnion(exerciseId)
      }, { merge: true });
    } else if (status === 'reset') {
      await setDoc(userProgressRef, {
        inProgress: { [exerciseId]: false },
        completed: { [exerciseId]: false },
        timestamp: serverTimestamp()
      }, { merge: true });
    }

    return true;
  } catch (error) {
    console.error('Error tracking exercise progress:', error);
    return false;
  }
}

/**
 * Get user's progress for all exercises
 */
export async function getUserExerciseProgress(): Promise<Record<string, { completed: boolean, inProgress: boolean }>> {
  const auth = getAuth();
  if (!auth.currentUser) return {};

  try {
    const db = getFirestore();
    const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', 'exercises');
    const userProgressDoc = await getDoc(userProgressRef);

    if (!userProgressDoc.exists()) {
      return {};
    }

    const data = userProgressDoc.data();
    const completed = data.completed || {};
    const inProgress = data.inProgress || {};

    const result: Record<string, { completed: boolean, inProgress: boolean }> = {};

    // Combine completed and inProgress into a single status object per exercise
    const allExerciseIds = new Set([...Object.keys(completed), ...Object.keys(inProgress)]);
    
    allExerciseIds.forEach(id => {
      result[id] = {
        completed: completed[id] === true,
        inProgress: inProgress[id] === true
      };
    });

    return result;
  } catch (error) {
    console.error('Error getting user exercise progress:', error);
    return {};
  }
}

/**
 * Get exercise details including user's progress
 */
export async function getExerciseWithUserProgress(exerciseId: string): Promise<{
  exercise: ContentNode | null;
  userProgress: {
    completed: boolean;
    inProgress: boolean;
    timeSpent?: number;
    lastAttemptDate?: Date;
    notes?: string;
    checkedHints?: string[];
  };
}> {
  const exercise = await getExerciseById(exerciseId);
  const auth = getAuth();
  
  let userProgress = {
    completed: false,
    inProgress: false
  };

  if (auth.currentUser && exercise) {
    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', 'exercises');
      const userProgressDoc = await getDoc(userProgressRef);

      if (userProgressDoc.exists()) {
        const data = userProgressDoc.data();
        userProgress.completed = data.completed?.[exerciseId] === true;
        userProgress.inProgress = data.inProgress?.[exerciseId] === true;
      }

      // Get additional exercise details
      const exerciseDetailRef = doc(db, 'users', auth.currentUser.uid, 'exercises', exerciseId);
      const exerciseDetailDoc = await getDoc(exerciseDetailRef);

      if (exerciseDetailDoc.exists()) {
        const data = exerciseDetailDoc.data();
        userProgress = {
          ...userProgress,
          timeSpent: data.timeSpent,
          lastAttemptDate: data.lastAttemptDate?.toDate(),
          notes: data.notes,
          checkedHints: data.checkedHints || []
        };
      }
    } catch (error) {
      console.error('Error getting exercise with user progress:', error);
    }
  }

  return {
    exercise,
    userProgress
  };
}

/**
 * Save exercise notes
 */
export async function saveExerciseNotes(exerciseId: string, notes: string): Promise<boolean> {
  const auth = getAuth();
  if (!auth.currentUser) return false;

  try {
    const db = getFirestore();
    const exerciseDetailRef = doc(db, 'users', auth.currentUser.uid, 'exercises', exerciseId);
    
    await setDoc(exerciseDetailRef, {
      notes,
      lastUpdatedAt: serverTimestamp()
    }, { merge: true });
    
    return true;
  } catch (error) {
    console.error('Error saving exercise notes:', error);
    return false;
  }
}

/**
 * Get recommended exercises based on user's progress and interests
 */
export async function getRecommendedExercises(limit: number = 5): Promise<ContentNode[]> {
  const auth = getAuth();
  if (!auth.currentUser) {
    // If no user is logged in, return random exercises
    const allExercises = await getAllExercises();
    return allExercises
      .sort(() => Math.random() - 0.5)
      .slice(0, limit);
  }

  try {
    // Get user's progress
    const userProgress = await getUserExerciseProgress();
    
    // Get user's interests/preferences
    const db = getFirestore();
    const userPrefRef = doc(db, 'users', auth.currentUser.uid, 'preferences', 'learning');
    const userPrefDoc = await getDoc(userPrefRef);
    
    const allExercises = await getAllExercises();
    let interests: string[] = [];
    
    if (userPrefDoc.exists()) {
      interests = userPrefDoc.data().interests || [];
    }
    
    // Filter out completed exercises
    const incompleteExercises = allExercises.filter(ex => 
      !userProgress[ex.id]?.completed
    );
    
    // Prioritize exercises with matching interests/tags
    const scoredExercises = incompleteExercises.map(ex => {
      let score = 0;
      
      // Score based on interests
      if (ex.tags) {
        ex.tags.forEach(tag => {
          if (interests.includes(tag)) {
            score += 2;
          }
        });
      }
      
      // Score based on "in progress" status
      if (userProgress[ex.id]?.inProgress) {
        score += 3;
      }
      
      return { exercise: ex, score };
    });
    
    // Sort by score and return top exercises
    return scoredExercises
      .sort((a, b) => b.score - a.score)
      .map(item => item.exercise)
      .slice(0, limit);
  } catch (error) {
    console.error('Error getting recommended exercises:', error);
    
    // Fallback to random exercises on error
    const allExercises = await getAllExercises();
    return allExercises
      .sort(() => Math.random() - 0.5)
      .slice(0, limit);
  }
}
===== ./src/lib/services/userService.ts =====
export interface UserProfile {
  uid: string;
  email: string;
  displayName?: string;
  createdAt: number;
  preferences?: Record<string, any>;
}

/**
 * Load the user profile from Firestore. Returns null if not found.
 */
export async function getUserProfile(uid: string): Promise<UserProfile | null> {
  if (typeof window === 'undefined') return null;
  const { getFirestore, doc, getDoc } = await import('firebase/firestore');
  const { app } = await import('../firebase.js');
  const db = getFirestore(app);
  const ref = doc(db, 'users', uid);
  const snap = await getDoc(ref);
  if (snap.exists()) {
    return snap.data() as UserProfile;
  }
  return null;
}

/**
 * Create a new user profile document in Firestore.
 */
export async function createUserProfile(profile: UserProfile): Promise<void> {
  if (typeof window === 'undefined') return;
  const { getFirestore, doc, setDoc } = await import('firebase/firestore');
  const { app } = await import('../firebase.js');
  const db = getFirestore(app);
  const ref = doc(db, 'users', profile.uid);
  await setDoc(ref, profile);
}

/**
 * Update existing user profile fields.
 */
export async function updateUserProfile(uid: string, data: Partial<UserProfile>): Promise<void> {
  if (typeof window === 'undefined') return;
  const { getFirestore, doc, updateDoc } = await import('firebase/firestore');
  const { app } = await import('../firebase.js');
  const db = getFirestore(app);
  const ref = doc(db, 'users', uid);
  await updateDoc(ref, data);
}
===== ./src/lib/services/activityService.ts =====
// src/lib/services/activityService.ts
import { collection, addDoc, query, where, orderBy, limit as firestoreLimit, getDocs, doc, updateDoc, type DocumentData } from 'firebase/firestore';
import { db } from '../firebase.js';
import { get } from 'svelte/store';
import { user } from '../stores/authStore.js';

export interface Activity {
  id: string;
  userId: string;
  eventType: string;
  referenceId?: string;
  metadata?: Record<string, any>;
  timestampStart: number;
  timestampEnd?: number;
}

/**
 * Start logging an activity
 */
export async function logStart(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<string> {
  const activityData: any = {
    eventType,
    timestampStart: Date.now(),
  };
  
  // Get user ID from auth store instead of localStorage
  const currentUser = get(user);
  if (currentUser) {
    activityData.userId = currentUser.uid;
  } else {
    // Fallback to localStorage only if needed
    const localStorageUserId = globalThis?.localStorage?.getItem('userId');
    if (localStorageUserId) {
      activityData.userId = localStorageUserId;
    }
  }
  
  // Only add these fields if they're not undefined
  if (referenceId !== undefined) {
    activityData.referenceId = referenceId;
  }
  
  if (metadata !== undefined) {
    activityData.metadata = metadata;
  }
  
  try {
    const docRef = await addDoc(collection(db, 'activities'), activityData);
    return docRef.id;
  } catch (error) {
    console.error('Error logging activity start:', error);
    return '';
  }
}

/**
 * Log completion of an activity
 */
export async function logEnd(activityId: string): Promise<void> {
  const activityDoc = doc(db, 'activities', activityId);
  await updateDoc(activityDoc, {
    timestampEnd: Date.now()
  });
}

/**
 * Log a one-time event
 */
export async function logEvent(eventType: string, referenceId?: string, metadata?: Record<string, any>): Promise<void> {
  const now = Date.now();
  const eventData: any = {
    eventType,
    timestampStart: now,
    timestampEnd: now
  };
  
  // Get user ID from auth store instead of localStorage
  const currentUser = get(user);
  if (currentUser) {
    eventData.userId = currentUser.uid;
  } else {
    // Fallback to localStorage only if needed
    const localStorageUserId = globalThis?.localStorage?.getItem('userId');
    if (localStorageUserId) {
      eventData.userId = localStorageUserId;
    }
  }
  
  // Only add these fields if they're not undefined
  if (referenceId !== undefined) {
    eventData.referenceId = referenceId;
  }
  
  if (metadata !== undefined) {
    eventData.metadata = metadata;
  }
  
  try {
    await addDoc(collection(db, 'activities'), eventData);
  } catch (error) {
    console.error('Error logging event:', error);
  }
}

/**
 * Fetch recent activities for a user
 */
export async function getRecentActivities(userId: string, limitCount: number = 10): Promise<Activity[]> {
  const q = query(
    collection(db, 'activities'),
    where('userId', '==', userId),
    orderBy('timestampStart', 'desc'),
    firestoreLimit(limitCount)
  );

  const snapshot = await getDocs(q);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Activity[];
}

/**
 * Fetch recent activities for the current user
 */
export async function fetchRecentActivities(limitCount: number = 10): Promise<Activity[]> {
  const userId = globalThis?.localStorage?.getItem('userId');
  if (!userId) return [];
  return getRecentActivities(userId, limitCount);
}===== ./src/lib/services/scoreService.ts =====
// src/lib/services/scoreService.ts
import { pool } from './userService.server.js';
// Import the new server-side content service and necessary types
import { getAllContentItemsByType } from '$lib/server/contentService';
import type { ContentManifestItem } from '$lib/server/contentService'; // Assuming ContentManifestItem is exported or define a similar type here

// Define a type similar to the old CourseStructure based on ContentManifestItem
// Adjust this based on the actual structure needed by calculateUserScore
interface CourseStructureLike extends ContentManifestItem {
  modules: ContentManifestItem[]; // Assuming modules are children of type 'module'
  // Add other fields if necessary, e.g., total lesson count if not directly calculable
}

/**
 * Calculates a user score on a 0–5 scale.
 * Combines weighted sub-scores for courses, exercises, and flashcards.
 */
export async function calculateUserScore(userId: string): Promise<number> {
  try {
    // Run all database queries concurrently to reduce total wait time
    const [lessonResults, exerciseResults, flashcardResults, courseStructures] = await Promise.all([
      // 1. Course progress query
      pool.query(
        `SELECT COUNT(DISTINCT reference_id) AS viewed FROM activities WHERE user_id=$1 AND event_type='view_lesson'`,
        [userId]
      ),

      // 2. Exercise completion query
      pool.query(
        `SELECT
          SUM(CASE WHEN event_type='complete_exercise' THEN 1 ELSE 0 END) AS completed,
          SUM(CASE WHEN event_type='start_exercise' THEN 1 ELSE 0 END) AS started
         FROM activities
         WHERE user_id=$1`,
        [userId]
      ),

      // 3. Flashcard success query
      pool.query(
        `SELECT
          SUM(CASE WHEN event_type='flashcard_review' AND (metadata->>'success')::boolean THEN 1 ELSE 0 END) AS success,
          SUM(CASE WHEN event_type='flashcard_review' THEN 1 ELSE 0 END) AS total
         FROM activities
         WHERE user_id=$1`,
        [userId]
      ),

      // 4. Load course structures using the new helper
      getAllCourseStructuresLike()
    ]);

    // Extract and calculate course ratio
    const viewedLessons = Number(lessonResults.rows[0]?.viewed || 0);
    const courses = Object.values(courseStructures) as CourseStructureLike[];

    // Calculate total lessons based on the new structure (assuming lessons are children of modules)
    const totalLessons = courses.reduce((courseSum, course) => {
        // Find module children
        const modules = course.children?.filter(child => child.type === 'module') || [];
        // Sum lessons within each module
        const lessonsInCourse = modules.reduce((moduleSum, module) => {
            const lessons = module.children?.filter(child => child.type === 'lesson') || [];
            return moduleSum + lessons.length;
        }, 0);
        return courseSum + lessonsInCourse;
    }, 0);

    const courseRatio = totalLessons ? viewedLessons / totalLessons : 0;

    // Extract and calculate exercise ratio
    const completed = Number(exerciseResults.rows[0]?.completed || 0);
    const started = Number(exerciseResults.rows[0]?.started || 0);
    const exerciseRatio = started ? completed / started : 0;

    // Extract and calculate flashcard ratio
    const success = Number(flashcardResults.rows[0]?.success || 0);
    const total = Number(flashcardResults.rows[0]?.total || 0);
    const flashcardRatio = total ? success / total : 0;

    // Calculate weighted score
    const weights = { course: 0.6, exercise: 0.2, flashcard: 0.2 };
    const rawScore = (
      courseRatio * weights.course +
      exerciseRatio * weights.exercise +
      flashcardRatio * weights.flashcard
    );

    // Scale to 0–5 and round to 2 decimal places
    return Math.round(Math.min(5, Math.max(0, rawScore * 5)) * 100) / 100;
  } catch (error) {
    console.error('Error calculating user score:', error);
    return 0; // Default score on error
  }
}

/**
 * Helper: load all course structures using the new contentService.
 * Renamed to getAllCourseStructuresLike to reflect the potentially different structure.
 */
async function getAllCourseStructuresLike(): Promise<Record<string, CourseStructureLike>> {
  // Use memoization to cache course structures
  if (!getAllCourseStructuresLike.cache) {
      try {
          // Fetch all items of type 'course' from the 'courses' manifest
          const courses = await getAllContentItemsByType('courses', 'course');

          // Transform ContentManifestItem[] to the required Record<string, CourseStructureLike>
          // This assumes the necessary children (modules, lessons) are loaded by getAllContentItemsByType
          // or that the structure provided by it is sufficient.
          // You might need to adjust this transformation based on how deep the manifest structure goes
          // and what calculateUserScore actually needs.
          getAllCourseStructuresLike.cache = courses.reduce<Record<string, CourseStructureLike>>((acc, course) => {
              // Basic transformation, assuming modules/lessons are in children
              acc[course.id] = {
                  ...course,
                  modules: course.children?.filter(child => child.type === 'module') || []
                  // Add more transformation logic if needed
              };
              return acc;
          }, {});

      } catch (error) {
          console.error("Failed to load course structures using contentService:", error);
          getAllCourseStructuresLike.cache = {}; // Return empty object on error
      }
  }

  return getAllCourseStructuresLike.cache;
}

// Add type for the cache property
declare namespace getAllCourseStructuresLike {
  var cache: Record<string, CourseStructureLike> | undefined;
}===== ./src/lib/services/forums/topicService.ts =====
// src/lib/services/forums/topicService.ts
import type { ForumTopic, TopicVote } from '../../types/forum';
import { pool } from '../userService.server';

/**
 * Get a specific topic by ID
 */
export async function getTopic(id: string): Promise<ForumTopic | null> {
  try {
    const result = await pool.query('SELECT * FROM forum_topics WHERE id = $1', [id]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return result.rows[0];
  } catch (error) {
    console.error('Error fetching topic:', error);
    throw new Error('Failed to fetch topic');
  }
}

/**
 * Get all topics
 */
export async function getAllTopics(): Promise<ForumTopic[]> {
  try {
    const result = await pool.query(`
      SELECT t.*, 
             c.name as category_name, 
             COUNT(p.id) as post_count, 
             u.username as author_name
      FROM forum_topics t
      LEFT JOIN forum_categories c ON t.category_id = c.id
      LEFT JOIN forum_posts p ON p.topic_id = t.id
      LEFT JOIN users u ON t.author_id = u.id
      GROUP BY t.id, c.name, u.username
      ORDER BY t.is_pinned DESC, t.created_at DESC
    `);
    
    return result.rows;
  } catch (error) {
    console.error('Error fetching topics:', error);
    throw new Error('Failed to fetch topics');
  }
}

/**
 * Create a new topic
 */
export async function createTopic(data: {
  title: string;
  category_id: string;
  author_id: string;
  content: string;
}): Promise<ForumTopic> {
  try {
    // Start a transaction
    await pool.query('BEGIN');
    
    // Insert the topic
    const topicResult = await pool.query(
      'INSERT INTO forum_topics (title, category_id, author_id) VALUES ($1, $2, $3) RETURNING *',
      [data.title, data.category_id, data.author_id]
    );
    
    // Insert the first post for this topic
    await pool.query(
      'INSERT INTO forum_posts (topic_id, author_id, content) VALUES ($1, $2, $3)',
      [topicResult.rows[0].id, data.author_id, data.content]
    );
    
    // Commit the transaction
    await pool.query('COMMIT');
    
    return topicResult.rows[0];
  } catch (error) {
    // Rollback in case of error
    await pool.query('ROLLBACK');
    console.error('Error creating topic:', error);
    throw new Error('Failed to create topic');
  }
}

/**
 * Update a topic
 */
export async function updateTopic(
  id: string, 
  data: Partial<ForumTopic>
): Promise<ForumTopic | null> {
  try {
    // Create SET clause dynamically based on provided fields
    const fields = Object.keys(data)
      .filter(key => key !== 'id') // Don't update id
      .map((key, index) => `${key} = $${index + 2}`);
    
    if (fields.length === 0) {
      return null; // Nothing to update
    }
    
    const values = Object.values(data);
    
    const query = `
      UPDATE forum_topics 
      SET ${fields.join(', ')}, updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;
    
    const result = await pool.query(query, [id, ...values]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return result.rows[0];
  } catch (error) {
    console.error('Error updating topic:', error);
    throw new Error('Failed to update topic');
  }
}

/**
 * Delete a topic and all its posts
 */
export async function deleteTopic(id: string): Promise<boolean> {
  try {
    // Start a transaction
    await pool.query('BEGIN');
    
    // Delete all posts for this topic
    await pool.query('DELETE FROM forum_posts WHERE topic_id = $1', [id]);
    
    // Delete the topic
    const result = await pool.query('DELETE FROM forum_topics WHERE id = $1 RETURNING id', [id]);
    
    // Commit the transaction
    await pool.query('COMMIT');
    
    return result.rows.length > 0;
  } catch (error) {
    // Rollback in case of error
    await pool.query('ROLLBACK');
    console.error('Error deleting topic:', error);
    throw new Error('Failed to delete topic');
  }
}

/**
 * Handle topic voting (upvote/downvote)
 */
export async function handleTopicVote(
  topicId: string, 
  userId: string, 
  voteType: 1 | -1
): Promise<{ success: boolean; currentVotes: number }> {
  try {
    // Start a transaction
    await pool.query('BEGIN');
    
    // Check if user already voted on this topic
    const existingVote = await pool.query(
      'SELECT * FROM topic_votes WHERE topic_id = $1 AND user_id = $2',
      [topicId, userId]
    );
    
    let result;
    
    if (existingVote.rows.length > 0) {
      // User already voted, update their vote
      if (existingVote.rows[0].vote_type === voteType) {
        // Remove vote if clicking the same button
        await pool.query(
          'DELETE FROM topic_votes WHERE topic_id = $1 AND user_id = $2',
          [topicId, userId]
        );
      } else {
        // Change vote type
        await pool.query(
          'UPDATE topic_votes SET vote_type = $3 WHERE topic_id = $1 AND user_id = $2',
          [topicId, userId, voteType]
        );
      }
    } else {
      // New vote
      await pool.query(
        'INSERT INTO topic_votes (topic_id, user_id, vote_type) VALUES ($1, $2, $3)',
        [topicId, userId, voteType]
      );
    }
    
    // Get the current total votes
    const votesResult = await pool.query(
      'SELECT COALESCE(SUM(vote_type), 0) as total_votes FROM topic_votes WHERE topic_id = $1',
      [topicId]
    );
    
    // Update the votes count in the topics table
    await pool.query(
      'UPDATE forum_topics SET votes = $2 WHERE id = $1',
      [topicId, votesResult.rows[0].total_votes]
    );
    
    // Commit the transaction
    await pool.query('COMMIT');
    
    return { 
      success: true, 
      currentVotes: parseInt(votesResult.rows[0].total_votes) 
    };
  } catch (error) {
    // Rollback in case of error
    await pool.query('ROLLBACK');
    console.error('Error handling topic vote:', error);
    throw new Error('Failed to process vote');
  }
}

export const createPost = async (topicId: string, postData: any) => {
  // Add post logic
  return { ...postData, createdAt: new Date() };
};===== ./src/lib/services/forums/forumService.ts =====
import type { ForumCategory, ForumTopic, ForumPost, ForumLike } from '$lib/types/forumTypes';
import { error } from '@sveltejs/kit';
import { db } from '$lib/firebase'; // Corrected import for Firebase Firestore

// Forum Service
export async function getForumCategories(): Promise<ForumCategory[]> {
  const snapshot = await db.collection('categories').get();
  return snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }));
}

export async function getForumCategory(id: string): Promise<ForumCategory> {
  const doc = await db.collection('categories').doc(id).get();
  return { id: doc.id, ...doc.data() };
}

export async function updateForumCategory(id: string, data: Partial<ForumCategory>) {
  await db.collection('categories').doc(id).update({ ...data, updatedAt: new Date() });
}

// Category operations
// Renamed and re-exported to ensure proper module recognition
export const getCategories = async (): Promise<ForumCategory[]> => {
  try {
    return await db.collection('forumCategories')
      .orderBy('order', 'asc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumCategory)));
  } catch (err) {
    console.error('Error getting forum categories:', err);
    throw error(500, 'Failed to fetch forum categories');
  }
};

// Export alias to match the imported function name
export const getAllCategories = getCategories;

export const getCategoryById = async (id: string): Promise<ForumCategory> => {
  try {
    const doc = await db.collection('forumCategories').doc(id).get();
    if (!doc.exists) {
      throw error(404, 'Forum category not found');
    }
    return { id: doc.id, ...doc.data() } as ForumCategory;
  } catch (err) {
    console.error(`Error getting forum category ${id}:`, err);
    throw error(500, 'Failed to fetch forum category');
  }
};

export const createCategory = async (category: Omit<ForumCategory, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumCategories').add({
      ...category,
      topicCount: 0,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum category:', err);
    throw error(500, 'Failed to create forum category');
  }
};

export const updateCategory = async (id: string, category: Partial<Omit<ForumCategory, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumCategories').doc(id).update({
      ...category,
      updatedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum category ${id}:`, err);
    throw error(500, 'Failed to update forum category');
  }
};

export const deleteCategory = async (id: string): Promise<void> => {
  try {
    await db.collection('forumCategories').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum category ${id}:`, err);
    throw error(500, 'Failed to delete forum category');
  }
};

// Topic operations
export const getTopicsByCategory = async (categoryId: string): Promise<ForumTopic[]> => {
  try {
    return await db.collection('forumTopics')
      .where('categoryId', '==', categoryId)
      .orderBy('lastPostAt', 'desc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumTopic)));
  } catch (err) {
    console.error(`Error getting topics for category ${categoryId}:`, err);
    throw error(500, 'Failed to fetch forum topics');
  }
};

export const getAllTopics = async (): Promise<ForumTopic[]> => {
  try {
    return await db.collection('forumTopics')
      .orderBy('lastPostAt', 'desc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumTopic)));
  } catch (err) {
    console.error('Error getting all forum topics:', err);
    throw error(500, 'Failed to fetch forum topics');
  }
};

export const getTopicById = async (id: string): Promise<ForumTopic> => {
  try {
    const doc = await db.collection('forumTopics').doc(id).get();
    if (!doc.exists) {
      throw error(404, 'Forum topic not found');
    }
    return { id: doc.id, ...doc.data() } as ForumTopic;
  } catch (err) {
    console.error(`Error getting forum topic ${id}:`, err);
    throw error(500, 'Failed to fetch forum topic');
  }
};

export const createTopic = async (topic: Omit<ForumTopic, 'id' | 'postCount' | 'viewCount' | 'lastPostAt' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumTopics').add({
      ...topic,
      postCount: 0,
      viewCount: 0,
      lastPostAt: now,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum topic:', err);
    throw error(500, 'Failed to create forum topic');
  }
};

export const updateTopic = async (id: string, topic: Partial<Omit<ForumTopic, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumTopics').doc(id).update({
      ...topic,
      updatedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum topic ${id}:`, err);
    throw error(500, 'Failed to update forum topic');
  }
};

export const deleteTopic = async (id: string): Promise<void> => {
  try {
    await db.collection('forumTopics').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum topic ${id}:`, err);
    throw error(500, 'Failed to delete forum topic');
  }
};

// Post operations
export const getPostsByTopicId = async (topicId: string): Promise<ForumPost[]> => {
  try {
    return await db.collection('forumPosts')
      .where('topicId', '==', topicId)
      .orderBy('createdAt', 'asc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumPost)));
  } catch (err) {
    console.error(`Error getting posts for topic ${topicId}:`, err);
    throw error(500, 'Failed to fetch forum posts');
  }
};

export const createPost = async (post: Omit<ForumPost, 'id' | 'likeCount' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumPosts').add({
      ...post,
      likeCount: 0,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum post:', err);
    throw error(500, 'Failed to create forum post');
  }
};

export const updatePost = async (id: string, post: Partial<Omit<ForumPost, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumPosts').doc(id).update({
      ...post,
      updatedAt: new Date(),
      editedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum post ${id}:`, err);
    throw error(500, 'Failed to update forum post');
  }
};

export const deletePost = async (id: string): Promise<void> => {
  try {
    await db.collection('forumPosts').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum post ${id}:`, err);
    throw error(500, 'Failed to delete forum post');
  }
};===== ./src/lib/services/forums/postService.ts =====
// Placeholder for postService logic
===== ./src/lib/services/forumService.ts =====
import type { ForumCategory, ForumTopic, ForumPost, ForumLike } from '$lib/types/forumTypes';
import { error } from '@sveltejs/kit';
import { db } from '$lib/firebase'; // Use Firestore instance

// Category operations
export const getCategories = async (): Promise<ForumCategory[]> => {
  try {
    return await db.collection('forumCategories')
      .orderBy('order', 'asc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumCategory)));
  } catch (err) {
    console.error('Error getting forum categories:', err);
    throw error(500, 'Failed to fetch forum categories');
  }
};

export const getCategoryById = async (id: string): Promise<ForumCategory> => {
  try {
    const doc = await db.collection('forumCategories').doc(id).get();
    if (!doc.exists) {
      throw error(404, 'Forum category not found');
    }
    return { id: doc.id, ...doc.data() } as ForumCategory;
  } catch (err) {
    console.error(`Error getting forum category ${id}:`, err);
    throw error(500, 'Failed to fetch forum category');
  }
};

export const createCategory = async (category: Omit<ForumCategory, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumCategories').add({
      ...category,
      topicCount: 0,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum category:', err);
    throw error(500, 'Failed to create forum category');
  }
};

export const updateCategory = async (id: string, category: Partial<Omit<ForumCategory, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumCategories').doc(id).update({
      ...category,
      updatedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum category ${id}:`, err);
    throw error(500, 'Failed to update forum category');
  }
};

export const deleteCategory = async (id: string): Promise<void> => {
  try {
    await db.collection('forumCategories').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum category ${id}:`, err);
    throw error(500, 'Failed to delete forum category');
  }
};

// Topic operations
export const getTopics = async (categoryId?: string): Promise<ForumTopic[]> => {
  try {
    let query = db.collection('forumTopics');
    
    if (categoryId) {
      query = query.where('categoryId', '==', categoryId);
    }
    
    return await query
      .orderBy('lastPostAt', 'desc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumTopic)));
  } catch (err) {
    console.error('Error getting forum topics:', err);
    throw error(500, 'Failed to fetch forum topics');
  }
};

export const getTopicById = async (id: string): Promise<ForumTopic> => {
  try {
    const doc = await db.collection('forumTopics').doc(id).get();
    if (!doc.exists) {
      throw error(404, 'Forum topic not found');
    }
    return { id: doc.id, ...doc.data() } as ForumTopic;
  } catch (err) {
    console.error(`Error getting forum topic ${id}:`, err);
    throw error(500, 'Failed to fetch forum topic');
  }
};

export const createTopic = async (topic: Omit<ForumTopic, 'id' | 'postCount' | 'viewCount' | 'lastPostAt' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumTopics').add({
      ...topic,
      postCount: 0,
      viewCount: 0,
      lastPostAt: now,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum topic:', err);
    throw error(500, 'Failed to create forum topic');
  }
};

export const updateTopic = async (id: string, topic: Partial<Omit<ForumTopic, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumTopics').doc(id).update({
      ...topic,
      updatedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum topic ${id}:`, err);
    throw error(500, 'Failed to update forum topic');
  }
};

export const deleteTopic = async (id: string): Promise<void> => {
  try {
    await db.collection('forumTopics').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum topic ${id}:`, err);
    throw error(500, 'Failed to delete forum topic');
  }
};

// Post operations
export const getPostsByTopicId = async (topicId: string): Promise<ForumPost[]> => {
  try {
    return await db.collection('forumPosts')
      .where('topicId', '==', topicId)
      .orderBy('createdAt', 'asc')
      .get()
      .then(snapshot => snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ForumPost)));
  } catch (err) {
    console.error(`Error getting posts for topic ${topicId}:`, err);
    throw error(500, 'Failed to fetch forum posts');
  }
};

export const createPost = async (post: Omit<ForumPost, 'id' | 'likeCount' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date();
    const result = await db.collection('forumPosts').add({
      ...post,
      likeCount: 0,
      createdAt: now,
      updatedAt: now
    });
    return result.id;
  } catch (err) {
    console.error('Error creating forum post:', err);
    throw error(500, 'Failed to create forum post');
  }
};

export const updatePost = async (id: string, post: Partial<Omit<ForumPost, 'id' | 'createdAt' | 'updatedAt'>>): Promise<void> => {
  try {
    await db.collection('forumPosts').doc(id).update({
      ...post,
      updatedAt: new Date(),
      editedAt: new Date()
    });
  } catch (err) {
    console.error(`Error updating forum post ${id}:`, err);
    throw error(500, 'Failed to update forum post');
  }
};

export const deletePost = async (id: string): Promise<void> => {
  try {
    await db.collection('forumPosts').doc(id).delete();
  } catch (err) {
    console.error(`Error deleting forum post ${id}:`, err);
    throw error(500, 'Failed to delete forum post');
  }
};

// Like operations
export const toggleLike = async (postId: string, userId: string): Promise<boolean> => {
  try {
    const likeId = `${postId}_${userId}`;
    const likeRef = db.collection('forumLikes').doc(likeId);
    const likeDoc = await likeRef.get();
    
    if (likeDoc.exists) {
      // Unlike
      await likeRef.delete();
      await db.collection('forumPosts').doc(postId).update({
        likeCount: db.FieldValue.increment(-1)
      });
      return false;
    } else {
      // Like
      await likeRef.set({
        postId,
        userId,
        createdAt: new Date()
      });
      await db.collection('forumPosts').doc(postId).update({
        likeCount: db.FieldValue.increment(1)
      });
      return true;
    }
  } catch (err) {
    console.error(`Error toggling like for post ${postId} by user ${userId}:`, err);
    throw error(500, 'Failed to toggle like');
  }
};

export const checkIfUserLikedPost = async (postId: string, userId: string): Promise<boolean> => {
  try {
    const likeId = `${postId}_${userId}`;
    const likeDoc = await db.collection('forumLikes').doc(likeId).get();
    return likeDoc.exists;
  } catch (err) {
    console.error(`Error checking if user ${userId} liked post ${postId}:`, err);
    throw error(500, 'Failed to check like status');
  }
};
===== ./src/lib/services/contentService.ts =====
// Define the ContentNode type which represents courses and exercises
export interface ContentNode {
  id: string;
  title: string;
  description?: string;
  category?: string;
  tags?: string[];
  content?: string;
  level?: 'beginner' | 'intermediate' | 'advanced';
  duration?: string;
  author?: string;
  createdAt?: Date;
  updatedAt?: Date;
  isPublished?: boolean;
  order?: number;
  type?: 'course' | 'exercise' | 'module';
  prerequisites?: string[];
  children?: ContentNode[];
  parentId?: string;
  slug?: string;
}

// Cache for content data
let courseCache: Record<string, ContentNode[]> = {};
let exerciseCache: Record<string, ContentNode[]> = {};
let categoryCache: Record<string, any> = {};

/**
 * Fetches content from the specified path
 */
export async function fetchContent(type: 'courses' | 'exercises', path?: string): Promise<ContentNode[]> {
  // If we have cached data, return it
  if (type === 'courses' && courseCache[path || 'root']) {
    return courseCache[path || 'root'];
  }
  if (type === 'exercises' && exerciseCache[path || 'root']) {
    return exerciseCache[path || 'root'];
  }

  try {
    // Build the path to fetch
    const basePath = `/content/${type}`;
    const fullPath = path ? `${basePath}/${path}/index.json` : `${basePath}/index.json`;
    
    const response = await fetch(fullPath);
    if (!response.ok) {
      throw new Error(`Failed to fetch content: ${response.statusText}`);
    }
    
    const data = await response.json();
    let result: ContentNode[] = [];
    
    if (Array.isArray(data)) {
      result = data;
    } else if (data.items && Array.isArray(data.items)) {
      result = data.items;
    } else {
      console.warn('Unexpected content format:', data);
      result = [];
    }
    
    // Cache the result
    if (type === 'courses') {
      courseCache[path || 'root'] = result;
    } else {
      exerciseCache[path || 'root'] = result;
    }
    
    return result;
  } catch (error) {
    console.error(`Error fetching ${type}:`, error);
    return [];
  }
}

/**
 * Fetches categories for the specified content type
 */
export async function fetchCategories(type: 'courses' | 'exercises'): Promise<any[]> {
  if (categoryCache[type]) {
    return categoryCache[type];
  }
  
  try {
    const response = await fetch(`/content/${type}/categories.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch categories: ${response.statusText}`);
    }
    
    const data = await response.json();
    categoryCache[type] = data;
    return data;
  } catch (error) {
    console.error(`Error fetching ${type} categories:`, error);
    return [];
  }
}

/**
 * Fetches a specific content item by ID
 */
export async function fetchContentById(type: 'courses' | 'exercises', id: string): Promise<ContentNode | null> {
  try {
    const response = await fetch(`/content/${type}/${id}.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch content: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching ${type} by ID:`, error);
    return null;
  }
}

/**
 * Fetches a specific content item by slug
 */
export async function fetchContentBySlug(type: 'courses' | 'exercises', slug: string): Promise<ContentNode | null> {
  try {
    // First get all items
    const items = await fetchContent(type);
    
    // Find the item with matching slug
    const item = items.find(item => item.slug === slug);
    if (item) {
      return item;
    }
    
    // If not found in the main list, try fetching directly
    const response = await fetch(`/content/${type}/by-slug/${slug}.json`);
    if (!response.ok) {
      return null;
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching ${type} by slug:`, error);
    return null;
  }
}

/**
 * Clear content caches
 */
export function clearContentCache() {
  courseCache = {};
  exerciseCache = {};
  categoryCache = {};
}
===== ./src/lib/services/scoreService.test.ts =====
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { calculateUserScore } from './scoreService.js'; // Added .js extension
import * as userService from '$lib/services/userService.server.js'; // Added .js extension
import * as contentService from '$lib/server/contentService.js'; // Added .js extension and corrected path

// Mock pool.query
vi.mock('$lib/services/userService.server.js', () => ({ // Added .js extension
  pool: { query: vi.fn() }
}));

// Mock getAllContentItemsByType
vi.mock('$lib/server/contentService.js', () => ({ // Added .js extension and corrected mock path
  getAllContentItemsByType: vi.fn(async (contentType: string, itemType: string) => {
    if (contentType === 'courses' && itemType === 'course') {
      // Simulate 2 courses, each with 1 module containing 2 lessons = 4 total lessons
      return [
        {
          id: 'course1',
          type: 'course',
          title: 'Course 1',
          path: 'course1',
          children: [
            {
              id: 'm1',
              type: 'module',
              title: 'Module 1',
              path: 'course1/m1',
              children: [
                { id: 'l1a', type: 'lesson', title: 'Lesson 1a', path: 'course1/m1/l1a' },
                { id: 'l1b', type: 'lesson', title: 'Lesson 1b', path: 'course1/m1/l1b' }
              ]
            }
          ]
        },
        {
          id: 'course2',
          type: 'course',
          title: 'Course 2',
          path: 'course2',
          children: [
            {
              id: 'm2',
              type: 'module',
              title: 'Module 2',
              path: 'course2/m2',
              children: [
                { id: 'l2a', type: 'lesson', title: 'Lesson 2a', path: 'course2/m2/l2a' },
                { id: 'l2b', type: 'lesson', title: 'Lesson 2b', path: 'course2/m2/l2b' }
              ]
            }
          ]
        }
      ];
    }
    return []; // Default empty array for other types
  })
}));

const { pool } = userService as any;

describe('calculateUserScore', () => {
  beforeEach(() => {
    vi.resetAllMocks();
    (contentService.getAllContentItemsByType as any).mockClear();
    (contentService.getAllContentItemsByType as any).mockImplementation(async (contentType: string, itemType: string) => {
      if (contentType === 'courses' && itemType === 'course') {
        return [
          {
            id: 'course1',
            type: 'course',
            title: 'Course 1',
            path: 'course1',
            children: [
              {
                id: 'm1',
                type: 'module',
                title: 'Module 1',
                path: 'course1/m1',
                children: [
                  { id: 'l1a', type: 'lesson', title: 'Lesson 1a', path: 'course1/m1/l1a' },
                  { id: 'l1b', type: 'lesson', title: 'Lesson 1b', path: 'course1/m1/l1b' }
                ]
              }
            ]
          },
          {
            id: 'course2',
            type: 'course',
            title: 'Course 2',
            path: 'course2',
            children: [
              {
                id: 'm2',
                type: 'module',
                title: 'Module 2',
                path: 'course2/m2',
                children: [
                  { id: 'l2a', type: 'lesson', title: 'Lesson 2a', path: 'course2/m2/l2a' },
                  { id: 'l2b', type: 'lesson', title: 'Lesson 2b', path: 'course2/m2/l2b' }
                ]
              }
            ]
          }
        ];
      }
      return [];
    });
  });

  it('returns 0 when no activities recorded', async () => {
    // No lessons viewed
    pool.query.mockResolvedValueOnce({ rows: [{ viewed: 0 }] });
    // No exercises
    pool.query.mockResolvedValueOnce({ rows: [{ completed: '0', started: '0' }] });
    // No flashcards
    pool.query.mockResolvedValueOnce({ rows: [{ success: '0', total: '0' }] });

    const score = await calculateUserScore('user1');
    expect(score).toBe(0);
  });

  it('returns 5 when fully completed across all categories', async () => {
    // 2 lessons modules x 2 courses = 4 total
    // User viewed 4 lessons
    pool.query.mockResolvedValueOnce({ rows: [{ viewed: 4 }] });
    // Exercises: 3 started, 3 completed
    pool.query.mockResolvedValueOnce({ rows: [{ completed: '3', started: '3' }] });
    // Flashcards: 2 reviews, both success
    pool.query.mockResolvedValueOnce({ rows: [{ success: '2', total: '2' }] });

    const score = await calculateUserScore('user1');
    expect(score).toBe(5);
  });

  it('weights categories correctly', async () => {
    // viewed lessons: 2 of 4 => 0.5
    pool.query.mockResolvedValueOnce({ rows: [{ viewed: 2 }] });
    // exercises: 1 of 2 => 0.5
    pool.query.mockResolvedValueOnce({ rows: [{ completed: '1', started: '2' }] });
    // flashcards: 0 of 2 => 0
    pool.query.mockResolvedValueOnce({ rows: [{ success: '0', total: '2' }] });

    // Raw score = 0.5*0.6 + 0.5*0.2 + 0*0.2 = 0.4
    // Scaled *5 = 2.0
    const score = await calculateUserScore('user1');
    expect(score).toBe(2.0);
  });
});===== ./src/lib/services/groupService.ts =====
import pkg from 'pg';
const { Pool } = pkg;
import { env } from '$env/dynamic/private';

// Configure the connection pool
const pool = new Pool({
  connectionString: env.DATABASE_URL
});

/**
 * Get all groups with member status for a given user
 */
export async function getAllGroups(userId: string | null = null) {
  const client = await pool.connect();
  try {
    const groupsRes = await client.query('SELECT * FROM groups ORDER BY created_at DESC');
    const groups = groupsRes.rows;
    let memberGroupIds: number[] = [];
    
    if (userId) {
      const memberRes = await client.query(
        'SELECT group_id FROM group_members WHERE user_id = $1',
        [userId]
      );
      memberGroupIds = memberRes.rows.map((r: any) => r.group_id);
    }
    
    // Attach isMember flag
    return groups.map((g: any) => ({
      ...g,
      isMember: memberGroupIds.includes(g.id)
    }));
  } catch (err) {
    console.error('Error fetching groups:', err);
    throw err;
  } finally {
    client.release();
  }
}

/**
 * Get a specific group by ID with its members
 */
export async function getGroupById(groupId: string) {
  const client = await pool.connect();
  try {
    const groupRes = await client.query(
      'SELECT * FROM groups WHERE id = $1',
      [groupId]
    );
    
    if (groupRes.rowCount === 0) {
      return null;
    }
    
    const group = groupRes.rows[0];
    const membersRes = await client.query(
      'SELECT user_id FROM group_members WHERE group_id = $1',
      [groupId]
    );
    
    return {
      group,
      members: membersRes.rows
    };
  } catch (err) {
    console.error('Error fetching group:', err);
    throw err;
  } finally {
    client.release();
  }
}

/**
 * Create a new group
 */
export async function createGroup(data: {
  name: string;
  description: string;
  topic: string;
  image?: string;
  is_public?: boolean;
  created_by: string;
}) {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // Create group
    const groupRes = await client.query(
      `INSERT INTO groups (name, description, topic, image, is_public, created_by)
       VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
      [data.name, data.description, data.topic, data.image, data.is_public ?? true, data.created_by]
    );
    
    // Add creator as first member
    await client.query(
      'INSERT INTO group_members (group_id, user_id) VALUES ($1, $2)',
      [groupRes.rows[0].id, data.created_by]
    );
    
    await client.query('COMMIT');
    return groupRes.rows[0];
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error creating group:', err);
    throw err;
  } finally {
    client.release();
  }
}

/**
 * Join a group
 */
export async function joinGroup(groupId: string, userId: string) {
  const client = await pool.connect();
  try {
    await client.query(
      'INSERT INTO group_members (group_id, user_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
      [groupId, userId]
    );
    return true;
  } catch (err) {
    console.error('Error joining group:', err);
    throw err;
  } finally {
    client.release();
  }
}

/**
 * Leave a group
 */
export async function leaveGroup(groupId: string, userId: string) {
  const client = await pool.connect();
  try {
    await client.query(
      'DELETE FROM group_members WHERE group_id = $1 AND user_id = $2',
      [groupId, userId]
    );
    return true;
  } catch (err) {
    console.error('Error leaving group:', err);
    throw err;
  } finally {
    client.release();
  }
}===== ./src/lib/services/recommendationService.ts =====
// src/lib/services/recommendationService.ts

export interface Recommendation {
  type: string;
  referenceId: string;
  title: string;
  description: string;
  metadata?: Record<string, any>;
}===== ./src/lib/services/userService.server.ts =====
import pkg from 'pg';
const { Pool } = pkg;
import { env } from '$env/dynamic/private';

export const pool = new Pool({
  connectionString: env.DATABASE_URL
});

export interface UserProfile {
  uid: string;
  email: string;
  displayName?: string;
  createdAt: number;
  preferences?: Record<string, any>;
}

const ADMIN_EMAILS = (env.VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());

/**
 * Verifies if a user has admin privileges based on their email
 */
export async function verifyUserIsAdmin(email: string | null | undefined): Promise<boolean> {
    if (!email) return false;
    return ADMIN_EMAILS.includes(email);
}

/**
 * Fetches all user profiles from the database (admin only)
 */
export async function getAllUsers(): Promise<UserProfile[]> {
    try {
        const result = await pool.query('SELECT * FROM users');
        return result.rows;
    } catch (error) {
        console.error('Error fetching users:', error);
        throw error;
    }
}
===== ./src/lib/services/courses/exerciseService.ts =====
// src/lib/services/courses/exerciseService.ts
import { 
  fetchCourses, 
  fetchCourseById, 
  fetchCourseBySlug, 
  type ContentNode 
} from './courseService';
import { getAuth } from 'firebase/auth';
import { 
  doc, 
  getDoc, 
  getFirestore, 
  setDoc, 
  collection, 
  query, 
  where, 
  getDocs,
  serverTimestamp,
  updateDoc,
  increment,
  arrayUnion
} from 'firebase/firestore';

// Cache for exercise data
let exerciseCache: Record<string, ContentNode[]> = {};

/**
 * Fetch all exercises
 */
export async function getAllExercises(): Promise<ContentNode[]> {
  if (exerciseCache['root']) {
    return exerciseCache['root'];
  }
  
  try {
    const response = await fetch(`/content/exercises/index.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch exercises: ${response.statusText}`);
    }
    
    const data = await response.json();
    let result: ContentNode[] = [];
    
    if (Array.isArray(data)) {
      result = data;
    } else if (data.items && Array.isArray(data.items)) {
      result = data.items;
    } else {
      console.warn('Unexpected content format:', data);
      result = [];
    }
    
    exerciseCache['root'] = result;
    return result;
  } catch (error) {
    console.error('Error fetching exercises:', error);
    return [];
  }
}

/**
 * Fetch exercises by category
 */
export async function getExercisesByCategory(category: string): Promise<ContentNode[]> {
  if (exerciseCache[`category-${category}`]) {
    return exerciseCache[`category-${category}`];
  }
  
  const exercises = await getAllExercises();
  const filteredExercises = exercises.filter(exercise => exercise.category === category);
  
  exerciseCache[`category-${category}`] = filteredExercises;
  return filteredExercises;
}

/**
 * Fetch exercise by ID
 */
export async function getExerciseById(id: string): Promise<ContentNode | null> {
  try {
    const response = await fetch(`/content/exercises/${id}.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch exercise: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching exercise by ID:`, error);
    return null;
  }
}

/**
 * Fetch exercise by slug
 */
export async function getExerciseBySlug(slug: string): Promise<ContentNode | null> {
  try {
    // First get all exercises
    const exercises = await getAllExercises();
    
    // Find the exercise with matching slug
    const exercise = exercises.find(exercise => exercise.slug === slug);
    if (exercise) {
      return exercise;
    }
    
    // If not found in the main list, try fetching directly
    const response = await fetch(`/content/exercises/by-slug/${slug}.json`);
    if (!response.ok) {
      return null;
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching exercise by slug:`, error);
    return null;
  }
}

/**
 * Clear exercise cache
 */
export function clearExerciseCache() {
  exerciseCache = {};
}===== ./src/lib/services/courses/courseService.ts =====
// src/lib/services/courses/courseService.ts
import { loadContent, listContent } from '$lib/server/contentService';

export interface Lesson {
  id: string;
  title: string;
}

export interface Module {
  id: string;
  title: string;
  lessons: Lesson[];
}

export interface CourseStructure {
  id: string;
  title: string;
  description: string;
  progress: number;
  modules: Module[];
  difficulty?: string;
  estimatedTime?: string;
  tags?: string[];
  gradient?: { from: string; to: string };
  useGlossyRed?: boolean;
}

// Define the ContentNode type which represents courses and exercises
export interface ContentNode {
  id: string;
  title: string;
  description?: string;
  category?: string;
  tags?: string[];
  content?: string;
  level?: 'beginner' | 'intermediate' | 'advanced';
  duration?: string;
  author?: string;
  createdAt?: Date;
  updatedAt?: Date;
  isPublished?: boolean;
  order?: number;
  type?: 'course' | 'exercise' | 'module';
  prerequisites?: string[];
  children?: ContentNode[];
  parentId?: string;
  slug?: string;
}

// Cache for content data
let courseCache: Record<string, ContentNode[]> = {};
let categoryCache: Record<string, any> = {};

/**
 * Fetches courses from the specified path
 */
export async function fetchCourses(path?: string): Promise<ContentNode[]> {
  // If we have cached data, return it
  if (courseCache[path || 'root']) {
    return courseCache[path || 'root'];
  }

  try {
    // Build the path to fetch
    const basePath = `/content/courses`;
    const fullPath = path ? `${basePath}/${path}/index.json` : `${basePath}/index.json`;
    
    const response = await fetch(fullPath);
    if (!response.ok) {
      throw new Error(`Failed to fetch courses: ${response.statusText}`);
    }
    
    const data = await response.json();
    let result: ContentNode[] = [];
    
    if (Array.isArray(data)) {
      result = data;
    } else if (data.items && Array.isArray(data.items)) {
      result = data.items;
    } else {
      console.warn('Unexpected content format:', data);
      result = [];
    }
    
    // Cache the result
    courseCache[path || 'root'] = result;
    
    return result;
  } catch (error) {
    console.error(`Error fetching courses:`, error);
    return [];
  }
}

/**
 * Fetches categories for courses
 */
export async function fetchCourseCategories(): Promise<any[]> {
  if (categoryCache['courses']) {
    return categoryCache['courses'];
  }
  
  try {
    const response = await fetch(`/content/courses/categories.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch categories: ${response.statusText}`);
    }
    
    const data = await response.json();
    categoryCache['courses'] = data;
    return data;
  } catch (error) {
    console.error(`Error fetching course categories:`, error);
    return [];
  }
}

/**
 * Fetches a specific course by ID
 */
export async function fetchCourseById(id: string): Promise<ContentNode | null> {
  try {
    const response = await fetch(`/content/courses/${id}.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch course: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching course by ID:`, error);
    return null;
  }
}

/**
 * Fetches a specific course by slug
 */
export async function fetchCourseBySlug(slug: string): Promise<ContentNode | null> {
  try {
    // First get all courses
    const courses = await fetchCourses();
    
    // Find the course with matching slug
    const course = courses.find(course => course.slug === slug);
    if (course) {
      return course;
    }
    
    // If not found in the main list, try fetching directly
    const response = await fetch(`/content/courses/by-slug/${slug}.json`);
    if (!response.ok) {
      return null;
    }
    
    return await response.json();
  } catch (error) {
    console.error(`Error fetching course by slug:`, error);
    return null;
  }
}

/**
 * Clear course cache
 */
export function clearCourseCache() {
  courseCache = {};
  categoryCache = {};
}

/**
 * List all available courses
 */
export async function listCourses(): Promise<CourseStructure[]> {
  try {
    // Get courses from index.json via contentService
    const contentCourses = await listContent('course');
    
    // Transform ContentMetadata to CourseStructure with content
    const coursesWithContent = await Promise.all(
      contentCourses.map(async (meta) => {
        const course = await loadContent('course', meta.id);
        if (!course) return null;
        
        // Parse modules and lessons from course content
        const modules = extractModulesFromContent(course.content);
        
        return {
          id: meta.id,
          title: meta.title,
          description: meta.description || '',
          difficulty: meta.difficulty,
          estimatedTime: meta.estimatedTime,
          tags: meta.tags,
          progress: 0, // This should come from user progress tracking
          modules,
          gradient: getCourseGradient(meta), // Apply gradient based on course type
        } satisfies CourseStructure;
      })
    );
    
    // Filter out null values and ensure type safety
    return coursesWithContent.filter((course): course is CourseStructure => course !== null);
  } catch (error) {
    console.error('Error loading courses:', error);
    throw new Error('Failed to load courses');
  }
}

/**
 * Get a specific course by id
 */
export async function getCourse(id: string): Promise<CourseStructure | null> {
  try {
    const course = await loadContent('course', id);
    if (!course) return null;
    
    // Parse modules and lessons from course content
    const modules = extractModulesFromContent(course.content);
    
    return {
      id,
      title: course.title,
      description: course.description || '',
      difficulty: course.difficulty,
      estimatedTime: course.estimatedTime,
      tags: course.tags,
      progress: 0, // This would come from user progress tracking
      modules,
      gradient: getCourseGradient(course),
    };
  } catch (error) {
    console.error(`Error loading course ${id}:`, error);
    return null;
  }
}

/**
 * Helper function to extract modules and lessons from course content
 */
function extractModulesFromContent(content: string): Module[] {
  const modules: Module[] = [];
  let currentModule: Module | null = null;

  // Split content into lines and process each line
  const lines = content.split('\n');
  for (const line of lines) {
    // Match module headers (## Module: Title)
    const moduleMatch = line.match(/^##\s*Module:\s*(.+)$/);
    if (moduleMatch) {
      if (currentModule) {
        modules.push(currentModule);
      }
      currentModule = {
        id: moduleMatch[1].toLowerCase().replace(/\s+/g, '-'),
        title: moduleMatch[1],
        lessons: []
      };
      continue;
    }

    // Match lesson entries (### Lesson: Title)
    const lessonMatch = line.match(/^###\s*Lesson:\s*(.+)$/);
    if (lessonMatch && currentModule) {
      currentModule.lessons.push({
        id: lessonMatch[1].toLowerCase().replace(/\s+/g, '-'),
        title: lessonMatch[1]
      });
    }
  }

  // Add the last module if exists
  if (currentModule) {
    modules.push(currentModule);
  }

  return modules;
}

/**
 * Determine course gradient based on content type
 */
function getCourseGradient(course: { id: string; title: string; tags?: string[] }): { from: string; to: string } {
  // Match by course ID, title, and tags
  const text = (course.id + ' ' + course.title).toLowerCase();
  const tags = course.tags || [];
  
  // Math courses (blue gradient)
  if (
    text.includes('math') || 
    text.includes('calcul') || 
    text.includes('mpsi') ||
    tags.some(tag => ['math', 'mathematics', 'calculus', 'algebra'].includes(tag))
  ) {
    return { from: 'blue-500', to: 'blue-400' };
  }
  
  // Programming courses (green gradient)
  if (
    text.includes('python') || 
    text.includes('programming') || 
    text.includes('code') ||
    tags.some(tag => ['programming', 'python', 'coding', 'development'].includes(tag))
  ) {
    return { from: 'green-500', to: 'green-400' };
  }
  
  // Physics courses (purple gradient)
  if (
    text.includes('physics') || 
    text.includes('science') ||
    tags.some(tag => ['physics', 'science'].includes(tag))
  ) {
    return { from: 'purple-500', to: 'purple-400' };
  }
  
  // Language courses (orange gradient)
  if (
    text.includes('language') || 
    text.includes('english') || 
    text.includes('french') ||
    tags.some(tag => ['language', 'english', 'french', 'linguistics'].includes(tag))
  ) {
    return { from: 'orange-500', to: 'orange-400' };
  }
  
  // Default gradient (indigo)
  return { from: 'indigo-500', to: 'indigo-400' };
}===== ./src/lib/components/GeneralWelcome.svelte =====
<!-- src/lib/components/GeneralWelcome.svelte -->
<div class="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white rounded-lg shadow-xl p-8 my-6">
  <h1 class="text-4xl font-bold mb-4">Welcome to LearnFlow!</h1>
  <p class="text-xl mb-6">Your personalized journey to knowledge starts here. Log in or sign up to track your progress, access exclusive content, and connect with fellow learners.</p>
  <p class="text-lg">Discover courses, tackle exercises, and watch your skills grow.</p>
  <!-- You can add a call-to-action button here if needed, though the login is in the header -->
  <!-- Example:
  <button
    class="mt-6 px-6 py-3 bg-white text-indigo-600 font-semibold rounded-lg shadow hover:bg-gray-100 transition duration-200"
    on:click={() => import('$lib/authService.js').then(auth => auth.login())}
  >
    Get Started
  </button>
  -->
</div>

<div class="grid md:grid-cols-3 gap-6 my-8">
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Explore Courses</h2>
    <p class="text-gray-600 dark:text-gray-300">Browse our extensive library of courses across various domains.</p>
  </div>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Practice Exercises</h2>
    <p class="text-gray-600 dark:text-gray-300">Sharpen your skills with interactive exercises and real-time feedback.</p>
  </div>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-3 text-gray-900 dark:text-white">Track Progress</h2>
    <p class="text-gray-600 dark:text-gray-300">Log in to monitor your learning journey and achievements.</p>
  </div>
</div> ===== ./src/lib/components/MarkdownRendererComponent.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { marked } from 'marked';
  import DOMPurify from 'dompurify';
  import hljs from 'highlight.js';
  import 'highlight.js/styles/github-dark.css';
  import { afterUpdate } from 'svelte';

  export let content: string = '';
  
  let htmlContent: string = '';
  
  $: if (content) {
    htmlContent = DOMPurify.sanitize(marked.parse(content, {
      breaks: true,
      gfm: true
    }));
  }
  
  afterUpdate(() => {
    // Apply syntax highlighting to code blocks
    const codeBlocks = document.querySelectorAll('pre code');
    codeBlocks.forEach((block) => {
      hljs.highlightElement(block as HTMLElement);
    });
  });
</script>

<div class="markdown-content">
  {@html htmlContent}
</div>

<style>
  .markdown-content :global(pre) {
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 1rem 0;
    overflow-x: auto;
  }
  
  .markdown-content :global(code) {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  }
  
  .markdown-content :global(p) {
    margin-bottom: 1rem;
  }
  
  .markdown-content :global(h1),
  .markdown-content :global(h2),
  .markdown-content :global(h3),
  .markdown-content :global(h4),
  .markdown-content :global(h5) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .markdown-content :global(blockquote) {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    color: #6b7280;
    margin: 1rem 0;
  }
  
  .markdown-content :global(a) {
    color: #3b82f6;
    text-decoration: underline;
  }
  
  .markdown-content :global(table) {
    border-collapse: collapse;
    width: 100%;
    margin: 1rem 0;
  }
  
  .markdown-content :global(th), 
  .markdown-content :global(td) {
    border: 1px solid #e5e7eb;
    padding: 0.5rem;
  }
  
  .markdown-content :global(th) {
    background-color: #f3f4f6;
  }
</style>===== ./src/lib/components/RecommendationsSection.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { get } from 'svelte/store';
  import type { Recommendation } from '$lib/services/recommendationService.js';
  import { user } from '$lib/stores/authStore.js';
  import { secureFetch } from '$lib/utils/secureFetch'; // Assuming secureFetch handles auth/CSRF

  export let limit: number = 5;

  let recommendations: Recommendation[] = [];
  let loading: boolean = true;
  let error: string | null = null;

  onMount(async () => {
    try {
      const currentUser = get(user);
      if (!currentUser?.uid) {
        // Don't throw an error, just show no recommendations for guests
        loading = false;
        return;
      }
      // Fetch from the new API endpoint
      const response = await secureFetch(`/api/recommendations?limit=${limit}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      recommendations = await response.json();
    } catch (e:any) {
      console.error('Error fetching recommendations', e);
      error = e.message || 'Failed to load recommendations.';
    } finally {
      loading = false;
    }
  });

  function getLink(rec: Recommendation): string {
    switch(rec.type) {
      case 'next_lesson':
        // Ensure metadata and path exist
        return rec.metadata?.path ? `/courses/${rec.metadata.path}` : '#'; 
      case 'review_flashcards':
        return `/tools/flashcards`;
      case 'view_courses':
        return `/courses`;
      case 'course':
         // Ensure metadata and path exist
        return rec.metadata?.path ? `/courses/${rec.metadata.path}` : '#';
      case 'exercise':
         // Ensure metadata and path exist
        return rec.metadata?.path ? `/exercises/${rec.metadata.path}` : '#';
      default:
        console.warn(`Unknown recommendation type: ${rec.type}`);
        return '#';
    }
  }
</script>

<div class="mb-8">
  <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">Recommended for You</h2>
  {#if loading}
    <p class="text-gray-600">Loading recommendations...</p>
  {:else if error}
    <p class="text-red-500">{error}</p>
  {:else if recommendations.length === 0}
    <p class="text-gray-600">No recommendations at this time.</p>
  {:else}
    <div class="space-y-4">
      {#each recommendations as rec}
        <a href={getLink(rec)} class="block bg-white dark:bg-gray-800 rounded-lg p-4 shadow hover:shadow-md transition flex items-center">
          <div class="flex-1">
            <h3 class="font-medium text-gray-900 dark:text-white">{rec.title}</h3>
            <p class="text-gray-600 dark:text-gray-300 text-sm">{rec.description}</p>
          </div>
          <i class="fas fa-chevron-right text-gray-400"></i>
        </a>
      {/each}
    </div>
  {/if}
</div>===== ./src/lib/components/ProgressMetrics.svelte =====
<script>
  export let metrics = [
    {
      title: "Courses in Progress",
      value: "3",
      icon: "fa-book",
      color: "indigo"
    },
    {
      title: "Exercises Completed",
      value: "24",
      icon: "fa-check-circle",
      color: "green"
    },
    {
      title: "Learning Streak",
      value: "7 days",
      icon: "fa-fire",
      color: "yellow"
    }
  ];
</script>

<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
  {#each metrics as metric}
    <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm card-hover">
      <div class="flex justify-between items-start">
        <div>
          <h3 class="text-gray-400 text-sm font-medium">{metric.title}</h3>
          <p class="text-2xl font-bold text-gray-100 mt-1">{metric.value}</p>
        </div>
        <div class="w-12 h-12 bg-indigo-900 rounded-full flex items-center justify-center">
          <i class="fas {metric.icon} text-indigo-300"></i>
        </div>
      </div>
    </div>
  {/each}
</div>
===== ./src/lib/components/PipWidget.svelte =====
<script lang="ts">
  import { fly } from 'svelte/transition';
  import { quintOut } from 'svelte/easing';
  import { pipVisible, activeTool } from '$lib/stores/pipStores.js';
  import { onMount } from 'svelte';
  
  // Import the tool components
  import PipTimer from './pip/PipTimer.svelte';
  import PipTodo from './pip/PipTodo.svelte';
  import PipNotes from './pip/PipNotes.svelte';
  import PipCalculator from './pip/PipCalculator.svelte';
  import PipFlashcards from './pip/PipFlashcards.svelte';
  import PipDictionary from './pip/PipDictionary.svelte';
  
  // Tools configuration - Updated for Dark Theme
  const tools = [
    { id: 'timer', name: 'Timer', icon: 'fa-stopwatch', bgClass: 'bg-indigo-800', textClass: 'text-indigo-100', hoverClass: 'hover:bg-indigo-700' },
    { id: 'todo', name: 'Todo', icon: 'fa-list-check', bgClass: 'bg-green-800', textClass: 'text-green-100', hoverClass: 'hover:bg-green-700' },
    { id: 'notes', name: 'Notes', icon: 'fa-sticky-note', bgClass: 'bg-yellow-800', textClass: 'text-yellow-100', hoverClass: 'hover:bg-yellow-700' },
    { id: 'calculator', name: 'Calculator', icon: 'fa-calculator', bgClass: 'bg-purple-800', textClass: 'text-purple-100', hoverClass: 'hover:bg-purple-700' },
    { id: 'flashcards', name: 'Flashcards', icon: 'fa-layer-group', bgClass: 'bg-orange-800', textClass: 'text-orange-100', hoverClass: 'hover:bg-orange-700' },
    { id: 'dictionary', name: 'Dictionary', icon: 'fa-book', bgClass: 'bg-cyan-800', textClass: 'text-cyan-100', hoverClass: 'hover:bg-cyan-700' }
  ];
  
  let minimized = false;
  let widgetElement: HTMLElement;
  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let initialLeft = 0;
  let initialTop = 0;
  
  function closePip() {
    pipVisible.set(false);
    minimized = false;
  }
  
  function minimizePip() {
    minimized = !minimized;
  }
  
  function setTool(id: string) {
    activeTool.set(id);
    minimized = false;
  }
  
  // Draggable functionality
  function handleMouseDown(e: MouseEvent) {
    // Only drag via the header (check if the event target is within the header)
    const header = widgetElement.querySelector('.pip-header');
    if (!header || !header.contains(e.target as Node)) return;

    // Prevent dragging if clicking on buttons inside the header
    if (e.target instanceof Element && e.target.closest('button')) return; 

    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    const rect = widgetElement.getBoundingClientRect();
    initialLeft = rect.left;
    initialTop = rect.top;

    // Style changes for dragging state
    widgetElement.style.cursor = 'grabbing';
    document.body.style.userSelect = 'none'; // Prevent text selection
    widgetElement.style.bottom = 'auto'; // Ensure absolute positioning takes over
    widgetElement.style.right = 'auto';
  }
  
  function handleMouseMove(e: MouseEvent) {
    if (!isDragging) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    widgetElement.style.left = `${initialLeft + dx}px`;
    widgetElement.style.top = `${initialTop + dy}px`;
  }
  
  function handleMouseUp() {
    if (isDragging) {
      isDragging = false;
      widgetElement.style.cursor = 'grab';
      document.body.style.userSelect = ''; // Re-enable text selection
    }
  }
  
  onMount(() => {
    // Add event listeners to document for reliable drag tracking
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    
    // Initial cursor style
    if (widgetElement) widgetElement.style.cursor = 'grab';

    // Clean up
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      // Reset body style if component is destroyed mid-drag
      if (isDragging) {
         document.body.style.userSelect = '';
      }
    };
  });
</script>

{#if $pipVisible}
  <div
    bind:this={widgetElement}
    class="pip-widget {minimized ? 'minimized' : ''} bg-gray-800 text-gray-100 rounded-2xl overflow-hidden shadow-lg fixed bottom-4 right-4 z-50 squircle"
    style="position: fixed; bottom: 1rem; right: 1rem; cursor: grab;"
    role="region" 
    aria-label="Quick Tools Widget"
    transition:fly={{ y: 20, duration: 300, easing: quintOut }}
  >
    <div 
      class="pip-header bg-indigo-600 text-white p-2 flex justify-between items-center cursor-grab" 
      on:mousedown={handleMouseDown}
      role="button" 
      tabindex="0"
      aria-label="Drag quick tools widget"
      on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') handleMouseDown(e); }}
    >
      <h3 class="font-medium text-sm pl-2">Quick Tools</h3>
      <div>
        <button 
          on:click={minimizePip} 
          class="p-1 text-indigo-100 hover:bg-indigo-500 rounded-full focus:outline-none focus:ring-2 focus:ring-white"
          aria-label={minimized ? 'Expand widget' : 'Minimize widget'}
        >
          <i class="fas {minimized ? 'fa-expand' : 'fa-window-minimize'} w-3 h-3"></i>
        </button>
        <button 
          on:click={closePip} 
          class="p-1 text-indigo-100 hover:bg-indigo-500 rounded-full ml-1 focus:outline-none focus:ring-2 focus:ring-white"
          aria-label="Close widget"
        >
          <i class="fas fa-times w-3 h-3"></i>
        </button>
      </div>
    </div>
    
    {#if !minimized}
      <div class="p-3 border-b border-gray-700">
        <div class="grid grid-cols-4 gap-2">
          {#each tools as tool}
            <button
              on:click={() => setTool(tool.id)}
              class="p-2 {tool.bgClass} rounded-lg {tool.textClass} {tool.hoverClass} flex flex-col items-center text-center transition duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 { $activeTool === tool.id ? 'ring-2 ring-white' : 'ring-0' }"
            >
              <i class="fas {tool.icon} text-base mb-1"></i>
              <span class="text-xs font-medium">{tool.name}</span>
            </button>
          {/each}
        </div>
      </div>
      
      <div class="p-2 tool-content-area">
        {#if $activeTool === 'timer'}
          <PipTimer />
        {:else if $activeTool === 'todo'}
          <PipTodo />
        {:else if $activeTool === 'notes'}
          <PipNotes />
        {:else if $activeTool === 'calculator'}
          <PipCalculator />
        {:else if $activeTool === 'flashcards'}
          <PipFlashcards />
        {:else if $activeTool === 'dictionary'}
          <PipDictionary />
        {/if}
      </div>
    {/if}
  </div>
{/if}

<style lang="postcss">
  .pip-widget {
    width: 280px; /* Adjust width as needed */
    will-change: transform;
    transition: width 0.2s ease-out, height 0.2s ease-out;
  }
  .pip-widget.minimized {
     height: 44px; /* Adjust to match header height */
     width: auto; /* Or a fixed minimized width */
     overflow: hidden;
  }
  .tool-content-area {
      min-height: 150px; /* Give it some default height */
  }

  /* Custom scrollbar for the content area - Dark Theme */
  .tool-content-area ::-webkit-scrollbar {
      width: 6px;
  }
  .tool-content-area ::-webkit-scrollbar-track {
      background: transparent;
  }
  .tool-content-area ::-webkit-scrollbar-thumb {
      background-color: rgba(156, 163, 175, 0.4); /* gray-400 with opacity */
      border-radius: 3px;
      border: 1px solid transparent;
      background-clip: content-box;
  }
  .tool-content-area ::-webkit-scrollbar-thumb:hover {
      background-color: rgba(156, 163, 175, 0.6);
  }

  /* Add explicit Tailwind color classes for purging */
  .bg-indigo-50 { --tw-bg-opacity: 1; background-color: rgb(239 246 255 / var(--tw-bg-opacity)); }
  .text-indigo-700 { --tw-text-opacity: 1; color: rgb(67 56 202 / var(--tw-text-opacity)); }
  .hover\:bg-indigo-100:hover { --tw-bg-opacity: 1; background-color: rgb(224 231 255 / var(--tw-bg-opacity)); }
  .focus\:ring-indigo-400:focus { --tw-ring-color: rgb(129 140 248 / var(--tw-ring-opacity)); }
  .border-indigo-100 { --tw-border-opacity: 1; border-color: rgb(224 231 255 / var(--tw-border-opacity)); }
  .hover\:border-indigo-200:hover { --tw-border-opacity: 1; border-color: rgb(199 210 254 / var(--tw-border-opacity)); }

  .bg-green-50 { --tw-bg-opacity: 1; background-color: rgb(240 253 244 / var(--tw-bg-opacity)); }
  .text-green-700 { --tw-text-opacity: 1; color: rgb(21 128 61 / var(--tw-text-opacity)); }
  .hover\:bg-green-100:hover { --tw-bg-opacity: 1; background-color: rgb(220 252 231 / var(--tw-bg-opacity)); }
  .focus\:ring-green-400:focus { --tw-ring-color: rgb(74 222 128 / var(--tw-ring-opacity)); }
  .border-green-100 { --tw-border-opacity: 1; border-color: rgb(220 252 231 / var(--tw-border-opacity)); }
  .hover\:border-green-200:hover { --tw-border-opacity: 1; border-color: rgb(187 247 208 / var(--tw-border-opacity)); }

  .bg-blue-50 { --tw-bg-opacity: 1; background-color: rgb(239 246 255 / var(--tw-bg-opacity)); }
  .text-blue-700 { --tw-text-opacity: 1; color: rgb(29 78 216 / var(--tw-text-opacity)); }
  .hover\:bg-blue-100:hover { --tw-bg-opacity: 1; background-color: rgb(219 234 254 / var(--tw-bg-opacity)); }
  .focus\:ring-blue-400:focus { --tw-ring-color: rgb(96 165 250 / var(--tw-ring-opacity)); }
  .border-blue-100 { --tw-border-opacity: 1; border-color: rgb(219 234 254 / var(--tw-border-opacity)); }
  .hover\:border-blue-200:hover { --tw-border-opacity: 1; border-color: rgb(191 219 254 / var(--tw-border-opacity)); }

  .bg-purple-50 { --tw-bg-opacity: 1; background-color: rgb(250 245 255 / var(--tw-bg-opacity)); }
  .text-purple-700 { --tw-text-opacity: 1; color: rgb(126 34 206 / var(--tw-text-opacity)); }
  .hover\:bg-purple-100:hover { --tw-bg-opacity: 1; background-color: rgb(243 232 255 / var(--tw-bg-opacity)); }
  .focus\:ring-purple-400:focus { --tw-ring-color: rgb(192 132 252 / var(--tw-ring-opacity)); }
  .border-purple-100 { --tw-border-opacity: 1; border-color: rgb(243 232 255 / var(--tw-border-opacity)); }
  .hover\:border-purple-200:hover { --tw-border-opacity: 1; border-color: rgb(233 213 255 / var(--tw-border-opacity)); }

  .bg-orange-50 { --tw-bg-opacity: 1; background-color: rgb(255 237 213 / var(--tw-bg-opacity)); }
  .text-orange-700 { --tw-text-opacity: 1; color: rgb(234 88 12 / var(--tw-text-opacity)); }
  .hover\:bg-orange-100:hover { --tw-bg-opacity: 1; background-color: rgb(255 229 200 / var(--tw-bg-opacity)); }
  .focus\:ring-orange-400:focus { --tw-ring-color: rgb(251 146 60 / var(--tw-ring-opacity)); }
  .border-orange-100 { --tw-border-opacity: 1; border-color: rgb(255 229 200 / var(--tw-border-opacity)); }
  .hover\:border-orange-200:hover { --tw-border-opacity: 1; border-color: rgb(255 215 170 / var(--tw-border-opacity)); }
</style>===== ./src/lib/components/Sidebar.svelte =====
<script lang="ts">
  import { page } from '$app/stores';
  import { onMount } from 'svelte';
  import { slide } from 'svelte/transition';
  import { isAuthenticated, user, loading } from '$lib/stores/authStore.js';
  import { sidebarCollapsed } from '$lib/stores/sidebarStore.js';
  import { goto } from '$app/navigation';

  type NavItem = {
    name: string;
    href: string;
    icon: string;
    authRequired: boolean;
  };
  
  type NavCategory = {
    title: string;
    items: NavItem[];
  };
  
  const navigation: NavCategory[] = [
    {
      title: 'Main',
      items: [
        { name: 'Dashboard', href: '/', icon: 'fa-home', authRequired: false },
        { name: 'Courses', href: '/courses', icon: 'fa-book', authRequired: false },
        { name: 'Exercises', href: '/exercises', icon: 'fa-pencil-alt', authRequired: false },
        { name: 'My Learning', href: '/my-learning', icon: 'fa-graduation-cap', authRequired: true },
        { name: 'Statistics', href: '/statistics', icon: 'fa-chart-line', authRequired: true },
        { name: 'Calendar', href: '/calendar', icon: 'fa-calendar', authRequired: true }
      ]
    },
    {
      title: 'Community',
      items: [
        { name: 'Discussion Forums', href: '/forums', icon: 'fa-comments', authRequired: false },
        { name: 'User Groups', href: '/groups', icon: 'fa-users', authRequired: true },
        { name: 'Events', href: '/events', icon: 'fa-calendar-alt', authRequired: false }
      ]
    },
    {
      title: 'Resources',
      items: [
        { name: 'Help Center', href: '/help', icon: 'fa-question-circle', authRequired: false },
        { name: 'Contact Support', href: '/support', icon: 'fa-headset', authRequired: false }
      ]
    },
    {
      title: 'Tools',
      items: [
        { name: 'Workspace', href: '/tools/workspace', icon: 'fa-tools', authRequired: false },
        { name: 'Notepad', href: '/tools/notepad', icon: 'fa-sticky-note', authRequired: false },
        { name: 'Tasks', href: '/tools/tasks', icon: 'fa-list-check', authRequired: false },
        { name: 'AI Study Chat', href: '/tools/chat', icon: 'fa-robot', authRequired: false }
      ]
    }
  ];
  
  let mobileMenuOpen = false;
  let path = '';
  let expanded: Record<string, boolean> = {};
  // auto-subscribe to the collapsed state
  $: $sidebarCollapsed;

  // Subscribe to page store for path changes
  page.subscribe(value => {
    path = value.url.pathname;
    // Close mobile menu on navigation
    mobileMenuOpen = false;
  });

  function toggleMobileMenu() {
    mobileMenuOpen = !mobileMenuOpen;
  }

  function toggleCollapse() {
    sidebarCollapsed.update(v => !v);
  }
  
  function navigateToLogin() {
    goto('/login'); // Use goto for navigation
  }
  
  onMount(() => {
    navigation.forEach(category => {
      if (category.items.some(item => path.startsWith(item.href))) {
        expanded[category.title] = true;
      }
    });
  });
</script>

<!-- Mobile Menu Button -->
<div class="lg:hidden fixed top-4 left-4 z-50">
  <button 
    on:click={toggleMobileMenu} 
    class="p-2 rounded-full bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-200 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    aria-label="Toggle menu"
    aria-expanded={mobileMenuOpen}
  >
    <i class="fas fa-bars"></i>
  </button>
</div>

<!-- External Expand Button (visible when collapsed) -->
{#if $sidebarCollapsed}
  <div class="fixed top-4 left-4 z-50 hidden lg:block">
    <button
      on:click={toggleCollapse}
      class="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 shadow focus:outline-none focus:ring"
      aria-label="Expand sidebar"
    >
      <i class="fas fa-angle-right"></i>
    </button>
  </div>
{/if}

<!-- Sidebar -->
<nav id="sidebar"
     class="sidebar w-64 bg-gray-50 dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 fixed h-full z-30 flex flex-col transform transition-transform duration-300 ease-in-out -translate-x-full"
     class:translate-x-0={mobileMenuOpen}
     class:lg:translate-x-0={!$sidebarCollapsed}
     class:lg:-translate-x-full={$sidebarCollapsed}
     aria-label="Main navigation">
  <!-- Internal Collapse Toggle Button -->
  <button
    on:click={toggleCollapse}
    class="absolute top-4 right-4 hidden lg:block p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring"
    aria-label={$sidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
  >
    <i class={`fas ${$sidebarCollapsed ? 'fa-angle-right' : 'fa-angle-left'}`}></i>
  </button>

  <!-- Logo/Header -->
  <div class="p-4 flex items-center">
    <div class="w-10 h-10 rounded-full bg-indigo-600 flex items-center justify-center mr-3">
      <i class="fas fa-graduation-cap text-white"></i>
    </div>
    <h1 class="text-xl font-bold text-gray-800 dark:text-indigo-300">LearnFlow</h1>
  </div>

  <!-- Scrollable Navigation -->
  <div class="flex-1 overflow-y-auto px-2">
    {#each navigation as category}
      <div class="mb-4">
        <button
          class="w-full flex justify-between items-center px-3 py-2 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider focus:outline-none"
          on:click={() => expanded[category.title] = !expanded[category.title]}
          aria-expanded={expanded[category.title]}
        >
          <span>{category.title}</span>
          <i class={`fas ${expanded[category.title] ? 'fa-chevron-down text-gray-400' : 'fa-chevron-right text-gray-600'}`}></i>
        </button>
        {#if expanded[category.title]}
          <ul in:slide out:slide class="mt-2 space-y-1">
            {#each category.items as item}
              {#if !item.authRequired || $isAuthenticated}
                <li>
                  <a
                    href={item.href}
                    sveltekit:prefetch
                    aria-label={item.name}
                    class="flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors duration-150 ease-in-out {path.startsWith(item.href) ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-700 dark:text-indigo-100' : 'text-gray-600 dark:text-gray-300'}"
                  >
                    <i class="fas {item.icon} mr-3 w-5 text-center"></i>
                    <span>{item.name}</span>
                  </a>
                </li>
              {/if}
            {/each}
          </ul>
        {/if}
      </div>
    {/each}
  </div>

  <!-- Account Section -->
  <div class="p-4 border-t border-gray-200 dark:border-gray-700">
    {#if $loading}
      <div class="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg animate-pulse">
        <div class="flex items-center mb-2">
          <div class="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 mr-2"></div>
          <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4"></div>
        </div>
        <div class="h-8 bg-gray-300 dark:bg-gray-600 rounded w-full"></div>
      </div>
    {:else if $isAuthenticated && $user}
      <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div class="flex items-center mb-3">
          <div class="w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center mr-2 text-white text-sm font-medium">
            {$user.displayName?.charAt(0).toUpperCase() ?? $user.email?.charAt(0).toUpperCase() ?? 'U'}
          </div>
          <span class="font-medium text-sm text-gray-800 dark:text-gray-100 truncate">{$user.displayName ?? $user.email ?? 'User'}</span>
        </div>
        <a href="/settings" class="w-full py-2 px-3 bg-gray-200 dark:bg-gray-700 rounded-md text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 block text-center transition duration-150">
          Account Settings
        </a>
      </div>
    {:else}
      <div class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg text-center">
        <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">Log in to track your progress and access personalized features.</p>
        <button 
          class="w-full py-2 px-3 bg-indigo-600 hover:bg-indigo-700 rounded-md text-sm font-medium text-white transition duration-150"
          on:click={navigateToLogin}
        >
          Log In / Sign Up
        </button>
      </div>
    {/if}
  </div>
</nav>

<style>
  /* Mobile menu: hidden by default, open when .translate-x-0 */
</style>===== ./src/lib/components/FocusTimeChart.svelte =====
<!-- learnflow-app/src/lib/components/FocusTimeChart.svelte -->
<script lang="ts">
  import { onMount, onDestroy, afterUpdate } from 'svelte';
  import { Chart, registerables } from 'chart.js';
  import type { FocusSession } from '$lib/stores/pipStores.js';
  import 'chartjs-adapter-date-fns'; // Import the date adapter
  import { enUS } from 'date-fns/locale';

  Chart.register(...registerables);

  export let sessions: FocusSession[] = [];
  export let timeUnit: 'day' | 'week' | 'month' = 'day'; // For x-axis scale

  let canvasElement: HTMLCanvasElement;
  let chartInstance: Chart | null = null;

  // Function to process data and update chart
  function updateChart() {
    if (!chartInstance || !canvasElement) return;

    // Aggregate data by the selected time unit
    const aggregatedData: { [key: string]: number } = {};
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const startOfWeek = new Date(startOfDay);
    startOfWeek.setDate(startOfDay.getDate() - startOfDay.getDay()); // Sunday start
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    sessions.forEach(session => {
        const sessionDate = new Date(session.timestamp);
        let key = '';

        if (timeUnit === 'day') {
            // Aggregate by day (e.g., only show last 7 days)
             const dayDiff = Math.floor((startOfDay.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24));
             if(dayDiff >= 0 && dayDiff < 7) { // Show last 7 days including today
                key = sessionDate.toISOString().split('T')[0];
             }
        } else if (timeUnit === 'week') {
            // Aggregate by week (e.g., show last 4 weeks)
            const weekDiff = Math.floor((startOfWeek.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24 * 7));
             if(weekDiff >= 0 && weekDiff < 4) { // Show last 4 weeks including this week
                const weekStartDate = new Date(sessionDate);
                weekStartDate.setDate(sessionDate.getDate() - sessionDate.getDay());
                key = weekStartDate.toISOString().split('T')[0]; // Key by Sunday of the week
             }
        } else if (timeUnit === 'month') {
             // Aggregate by month (e.g., show last 6 months)
             const monthDiff = (startOfMonth.getFullYear() - sessionDate.getFullYear()) * 12 + (startOfMonth.getMonth() - sessionDate.getMonth());
              if(monthDiff >= 0 && monthDiff < 6) { // Show last 6 months including this month
                key = `${sessionDate.getFullYear()}-${String(sessionDate.getMonth() + 1).padStart(2, '0')}`; // Key by YYYY-MM
              }
        }
        
        if (key) { // Only include if within the desired range
             if (!aggregatedData[key]) {
                aggregatedData[key] = 0;
             }
             aggregatedData[key] += session.duration / 60; // Add duration in minutes
        }
    });
    
    // Sort keys (dates/months) and prepare labels/data for chart
    const sortedKeys = Object.keys(aggregatedData).sort();
    const labels = sortedKeys; 
    const dataPoints = sortedKeys.map(key => aggregatedData[key]);

    // Update chart data
    chartInstance.data.labels = labels;
    chartInstance.data.datasets[0].data = dataPoints;

    // Adjust x-axis time unit
     chartInstance.options.scales!.x!.time!.unit = timeUnit;
     // Optional: Adjust tooltip/label formats based on unit
     if (timeUnit === 'day') {
         chartInstance.options.scales!.x!.time!.tooltipFormat = 'MMM d, yyyy';
         chartInstance.options.scales!.x!.time!.displayFormats = { day: 'MMM d' };
     } else if (timeUnit === 'week') {
         chartInstance.options.scales!.x!.time!.tooltipFormat = '\'Week of\' MMM d, yyyy';
          chartInstance.options.scales!.x!.time!.displayFormats = { week: 'MMM d' };
     } else { // month
          chartInstance.options.scales!.x!.time!.tooltipFormat = 'MMM yyyy';
          chartInstance.options.scales!.x!.time!.displayFormats = { month: 'MMM yyyy' };
     }

    chartInstance.update();
  }

  onMount(() => {
    chartInstance = new Chart(canvasElement, {
      type: 'bar',
      data: {
        labels: [], // Initial empty labels
        datasets: [{
          label: 'Focus Time (Minutes)',
          data: [], // Initial empty data
          backgroundColor: 'rgba(79, 70, 229, 0.6)', // Indigo-600 with opacity
          borderColor: 'rgba(79, 70, 229, 1)', // Indigo-600
          borderWidth: 1,
          borderRadius: 4,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Minutes'
            },
            grid: {
                 color: 'rgba(200, 200, 200, 0.1)' // Lighter grid lines
            }
          },
          x: {
             type: 'time',
             time: {
                 unit: timeUnit, // Set initial unit
                 // tooltipFormat: 'll', // Example: moment.js format, adjust for date-fns if needed
             },
             adapters: {
                 date: { locale: enUS } // Set date-fns locale
             },
             grid: {
                 display: false // Hide x-axis grid lines
             },
             ticks: {
                 maxRotation: 0,
                 autoSkip: true,
                 // Use source: 'auto' or 'labels' based on aggregation
                 source: 'auto' 
             }
          }
        },
        plugins: {
            legend: {
                display: false // Hide legend if only one dataset
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                 backgroundColor: 'rgba(0, 0, 0, 0.8)',
                 titleFont: { size: 14 },
                 bodyFont: { size: 12 },
                 padding: 10,
            }
        }
      }
    });

    updateChart(); // Initial chart render

    return () => {
      chartInstance?.destroy(); // Cleanup chart instance
    };
  });

  // Update chart when props change
  afterUpdate(() => {
      if (chartInstance) {
         updateChart();
      }
  });

</script>

<div class="chart-container" style="position: relative; height:300px;">
  <canvas bind:this={canvasElement}></canvas>
</div> ===== ./src/lib/components/ContentExplorer.svelte =====
<script lang="ts">
	import { createEventDispatcher } from 'svelte';

	// Define the expected structure for items passed as props
	// This should align with the ContentManifestItem interface in contentService.ts
	interface ContentItem {
		id: string;
		title: string;
		path: string; // Full path from the content type root
		type: 'category' | 'course' | 'module' | 'lesson' | 'exercise' | 'topic' | string; // Allow other types
		description?: string;
		// Add other relevant fields displayed by the explorer
		tags?: string[];
		difficulty?: string;
	}

	// Accept items as a prop instead of fetching internally
	export let items: ContentItem[] = [];
	export let contentType: 'courses' | 'exercises'; // To construct correct navigation paths

	const dispatch = createEventDispatcher();

	function onItemClick(item: ContentItem) {
		// Dispatch a 'navigate' event with the item's path
		// The parent page (+page.svelte) will handle the actual navigation using goto()
		dispatch('navigate', { path: item.path });
	}

	// Function to determine the icon based on item type (example)
	function getIcon(type: string): string {
		switch (type) {
			case 'category':
			case 'topic':
				return '📁'; // Folder icon for categories/topics
			case 'course':
				return '📚'; // Book icon for courses
			case 'module':
				return '📦'; // Box icon for modules
			case 'lesson':
				return '📄'; // Page icon for lessons
			case 'exercise':
				return '✏️'; // Pencil icon for exercises
			default:
				return '❓'; // Default icon
		}
	}
</script>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
	{#if items && items.length > 0}
		{#each items as item (item.id)}
			<!-- Use a button or anchor for interaction -->
			<button
				on:click={() => onItemClick(item)}
				class="block p-6 bg-white rounded-lg border border-gray-200 shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 text-left w-full transition-colors duration-150 ease-in-out"
			>
				<h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
					<span class="mr-2">{getIcon(item.type)}</span>
					{item.title}
				</h5>
				{#if item.description}
					<p class="font-normal text-gray-700 dark:text-gray-400 mb-3">{item.description}</p>
				{/if}
				<!-- Optional: Display tags or other metadata -->
				{#if item.tags && item.tags.length > 0}
					<div class="flex flex-wrap gap-2 mt-2">
						{#each item.tags as tag}
							<span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300">{tag}</span>
						{/each}
					</div>
				{/if}
				{#if item.difficulty}
				 <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Difficulty: {item.difficulty}</p>
				{/if}
			</button>
		{:else}
			<p class="text-gray-500 dark:text-gray-400 col-span-full">No items found in this section.</p>
		{/each}
	{:else}
		 <p class="text-gray-500 dark:text-gray-400 col-span-full">Loading content...</p> <!-- Or handle empty state explicitly -->
	{/if}
</div>===== ./src/lib/components/Footer.svelte =====
<script lang="ts">
  const currentYear = new Date().getFullYear();
</script>

<footer class="bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-inner py-4 mt-12">
  <div class="max-w-7xl mx-auto px-4 text-center text-sm text-gray-500 dark:text-gray-400">
    © {currentYear} LearnFlow. All rights reserved.
  </div>
</footer>===== ./src/lib/components/ActivityItem.svelte =====
<script lang="ts">
  export let activity = {
    id: '',
    type: '', // 'completed', 'started', 'achievement'
    title: '',
    description: '',
    timestamp: '',
    icon: 'fa-check-circle',
    color: 'indigo' // indigo, blue, green
  };
  
  // Get appropriate icon and color based on activity type
  $: icon = activity.icon || 
    (activity.type === 'completed' ? 'fa-check-circle' : 
     activity.type === 'started' ? 'fa-book' : 
     activity.type === 'achievement' ? 'fa-trophy' : 'fa-circle');
     
  $: color = activity.color || 
    (activity.type === 'completed' ? 'indigo' : 
     activity.type === 'started' ? 'blue' : 
     activity.type === 'achievement' ? 'green' : 'gray');
</script>

<div class="flex items-start">
  <div class="w-10 h-10 bg-indigo-900 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
    <i class="fas {icon} text-indigo-300"></i>
  </div>
  <div>
    <h3 class="font-medium text-gray-100">{activity.title}</h3>
    <p class="text-gray-300 text-sm">{activity.description}</p>
    <p class="text-gray-400 text-xs mt-1">{activity.timestamp}</p>
  </div>
</div> ===== ./src/lib/components/ResetPassword.svelte =====
<script lang="ts">
  import { resetPassword } from '$lib/authService.js';
  import { loading, authError } from '$lib/stores/authStore.js';
  
  let email = '';
  let localError = '';
  let successMessage = '';
  
  async function handleResetPassword() {
    localError = '';
    successMessage = '';
    
    if (!email) {
      localError = 'Please enter your email address';
      return;
    }
    
    try {
      await resetPassword(email);
      successMessage = 'Password reset email sent. Check your inbox.';
      email = ''; // Clear form after successful submission
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Reset Password</h2>
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  {#if successMessage}
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{successMessage}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleResetPassword} class="space-y-4">
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
      <p class="text-xs text-gray-500 mt-1">We'll send you a link to reset your password</p>
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading}
      >
        {#if $loading}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Send Reset Link
      </button>
    </div>
  </form>
  
  <div class="mt-4 text-center">
    <a href="/login" class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
      Back to login
    </a>
  </div>
</div> ===== ./src/lib/components/StickyNotes.svelte =====
<script lang="ts">
  import { onMount } from 'svelte'; // Removed onDestroy
  import { browser } from '$app/environment';
  interface Note { id: number; content: string; }
  let notes: Note[] = [];
  // Pastel color palette and per-note styles
  const colors = ['#FFEB3B','#FFCDD2','#C8E6C9','#BBDEFB','#D1C4E9','#F0F4C3'];
  let noteStyles: Record<number,{color:string,rotation:number}> = {};
  function getNoteStyle(id: number, index: number) {
    if (!noteStyles[id]) {
      noteStyles[id] = {
        color: colors[index % colors.length],
        rotation: (Math.random() * 6) - 3
      };
    }
    return noteStyles[id];
  }

  function loadNotes() {
    if (!browser) return;
    const data = localStorage.getItem('workspace_notes');
    notes = data ? JSON.parse(data) : [];
    // Initialize styles for loaded notes
    notes.forEach((note, i) => getNoteStyle(note.id, i));
  }

  function saveNotes() {
    if (!browser) return;
    localStorage.setItem('workspace_notes', JSON.stringify(notes));
  }

  function addNote() {
    const newNote: Note = { id: Date.now(), content: '' };
    notes = [...notes, newNote];
    // Initialize style for the new note immediately
    getNoteStyle(newNote.id, notes.length - 1);
    saveNotes();
  }

  function deleteNote(id: number) {
    notes = notes.filter(n => n.id !== id);
    delete noteStyles[id]; // Clean up style
    saveNotes();
  }

  function updateNote(id: number, content: string) {
    notes = notes.map(n => n.id === id ? { ...n, content } : n);
    // Debounce saving? For now, save on every input
    saveNotes();
  }

  onMount(() => {
    loadNotes();
  });

  // Removed onDestroy as it wasn't strictly necessary for this logic
  // Clearing styles on unmount might cause flicker if component remounts quickly

  function handleNoteKeydown(event: KeyboardEvent, noteId: number) {
    // Example: Allow deleting with Shift+Delete, though button is primary
    if (event.shiftKey && event.key === 'Delete') {
      deleteNote(noteId);
    }
  }
</script>

<div class="workspace-tool relative">
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
    {#each notes as note, i (note.id)}
      {#key note.id}
      {@const style = getNoteStyle(note.id, i)}
      <div
        role="region"
        aria-label={`Sticky note ${i + 1}`}
        tabindex="0"
        class="p-3 rounded shadow-lg transition-transform focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-500"
        style="background: {style.color}; transform: rotate({style.rotation}deg);"
        on:keydown={(e) => handleNoteKeydown(e, note.id)}
      >
        <!-- Use region for a note container -->
        <!-- Make the container focusable -->
        <textarea
          aria-label={`Content for sticky note ${i + 1}`}
          class="w-full h-24 bg-transparent p-2 rounded resize-none focus:outline-none border-none outline-none bg-opacity-50 text-gray-900 dark:text-gray-900 placeholder-gray-600 dark:placeholder-gray-400"
          bind:value={note.content}
          on:input={e => updateNote(note.id, (e.target as HTMLTextAreaElement).value)}
          placeholder="Your note here..."
        ></textarea>
        <div class="flex justify-end mt-2">
          <button 
            on:click={() => deleteNote(note.id)} 
            class="px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-700"
            aria-label={`Delete note ${i + 1}`}
          >
            <i class="fas fa-trash"></i>
          </button>
        </div>
      </div>
      {/key}
    {/each}
  </div>
  <button
    on:click={addNote}
    class="absolute bottom-4 right-4 bg-indigo-600 hover:bg-indigo-700 text-white rounded-full p-3 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    aria-label="Add Note"
  >
    <i class="fas fa-plus"></i>
  </button>
</div>
===== ./src/lib/components/ActivityFeed.svelte =====
<script lang="ts">
  import ActivityItem from './ActivityItem.svelte';
  
  // Sample activity data (in a real app, this would come from an API or store)
  const activities = [
    {
      id: '1',
      type: 'completed',
      title: 'Completed exercise',
      description: 'JavaScript Closure Exercise',
      timestamp: '2 hours ago',
      icon: 'fa-check-circle',
      color: 'indigo'
    },
    {
      id: '2',
      type: 'started',
      title: 'Started new course',
      description: 'Quantum Physics',
      timestamp: 'Yesterday',
      icon: 'fa-book',
      color: 'blue'
    },
    {
      id: '3',
      type: 'achievement',
      title: 'Achievement unlocked',
      description: '7-Day Learning Streak',
      timestamp: '3 days ago',
      icon: 'fa-trophy',
      color: 'green'
    }
  ];
</script>

<div>
  <h2 class="text-lg font-semibold text-gray-100 mb-4">Recent Activity</h2>
  
  <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm">
    <div class="space-y-4">
      {#each activities as activity (activity.id)}
        <ActivityItem {activity} />
      {/each}
    </div>
  </div>
</div> ===== ./src/lib/components/ExerciseMarkdown.svelte =====
<script lang="ts">
  import MarkdownRenderer from './MarkdownRendererComponent.svelte';
  import MathContent from './MathContent.svelte';
  
  export let markdown: string = '';
  
  // Process any special exercise-specific markdown features
  let processedMarkdown = markdown;
  
  // Look for code exercise placeholders and format them
  $: processedMarkdown = processMathAndCode(markdown);
  
  function processMathAndCode(text: string): string {
    // Process math expressions
    let processed = text.replace(/\$\$(.*?)\$\$/g, (match, p1) => {
      return `<div class="math-block">${p1}</div>`;
    });
    
    processed = processed.replace(/\$(.*?)\$/g, (match, p1) => {
      return `<span class="math-inline">${p1}</span>`;
    });
    
    // Add special formatting for code exercises
    processed = processed.replace(/```exercise([\s\S]*?)```/g, (match, p1) => {
      return `<div class="code-exercise-container">\n\`\`\`${p1}\`\`\`\n</div>`;
    });
    
    return processed;
  }
</script>

<div class="exercise-markdown">
  <MarkdownRenderer content={processedMarkdown} />
</div>

<style>
  .exercise-markdown :global(.code-exercise-container) {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1.5rem 0;
    background-color: #f9fafb;
  }
  
  /* Dark mode */
  :global(.dark) .exercise-markdown :global(.code-exercise-container) {
    background-color: #1f2937;
    border-color: #374151;
  }
  
  .exercise-markdown :global(.math-block),
  .exercise-markdown :global(.math-inline) {
    font-family: 'Cambria Math', 'STIX Two Math', serif;
  }
</style>===== ./src/lib/components/Timer.svelte =====
<script lang="ts">
  import { onDestroy } from 'svelte';
  let elapsed = 0; // seconds
  let intervalId: number | null = null;
  let isRunning = false;

  function formatTime(seconds: number) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${String(hrs).padStart(2,'0')}:${String(mins).padStart(2,'0')}:${String(secs).padStart(2,'0')}`;
  }

  function start() {
    if (isRunning) return;
    isRunning = true;
    intervalId = window.setInterval(() => {
      elapsed += 1;
    }, 1000);
  }

  function stop() {
    if (intervalId !== null) {
      clearInterval(intervalId);
      intervalId = null;
    }
    isRunning = false;
  }

  function reset() {
    stop();
    elapsed = 0;
  }

  onDestroy(() => {
    if (intervalId !== null) clearInterval(intervalId);
  });
</script>

<div class="workspace-tool mb-6">
  <h2 class="text-xl font-semibold mb-2">Timer</h2>
  <div class="text-2xl font-mono mb-4">{formatTime(elapsed)}</div>
  <div class="space-x-2">
    <button on:click={start} class="px-4 py-2 bg-green-500 text-white rounded">Start</button>
    <button on:click={stop} class="px-4 py-2 bg-red-500 text-white rounded">Stop</button>
    <button on:click={reset} class="px-4 py-2 bg-gray-500 text-white rounded">Reset</button>
  </div>
</div>
===== ./src/lib/components/Header.svelte =====
<script lang="ts">
  import { pipVisible } from '$lib/stores/pipStores.js';
  import { isAuthenticated, user, loading } from '$lib/stores/authStore.js';
  import { logout } from '$lib/authService.js';
  import { slide } from 'svelte/transition';
  import { goto } from '$app/navigation';

  export let onTogglePip = () => pipVisible.update((v: boolean) => !v);
  
  function navigateToLogin() {
    goto('/login');
  }
</script>

<header class="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40 relative">
  <div class="max-w-full mx-auto px-4 py-3 sm:px-6 lg:px-8 flex justify-between items-center">
    <!-- Centered Search Container -->
    <div class="flex-1 relative">
      <div class="absolute inset-x-0 flex justify-center">
        <div class="relative max-w-lg w-full">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i class="fas fa-search text-gray-400"></i>
          </div>
          <input
            type="text"
            class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Search courses, exercises..."
          />
        </div>
      </div>
    </div>

    <div class="ml-4 flex items-center space-x-3">
      <button 
        class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        aria-label="Show notifications"
      >
        <i class="fas fa-bell"></i>
      </button>
      
      <button 
        id="pipToggle" 
        class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        on:click={onTogglePip}
        aria-label="Toggle learning tools widget"
      >
        <i class="fas fa-puzzle-piece"></i>
      </button>

      {#if $loading}
        <div class="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div>
      {:else if $isAuthenticated && $user}
        <div class="flex items-center space-x-3">
          <div class="h-8 w-8 rounded-full bg-indigo-500 flex items-center justify-center text-white text-sm font-medium">
            {$user.displayName?.charAt(0).toUpperCase() ?? $user.email?.charAt(0).toUpperCase() ?? 'U'}
          </div>
          <button 
            class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
            on:click={logout}
          >
            Log out
          </button>
        </div>
      {:else}
        <button 
          class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
          on:click={navigateToLogin}
        >
          Log in
        </button>
      {/if}
    </div>
  </div>
</header>===== ./src/lib/components/ScoreCard.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  let score: number | null = null;
  let loading = true;
  let error: string | null = null;

  onMount(async () => {
    try {
      const res = await fetch('/api/score');
      if (!res.ok) throw new Error('Failed to fetch score');
      const data = await res.json();
      score = data.score;
    } catch (e:any) {
      console.error(e);
      error = e.message;
    } finally {
      loading = false;
    }
  });

  function starArray(n: number) {
    const full = Math.floor(n);
    const half = n - full >= 0.5;
    return [...Array(5)].map((_, i) =>
      i < full ? 'full' : i === full && half ? 'half' : 'empty'
    );
  }
</script>

<div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow mb-8">
  <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Score Utilisateur</h2>
  {#if loading}
    <p class="text-gray-600">Loading...</p>
  {:else if error}
    <p class="text-red-500">{error}</p>
  {:else if score !== null}
    <div class="flex items-center">
      <div class="flex mr-3">
        {#each starArray(score) as type}
          {#if type === 'full'}<i class="fas fa-star text-yellow-400"></i>
          {:else if type === 'half'}<i class="fas fa-star-half-alt text-yellow-400"></i>
          {:else}<i class="far fa-star text-gray-300 dark:text-gray-600"></i>{/if}
        {/each}
      </div>
      <span class="text-gray-900 dark:text-gray-100 font-medium">{score}/5</span>
    </div>
  {/if}
</div>===== ./src/lib/components/pip/PipFlashcards.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/pip/PipFlashcards.svelte -->
<script lang="ts">
  import { persistentStore } from '../../stores/persistentStore';

  interface Flashcard {
    id: string;
    front: string;
    back: string;
    lastReviewed?: number;
    nextReview?: number;
    level: number; // 0-5 for spaced repetition
  }

  const flashcards = persistentStore<Flashcard[]>('learnflow-flashcards', []);
  let currentCard: Flashcard | null = null;
  let showingFront = true;
  let newCardFront = '';
  let newCardBack = '';

  // Get next card based on spaced repetition algorithm
  function getNextCard(): Flashcard | null {
    const now = Date.now();
    const cards = $flashcards.filter(card => !card.nextReview || card.nextReview <= now);
    if (cards.length === 0) return null;
    return cards[Math.floor(Math.random() * cards.length)];
  }

  function addCard() {
    if (!newCardFront.trim() || !newCardBack.trim()) return;
    
    const card: Flashcard = {
      id: crypto.randomUUID(),
      front: newCardFront,
      back: newCardBack,
      level: 0
    };
    
    flashcards.update(cards => [...cards, card]);
    newCardFront = '';
    newCardBack = '';
  }

  function flipCard() {
    showingFront = !showingFront;
  }

  function reviewCard(success: boolean) {
    if (!currentCard) return;
    
    const now = Date.now();
    let nextLevel = success ? currentCard.level + 1 : Math.max(0, currentCard.level - 1);
    nextLevel = Math.min(5, nextLevel);
    
    // Calculate next review time using spaced repetition
    const intervals = [
      1000 * 60 * 30,        // 30 minutes
      1000 * 60 * 60 * 4,    // 4 hours
      1000 * 60 * 60 * 24,   // 1 day
      1000 * 60 * 60 * 24 * 3,  // 3 days
      1000 * 60 * 60 * 24 * 7,  // 1 week
      1000 * 60 * 60 * 24 * 14  // 2 weeks
    ];

    flashcards.update(cards => 
      cards.map(card => 
        card.id === currentCard.id 
          ? {
              ...card,
              level: nextLevel,
              lastReviewed: now,
              nextReview: now + intervals[nextLevel]
            }
          : card
      )
    );

    // Move to next card
    currentCard = getNextCard();
    showingFront = true;
  }

  function handleCardKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter' || event.key === ' ') {
      flipCard();
    }
  }

  // Start reviewing
  $: if (!currentCard) {
    currentCard = getNextCard();
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-orange-300 uppercase mb-2">Flashcards</h4>

  {#if $flashcards.length === 0}
    <!-- Add first card form -->
    <div class="text-center p-4">
      <p class="text-gray-300 text-sm mb-4">Create your first flashcard:</p>
      <div class="space-y-2">
        <input
          type="text"
          bind:value={newCardFront}
          placeholder="Front side..."
          class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
        />
        <textarea
          bind:value={newCardBack}
          placeholder="Back side..."
          rows="2"
          class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
        ></textarea>
        <button
          on:click={addCard}
          class="w-full py-2 bg-orange-600 text-white rounded font-medium hover:bg-orange-700 transition"
        >
          Add Card
        </button>
      </div>
    </div>
  {:else}
    <!-- Review interface -->
    {#if currentCard}
      <div class="p-4">
        <div
          role="button"
          tabindex="0"
          class="min-h-[120px] p-4 bg-gray-800 rounded-lg shadow-inner flex items-center justify-center cursor-pointer transition-transform hover:scale-[1.02] select-none focus:outline-none focus:ring-2 focus:ring-orange-500"
          on:click={flipCard}
          on:keydown={handleCardKeydown}
        >
          <p class="text-gray-100 text-center">
            {showingFront ? currentCard.front : currentCard.back}
          </p>
        </div>
        
        <div class="flex justify-between mt-4">
          <button
            on:click={() => reviewCard(false)}
            class="px-4 py-2 bg-red-600 text-white rounded font-medium hover:bg-red-700 transition"
          >
            Again
          </button>
          <button
            on:click={() => reviewCard(true)}
            class="px-4 py-2 bg-green-600 text-white rounded font-medium hover:bg-green-700 transition"
          >
            Good
          </button>
        </div>
      </div>
    {:else}
      <div class="text-center p-4">
        <p class="text-gray-300">No cards due for review!</p>
      </div>
    {/if}

    <!-- Add new card button -->
    <div class="mt-2 border-t border-gray-600 pt-2">
      <details class="text-sm">
        <summary class="text-gray-300 cursor-pointer hover:text-gray-100">Add New Card</summary>
        <div class="mt-2 space-y-2">
          <input
            type="text"
            bind:value={newCardFront}
            placeholder="Front side..."
            class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
          />
          <textarea
            bind:value={newCardBack}
            placeholder="Back side..."
            rows="2"
            class="w-full p-2 rounded bg-gray-600 text-gray-100 text-sm border border-gray-500 focus:border-orange-500 focus:ring-1 focus:ring-orange-500"
          ></textarea>
          <button
            on:click={addCard}
            class="w-full py-2 bg-orange-600 text-white rounded font-medium hover:bg-orange-700 transition"
          >
            Add Card
          </button>
        </div>
      </details>
    </div>
  {/if}
</div>===== ./src/lib/components/pip/PipDictionary.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/pip/PipDictionary.svelte -->
<script lang="ts">
  interface Definition {
    definition: string;
    example?: string;
  }

  interface Meaning {
    partOfSpeech: string;
    definitions: Definition[];
  }

  interface DictionaryResult {
    word: string;
    phonetic?: string;
    meanings: Meaning[];
  }

  let searchTerm = '';
  let searching = false;
  let result: DictionaryResult | null = null;
  let error: string | null = null;

  async function lookupWord(term: string): Promise<void> {
    if (!term.trim()) return;
    
    searching = true;
    error = null;
    result = null;
    
    try {
      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(term)}`);
      if (!response.ok) throw new Error('Word not found');
      const data = await response.json();
      result = data[0] as DictionaryResult;
    } catch (e: any) {
      error = e.message;
    } finally {
      searching = false;
    }
  }

  function handleSubmit() {
    if (searchTerm.trim()) {
      lookupWord(searchTerm);
    }
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-cyan-300 uppercase mb-2">Dictionary</h4>
  
  <form on:submit|preventDefault={handleSubmit} class="mb-3">
    <div class="flex gap-2">
      <input
        type="text"
        bind:value={searchTerm}
        placeholder="Enter a word..."
        class="flex-1 px-3 py-1.5 bg-gray-800 text-gray-100 rounded border border-gray-600 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500"
      >
      <button
        type="submit"
        class="px-3 py-1.5 bg-cyan-600 text-white rounded hover:bg-cyan-700 transition disabled:opacity-50"
        disabled={searching || !searchTerm.trim()}
      >
        {#if searching}
          <i class="fas fa-spinner fa-spin"></i>
        {:else}
          <i class="fas fa-search"></i>
        {/if}
      </button>
    </div>
  </form>

  {#if error}
    <div class="text-center p-4 text-red-400">
      <i class="fas fa-exclamation-circle mb-2 text-xl"></i>
      <p class="text-sm">{error}</p>
    </div>
  {:else if result}
    <div class="space-y-3">
      <div>
        <div class="flex items-baseline gap-2 mb-1">
          <h3 class="text-lg font-bold text-gray-100">{result.word}</h3>
          {#if result.phonetic}
            <span class="text-sm text-gray-400">{result.phonetic}</span>
          {/if}
        </div>
        {#if result.meanings?.[0]?.definitions?.[0]}
          <p class="text-sm text-gray-300">{result.meanings[0].definitions[0].definition}</p>
        {/if}
      </div>

      {#if result.meanings?.length > 0}
        <div class="border-t border-gray-600 pt-2">
          {#each result.meanings.slice(0, 2) as meaning}
            <div class="mb-2">
              <span class="text-xs font-medium text-cyan-400">{meaning.partOfSpeech}</span>
              <ul class="mt-1 space-y-1">
                {#each meaning.definitions.slice(0, 2) as def}
                  <li class="text-sm text-gray-300">• {def.definition}</li>
                  {#if def.example}
                    <li class="text-xs text-gray-400 italic ml-4">"{def.example}"</li>
                  {/if}
                {/each}
              </ul>
            </div>
          {/each}
        </div>
      {/if}
    </div>
  {:else}
    <div class="text-center p-4 text-gray-400">
      <i class="fas fa-book mb-2 text-xl"></i>
      <p class="text-sm">Search for a word to see its definition</p>
    </div>
  {/if}
</div>===== ./src/lib/components/pip/PipTodo.svelte =====
<script lang="ts">
  import { todos, type TodoItem } from '$lib/stores/pipStores.js';
  import { flip } from 'svelte/animate';
  import { fade } from 'svelte/transition';

  let newTodoText = '';

  function addTodo() {
    console.log('[PipTodo] addTodo function called.');
    const text = newTodoText.trim();
    if (!text) {
      console.log('[PipTodo] addTodo: No text entered.');
      return;
    }
    const newTodo: TodoItem = {
      id: crypto.randomUUID(),
      text: text,
      completed: false,
      createdAt: Date.now()
    };
    console.log('[PipTodo] Adding new todo:', newTodo);
    todos.update(currentTodos => {
      const updatedTodos = [...currentTodos, newTodo];
      console.log('[PipTodo] Updated todos store:', updatedTodos);
      return updatedTodos;
    });
    newTodoText = ''; // Clear input
  }

  function toggleTodo(id: string) {
    todos.update(currentTodos =>
      currentTodos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  }

  function deleteTodo(id: string) {
      todos.update(currentTodos => currentTodos.filter(todo => todo.id !== id));
  }

  // Handle Enter key press in input
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      addTodo();
    }
  }

</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-green-300 uppercase mb-2">Todo List</h4>
  <div class="flex mb-2">
    <input
      type="text"
      bind:value={newTodoText}
      on:keydown={handleKeydown}
      placeholder="Add a new task..."
      class="flex-1 text-sm bg-gray-600 text-gray-100 border border-gray-500 rounded-l-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500 placeholder-gray-400"
    >
    <button
      on:click={addTodo}
      class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-r-md text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-green-400"
    >
      Add
    </button>
  </div>
  {#if $todos.length > 0}
    <ul class="space-y-1 max-h-40 overflow-y-auto pr-1">
      {#each $todos.sort((a, b) => a.createdAt - b.createdAt) as todo (todo.id)}
        <li
          class="flex items-center text-sm p-1.5 bg-gray-600 rounded-md group"
          animate:flip={{ duration: 200 }}
          transition:fade={{ duration: 150 }}
        >
          <input
            type="checkbox"
            bind:checked={todo.completed}
            on:change={() => toggleTodo(todo.id)}
            class="mr-2 h-4 w-4 form-checkbox bg-gray-500 border-gray-400 text-green-500 focus:ring-green-400 focus:ring-offset-gray-600 rounded"
            aria-labelledby="todo-text-{todo.id}"
          >
          <span
            id="todo-text-{todo.id}"
            class="flex-1 {todo.completed ? 'line-through text-gray-400' : 'text-gray-100'}"
          >
            {todo.text}
          </span>
           <button
             on:click={() => deleteTodo(todo.id)}
             class="ml-2 px-1 text-gray-400 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity duration-150 focus:outline-none"
             aria-label="Delete task"
           >
             <i class="fas fa-trash-alt fa-xs"></i>
           </button>
        </li>
      {/each}
    </ul>
  {:else}
    <p class="text-gray-400 text-xs italic text-center py-2">No tasks yet. Add one above!</p>
  {/if}
</div>
===== ./src/lib/components/pip/PipNotes.svelte =====
<script lang="ts">
  import { notes, type NoteItem } from '$lib/stores/pipStores.js';
  import { fade } from 'svelte/transition';
  import { flip } from 'svelte/animate';

  let newNoteContent = '';
  let showNewNoteInput = false;

  function addNote() {
    const content = newNoteContent.trim();
    if (!content) return;

    // Simple title generation (first few words or line)
    const title = content.split('\n')[0].substring(0, 30) || 'Untitled Note';

    const newNote: NoteItem = {
      id: crypto.randomUUID(),
      title: title,
      content: content,
      createdAt: Date.now(),
      updatedAt: Date.now()
    };
    notes.update(currentNotes => [newNote, ...currentNotes]); // Add to top
    newNoteContent = ''; // Clear input
    showNewNoteInput = false; // Hide input
  }

  function startNewNote() {
      showNewNoteInput = true;
      // TODO: Focus the textarea after it appears (requires a tick or timeout)
  }

  function cancelNewNote() {
      showNewNoteInput = false;
      newNoteContent = '';
  }

  // Function to delete a note (optional)
  function deleteNote(id: string) {
    notes.update(currentNotes => currentNotes.filter(note => note.id !== id));
  }

</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <div class="flex justify-between items-center mb-2">
    <h4 class="text-xs font-medium text-blue-300 uppercase">Quick Notes</h4>
    {#if !showNewNoteInput}
      <button
        on:click={startNewNote}
        class="px-2 py-0.5 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-blue-400"
      >
        + New
      </button>
    {/if}
  </div>

  {#if showNewNoteInput}
     <div transition:fade={{duration: 150}}>
       <textarea
         bind:value={newNoteContent}
         placeholder="Start typing your note..."
         rows="3"
         class="w-full text-sm bg-gray-600 text-gray-100 border border-gray-500 rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 placeholder-gray-400 mb-1"
       ></textarea>
        <div class="flex justify-end space-x-2">
           <button
             on:click={cancelNewNote}
             class="px-3 py-1 bg-gray-500 hover:bg-gray-400 text-gray-100 rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-gray-400"
           >
             Cancel
           </button>
           <button
             on:click={addNote}
             disabled={!newNoteContent.trim()}
             class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-blue-400 disabled:opacity-50 disabled:cursor-not-allowed"
           >
             Save Note
           </button>
        </div>
     </div>
  {/if}

  {#if $notes.length > 0 && !showNewNoteInput}
    <ul class="space-y-1 max-h-40 overflow-y-auto pr-1 mt-2">
      {#each $notes.sort((a, b) => b.updatedAt - a.updatedAt) as note (note.id)}
        <li
          class="group flex justify-between items-center text-sm p-1.5 bg-gray-600 hover:bg-gray-500 transition duration-150 rounded-md cursor-pointer"
          animate:flip={{ duration: 200 }}
          transition:fade={{ duration: 150 }}
          title={note.content.substring(0, 100) + (note.content.length > 100 ? '...' : '')}
        >
          <span class="text-gray-100 truncate pr-2">{note.title}</span>
          <button
             on:click|stopPropagation={() => deleteNote(note.id)}
             class="ml-2 px-1 text-gray-400 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity duration-150 focus:outline-none"
             aria-label="Delete note"
           >
             <i class="fas fa-trash-alt fa-xs"></i>
           </button>
        </li>
      {/each}
    </ul>
  {:else if !showNewNoteInput}
    <p class="text-gray-400 text-xs italic text-center py-2">No notes yet. Click '+ New' to add one.</p>
  {/if}
</div>
===== ./src/lib/components/pip/PipTimer.svelte =====
<script lang="ts">
  import { timerState, timerSettings, focusSessions, type FocusSession } from '$lib/stores/pipStores.js';
  import { onDestroy } from 'svelte';

  let intervalId: ReturnType<typeof setInterval> | null = null;

  // Format time left in seconds to MM:SS
  $: formattedTime = (() => {
    const minutes = Math.floor($timerState.timeLeft / 60);
    const seconds = $timerState.timeLeft % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  })();

  function startTimer() {
    if ($timerState.isRunning || intervalId) return;
    timerState.update(state => ({ ...state, isRunning: true }));

    intervalId = setInterval(() => {
      timerState.update(state => {
        if (state.timeLeft <= 0) {
          nextPhase();
          return state; // State is updated within nextPhase
        }
        return { ...state, timeLeft: state.timeLeft - 1 };
      });
    }, 1000);
  }

  function pauseTimer() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
    }
    timerState.update(state => ({ ...state, isRunning: false }));
  }

  function resetTimer() {
    pauseTimer();
    timerState.update(state => ({
      ...state,
      mode: 'work',
      timeLeft: $timerSettings.workDuration,
      cycle: 0
    }));
  }

  function nextPhase() {
      pauseTimer(); // Stop current interval

      // --- Record completed work session --- 
      if ($timerState.mode === 'work') {
        const completedSession: FocusSession = {
          timestamp: Date.now(),
          duration: $timerSettings.workDuration // Record the planned duration
        };
        focusSessions.update(sessions => [...sessions, completedSession]);
        console.log('Recorded focus session:', completedSession); // Optional logging
      }
      // --- End recording --- 

      let nextMode: typeof $timerState.mode = 'work';
      let nextTimeLeft = $timerSettings.workDuration;
      let nextCycle = $timerState.cycle;

      if ($timerState.mode === 'work') {
          nextCycle++;
          if (nextCycle % $timerSettings.longBreakInterval === 0) {
              nextMode = 'longBreak';
              nextTimeLeft = $timerSettings.longBreakDuration;
          } else {
              nextMode = 'shortBreak';
              nextTimeLeft = $timerSettings.shortBreakDuration;
          }
      } else { // If current mode is shortBreak or longBreak
          nextMode = 'work';
          nextTimeLeft = $timerSettings.workDuration;
      }

      timerState.set({
          mode: nextMode,
          timeLeft: nextTimeLeft,
          isRunning: false, // Start paused in the new phase
          cycle: nextCycle
      });
      
      // Optional: Auto-start the next phase?
      // startTimer(); 
      
      // Optional: Notify user (e.g., with a sound)
      // new Audio('/path/to/notification.mp3').play();
  }

  // Ensure interval is cleared when component is destroyed
  onDestroy(() => {
    pauseTimer();
  });

</script>

<div class="text-center p-2 bg-gray-700 rounded-lg">
  <div class="text-xs font-medium text-indigo-300 uppercase mb-1">{$timerState.mode.replace('B', ' B')}</div>
  <div class="text-3xl font-bold mb-3 text-gray-100 tracking-wider">{formattedTime}</div>
  <div class="flex justify-center space-x-2">
    {#if !$timerState.isRunning}
      <button on:click={startTimer} class="px-4 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-indigo-400">Start</button>
    {:else}
       <button on:click={pauseTimer} class="px-4 py-1 bg-yellow-600 hover:bg-yellow-700 text-white rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-yellow-400">Pause</button>
    {/if}
    <button on:click={resetTimer} class="px-4 py-1 bg-gray-600 text-gray-200 hover:bg-gray-500 rounded text-sm transition duration-150 focus:outline-none focus:ring-2 focus:ring-gray-400">Reset</button>
  </div>
</div>
===== ./src/lib/components/pip/PipCalculator.svelte =====
<script lang="ts">
  import { calcDisplay, calcCurrentInput, calcOperator, calcPreviousValue, calcWaitingForSecondOperand } from '$lib/stores/pipStores';

  function inputDigit(digit: string) {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set(digit);
      calcWaitingForSecondOperand.set(false);
    } else {
      calcDisplay.set($calcDisplay === '0' ? digit : $calcDisplay + digit);
    }
    calcCurrentInput.set($calcDisplay);
  }

  function inputDecimal() {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set('0.');
      calcWaitingForSecondOperand.set(false);
      return;
    }

    if (!$calcDisplay.includes('.')) {
      calcDisplay.set($calcDisplay + '.');
      calcCurrentInput.set($calcDisplay);
    }
  }

  function clearAll() {
    calcDisplay.set('0');
    calcCurrentInput.set('');
    calcOperator.set(null);
    calcPreviousValue.set(null);
    calcWaitingForSecondOperand.set(false);
  }

  function handleOperator(nextOperator: string) {
    const inputValue = parseFloat($calcDisplay);

    if ($calcPreviousValue === null) {
      calcPreviousValue.set(inputValue);
    } else if ($calcOperator) {
      const result = performCalculation();
      calcDisplay.set(String(result));
      calcPreviousValue.set(result);
    }

    calcWaitingForSecondOperand.set(true);
    calcOperator.set(nextOperator);
  }

  function performCalculation(): number {
    const prevValue = $calcPreviousValue;
    const currentValue = parseFloat($calcDisplay);

    if (prevValue === null) return currentValue;

    switch ($calcOperator) {
      case '+':
        return prevValue + currentValue;
      case '-':
        return prevValue - currentValue;
      case '*':
        return prevValue * currentValue;
      case '/':
        return prevValue / currentValue;
      default:
        return currentValue;
    }
  }

  function toggleSign() {
    calcDisplay.set(String(-parseFloat($calcDisplay)));
    calcCurrentInput.set($calcDisplay);
  }

  function calculatePercentage() {
    const currentValue = parseFloat($calcDisplay);
    const percentValue = currentValue / 100;
    calcDisplay.set(String(percentValue));
    calcCurrentInput.set($calcDisplay);
  }
</script>

<div class="bg-gray-700 p-2 rounded-lg">
  <h4 class="text-xs font-medium text-purple-300 uppercase mb-2">Calculator</h4>
  <input
    type="text"
    class="w-full text-right mb-2 px-2 py-1 border-0 focus:ring-0 text-xl font-mono bg-gray-800 text-gray-100 rounded-md"
    bind:value={$calcDisplay}
    readonly
  >
  <div class="grid grid-cols-4 gap-1">
    {#each ['AC', '+/-', '%', '/', '7', '8', '9', '*', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '='] as key}
      {@const isOperator = ['/', '*', '-', '+', '='].includes(key)}
      {@const isZero = key === '0'}
      {@const isClear = key === 'AC'}
      <button
        on:click={() => {
          if (key === 'AC') clearAll();
          else if (key === '+/-') toggleSign();
          else if (key === '%') calculatePercentage();
          else if (isOperator) handleOperator(key);
          else if (key === '.') inputDecimal();
          else inputDigit(key);
        }}
        class="p-2 rounded text-sm font-medium transition duration-150 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-offset-gray-700
               {isZero ? 'col-span-2' : ''}
               {isOperator ? 'bg-purple-600 hover:bg-purple-700 text-white focus:ring-purple-400' : ''}
               {isClear ? 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-400' : ''}
               {!isOperator && !isClear ? 'bg-gray-600 hover:bg-gray-500 text-gray-100 focus:ring-gray-400' : ''}"
      >
        {#if key === '/'}÷
        {:else if key === '*'}<i class="fas fa-times"></i>
        {:else if key === '-'}<i class="fas fa-minus"></i>
        {:else if key === '+'}<i class="fas fa-plus"></i>
        {:else if key === '='}<i class="fas fa-equals"></i>
        {:else}{key}{/if}
      </button>
    {/each}
  </div>
</div>
===== ./src/lib/components/MarkdownRenderer.svelte =====
<script lang="ts">
  import { marked } from 'marked';
  import { onMount, afterUpdate } from 'svelte';
  import { browser } from '$app/environment';
  import hljs from 'highlight.js';
  
  export let content = '';
  let htmlContent: string;
  let markdownElement: HTMLDivElement;
  
  // Set up marked options with syntax highlighting
  marked.setOptions({
    gfm: true,
    breaks: true,
    smartLists: true,
    smartypants: true,
    highlight: function(code, lang) {
      if (lang && hljs.getLanguage(lang)) {
        try {
          return hljs.highlight(code, { language: lang }).value;
        } catch (err) {
          console.error('Highlight.js error:', err);
        }
      }
      return hljs.highlightAuto(code).value;
    },
  });
  
  // Process content into HTML
  $: htmlContent = content ? marked.parse(content) : '';
  
  onMount(() => {
    if (browser) {
      processCodeBlocks();
    }
  });
  
  afterUpdate(() => {
    if (browser && markdownElement) {
      processCodeBlocks();
    }
  });
  
  function processCodeBlocks() {
    if (!markdownElement) return;
    
    // Find all code blocks that haven't been processed
    const codeBlocks = markdownElement.querySelectorAll('pre code:not(.hljs)');
    if (codeBlocks.length > 0) {
      codeBlocks.forEach(block => {
        hljs.highlightElement(block as HTMLElement);
      });
    }
    
    // Process any other markdown elements if needed
  }
</script>

<div class="markdown-content" bind:this={markdownElement}>
  {@html htmlContent}
</div>

<style>
  .markdown-content {
    width: 100%;
    line-height: 1.6;
  }
  
  .markdown-content :global(h1),
  .markdown-content :global(h2),
  .markdown-content :global(h3),
  .markdown-content :global(h4),
  .markdown-content :global(h5),
  .markdown-content :global(h6) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    font-weight: 600;
  }
  
  .markdown-content :global(h1) {
    font-size: 1.8em;
  }
  
  .markdown-content :global(h2) {
    font-size: 1.5em;
  }
  
  .markdown-content :global(h3) {
    font-size: 1.3em;
  }
  
  .markdown-content :global(p) {
    margin-bottom: 1em;
  }
  
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-bottom: 1em;
    padding-left: 2em;
  }
  
  .markdown-content :global(li) {
    margin-bottom: 0.5em;
  }
  
  .markdown-content :global(pre) {
    margin-bottom: 1em;
    padding: 1em;
    border-radius: 0.375rem;
    background-color: #f3f4f6;
    overflow-x: auto;
  }
  
  .markdown-content :global(code) {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.9em;
  }
  
  .markdown-content :global(p code) {
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    background-color: #f3f4f6;
  }
  
  .markdown-content :global(blockquote) {
    margin-bottom: 1em;
    padding-left: 1em;
    border-left: 4px solid #e5e7eb;
    color: #6b7280;
  }
  
  .markdown-content :global(a) {
    color: #ef4444;
    text-decoration: underline;
  }
  
  .markdown-content :global(a:hover) {
    color: #b91c1c;
  }
  
  .markdown-content :global(img) {
    max-width: 100%;
    border-radius: 0.375rem;
  }
  
  .markdown-content :global(table) {
    width: 100%;
    margin-bottom: 1em;
    border-collapse: collapse;
  }
  
  .markdown-content :global(th),
  .markdown-content :global(td) {
    padding: 0.5em;
    border: 1px solid #e5e7eb;
  }
  
  .markdown-content :global(th) {
    background-color: #f9fafb;
    font-weight: 600;
  }
  
  /* Dark mode styles */
  :global(.dark) .markdown-content :global(pre) {
    background-color: #1f2937;
  }
  
  :global(.dark) .markdown-content :global(p code) {
    background-color: #1f2937;
  }
  
  :global(.dark) .markdown-content :global(blockquote) {
    border-left-color: #4b5563;
    color: #9ca3af;
  }
  
  :global(.dark) .markdown-content :global(a) {
    color: #f87171;
  }
  
  :global(.dark) .markdown-content :global(a:hover) {
    color: #fca5a5;
  }
  
  :global(.dark) .markdown-content :global(th),
  :global(.dark) .markdown-content :global(td) {
    border-color: #4b5563;
  }
  
  :global(.dark) .markdown-content :global(th) {
    background-color: #374151;
  }
</style>===== ./src/lib/components/StatCard.svelte =====
<script lang="ts">
  export let title: string;
  export let value: string;
  export let icon: string = 'fa-chart-line';
  export let color: string = 'blue';

  // Map color names to Tailwind CSS classes
  const colorClasses = {
    blue: {
      bg: 'bg-blue-100 dark:bg-blue-900',
      text: 'text-blue-600 dark:text-blue-300'
    },
    green: {
      bg: 'bg-green-100 dark:bg-green-900',
      text: 'text-green-600 dark:text-green-300'
    },
    red: {
      bg: 'bg-red-100 dark:bg-red-900',
      text: 'text-red-600 dark:text-red-300'
    },
    yellow: {
      bg: 'bg-yellow-100 dark:bg-yellow-900',
      text: 'text-yellow-600 dark:text-yellow-300'
    },
    indigo: {
      bg: 'bg-indigo-100 dark:bg-indigo-900',
      text: 'text-indigo-600 dark:text-indigo-300'
    },
    purple: {
      bg: 'bg-purple-100 dark:bg-purple-900',
      text: 'text-purple-600 dark:text-purple-300'
    },
    gray: {
      bg: 'bg-gray-100 dark:bg-gray-800',
      text: 'text-gray-600 dark:text-gray-300'
    }
  };

  // Get color classes based on the color prop, default to blue if not found
  $: colorStyle = colorClasses[color] || colorClasses.blue;
</script>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
  <div class="flex items-center justify-between">
    <div>
      <p class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">{title}</p>
      <p class="text-2xl font-bold text-gray-900 dark:text-white">{value}</p>
    </div>
    <div class="h-12 w-12 {colorStyle.bg} rounded-full flex items-center justify-center {colorStyle.text}">
      <i class="fas {icon} text-xl"></i>
    </div>
  </div>
</div> ===== ./src/lib/components/forums/ForumList.svelte =====
<script lang="ts">
  import { createEventDispatcher, onMount } from 'svelte';
  import { subscribedTopics, loadCategories, isLoading, error } from '$lib/stores/forumStore.js';
  import { user } from '$lib/stores/authStore.js';
  import Icon from '@iconify/svelte';
  import type { ForumCategory } from '$lib/types/forumTypes';
  import { getForumCategories } from '$lib/services/forums/forumService';

  // Helpers from parent page can be moved here
  function formatDate(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    if (diffMinutes < 60) return `${diffMinutes} min${diffMinutes !== 1 ? 's' : ''} ago`;
    if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  }
  function getCategoryById(id: string) {
    return categories.find((c: any) => c.id === id);
  }
  function getCategoryColorClass(color: string, forBg = true) {
    const base = {
      blue: ['blue-100 dark:blue-900/30','blue-800 dark:blue-300','blue-500 dark:blue-400'],
      green: ['green-100 dark:green-900/30','green-800 dark:green-300','green-500 dark:green-400'],
      gray: ['gray-100 dark:gray-700','gray-800 dark:gray-300','gray-500 dark:gray-400']
    }[color] || ['gray-100','gray-800','gray-500'];
    return forBg
      ? `bg-${base[0]} text-${base[2]} dark:bg-${base[1]} dark:text-${base[2]}`
      : `text-${base[2]} dark:text-${base[1]}`;
  }
  export let topics: any[] = [];
  export let votingTopicId: string | null = null;
  export let subscribingTopicId: string | null = null;
  export let unsubscribingTopicId: string | null = null;
  export let showHeader = true;
  export let limit: number | null = null;

  const dispatch = createEventDispatcher();
  function subscribe(id: string) { dispatch('subscribe', id); }
  function unsubscribe(id: string) { dispatch('unsubscribe', id); }
  function vote(id: string, type: string) { dispatch('vote', { id, type }); }
  $: currentUser = $user;

  let filteredCategories: ForumCategory[] = [];
  $: {
    filteredCategories = limit ? $categories.slice(0, limit) : $categories;
  }

  let categories = [];
  onMount(async () => {
    categories = await getForumCategories();
    loadCategories();
  });
</script>

<div class="forum-list">
  {#if showHeader}
    <div class="mb-6">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Forums</h1>
      <p class="text-gray-600 dark:text-gray-400 mt-2">Join discussions, ask questions, and share knowledge</p>
    </div>
  {/if}
  
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
      <p>{$error}</p>
    </div>
  {:else if filteredCategories.length === 0}
    <div class="text-center py-12">
      <Icon icon="mdi:forum-outline" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No categories found</h3>
      <p class="text-gray-600 dark:text-gray-400">There are no forum categories available yet.</p>
    </div>
  {:else}
    <div class="space-y-6">
      {#each filteredCategories as category}
        <a href="/forums/category/{category.id}" class="block">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-transform hover:transform hover:scale-[1.01]">
            <div class="p-5">
              <div class="flex items-start">
                {#if category.imageUrl}
                  <div class="flex-shrink-0 mr-4">
                    <img src={category.imageUrl} alt={category.name} class="w-12 h-12 rounded-md object-cover" />
                  </div>
                {:else}
                  <div class="flex-shrink-0 mr-4">
                    <div class="w-12 h-12 rounded-md bg-cherry-100 dark:bg-cherry-900/30 flex items-center justify-center">
                      <Icon icon="mdi:forum" class="w-6 h-6 text-cherry-600 dark:text-cherry-400" />
                    </div>
                  </div>
                {/if}
                
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{category.name}</h3>
                  <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">{category.description}</p>
                </div>
                
                <div class="ml-4 flex-shrink-0 text-right">
                  <div class="flex items-center text-cherry-600 dark:text-cherry-400">
                    <Icon icon="mdi:comment-multiple-outline" class="w-5 h-5 mr-1" />
                    <span class="text-sm font-medium">{category.topicCount || 0}</span>
                  </div>
                  
                  {#if category.lastActivityAt}
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      Last activity: {new Date(category.lastActivityAt).toLocaleDateString()}
                    </div>
                  {/if}
                </div>
              </div>
            </div>
          </div>
        </a>
      {/each}
    </div>
  {/if}
</div>

<div class="forum-list">
  {#each categories as category}
    <div class="category">
      <h3>{category.name}</h3>
      <p>{category.description}</p>
    </div>
  {/each}
</div>

{#if topics.length === 0}
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-8 text-center">
    <p class="text-gray-600 dark:text-gray-400">No discussions found.</p>
  </div>
{:else}
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
    <div class="divide-y divide-gray-200 dark:divide-gray-700">
      {#each topics as topic (topic.id)}
        <div class="p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors flex justify-between items-start">
          <div class="flex-1">
            <div class="flex items-start justify-between">
              <div>
                <a href={`/forums/${topic.id}`} class="text-lg font-medium text-gray-900 dark:text-white hover:text-indigo-600 dark:hover:text-indigo-400">
                  {#if topic.isPinned}<i class="fas fa-thumbtack text-indigo-500 mr-1 text-xs"></i>{/if}
                  {#if topic.isLocked}<i class="fas fa-lock text-gray-500 mr-1 text-xs"></i>{/if}
                  {topic.title}
                </a>
                <div class="flex flex-wrap gap-1 mt-1">
                  {#if topic.difficulty}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium 
                      {topic.difficulty === 'beginner' ? 'bg-green-100 text-green-800' : topic.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                      {topic.difficulty.charAt(0).toUpperCase() + topic.difficulty.slice(1)}
                    </span>
                  {/if}
                  {#if topic.hasCodeExamples}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                      <i class="fas fa-code mr-1"></i>Code
                    </span>
                  {/if}
                  {#if topic.isResolved}
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                      <i class="fas fa-check-circle mr-1"></i>Resolved
                    </span>
                  {/if}
                </div>
                {#if topic.tags?.length}
                  <div class="flex flex-wrap gap-1 mt-2">
                    {#each topic.tags as tag}
                      <a href={`/forums/tag/${tag}`} class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200">
                        #{tag}
                      </a>
                    {/each}
                  </div>
                {/if}
                {#if topic.resourceLinks}
                  <div class="mt-2">
                    <span class="text-xs text-gray-500">Resources:</span>
                    <div class="flex flex-wrap gap-2 mt-1">
                      {#each topic.resourceLinks as link}
                        <a href={link.url} target="_blank" rel="noopener" class="inline-flex items-center text-xs text-indigo-600 hover:underline">
                          <i class="fas fa-external-link-alt mr-1"></i>{link.title}
                        </a>
                      {/each}
                    </div>
                  </div>
                {/if}
              </div>
              <div class="ml-2">
                {#if getCategoryById(topic.category)}
                  {@const cat = getCategoryById(topic.category)}
                  <a href={`/forums/category/${topic.category}`} class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getCategoryColorClass(cat.color)}">
                    <i class={`fas ${cat.icon} mr-1`}></i> {cat.name}
                  </a>
                {/if}
              </div>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-500">
              <div class="flex items-center">
                {#if topic.author.avatar}<img src={topic.author.avatar} alt={topic.author.name} class="w-5 h-5 rounded-full mr-1.5" />{/if}
                <a href={`/profile/${topic.author.id}`} class="font-medium hover:underline text-gray-700">{topic.author.name}</a>
                <span class="mx-1.5">·</span><span>{formatDate(topic.createdAt)}</span>
              </div>
              <div class="flex items-center ml-auto space-x-4">
                <div class="flex items-center"><i class="fas fa-eye mr-1 text-gray-400"></i><span>{topic.viewsCount}</span></div>
                <div class="flex items-center"><i class="fas fa-comment-alt mr-1 text-gray-400"></i><span>{topic.repliesCount}</span></div>
              </div>
            </div>
            {#if topic.lastPost}
              <div class="mt-2 text-xs text-gray-500 flex items-center">
                <span>Last reply by</span>
                <div class="flex items-center ml-1">
                  {#if topic.lastPost.author.avatar}<img src={topic.lastPost.author.avatar} alt={topic.lastPost.author.name} class="w-4 h-4 rounded-full mr-1" />{/if}
                  <a href={`/profile/${topic.lastPost.author.id}`} class="font-medium hover:underline text-gray-700">{topic.lastPost.author.name}</a>
                </div>
                <span class="mx-1">·</span><span>{formatDate(topic.lastPost.date)}</span>
              </div>
            {/if}
          </div>
          <div class="ml-4 flex flex-col items-end gap-2">
            <!-- Voting controls -->
            <div class="flex flex-col items-center space-y-1">
              <button on:click={() => vote(topic.id, 'up')} class="text-gray-400 hover:text-green-600 {topic.userVote === 'up' ? 'text-green-600 font-bold' : ''}" disabled={votingTopicId === topic.id}>
                <i class="fas fa-arrow-up"></i>
                {#if votingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
              <span class="text-sm text-gray-600 dark:text-gray-400">{topic.upvotes || 0}</span>
              <button on:click={() => vote(topic.id, 'down')} class="text-gray-400 hover:text-red-600 {topic.userVote === 'down' ? 'text-red-600 font-bold' : ''}" disabled={votingTopicId === topic.id}>
                <i class="fas fa-arrow-down"></i>
                {#if votingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
              <span class="text-sm text-gray-600 dark:text-gray-400">{topic.downvotes || 0}</span>
            </div>
            {#if $subscribedTopics.includes(topic.id)}
              <button on:click={() => unsubscribe(topic.id)} class="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded" disabled={unsubscribingTopicId === topic.id}>
                <i class="fas fa-bell-slash mr-1"></i>Unsubscribe
                {#if unsubscribingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
            {:else}
              <button on:click={() => subscribe(topic.id)} class="px-2 py-1 text-xs bg-indigo-100 text-indigo-800 rounded" disabled={subscribingTopicId === topic.id}>
                <i class="fas fa-bell mr-1"></i>Subscribe
                {#if subscribingTopicId === topic.id}
                  <span class="ml-1 animate-spin">⏳</span>
                {/if}
              </button>
            {/if}
          </div>
        </div>
      {/each}
    </div>
  </div>
{/if}===== ./src/lib/components/forums/ForumHeader.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  const dispatch = createEventDispatcher();
  function onNewTopic() {
    dispatch('newTopic');
  }
  function onToggleSubscriptions() {
    dispatch('toggleSubscriptions');
  }
</script>

<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
  <div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Community Forums</h1>
    <p class="text-gray-600 dark:text-gray-400">Discuss courses, ask questions, and connect with other learners</p>
  </div>
  <div class="mt-4 md:mt-0 flex space-x-2">
    <button
      class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium flex items-center"
      on:click={onNewTopic}
    >
      <i class="fas fa-plus mr-2"></i>
      New Topic
    </button>
    <button
      class="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md text-sm font-medium flex items-center"
      on:click={onToggleSubscriptions}
    >
      <i class="fas fa-bell mr-2"></i>
      My Subscriptions
    </button>
  </div>
</div>  <!-- Close outer wrapper div -->===== ./src/lib/components/forums/CreateTopicForm.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { categories, loadCategories } from '$lib/stores/forumStore';
  import { createForumTopic } from '$lib/services/forums/forumService';
  import type { ForumTopic } from '$lib/types/forumTypes';
  import { goto } from '$app/navigation';
  import Icon from '@iconify/svelte';
  
  export let categoryId: string | null = null;
  
  let title = '';
  let content = '';
  let selectedCategoryId = categoryId;
  let tags: string[] = [];
  let newTag = '';
  
  let isSubmitting = false;
  let error: string | null = null;
  
  onMount(() => {
    loadCategories();
  });
  
  function addTag() {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      tags = [...tags, newTag.trim()];
      newTag = '';
    }
  }
  
  function removeTag(tag: string) {
    tags = tags.filter(t => t !== tag);
  }
  
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      event.preventDefault();
      addTag();
    }
  }
  
  async function handleSubmit() {
    if (!title.trim() || !content.trim() || !selectedCategoryId) {
      error = 'Please fill in all required fields';
      return;
    }
    
    isSubmitting = true;
    error = null;
    
    try {
      const newTopic = await createForumTopic({
        title: title.trim(),
        content: content.trim(),
        categoryId: selectedCategoryId,
        tags: tags.length > 0 ? tags : undefined
      } as Omit<ForumTopic, 'id' | 'createdAt' | 'viewCount' | 'replyCount' | 'lastReplyAt'>);
      
      if (newTopic) {
        goto(`/forums/topic/${newTopic.id}`);
      } else {
        error = 'Failed to create topic. Please try again.';
      }
    } catch (err) {
      console.error('Error creating topic:', err);
      error = 'An error occurred while creating your topic.';
    } finally {
      isSubmitting = false;
    }
  }
</script>

<!-- Placeholder for CreateTopicForm.svelte -->

<div class="create-topic-form">
  <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Create New Topic</h2>
  
  <div class="space-y-6">
    {#if error}
      <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md">
        <p>{error}</p>
      </div>
    {/if}
    
    <div>
      <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        Title *
      </label>
      <input
        type="text"
        id="title"
        bind:value={title}
        placeholder="Enter a descriptive title for your topic"
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
        disabled={isSubmitting}
      />
    </div>
    
    <div>
      <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        Category *
      </label>
      <select
        id="category"
        bind:value={selectedCategoryId}
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
        disabled={isSubmitting || !!categoryId}
      >
        <option value="" disabled>Select a category</option>
        {#each $categories as category}
          <option value={category.id}>{category.name}</option>
        {/each}
      </select>
    </div>
    
    <div>
      <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        Content *
      </label>
      <textarea
        id="content"
        bind:value={content}
        placeholder="Write your topic content here... (Markdown supported)"
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[200px]"
        disabled={isSubmitting}
      ></textarea>
      <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
        You can use Markdown formatting to structure your content.
      </p>
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        Tags
      </label>
      <div class="flex">
        <input
          type="text"
          bind:value={newTag}
          on:keydown={handleKeydown}
          placeholder="Add tags (press Enter to add)"
          class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
          disabled={isSubmitting}
        />
        <button
          on:click={addTag}
          type="button"
          class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 border-l-0 rounded-r-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
          disabled={isSubmitting || !newTag.trim()}
        >
          Add
        </button>
      </div>
      
      {#if tags.length > 0}
        <div class="flex flex-wrap gap-2 mt-2">
          {#each tags as tag}
            <div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
              {tag}
              <button
                on:click={() => removeTag(tag)}
                type="button"
                class="ml-1.5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
                disabled={isSubmitting}
              >
                <Icon icon="mdi:close" class="w-4 h-4" />
              </button>
            </div>
          {/each}
        </div>
      {/if}
    </div>
    
    <div class="flex justify-end">
      <button
        on:click={handleSubmit}
        disabled={isSubmitting || !title.trim() || !content.trim() || !selectedCategoryId}
        class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
      >
        {isSubmitting ? 'Creating Topic...' : 'Create Topic'}
      </button>
    </div>
  </div>
</div>===== ./src/lib/components/forums/NewPostForm.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { user } from '$lib/stores/authStore.js';
  let content = '';
  const dispatch = createEventDispatcher();

  // Track current user for conditional rendering
  // Use $user to access the store value reactively
  $: currentUser = $user;

  function submit() {
    if (!content.trim()) return;
    dispatch('newPost', { content: content.trim() });
    content = '';
  }
</script>

{#if currentUser?.uid}
  <div class="new-post-form">
    <textarea
      bind:value={content}
      class="w-full p-3 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500"
      rows="4"
      placeholder="Write your reply here..."
    />
    <button
      on:click|preventDefault={submit}
      class="mt-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={!content.trim()}
    >
      Post Reply
    </button>
  </div>
{:else}
  <p class="text-gray-600 dark:text-gray-400">
    You must be <a href="/login" class="text-indigo-600 hover:underline">logged in</a> to post a reply.
  </p>
{/if}

<!-- Placeholder for NewPostForm.svelte -->===== ./src/lib/components/forums/ForumFilters.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  export let categories: Array<{id: string, name: string}> = [];
  export let filterCategory: string;
  export let searchQuery: string;
  export let sortOption: string;
  export let difficultyFilter: string;
  const dispatch = createEventDispatcher();

  function handleSearch(e: Event) {
    dispatch('search', (e.target as HTMLInputElement).value);
  }
  function handleCategory(e: Event) {
    dispatch('category', (e.target as HTMLSelectElement).value);
  }
  function handleSort(e: Event) {
    dispatch('sort', (e.target as HTMLSelectElement).value);
  }
  function handleDifficulty(e: Event) {
    dispatch('difficulty', (e.target as HTMLSelectElement).value);
  }
</script>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4 mb-8">
  <div class="flex flex-col md:flex-row gap-4">
    <div class="relative flex-grow">
      <input
        type="text"
        class="w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        placeholder="Search topics..."
        value={searchQuery}
        on:input={handleSearch}
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
        <i class="fas fa-search text-gray-400"></i>
      </div>
    </div>
    <div class="flex flex-col sm:flex-row gap-2 sm:gap-4">
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={filterCategory} on:change={handleCategory}>
          <option value="all">All Categories</option>
          {#each categories as category}
            <option value={category.id}>{category.name}</option>
          {/each}
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={sortOption} on:change={handleSort}>
          <option value="latest">Latest Activity</option>
          <option value="created">Created</option>
          <option value="popular">Most Viewed</option>
          <option value="most-replies">Most Replies</option>
          <option value="most-upvoted">Most Upvoted</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
      <div class="relative">
        <select class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500" bind:value={difficultyFilter} on:change={handleDifficulty}>
          <option value="all">All Levels</option>
          <option value="beginner">Beginner</option>
          <option value="intermediate">Intermediate</option>
          <option value="advanced">Advanced</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <i class="fas fa-chevron-down text-gray-400"></i>
        </div>
      </div>
    </div>
  </div>
</div>===== ./src/lib/components/forums/ForumSidebar.svelte =====
<script lang="ts">
  export let categories: Array<{id: string, name: string, icon?: string}> = [];
  export let filterCategory: string;
</script>

<div class="space-y-6">
  <!-- Categories Sidebar -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Categories</h3>
    <ul class="space-y-2">
      <li>
        <a href="/forums"
           class="block px-3 py-2 rounded-md text-sm font-medium transition-colors {filterCategory === 'all' ? 'bg-indigo-100 dark:bg-indigo-700 text-indigo-700 dark:text-indigo-100' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'}">
          <i class="fas fa-list mr-2"></i> All Categories
        </a>
      </li>
      {#each categories as category}
        <li>
          <a href={`/forums/category/${category.id}`}
             class="block px-3 py-2 rounded-md text-sm font-medium transition-colors {filterCategory === category.id ? 'bg-indigo-100 dark:bg-indigo-700 text-indigo-700 dark:text-indigo-100' : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'}">
            <i class={`fas ${category.icon} mr-2`}></i> {category.name}
          </a>
        </li>
      {/each}
    </ul>
  </div>

  <!-- Learning Resources -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Learning Resources</h3>
    <ul class="space-y-2 text-sm">
      <li>
        <a href="/resources/study-guides" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-book mr-2"></i> Study Guides
        </a>
      </li>
      <li>
        <a href="/resources/code-examples" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-code mr-2"></i> Code Examples
        </a>
      </li>
      <li>
        <a href="/resources/practice-exercises" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-laptop-code mr-2"></i> Practice Exercises
        </a>
      </li>
      <li>
        <a href="/resources/community-projects" class="text-indigo-600 dark:text-indigo-400 hover:underline flex items-center">
          <i class="fas fa-project-diagram mr-2"></i> Community Projects
        </a>
      </li>
    </ul>
  </div>
</div>===== ./src/lib/components/forums/ForumTopic.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { currentTopic, posts, loadTopic, isLoading, error } from '$lib/stores/forumStore';
  import Icon from '@iconify/svelte';
  import MarkdownRenderer from '$lib/components/shared/MarkdownRenderer.svelte';
  import type { ForumPost } from '$lib/types/forumTypes';
  import { createForumPost } from '$lib/services/forums/forumService';
  import { getAuth } from 'firebase/auth';
  
  export let topicId: string;
  
  let newPostContent = '';
  let isSubmitting = false;
  let submitError: string | null = null;
  let isAuthenticated = false;
  
  onMount(() => {
    const auth = getAuth();
    isAuthenticated = !!auth.currentUser;
    
    loadTopic(topicId);
    
    const unsubscribe = auth.onAuthStateChanged((user) => {
      isAuthenticated = !!user;
    });
    
    return unsubscribe;
  });
  
  async function handleSubmitPost() {
    if (!newPostContent.trim() || !isAuthenticated) return;
    
    isSubmitting = true;
    submitError = null;
    
    try {
      const newPost = await createForumPost({
        topicId,
        content: newPostContent,
      } as Omit<ForumPost, 'id' | 'createdAt'>);
      
      if (newPost) {
        newPostContent = '';
        // Reload the topic to get the new post
        await loadTopic(topicId);
      } else {
        submitError = 'Failed to create post. Please try again.';
      }
    } catch (err) {
      console.error('Error submitting post:', err);
      submitError = 'An error occurred while submitting your post.';
    } finally {
      isSubmitting = false;
    }
  }
  
  function formatDate(date: Date | undefined): string {
    if (!date) return 'Unknown date';
    
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    // Less than 24 hours
    if (diff < 24 * 60 * 60 * 1000) {
      const hours = Math.floor(diff / (60 * 60 * 1000));
      
      if (hours < 1) {
        const minutes = Math.floor(diff / (60 * 1000));
        return minutes < 1 ? 'Just now' : `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
      }
      
      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
    }
    
    // Less than 7 days
    if (diff < 7 * 24 * 60 * 60 * 1000) {
      const days = Math.floor(diff / (24 * 60 * 60 * 1000));
      return `${days} day${days !== 1 ? 's' : ''} ago`;
    }
    
    // Default to formatted date
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
</script>

<!-- Placeholder for ForumTopic.svelte -->

<div class="forum-topic">
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
      <p>{$error}</p>
    </div>
  {:else if $currentTopic}
    <div class="mb-6">
      <a href="/forums/category/{$currentTopic.categoryId}" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
        <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
        Back to Forum
      </a>
      
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{$currentTopic.title}</h1>
      
      <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-4">
        <span class="flex items-center">
          <Icon icon="mdi:account" class="w-4 h-4 mr-1" />
          {$currentTopic.authorName || 'Unknown'}
        </span>
        <span class="mx-2">•</span>
        <span>{formatDate($currentTopic.createdAt)}</span>
        <span class="mx-2">•</span>
        <span class="flex items-center">
          <Icon icon="mdi:eye-outline" class="w-4 h-4 mr-1" />
          {$currentTopic.viewCount} view{$currentTopic.viewCount !== 1 ? 's' : ''}
        </span>
        <span class="mx-2">•</span>
        <span class="flex items-center">
          <Icon icon="mdi:comment-outline" class="w-4 h-4 mr-1" />
          {$currentTopic.replyCount} repl{$currentTopic.replyCount !== 1 ? 'ies' : 'y'}
        </span>
      </div>
      
      {#if $currentTopic.tags && $currentTopic.tags.length > 0}
        <div class="flex flex-wrap gap-2 mb-4">
          {#each $currentTopic.tags as tag}
            <a href="/forums/tag/{tag}" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
              {tag}
            </a>
          {/each}
        </div>
      {/if}
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 mb-6">
        <div class="prose dark:prose-invert max-w-none">
          <MarkdownRenderer content={$currentTopic.content} />
        </div>
      </div>
      
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
        Replies ({$posts.length})
      </h2>
      
      {#if $posts.length === 0}
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center">
          <Icon icon="mdi:comment-text-outline" class="w-12 h-12 mx-auto text-gray-400 mb-2" />
          <p class="text-gray-600 dark:text-gray-400">No replies yet. Be the first to reply!</p>
        </div>
      {:else}
        <div class="space-y-4">
          {#each $posts as post}
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              <div class="p-5">
                <div class="flex items-start">
                  <div class="flex-shrink-0 mr-4">
                    {#if post.authorAvatar}
                      <img src={post.authorAvatar} alt={post.authorName} class="w-10 h-10 rounded-full" />
                    {:else}
                      <div class="w-10 h-10 rounded-full bg-cherry-100 dark:bg-cherry-900/30 flex items-center justify-center">
                        <span class="text-cherry-600 dark:text-cherry-400 text-lg font-medium">
                          {post.authorName?.charAt(0) || 'A'}
                        </span>
                      </div>
                    {/if}
                  </div>
                  
                  <div class="flex-1">
                    <div class="flex items-center justify-between mb-2">
                      <span class="font-medium text-gray-900 dark:text-white">{post.authorName || 'Unknown'}</span>
                      <span class="text-sm text-gray-500 dark:text-gray-400">{formatDate(post.createdAt)}</span>
                    </div>
                    
                    <div class="prose dark:prose-invert max-w-none">
                      <MarkdownRenderer content={post.content} />
                    </div>
                    
                    {#if post.isAnswer}
                      <div class="mt-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400">
                        <Icon icon="mdi:check-circle" class="w-4 h-4 mr-1" />
                        Accepted Answer
                      </div>
                    {/if}
                  </div>
                </div>
              </div>
            </div>
          {/each}
        </div>
      {/if}
      
      {#if !$currentTopic.isLocked}
        <div class="mt-8">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Add Your Reply</h3>
          
          {#if isAuthenticated}
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
              <textarea
                bind:value={newPostContent}
                placeholder="Write your reply here... (Markdown supported)"
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[150px]"
                disabled={isSubmitting}
              ></textarea>
              
              {#if submitError}
                <div class="text-red-600 dark:text-red-400 text-sm mt-2">{submitError}</div>
              {/if}
              
              <div class="flex justify-end mt-4">
                <button 
                  on:click={handleSubmitPost}
                  disabled={isSubmitting || !newPostContent.trim()}
                  class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isSubmitting ? 'Submitting...' : 'Post Reply'}
                </button>
              </div>
            </div>
          {:else}
            <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-5 text-center">
              <p class="text-gray-700 dark:text-gray-300 mb-3">You need to be logged in to reply to this topic.</p>
              <a href="/login" class="inline-block px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors">
                Log In to Reply
              </a>
            </div>
          {/if}
        </div>
      {:else}
        <div class="mt-8 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 text-center text-yellow-800 dark:text-yellow-400">
          <Icon icon="mdi:lock" class="w-5 h-5 inline-block mr-2" />
          This topic is locked. New replies are not allowed.
        </div>
      {/if}
    </div>
  {:else if !$isLoading}
    <div class="text-center py-12">
      <Icon icon="mdi:alert-circle-outline" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Topic not found</h3>
      <p class="text-gray-600 dark:text-gray-400">The topic you're looking for doesn't exist or has been removed.</p>
      <a href="/forums" class="inline-block mt-4 px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors">
        Back to Forums
      </a>
    </div>
  {/if}
</div>===== ./src/lib/components/Login.svelte =====
<script lang="ts">
  import { login, loginWithGoogle } from '$lib/authService.js';
  import { loading, authError } from '$lib/stores/authStore.js';
  
  // Accept redirect parameter to forward users after login
  export let redirectTo = '/';
  
  let email = '';
  let password = '';
  let localError = '';
  let validationErrors: {email?: string; password?: string} = {};
  let isSubmitting = false;
  
  // Validate email format
  function validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const isValid = emailRegex.test(email);
    validationErrors.email = isValid ? undefined : 'Please enter a valid email address';
    return isValid;
  }
  
  // Validate password length
  function validatePassword(password: string): boolean {
    const isValid = password.length >= 6;
    validationErrors.password = isValid ? undefined : 'Password must be at least 6 characters';
    return isValid;
  }
  
  async function handleLogin() {
    isSubmitting = true;
    localError = '';
    validationErrors = {};
    
    // Validate form inputs
    const isEmailValid = validateEmail(email);
    const isPasswordValid = validatePassword(password);
    
    if (!isEmailValid || !isPasswordValid) {
      isSubmitting = false;
      return;
    }
    
    try {
      await login(email, password);
      // Login successful - redirect will be handled by the auth state listener
      console.log(`Login successful, will redirect to: ${redirectTo}`);
    } catch (err) {
      // Error is already handled and set in the authError store
    } finally {
      isSubmitting = false;
    }
  }
  
  async function handleGoogleLogin() {
    isSubmitting = true;
    localError = '';
    validationErrors = {};
    
    try {
      await loginWithGoogle();
      // Login successful - redirect will be handled by the auth state listener
      console.log(`Google login successful, will redirect to: ${redirectTo}`);
    } catch (err) {
      // Error is already handled and set in the authError store
    } finally {
      isSubmitting = false;
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Log In</h2>
  
  {#if redirectTo && redirectTo !== '/'}
    <div class="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">You'll be redirected to the requested page after login.</span>
    </div>
  {/if}
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleLogin} class="space-y-4" autocomplete="off">
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        on:blur={() => validateEmail(email)}
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.email ? 'border-red-500' : ''}"
        required
        autocomplete="username"
      />
      {#if validationErrors.email}
        <p class="mt-1 text-sm text-red-600">{validationErrors.email}</p>
      {/if}
    </div>
    
    <div>
      <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
      <input 
        type="password" 
        id="password" 
        bind:value={password} 
        on:blur={() => validatePassword(password)}
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 {validationErrors.password ? 'border-red-500' : ''}"
        required
        autocomplete="current-password"
      />
      {#if validationErrors.password}
        <p class="mt-1 text-sm text-red-600">{validationErrors.password}</p>
      {/if}
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading || isSubmitting}
      >
        {#if $loading || isSubmitting}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Log In
      </button>
    </div>
  </form>
  
  <div class="mt-4">
    <button 
      on:click={handleGoogleLogin} 
      class="w-full flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      disabled={$loading || isSubmitting}
    >
      <svg class="h-5 w-5 mr-2" viewBox="0 0 24 24">
        <path d="M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866c-3.431,0.589-6.663-1.727-7.253-5.157c-0.589-3.431,1.727-6.663,5.157-7.253c2.136-0.367,4.296,0.317,5.743,1.878l2.72-2.72c-2.099-2.099-5.271-2.853-8.135-1.879C8.234,3.708,4.766,6.152,3.032,9.686c-2.734,5.63,0.01,12.44,5.639,15.174c5.63,2.734,12.44-0.01,15.174-5.639c1.06-2.17,1.369-4.652,0.845-7.036h-9.687C13.25,12.151,12.545,12.151,12.545,12.151z" fill="#F44336"/>
        <path d="M12.545,12.151v-3.89h9.687c0.521,2.169,0.246,4.432-0.769,6.406c-0.217,0.436-0.453,0.853-0.725,1.241h-6.284C13.4,15.909,12.545,14.055,12.545,12.151z" fill="#2196F3"/>
      </svg>
      Sign in with Google
    </button>
  </div>
  
  <div class="mt-4 text-center">
    <a href="/reset-password" class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
      Forgot password?
    </a>
  </div>
  
  <div class="mt-4 text-center">
    <p class="text-sm text-gray-600 dark:text-gray-400">
      Don't have an account? 
      <a href="/register" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
        Sign up
      </a>
    </p>
  </div>
</div> ===== ./src/lib/components/Quotes.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  const quotes: string[] = [
    "The best way to predict the future is to create it.",
    "Don't watch the clock; do what it does. Keep going.",
    "The only limit to our realization of tomorrow is our doubts of today.",
    "Success is not final, failure is not fatal: It is the courage to continue that counts.",
    "Believe you can and you're halfway there.",
    "The harder you work for something, the greater you'll feel when you achieve it.",
    "Dream big and dare to fail.",
    "Don't stop when you're tired. Stop when you're done.",
    "Little things make big days.",
    "It always seems impossible until it's done.",
    "Start where you are. Use what you have. Do what you can.",
    "Dream it. Wish it. Do it.",
    "If you can dream it, you can do it.",
    "The secret of getting ahead is getting started.",
    "Hardships often prepare ordinary people for an extraordinary destiny.",
    "Keep your eyes on the stars, and your feet on the ground.",
    "The only way to do great work is to love what you do.",
    "Don't count the days, make the days count.",
    "Believe in yourself and all that you are.",
    "Opportunities don't happen. You create them.",
    "Great things never come from comfort zones.",
    "Success doesn't just find you. You have to go out and get it.",
    "The harder the battle, the sweeter the victory.",
    "Don't wait for opportunity. Create it.",
    "Your limitation—it's only your imagination.",
    "Push yourself, because no one else is going to do it for you.",
    "Sometimes later becomes never. Do it now.",
    "If you are working on something that you really care about, you don't have to be pushed. The vision pulls you.",
    "Success is walking from failure to failure with no loss of enthusiasm.",
    "Action is the foundational key to all success."
  ];

  let currentIndex = Math.floor(Math.random() * quotes.length);
  let currentQuote = quotes[currentIndex];
  let intervalId: number;

  onMount(() => {
    intervalId = window.setInterval(() => {
      currentIndex = (currentIndex + 1) % quotes.length;
      currentQuote = quotes[currentIndex];
    }, 5 * 60 * 1000); // every 5 minutes
  });

  onDestroy(() => {
    clearInterval(intervalId);
  });
</script>

<div class="workspace-tool mb-6">
  <h2 class="text-xl font-semibold mb-2">Motivational Quote</h2>
  <blockquote class="italic text-gray-700 dark:text-gray-300">“{currentQuote}”</blockquote>
</div>===== ./src/lib/components/ContentViewer.svelte =====
<script lang="ts">
  import { slide } from 'svelte/transition';
  import { onMount } from 'svelte';
  import MarkdownRenderer from './MarkdownRendererComponent.svelte';
  import ExerciseMarkdown from './ExerciseMarkdown.svelte';
  import MathContent from './MathContent.svelte';
  import ExerciseRating from './ExerciseRating.svelte';
  import type { ContentNode } from '$lib/services/contentService';
  import { getAuth } from 'firebase/auth';
  import { doc, getDoc, getFirestore, setDoc } from 'firebase/firestore';
  import Icon from '@iconify/svelte';

  export let item: ContentNode | null = null;
  export let type: 'exercise' | 'course' = 'exercise';
  export let onBack: () => void = () => {};

  $: sections = item ? extractContentSections(item.content || '') : {};

  let isCompleted = false;
  let isInProgress = false;
  let lastAttemptDate: Date | null = null;
  let userNotes = '';
  let showNotes = false;
  let notesAreEditable = false;

  $: hasSolution = !!sections.solution;
  $: hasContent = !!sections.content || !!sections.main;
  $: showSolution = false;
  let solutionRevealProgress = 0;
  let solutionBlurLevel = 5;
  let checkedHints: string[] = [];
  let hintsArray: string[] = [];

  let startTime: Date | null = null;
  let timeSpent = 0;
  let timerInterval: number | null = null;

  onMount(() => {
    let cleanupFunction = () => {};
    (async () => {
      if (item && type === 'exercise') {
        startTime = new Date();
        timerInterval = window.setInterval(updateTimeSpent, 1000);
        await loadUserProgress();
      }
    })();

    cleanupFunction = () => {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    };
    return cleanupFunction;
  });

  async function loadUserProgress() {
    if (!item) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', type === 'exercise' ? 'exercises' : 'courses');

      const userProgressDoc = await getDoc(userProgressRef);
      if (userProgressDoc.exists()) {
        const data = userProgressDoc.data();

        if (data.completed && data.completed[item.id]) {
          isCompleted = true;
        } else if (data.inProgress && data.inProgress[item.id]) {
          isInProgress = true;
        }
      }

      const itemDetailRef = doc(db, 'users', auth.currentUser.uid, type === 'exercise' ? 'exercises' : 'courses', item.id);
      const itemDetailDoc = await getDoc(itemDetailRef);

      if (itemDetailDoc.exists()) {
        const data = itemDetailDoc.data();
        userNotes = data.notes || '';
        lastAttemptDate = data.lastAttemptDate?.toDate() || null;
        checkedHints = data.checkedHints || [];
      }
    } catch (err) {
      console.error('Error loading user progress:', err);
    }
  }

  async function saveUserProgress(status: 'completed' | 'inProgress' | 'reset') {
    if (!item) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', type === 'exercise' ? 'exercises' : 'courses');

      if (status === 'completed') {
        await setDoc(userProgressRef, {
          completed: { [item.id]: true },
          inProgress: { [item.id]: false }
        }, { merge: true });

        isCompleted = true;
        isInProgress = false;
      } else if (status === 'inProgress') {
        await setDoc(userProgressRef, {
          inProgress: { [item.id]: true },
          completed: { [item.id]: false }
        }, { merge: true });

        isInProgress = true;
        isCompleted = false;
      } else {
        await setDoc(userProgressRef, {
          inProgress: { [item.id]: false },
          completed: { [item.id]: false }
        }, { merge: true });

        isInProgress = false;
        isCompleted = false;
      }

      const itemDetailRef = doc(db, 'users', auth.currentUser.uid, type === 'exercise' ? 'exercises' : 'courses', item.id);
      await setDoc(itemDetailRef, {
        timeSpent: timeSpent + (getTimeSpentSoFar() || 0),
        lastAttemptDate: new Date(),
        notes: userNotes,
        checkedHints: checkedHints
      }, { merge: true });

    } catch (err) {
      console.error('Error saving progress:', err);
    }
  }

  function getTimeSpentSoFar(): number | null {
    if (!startTime) return null;
    return Math.floor((new Date().getTime() - startTime.getTime()) / 1000);
  }

  function updateTimeSpent() {
    if (startTime) {
      timeSpent = Math.floor((new Date().getTime() - startTime.getTime()) / 1000);
    }
  }

  function formatTimeSpent(seconds: number): string {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${secs}s`;
    } else {
      return `${secs}s`;
    }
  }

  function extractContentSections(content: string): Record<string, string> {
    const result: Record<string, string> = {
      main: content
    };

    const sectionMatches = content.matchAll(/^##\s+([A-Za-z\s]+)\s*$([\s\S]*?)(?=^##\s+[A-Za-z\s]+\s*$|$)/gm);

    for (const match of sectionMatches) {
      if (match[1] && match[2]) {
        const sectionName = match[1].trim().toLowerCase();
        const sectionContent = match[2].trim();
        result[sectionName] = sectionContent;
      }
    }

    const hintsSection = result.hints || '';
    if (hintsSection) {
      const hints = hintsSection.split(/\n?(?:^###\s+Hint \d+\s*$|^\*\s+)/gm).map(h => h.trim()).filter(Boolean);
      if (hints.length > 0) {
        hintsArray = hints;
      }
    }

    if (type === 'exercise') {
      if (Object.keys(result).length > 1) {
        delete result.main;
      }

      if (result.problem) {
        result.content = result.problem;
        delete result.problem;
      }
    }

    return result;
  }

  function handleToggleSolution() {
    if (!showSolution) {
      solutionRevealProgress = 0;
      const interval = setInterval(() => {
        solutionRevealProgress += 5;
        if (solutionRevealProgress >= 100) {
          clearInterval(interval);
          showSolution = true;
        }
      }, 100);
    } else {
      showSolution = false;
      solutionRevealProgress = 0;
    }
  }

  function handleToggleNotes() {
    showNotes = !showNotes;
    notesAreEditable = showNotes && notesAreEditable;
  }

  function handleEditNotes() {
    notesAreEditable = true;
  }

  function handleSaveNotes() {
    notesAreEditable = false;
    if (item) {
      saveUserProgress(isCompleted ? 'completed' : 'inProgress');
    }
  }

  function handleMarkComplete() {
    if (!isCompleted) {
      saveUserProgress('completed');
    } else {
      saveUserProgress('reset');
    }
  }

  function toggleHint(index: number) {
    const hintId = `hint-${index}`;

    if (checkedHints.includes(hintId)) {
      checkedHints = checkedHints.filter((h: string) => h !== hintId);
    } else {
      checkedHints = [...checkedHints, hintId];
    }

    if (item) {
      saveUserProgress(isCompleted ? 'completed' : 'inProgress');
    }
  }
</script>

<div class="content-viewer bg-surface dark:bg-surface-dark text-text dark:text-text-light p-4 sm:p-6 lg:p-8 rounded-squircle shadow-card flex flex-col h-full overflow-hidden" transition:slide>
  {#if item}
    <div class="flex-shrink-0 mb-4 pb-4 border-b border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <h2 class="text-xl sm:text-2xl font-jakarta font-semibold text-text dark:text-text-light truncate pr-4">
          {item.title}
        </h2>
        <button
          on:click={onBack}
          class="text-gray-400 hover:text-cherry-600 dark:hover:text-cherry-400 transition-colors p-1 rounded-full -mr-1"
          aria-label="Close viewer"
        >
          <Icon icon="mdi:close" class="w-6 h-6" />
        </button>
      </div>
      {#if item.category}
        <span class="text-sm font-medium text-cherry-700 dark:text-cherry-500 bg-cherry-100 dark:bg-cherry-900/30 px-2.5 py-0.5 rounded-full mt-2 inline-block">
          {item.category}
        </span>
      {/if}
      {#if item.tags && item.tags.length > 0}
        <div class="mt-3 flex flex-wrap gap-2">
          {#each item.tags as tag}
            <span class="text-xs font-medium text-secondary-700 dark:text-secondary-300 bg-secondary-100 dark:bg-secondary-900/30 px-2 py-0.5 rounded-full">
              {tag}
            </span>
          {/each}
        </div>
      {/if}
    </div>

    <div class="flex-grow overflow-y-auto prose dark:prose-invert prose-cherry lg:prose-lg scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent pr-2 -mr-2">
      {#if type === 'exercise'}
        <ExerciseMarkdown markdown={sections.content || sections.main} />
        
        {#if hintsArray && hintsArray.length > 0}
          <div class="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
            <h3 class="text-lg font-semibold mb-3">Hints</h3>
            <div class="space-y-3">
              {#each hintsArray as hint, i}
                <div class="hint-container">
                  <button 
                    class="flex items-center justify-between w-full p-3 text-left border rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    on:click={() => toggleHint(i)}
                  >
                    <span class="font-medium">Hint {i + 1}</span>
                    <Icon icon={checkedHints.includes(`hint-${i}`) ? "mdi:chevron-up" : "mdi:chevron-down"} class="w-5 h-5" />
                  </button>
                  
                  {#if checkedHints.includes(`hint-${i}`)}
                    <div class="p-3 bg-gray-50 dark:bg-gray-800 rounded-md mt-1" transition:slide>
                      <MarkdownRenderer content={hint} />
                    </div>
                  {/if}
                </div>
              {/each}
            </div>
          </div>
        {/if}
        
        {#if hasSolution}
          <div class="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
            <div class="flex justify-between items-center mb-3">
              <h3 class="text-lg font-semibold">Solution</h3>
              <button 
                on:click={handleToggleSolution}
                class="px-3 py-1.5 text-sm font-medium rounded-md bg-cherry-100 dark:bg-cherry-900/30 text-cherry-700 dark:text-cherry-400 hover:bg-cherry-200 dark:hover:bg-cherry-800/50 transition-colors"
              >
                {showSolution ? 'Hide Solution' : 'Show Solution'}
              </button>
            </div>
            
            {#if solutionRevealProgress > 0 && !showSolution}
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-4">
                <div class="bg-cherry-600 dark:bg-cherry-500 h-2.5 rounded-full" style="width: {solutionRevealProgress}%"></div>
              </div>
            {/if}
            
            {#if showSolution}
              <div transition:slide>
                <MarkdownRenderer content={sections.solution} />
              </div>
            {:else if solutionRevealProgress > 0}
              <div class="p-4 border border-gray-200 dark:border-gray-700 rounded-md" style="filter: blur({solutionBlurLevel - (solutionBlurLevel * solutionRevealProgress / 100)}px);">
                <MarkdownRenderer content={sections.solution} />
              </div>
            {/if}
          </div>
        {/if}
      {:else if type === 'course'}
        <MarkdownRenderer content={sections.content || sections.main} />
      {:else}
        <MarkdownRenderer content={sections.content || sections.main} />
      {/if}
    </div>

    <div class="flex-shrink-0 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-center mb-2">
        <button 
          on:click={handleToggleNotes}
          class="flex items-center text-sm font-medium text-cherry-600 dark:text-cherry-400 hover:text-cherry-700 dark:hover:text-cherry-300"
        >
          <Icon icon="mdi:note-text-outline" class="w-5 h-5 mr-1" />
          {showNotes ? 'Hide Notes' : 'Show Notes'}
        </button>
        
        <div class="flex items-center space-x-2">
          <button 
            on:click={handleMarkComplete}
            class="px-3 py-1.5 text-sm font-medium rounded-md {isCompleted ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'} hover:opacity-90 transition-colors"
          >
            {isCompleted ? 'Completed' : 'Mark Complete'}
          </button>
          
          {#if lastAttemptDate}
            <span class="text-xs text-gray-500 dark:text-gray-400">
              Last attempt: {lastAttemptDate.toLocaleDateString()}
            </span>
          {/if}
          
          {#if startTime}
            <span class="text-xs text-gray-500 dark:text-gray-400">
              Time: {formatTimeSpent(timeSpent)}
            </span>
          {/if}
        </div>
      </div>
      
      {#if showNotes}
        <div transition:slide>
          {#if notesAreEditable}
            <div class="mt-2">
              <textarea
                bind:value={userNotes}
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-light focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[100px]"
                placeholder="Add your notes here..."
              ></textarea>
              <div class="flex justify-end mt-2">
                <button 
                  on:click={handleSaveNotes}
                  class="px-3 py-1.5 text-sm font-medium rounded-md bg-cherry-600 text-white hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors"
                >
                  Save Notes
                </button>
              </div>
            </div>
          {:else}
            <div class="mt-2 p-3 border border-gray-200 dark:border-gray-700 rounded-md min-h-[50px] bg-gray-50 dark:bg-gray-800">
              {#if userNotes}
                <MarkdownRenderer content={userNotes} />
              {:else}
                <p class="text-gray-500 dark:text-gray-400 italic">No notes yet. Click "Edit" to add notes.</p>
              {/if}
              <div class="flex justify-end mt-2">
                <button 
                  on:click={handleEditNotes}
                  class="px-3 py-1.5 text-sm font-medium rounded-md bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  Edit
                </button>
              </div>
            </div>
          {/if}
        </div>
      {/if}
    </div>

    {#if type === 'exercise'}
      <div class="flex-shrink-0 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        <ExerciseRating exerciseId={item.id} />
      </div>
    {/if}
  {:else}
    <div class="flex flex-col items-center justify-center h-full text-center text-text-secondary dark:text-text-secondary-light">
      <Icon icon="mdi:information-outline" class="w-12 h-12 mb-4 text-gray-400 dark:text-gray-500" />
      <p class="text-lg font-medium">Select an item</p>
      <p class="text-sm">Choose an exercise or course from the list to view its details here.</p>
    </div>
  {/if}
</div>===== ./src/lib/components/utils/Draggable.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';

  export let element: HTMLElement | null = null; // Bound element from parent
  export let disabled = false; // Prop to disable dragging
  export let boundaryElement: HTMLElement | 'window' = 'window'; // Optional boundary

  let isDragging = false;
  let startX: number, startY: number;
  let initialLeft: number, initialTop: number;

  function getBoundaryRect(): { top: number; left: number; bottom: number; right: number } {
    if (boundaryElement === 'window' || !boundaryElement) {
      return { top: 0, left: 0, bottom: window.innerHeight, right: window.innerWidth };
    }
    const rect = boundaryElement.getBoundingClientRect();
    return {
      top: rect.top,
      left: rect.left,
      bottom: rect.bottom,
      right: rect.right
    };
  }

  function handleMouseDown(e: MouseEvent) {
      if (!element || disabled || e.button !== 0 || (e.target instanceof Element && e.target.closest('button, input, textarea, select, a'))) {
          // Don't drag if disabled, not left mouse button, or clicking interactive elements/links
          return;
      }
      e.preventDefault(); // Prevent text selection issues
      e.stopPropagation();

      isDragging = true;
      const computedStyle = getComputedStyle(element);
      // Use matrix transformation if available, otherwise fallback to left/top
      const transform = computedStyle.transform;
      if (transform && transform !== 'none') {
          const matrix = new DOMMatrix(transform);
          initialLeft = matrix.e;
          initialTop = matrix.f;
      } else {
          initialLeft = parseFloat(computedStyle.left || '0') || element.offsetLeft;
          initialTop = parseFloat(computedStyle.top || '0') || element.offsetTop;
      }

      startX = e.clientX;
      startY = e.clientY;

      element.style.cursor = 'grabbing';
      element.style.userSelect = 'none';
      // Optional: Add a class for visual feedback during drag
      element.classList.add('dragging');

      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
  }

  function handleMouseMove(e: MouseEvent) {
      if (!isDragging || !element) return;
      e.preventDefault();

      const dx = e.clientX - startX;
      const dy = e.clientY - startY;

      let newLeft = initialLeft + dx;
      let newTop = initialTop + dy;

      // Apply boundary constraints
      const boundary = getBoundaryRect();
      const elRect = element.getBoundingClientRect(); // Current position might be needed
      const parentRect = element.offsetParent?.getBoundingClientRect() ?? { left: 0, top: 0 };

      // Calculate constraints based on transform or left/top
      const elWidth = element.offsetWidth;
      const elHeight = element.offsetHeight;

      // Note: Boundary calculations can be complex depending on positioning (fixed, absolute)
      // This is a simplified version assuming fixed/absolute relative to viewport or boundaryElement
      // Adjust if needed based on specific layout

      // Simple viewport constraint for fixed positioning
      if (getComputedStyle(element).position === 'fixed') {
          newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - elWidth));
          newTop = Math.max(0, Math.min(newTop, window.innerHeight - elHeight));
      }
      // Add more complex boundary logic here if boundaryElement is used with absolute positioning


      // Use transform for better performance
      element.style.transform = `translate3d(${newLeft}px, ${newTop}px, 0)`;
      // Clear left/top if setting transform to avoid conflicts
      element.style.left = '0';
      element.style.top = '0';
  }

  function handleMouseUp(e: MouseEvent) {
      if (!isDragging || !element) return;
      isDragging = false;
      element.style.cursor = 'grab';
      element.style.removeProperty('user-select');
      element.classList.remove('dragging');

      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
  }

  onMount(() => {
    if (element) {
      // Ensure initial positioning is applied if using transform
      if (!element.style.transform) {
         const computedStyle = getComputedStyle(element);
         const transform = computedStyle.transform;
         if (!transform || transform === 'none') {
            const initialLeft = parseFloat(computedStyle.left || '0') || element.offsetLeft;
            const initialTop = parseFloat(computedStyle.top || '0') || element.offsetTop;
            element.style.transform = `translate3d(${initialLeft}px, ${initialTop}px, 0)`;
            element.style.left = '0';
            element.style.top = '0';
         }
      }

      element.addEventListener('mousedown', handleMouseDown);
      element.style.cursor = 'grab';
    }
  });

  onDestroy(() => {
    if (element) {
      element.removeEventListener('mousedown', handleMouseDown);
    }
    // Clean up global listeners
    window.removeEventListener('mousemove', handleMouseMove);
    window.removeEventListener('mouseup', handleMouseUp);
  });

</script>

<!-- Add a slot to wrap the content that should be draggable -->
<slot></slot>

<style>
  /* Optional: Indicate dragging state */
  .dragging {
    /* Example: slightly reduced opacity or different border */
    opacity: 0.9;
    z-index: 1000; /* Ensure it stays on top */
  }
</style> ===== ./src/lib/components/RecentActivity.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fetchRecentActivities, type Activity } from '$lib/services/activityService';

  interface DisplayActivity extends Activity {
    title: string;
    content: string;
    timeAgo: string;
    icon: string;
    color: string;
  }

  let activities: DisplayActivity[] = [];

  // Compute relative time
  function formatTimeAgo(ts: number): string {
    const diff = Date.now() - ts;
    const seconds = Math.floor(diff / 1000);
    if (seconds < 60) return `${seconds}s ago`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  }

  function mapEventTypeToTitle(type: string, metadata?: any): string {
    switch(type) {
      case 'view_course': return `Viewed Course`;
      case 'start_lesson': return `Started Lesson`;
      case 'complete_lesson': return `Completed Lesson`;
      case 'flashcard_review': return `Reviewed Flashcards`;
      default:
        return type.replace(/_/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
    }
  }

  function eventTypeIcon(type: string): string {
    switch(type) {
      case 'view_course': return 'fa-book';
      case 'start_lesson':
      case 'complete_lesson': return 'fa-layer-group';
      case 'flashcard_review': return 'fa-layer-group';
      default: return 'fa-circle';
    }
  }

  function eventTypeColor(type: string): string {
    switch(type) {
      case 'view_course': return 'blue';
      case 'start_lesson': return 'yellow';
      case 'complete_lesson': return 'green';
      case 'flashcard_review': return 'purple';
      default: return 'gray';
    }
  }

  onMount(async () => {
    const data = await fetchRecentActivities(10);
    activities = data.map(a => ({
      ...a,
      title: mapEventTypeToTitle(a.eventType, a.metadata),
      content: a.referenceId,
      timeAgo: formatTimeAgo(a.timestampStart),
      icon: eventTypeIcon(a.eventType),
      color: eventTypeColor(a.eventType)
    }));
  });
</script>

<div>
  <h2 class="text-lg font-semibold text-gray-100 mb-4">Recent Activity</h2>
  <div class="bg-gray-700 border border-orange-500 p-6 rounded-2xl shadow-sm squircle-sm">
    <div class="space-y-4">
      {#each activities as activity (activity.id)}
        <div class="flex items-start">
          <div class={`w-10 h-10 bg-${activity.color}-900 rounded-full flex items-center justify-center mr-3 flex-shrink-0`}>
            <i class={`fas ${activity.icon} text-${activity.color}-300`}></i>
          </div>
          <div>
            <h3 class="font-medium text-gray-100">{activity.title}</h3>
            <p class="text-gray-300 text-sm">{activity.content}</p>
            <p class="text-gray-400 text-xs mt-1">{activity.timeAgo}</p>
          </div>
        </div>
      {/each}
      {#if activities.length === 0}
        <p class="text-gray-400 text-sm">No recent activity.</p>
      {/if}
    </div>
  </div>
</div>
===== ./src/lib/components/WelcomeBanner.svelte =====
<script lang="ts">
  export let username = "Hakim";
</script>

<div class="bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-2xl p-6 mb-8 text-white squircle">
  <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
    <div>
      <h2 class="text-2xl font-bold mb-2">Welcome back, {username}!</h2>
      <p class="opacity-90 mb-4 md:mb-0">Continue your learning journey with these recommended courses</p>
    </div>
    <a 
      href="/courses" 
      class="bg-indigo-100 text-indigo-800 px-4 py-2 rounded-lg font-medium hover:bg-indigo-200 transition"
    >
      Explore Courses
    </a>
  </div>
</div>===== ./src/lib/components/ExerciseCard.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import type { Exercise } from '$lib/services/courses/exerciseService';
  import { getAuth } from 'firebase/auth';
  import { doc, getDoc, getFirestore } from 'firebase/firestore';
  import { onMount } from 'svelte';
  
  // Accept all Exercise properties as props
  export let id: string;
  export let title: string;
  export let description: string | null = null;
  export let difficulty: 'beginner' | 'intermediate' | 'advanced' = 'beginner';
  export let category: string | null = null;
  export let tags: string[] = [];
  export let estimatedTime: number | null = null;
  export let points: number = 0;
  
  const dispatch = createEventDispatcher();
  
  let isCompleted = false;
  let isInProgress = false;
  
  onMount(async () => {
    await checkUserProgress();
  });
  
  async function checkUserProgress() {
    const auth = getAuth();
    if (!auth.currentUser) return;
    
    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', 'exercises');
      
      const userProgressDoc = await getDoc(userProgressRef);
      if (userProgressDoc.exists()) {
        const data = userProgressDoc.data();
        
        if (data.completed && data.completed[id]) {
          isCompleted = true;
        } else if (data.inProgress && data.inProgress[id]) {
          isInProgress = true;
        }
      }
    } catch (err) {
      console.error('Error checking exercise progress:', err);
    }
  }
  
  function getDifficultyColor() {
    switch (difficulty) {
      case 'beginner':
        return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300';
      case 'intermediate':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300';
      case 'advanced':
        return 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300';
    }
  }
  
  function handleClick() {
    dispatch('click');
  }
</script>

<article
  class="exercise-card relative bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden flex flex-col h-full"
  on:click={handleClick}
  on:keydown={(e) => e.key === 'Enter' && handleClick()}
  tabindex="0"
  role="button"
  aria-label={title}
>
  {#if isCompleted}
    <div class="absolute top-3 right-3 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
      </svg>
    </div>
  {:else if isInProgress}
    <div class="absolute top-3 right-3 w-6 h-6 rounded-full border-2 border-blue-500 border-dashed animate-spin-slow"></div>
  {/if}
  
  <div class="p-5 flex-grow">
    <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2 pr-6">{title}</h3>
    
    {#if description}
      <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">{description}</p>
    {/if}
    
    <div class="flex flex-wrap gap-2 mb-3">
      {#if difficulty}
        <span class={`text-xs font-medium px-2.5 py-0.5 rounded-full ${getDifficultyColor()}`}>
          {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
        </span>
      {/if}
      
      {#if category}
        <span class="text-xs font-medium bg-cherry-100 text-cherry-800 dark:bg-cherry-900/30 dark:text-cherry-300 px-2.5 py-0.5 rounded-full">
          {category}
        </span>
      {/if}
    </div>
    
    {#if tags.length > 0}
      <div class="flex flex-wrap gap-1 mb-3">
        {#each tags.slice(0, 3) as tag}
          <span class="text-xs bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 px-2 py-0.5 rounded-full">
            {tag}
          </span>
        {/each}
        {#if tags.length > 3}
          <span class="text-xs bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 px-2 py-0.5 rounded-full">
            +{tags.length - 3} more
          </span>
        {/if}
      </div>
    {/if}
  </div>
  
  <div class="border-t border-gray-200 dark:border-gray-700 p-4 flex justify-between items-center bg-gray-50 dark:bg-gray-900/30">
    {#if estimatedTime}
      <div class="flex items-center text-xs text-gray-500 dark:text-gray-400">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        {estimatedTime} min
      </div>
    {:else}
      <div></div>
    {/if}
    
    {#if points > 0}
      <div class="flex items-center text-xs font-medium text-amber-600 dark:text-amber-400">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        {points} pts
      </div>
    {/if}
  </div>
</article>

<style>
  .exercise-card {
    cursor: pointer;
  }
  
  .exercise-card:focus {
    outline: 2px solid #ef4444;
    outline-offset: 2px;
  }
  
  :global(.animate-spin-slow) {
    animation: spin 3s linear infinite;
  }
  
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>===== ./src/lib/components/ExerciseRating.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { getAuth } from 'firebase/auth';
  import { doc, getDoc, setDoc, getFirestore, updateDoc, increment } from 'firebase/firestore';
  import Icon from '@iconify/svelte';

  export let exerciseId: string;

  let userRating: number | null = null;
  let isSubmitted = false;
  let feedbackText = '';
  let showFeedback = false;

  onMount(async () => {
    await loadUserRating();
  });

  async function loadUserRating() {
    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);
      const ratingDoc = await getDoc(ratingRef);

      if (ratingDoc.exists()) {
        const data = ratingDoc.data();
        userRating = data.rating;
        feedbackText = data.feedback || '';
        isSubmitted = true;
      }
    } catch (err) {
      console.error('Error loading rating:', err);
    }
  }

  async function submitRating() {
    if (userRating === null) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);
      
      // Save user's rating
      await setDoc(ratingRef, {
        rating: userRating,
        feedback: feedbackText,
        timestamp: new Date()
      });

      // Update exercise aggregated ratings
      const exerciseRef = doc(db, 'exercises', exerciseId);
      await updateDoc(exerciseRef, {
        ratingSum: increment(userRating),
        ratingCount: increment(1),
        averageRating: increment(0) // This will trigger a Cloud Function to recalculate
      });

      isSubmitted = true;
      showFeedback = false;
    } catch (err) {
      console.error('Error submitting rating:', err);
    }
  }

  function handleRatingClick(rating: number) {
    if (!isSubmitted) {
      userRating = rating;
    }
  }

  function editRating() {
    isSubmitted = false;
  }
</script>

<div class="exercise-rating">
  <h3 class="text-lg font-semibold mb-2">Rate this exercise</h3>
  
  {#if !isSubmitted}
    <div class="flex flex-col space-y-4">
      <div class="flex items-center space-x-1">
        {#each Array(5) as _, i}
          <button 
            on:click={() => handleRatingClick(i + 1)}
            class="text-2xl focus:outline-none" 
            disabled={isSubmitted}
          >
            <Icon 
              icon={userRating && i < userRating ? "mdi:star" : "mdi:star-outline"} 
              class={userRating && i < userRating ? "text-yellow-400" : "text-gray-400 hover:text-yellow-400"} 
              width="28" 
              height="28"
            />
          </button>
        {/each}
      </div>
      
      <div>
        <button 
          on:click={() => showFeedback = !showFeedback}
          class="text-sm text-cherry-600 dark:text-cherry-400 hover:underline"
        >
          {showFeedback ? "Hide feedback form" : "Add feedback (optional)"}
        </button>
        
        {#if showFeedback}
          <div class="mt-2">
            <textarea
              bind:value={feedbackText}
              class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-light focus:ring-cherry-500 focus:border-cherry-500 min-h-[80px]"
              placeholder="What did you think about this exercise?"
            ></textarea>
          </div>
        {/if}
      </div>
      
      <div>
        <button 
          on:click={submitRating}
          disabled={userRating === null}
          class="px-4 py-2 text-sm font-medium rounded-md bg-cherry-600 text-white hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Submit Rating
        </button>
      </div>
    </div>
  {:else}
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-1">
        {#each Array(5) as _, i}
          <Icon 
            icon={userRating && i < userRating ? "mdi:star" : "mdi:star-outline"} 
            class={userRating && i < userRating ? "text-yellow-400" : "text-gray-400"} 
            width="24" 
            height="24"
          />
        {/each}
      </div>
      
      <button 
        on:click={editRating}
        class="text-sm text-cherry-600 dark:text-cherry-400 hover:underline"
      >
        Edit Rating
      </button>
    </div>
    
    {#if feedbackText}
      <div class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        <p class="italic">"{feedbackText}"</p>
      </div>
    {/if}
  {/if}
</div>
===== ./src/lib/components/CourseCard.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import Icon from '@iconify/svelte';
  import type { ContentNode } from '$lib/services/contentService';
  
  export let course: ContentNode;
  export let isSelected: boolean = false;
  export let isCompleted: boolean = false;
  export let progress: number = 0;
  
  const dispatch = createEventDispatcher<{
    select: { course: ContentNode };
  }>();
  
  function handleSelect() {
    dispatch('select', { course });
  }
  
  $: statusClass = isCompleted ? 
    'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' : 
    progress > 0 ? 
      'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400' : 
      'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-400';
  
  $: statusText = isCompleted ? 
    'Completed' : 
    progress > 0 ? 
      `In Progress (${Math.round(progress)}%)` : 
      'Not Started';
</script>

<div 
  class="course-card relative p-4 rounded-lg border transition-all duration-200 hover:shadow-md mb-4 cursor-pointer {isSelected ? 'border-cherry-500 bg-cherry-50 dark:bg-cherry-900/20 shadow-md' : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'}"
  on:click={handleSelect}
>
  <div class="flex justify-between items-start">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{course.title}</h3>
    {#if course.level}
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400">
        {course.level}
      </span>
    {/if}
  </div>
  
  {#if course.description}
    <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">{course.description}</p>
  {/if}
  
  <div class="flex flex-wrap gap-2 mb-3">
    {#if course.category}
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-cherry-100 dark:bg-cherry-900/30 text-cherry-800 dark:text-cherry-400">
        {course.category}
      </span>
    {/if}
    {#if course.tags && course.tags.length > 0}
      {#each course.tags.slice(0, 3) as tag}
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
          {tag}
        </span>
      {/each}
      {#if course.tags.length > 3}
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
          +{course.tags.length - 3} more
        </span>
      {/if}
    {/if}
  </div>
  
  <div class="flex justify-between items-center">
    <span class="inline-flex items-center text-xs {statusClass} px-2.5 py-0.5 rounded-full">
      {statusText}
    </span>
    
    {#if progress > 0 && !isCompleted}
      <div class="w-24 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
        <div class="bg-amber-500 dark:bg-amber-400 h-2 rounded-full" style="width: {progress}%"></div>
      </div>
    {/if}
    
    <div class="flex items-center space-x-1 text-gray-500 dark:text-gray-400">
      {#if course.duration}
        <Icon icon="mdi:clock-outline" class="w-4 h-4" />
        <span class="text-xs">{course.duration}</span>
      {/if}
    </div>
  </div>
  
  {#if isSelected}
    <div class="absolute top-2 right-2 text-cherry-500 dark:text-cherry-400">
      <Icon icon="mdi:check-circle" class="w-5 h-5" />
    </div>
  {/if}
</div>
===== ./src/lib/components/shared/Draggable.svelte =====
===== ./src/lib/components/shared/MarkdownRenderer.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { marked } from 'marked';
  import DOMPurify from 'dompurify';
  import hljs from 'highlight.js';
  import 'highlight.js/styles/github-dark.css';
  import { afterUpdate } from 'svelte';

  export let content: string = '';
  
  let htmlContent: string = '';
  
  $: if (content) {
    htmlContent = DOMPurify.sanitize(marked.parse(content, {
      breaks: true,
      gfm: true
    }));
  }
  
  afterUpdate(() => {
    // Apply syntax highlighting to code blocks
    const codeBlocks = document.querySelectorAll('pre code');
    codeBlocks.forEach((block) => {
      hljs.highlightElement(block as HTMLElement);
    });
  });
</script>

<div class="markdown-content">
  {@html htmlContent}
</div>

<style>
  .markdown-content :global(pre) {
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 1rem 0;
    overflow-x: auto;
  }
  
  .markdown-content :global(code) {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  }
  
  .markdown-content :global(p) {
    margin-bottom: 1rem;
  }
  
  .markdown-content :global(h1),
  .markdown-content :global(h2),
  .markdown-content :global(h3),
  .markdown-content :global(h4),
  .markdown-content :global(h5) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .markdown-content :global(blockquote) {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    color: #6b7280;
    margin: 1rem 0;
  }
  
  .markdown-content :global(a) {
    color: #3b82f6;
    text-decoration: underline;
  }
  
  .markdown-content :global(table) {
    border-collapse: collapse;
    width: 100%;
    margin: 1rem 0;
  }
  
  .markdown-content :global(th), 
  .markdown-content :global(td) {
    border: 1px solid #e5e7eb;
    padding: 0.5rem;
  }
  
  .markdown-content :global(th) {
    background-color: #f3f4f6;
  }
</style>===== ./src/lib/components/shared/ContentViewer.svelte =====
<script lang="ts">
  import { slide } from 'svelte/transition';
  import { onMount } from 'svelte';
  import MarkdownRenderer from './MarkdownRenderer.svelte';
  import ExerciseMarkdown from '../courses/exercise/ExerciseMarkdown.svelte';
  import MathContent from './MathContent.svelte';
  import ExerciseRating from '../courses/exercise/ExerciseRating.svelte';
  import type { ContentNode } from '$lib/services/courses/courseService';
  import { getAuth } from 'firebase/auth';
  import { doc, getDoc, getFirestore, setDoc } from 'firebase/firestore';
  import Icon from '@iconify/svelte';

  export let item: ContentNode | null = null;
  export let type: 'exercise' | 'course' = 'exercise';
  export let onBack: () => void = () => {};

  $: sections = item ? extractContentSections(item.content || '') : {};

  let isCompleted = false;
  let isInProgress = false;
  let lastAttemptDate: Date | null = null;
  let userNotes = '';
  let showNotes = false;
  let notesAreEditable = false;

  $: hasSolution = !!sections.solution;
  $: hasContent = !!sections.content || !!sections.main;
  $: showSolution = false;
  let solutionRevealProgress = 0;
  let solutionBlurLevel = 5;
  let checkedHints: string[] = [];
  let hintsArray: string[] = [];

  let startTime: Date | null = null;
  let timeSpent = 0;
  let timerInterval: number | null = null;

  onMount(() => {
    let cleanupFunction = () => {};
    (async () => {
      if (item && type === 'exercise') {
        startTime = new Date();
        timerInterval = window.setInterval(updateTimeSpent, 1000);
        await loadUserProgress();
      }
    })();

    cleanupFunction = () => {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    };
    return cleanupFunction;
  });

  async function loadUserProgress() {
    if (!item) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', type === 'exercise' ? 'exercises' : 'courses');

      const userProgressDoc = await getDoc(userProgressRef);
      if (userProgressDoc.exists()) {
        const data = userProgressDoc.data();

        if (data.completed && data.completed[item.id]) {
          isCompleted = true;
        } else if (data.inProgress && data.inProgress[item.id]) {
          isInProgress = true;
        }
      }

      const itemDetailRef = doc(db, 'users', auth.currentUser.uid, type === 'exercise' ? 'exercises' : 'courses', item.id);
      const itemDetailDoc = await getDoc(itemDetailRef);

      if (itemDetailDoc.exists()) {
        const data = itemDetailDoc.data();
        userNotes = data.notes || '';
        lastAttemptDate = data.lastAttemptDate?.toDate() || null;
        checkedHints = data.checkedHints || [];
      }
    } catch (err) {
      console.error('Error loading user progress:', err);
    }
  }

  async function saveUserProgress(status: 'completed' | 'inProgress' | 'reset') {
    if (!item) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const userProgressRef = doc(db, 'users', auth.currentUser.uid, 'progress', type === 'exercise' ? 'exercises' : 'courses');

      if (status === 'completed') {
        await setDoc(userProgressRef, {
          completed: { [item.id]: true },
          inProgress: { [item.id]: false }
        }, { merge: true });

        isCompleted = true;
        isInProgress = false;
      } else if (status === 'inProgress') {
        await setDoc(userProgressRef, {
          inProgress: { [item.id]: true },
          completed: { [item.id]: false }
        }, { merge: true });

        isInProgress = true;
        isCompleted = false;
      } else {
        await setDoc(userProgressRef, {
          inProgress: { [item.id]: false },
          completed: { [item.id]: false }
        }, { merge: true });

        isInProgress = false;
        isCompleted = false;
      }

      const itemDetailRef = doc(db, 'users', auth.currentUser.uid, type === 'exercise' ? 'exercises' : 'courses', item.id);
      await setDoc(itemDetailRef, {
        timeSpent: timeSpent + (getTimeSpentSoFar() || 0),
        lastAttemptDate: new Date(),
        notes: userNotes,
        checkedHints: checkedHints
      }, { merge: true });

    } catch (err) {
      console.error('Error saving progress:', err);
    }
  }

  function getTimeSpentSoFar(): number | null {
    if (!startTime) return null;
    return Math.floor((new Date().getTime() - startTime.getTime()) / 1000);
  }

  function updateTimeSpent() {
    if (startTime) {
      timeSpent = Math.floor((new Date().getTime() - startTime.getTime()) / 1000);
    }
  }

  function formatTimeSpent(seconds: number): string {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${secs}s`;
    } else {
      return `${secs}s`;
    }
  }

  function extractContentSections(content: string): Record<string, string> {
    const result: Record<string, string> = {
      main: content
    };

    const sectionMatches = content.matchAll(/^##\s+([A-Za-z\s]+)\s*$([\s\S]*?)(?=^##\s+[A-Za-z\s]+\s*$|$)/gm);

    for (const match of sectionMatches) {
      if (match[1] && match[2]) {
        const sectionName = match[1].trim().toLowerCase();
        const sectionContent = match[2].trim();
        result[sectionName] = sectionContent;
      }
    }

    const hintsSection = result.hints || '';
    if (hintsSection) {
      const hints = hintsSection.split(/\n?(?:^###\s+Hint \d+\s*$|^\*\s+)/gm).map(h => h.trim()).filter(Boolean);
      if (hints.length > 0) {
        hintsArray = hints;
      }
    }

    if (type === 'exercise') {
      if (Object.keys(result).length > 1) {
        delete result.main;
      }

      if (result.problem) {
        result.content = result.problem;
        delete result.problem;
      }
    }

    return result;
  }

  function handleToggleSolution() {
    if (!showSolution) {
      solutionRevealProgress = 0;
      const interval = setInterval(() => {
        solutionRevealProgress += 5;
        if (solutionRevealProgress >= 100) {
          clearInterval(interval);
          showSolution = true;
        }
      }, 100);
    } else {
      showSolution = false;
      solutionRevealProgress = 0;
    }
  }

  function handleToggleNotes() {
    showNotes = !showNotes;
    notesAreEditable = showNotes && notesAreEditable;
  }

  function handleEditNotes() {
    notesAreEditable = true;
  }

  function handleSaveNotes() {
    notesAreEditable = false;
    if (item) {
      saveUserProgress(isCompleted ? 'completed' : 'inProgress');
    }
  }

  function handleMarkComplete() {
    if (!isCompleted) {
      saveUserProgress('completed');
    } else {
      saveUserProgress('reset');
    }
  }

  function toggleHint(index: number) {
    const hintId = `hint-${index}`;

    if (checkedHints.includes(hintId)) {
      checkedHints = checkedHints.filter((h: string) => h !== hintId);
    } else {
      checkedHints = [...checkedHints, hintId];
    }

    if (item) {
      saveUserProgress(isCompleted ? 'completed' : 'inProgress');
    }
  }
</script>

<div class="content-viewer bg-surface dark:bg-surface-dark text-text dark:text-text-light p-4 sm:p-6 lg:p-8 rounded-squircle shadow-card flex flex-col h-full overflow-hidden" transition:slide>
  {#if item}
    <div class="flex-shrink-0 mb-4 pb-4 border-b border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <h2 class="text-xl sm:text-2xl font-jakarta font-semibold text-text dark:text-text-light truncate pr-4">
          {item.title}
        </h2>
        <button
          on:click={onBack}
          class="text-gray-400 hover:text-cherry-600 dark:hover:text-cherry-400 transition-colors p-1 rounded-full -mr-1"
          aria-label="Close viewer"
        >
          <Icon icon="mdi:close" class="w-6 h-6" />
        </button>
      </div>
      {#if item.category}
        <span class="text-sm font-medium text-cherry-700 dark:text-cherry-500 bg-cherry-100 dark:bg-cherry-900/30 px-2.5 py-0.5 rounded-full mt-2 inline-block">
          {item.category}
        </span>
      {/if}
      {#if item.tags && item.tags.length > 0}
        <div class="mt-3 flex flex-wrap gap-2">
          {#each item.tags as tag}
            <span class="text-xs font-medium text-secondary-700 dark:text-secondary-300 bg-secondary-100 dark:bg-secondary-900/30 px-2 py-0.5 rounded-full">
              {tag}
            </span>
          {/each}
        </div>
      {/if}
    </div>

    <div class="flex-grow overflow-y-auto prose dark:prose-invert prose-cherry lg:prose-lg scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent pr-2 -mr-2">
      {#if type === 'exercise'}
        <ExerciseMarkdown markdown={sections.content || sections.main} />
        
        {#if hintsArray && hintsArray.length > 0}
          <div class="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
            <h3 class="text-lg font-semibold mb-3">Hints</h3>
            <div class="space-y-3">
              {#each hintsArray as hint, i}
                <div class="hint-container">
                  <button 
                    class="flex items-center justify-between w-full p-3 text-left border rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    on:click={() => toggleHint(i)}
                  >
                    <span class="font-medium">Hint {i + 1}</span>
                    <Icon icon={checkedHints.includes(`hint-${i}`) ? "mdi:chevron-up" : "mdi:chevron-down"} class="w-5 h-5" />
                  </button>
                  
                  {#if checkedHints.includes(`hint-${i}`)}
                    <div class="p-3 bg-gray-50 dark:bg-gray-800 rounded-md mt-1" transition:slide>
                      <MarkdownRenderer content={hint} />
                    </div>
                  {/if}
                </div>
              {/each}
            </div>
          </div>
        {/if}
        
        {#if hasSolution}
          <div class="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
            <div class="flex justify-between items-center mb-3">
              <h3 class="text-lg font-semibold">Solution</h3>
              <button 
                on:click={handleToggleSolution}
                class="px-3 py-1.5 text-sm font-medium rounded-md bg-cherry-100 dark:bg-cherry-900/30 text-cherry-700 dark:text-cherry-400 hover:bg-cherry-200 dark:hover:bg-cherry-800/50 transition-colors"
              >
                {showSolution ? 'Hide Solution' : 'Show Solution'}
              </button>
            </div>
            
            {#if solutionRevealProgress > 0 && !showSolution}
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-4">
                <div class="bg-cherry-600 dark:bg-cherry-500 h-2.5 rounded-full" style="width: {solutionRevealProgress}%"></div>
              </div>
            {/if}
            
            {#if showSolution}
              <div transition:slide>
                <MarkdownRenderer content={sections.solution} />
              </div>
            {:else if solutionRevealProgress > 0}
              <div class="p-4 border border-gray-200 dark:border-gray-700 rounded-md" style="filter: blur({solutionBlurLevel - (solutionBlurLevel * solutionRevealProgress / 100)}px);">
                <MarkdownRenderer content={sections.solution} />
              </div>
            {/if}
          </div>
        {/if}
      {:else if type === 'course'}
        <MarkdownRenderer content={sections.content || sections.main} />
      {:else}
        <MarkdownRenderer content={sections.content || sections.main} />
      {/if}
    </div>

    <div class="flex-shrink-0 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-center mb-2">
        <button 
          on:click={handleToggleNotes}
          class="flex items-center text-sm font-medium text-cherry-600 dark:text-cherry-400 hover:text-cherry-700 dark:hover:text-cherry-300"
        >
          <Icon icon="mdi:note-text-outline" class="w-5 h-5 mr-1" />
          {showNotes ? 'Hide Notes' : 'Show Notes'}
        </button>
        
        <div class="flex items-center space-x-2">
          <button 
            on:click={handleMarkComplete}
            class="px-3 py-1.5 text-sm font-medium rounded-md {isCompleted ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'} hover:opacity-90 transition-colors"
          >
            {isCompleted ? 'Completed' : 'Mark Complete'}
          </button>
          
          {#if lastAttemptDate}
            <span class="text-xs text-gray-500 dark:text-gray-400">
              Last attempt: {lastAttemptDate.toLocaleDateString()}
            </span>
          {/if}
          
          {#if startTime}
            <span class="text-xs text-gray-500 dark:text-gray-400">
              Time: {formatTimeSpent(timeSpent)}
            </span>
          {/if}
        </div>
      </div>
      
      {#if showNotes}
        <div transition:slide>
          {#if notesAreEditable}
            <div class="mt-2">
              <textarea
                bind:value={userNotes}
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-light focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[100px]"
                placeholder="Add your notes here..."
              ></textarea>
              <div class="flex justify-end mt-2">
                <button 
                  on:click={handleSaveNotes}
                  class="px-3 py-1.5 text-sm font-medium rounded-md bg-cherry-600 text-white hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors"
                >
                  Save Notes
                </button>
              </div>
            </div>
          {:else}
            <div class="mt-2 p-3 border border-gray-200 dark:border-gray-700 rounded-md min-h-[50px] bg-gray-50 dark:bg-gray-800">
              {#if userNotes}
                <MarkdownRenderer content={userNotes} />
              {:else}
                <p class="text-gray-500 dark:text-gray-400 italic">No notes yet. Click "Edit" to add notes.</p>
              {/if}
              <div class="flex justify-end mt-2">
                <button 
                  on:click={handleEditNotes}
                  class="px-3 py-1.5 text-sm font-medium rounded-md bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  Edit
                </button>
              </div>
            </div>
          {/if}
        </div>
      {/if}
    </div>

    {#if type === 'exercise'}
      <div class="flex-shrink-0 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        <ExerciseRating exerciseId={item.id} />
      </div>
    {/if}
  {:else}
    <div class="flex flex-col items-center justify-center h-full text-center text-text-secondary dark:text-text-secondary-light">
      <Icon icon="mdi:information-outline" class="w-12 h-12 mb-4 text-gray-400 dark:text-gray-500" />
      <p class="text-lg font-medium">Select an item</p>
      <p class="text-sm">Choose an exercise or course from the list to view its details here.</p>
    </div>
  {/if}
</div>===== ./src/lib/components/shared/MathContent.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import katex from 'katex';
  import 'katex/dist/katex.min.css';

  export let content: string = '';
  export let displayMode: boolean = false;

  let element: HTMLElement;

  onMount(() => {
    renderMath();
  });

  $: if (content) {
    if (element) {
      renderMath();
    }
  }

  function renderMath() {
    try {
      katex.render(content, element, {
        displayMode: displayMode,
        throwOnError: false,
        trust: true
      });
    } catch (e) {
      console.error('KaTeX rendering error:', e);
      element.textContent = content;
    }
  }
</script>

<span bind:this={element} class={displayMode ? 'math-block' : 'math-inline'}></span>

<style>
  .math-block {
    display: block;
    margin: 1em 0;
    text-align: center;
  }

  .math-inline {
    display: inline-block;
    vertical-align: middle;
  }
</style>
===== ./src/lib/components/ExercisesSection.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade } from 'svelte/transition';
  import ExerciseCard from './ExerciseCard.svelte';
  import type { Exercise } from '$lib/services/courses/exerciseService';
  import { fetchExercises } from '$lib/services/courses/exerciseService';

  export let categoryId: string | null = null;
  export let limit: number | null = null;
  export let title: string = 'Exercises';
  export let onExerciseClick: (exercise: Exercise) => void = (exercise) => {
    console.log('Exercise clicked:', exercise.id);
  };

  let exercises: Exercise[] = [];
  let isLoading = true;
  let error: string | null = null;
  let filteredExercises: Exercise[] = [];
  let searchQuery = '';
  let selectedDifficulty: 'all' | 'beginner' | 'intermediate' | 'advanced' = 'all';
  let selectedTags: string[] = [];
  let showFilters = false;

  // Update filters when exercises or filter values change
  $: applyFilters();

  function applyFilters() {
    let result = exercises;

    if (searchQuery) {
      const lowerQuery = searchQuery.toLowerCase();
      result = result.filter(ex => ex.title.toLowerCase().includes(lowerQuery) || ex.description?.toLowerCase().includes(lowerQuery));
    }

    if (selectedDifficulty !== 'all') {
      result = result.filter(ex => ex.difficulty === selectedDifficulty);
    }

    if (selectedTags.length > 0) {
      result = result.filter(ex => selectedTags.every(tag => ex.tags?.includes(tag)));
    }

    if (limit !== null) {
      result = result.slice(0, limit);
    }

    filteredExercises = result;
  }

  async function load() {
    isLoading = true;
    error = null;
    try {
      const all = await fetchExercises(categoryId);
      exercises = all;
    } catch (err) {
      console.error(err);
      error = 'Failed to load exercises';
    } finally {
      isLoading = false;
    }
  }

  onMount(load);

  function handleSearchInput(e: InputEvent) {
    searchQuery = (e.target as HTMLInputElement).value;
  }

  function handleDifficultyChange(difficulty: typeof selectedDifficulty) {
    selectedDifficulty = difficulty;
  }

  function toggleTag(tag: string) {
    selectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];
  }

  function clearFilters() {
    searchQuery = '';
    selectedDifficulty = 'all';
    selectedTags = [];
  }

  function toggleFilters() {
    showFilters = !showFilters;
  }
</script>

<section class="exercises-section" in:fade={{ duration: 300 }}>
  <div class="section-header">
    <h2 class="section-title">{title}</h2>
    <button on:click={toggleFilters} aria-expanded={showFilters} class="filter-toggle">
      <i class="fas fa-filter"></i> Filters
      {#if selectedDifficulty !== 'all' || selectedTags.length || searchQuery}
        <span class="filter-badge">{selectedTags.length + (selectedDifficulty !== 'all' ? 1 : 0) + (searchQuery ? 1 : 0)}</span>
      {/if}
    </button>
  </div>

  {#if isLoading}
    <div class="loading-state">Loading exercises...</div>
  {:else if error}
    <div class="error-state">{error}</div>
  {:else if filteredExercises.length === 0}
    <div class="empty-state">No exercises found.</div>
  {:else}
    <div class="exercises-grid">
      {#each filteredExercises as exercise (exercise.id)}
        <ExerciseCard {...exercise} on:click={() => onExerciseClick(exercise)} />
      {/each}
    </div>
  {/if}
</section>

<style>
  .exercises-section {
    margin-bottom: 3rem;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }
  
  .section-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #111827;
    margin: 0;
  }
  
  .filter-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    font-size: 0.95rem;
    color: #4b5563;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .filter-toggle:hover {
    background: #f3f4f6;
    border-color: #d1d5db;
  }
  
  .filter-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #ef4444;
    color: white;
    width: 1.25rem;
    height: 1.25rem;
    font-size: 0.75rem;
    border-radius: 50%;
    font-weight: 600;
  }
  
  .exercises-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem 0;
    color: #6b7280;
  }
  
  .error-state, .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem 0;
    text-align: center;
    color: #6b7280;
  }
</style>
===== ./src/lib/components/Register.svelte =====
<script lang="ts">
  import { register, loginWithGoogle } from '$lib/authService.js';
  import { loading, authError } from '$lib/stores/authStore.js';
  
  let displayName = '';
  let email = '';
  let password = '';
  let confirmPassword = '';
  let localError = '';
  
  async function handleRegister() {
    localError = '';
    
    // Form validation
    if (!displayName || !email || !password || !confirmPassword) {
      localError = 'Please fill in all fields';
      return;
    }
    
    if (password !== confirmPassword) {
      localError = 'Passwords do not match';
      return;
    }
    
    if (password.length < 6) {
      localError = 'Password must be at least 6 characters long';
      return;
    }
    
    try {
      await register(email, password, displayName);
      // Registration successful - redirect will be handled by the auth state listener
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
  
  async function handleGoogleLogin() {
    try {
      await loginWithGoogle();
      // Login successful - redirect will be handled by the auth state listener
    } catch (err) {
      // Error is already handled and set in the authError store
    }
  }
</script>

<div class="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">Create an Account</h2>
  
  {#if $authError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{$authError}</span>
    </div>
  {/if}
  
  {#if localError}
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
      <span class="block sm:inline">{localError}</span>
    </div>
  {/if}
  
  <form on:submit|preventDefault={handleRegister} class="space-y-4">
    <div>
      <label for="displayName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
      <input 
        type="text" 
        id="displayName" 
        bind:value={displayName} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input 
        type="email" 
        id="email" 
        bind:value={email} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
      <input 
        type="password" 
        id="password" 
        bind:value={password} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
      <p class="text-xs text-gray-500 mt-1">Password must be at least 6 characters long</p>
    </div>
    
    <div>
      <label for="confirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Confirm Password</label>
      <input 
        type="password" 
        id="confirmPassword" 
        bind:value={confirmPassword} 
        class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    
    <div>
      <button 
        type="submit" 
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        disabled={$loading}
      >
        {#if $loading}
          <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
        {/if}
        Sign Up
      </button>
    </div>
  </form>
  
  <div class="mt-4">
    <button 
      on:click={handleGoogleLogin} 
      class="w-full flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      disabled={$loading}
    >
      <svg class="h-5 w-5 mr-2" viewBox="0 0 24 24">
        <path d="M12.545,12.151L12.545,12.151c0,1.054,0.855,1.909,1.909,1.909h3.536c-0.607,1.972-2.101,3.467-4.26,3.866c-3.431,0.589-6.663-1.727-7.253-5.157c-0.589-3.431,1.727-6.663,5.157-7.253c2.136-0.367,4.296,0.317,5.743,1.878l2.72-2.72c-2.099-2.099-5.271-2.853-8.135-1.879C8.234,3.708,4.766,6.152,3.032,9.686c-2.734,5.63,0.01,12.44,5.639,15.174c5.63,2.734,12.44-0.01,15.174-5.639c1.06-2.17,1.369-4.652,0.845-7.036h-9.687C13.25,12.151,12.545,12.151,12.545,12.151z" fill="#F44336"/>
        <path d="M12.545,12.151v-3.89h9.687c0.521,2.169,0.246,4.432-0.769,6.406c-0.217,0.436-0.453,0.853-0.725,1.241h-6.284C13.4,15.909,12.545,14.055,12.545,12.151z" fill="#2196F3"/>
      </svg>
      Continue with Google
    </button>
  </div>
  
  <div class="mt-4 text-center">
    <p class="text-sm text-gray-600 dark:text-gray-400">
      Already have an account? 
      <a href="/login" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
        Log in
      </a>
    </p>
  </div>
</div> ===== ./src/lib/components/MathContent.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import katex from 'katex';
  import 'katex/dist/katex.min.css';

  export let content: string = '';
  export let displayMode: boolean = false;

  let element: HTMLElement;

  onMount(() => {
    renderMath();
  });

  $: if (content) {
    if (element) {
      renderMath();
    }
  }

  function renderMath() {
    try {
      katex.render(content, element, {
        displayMode: displayMode,
        throwOnError: false,
        trust: true
      });
    } catch (e) {
      console.error('KaTeX rendering error:', e);
      element.textContent = content;
    }
  }
</script>

<span bind:this={element} class={displayMode ? 'math-block' : 'math-inline'}></span>

<style>
  .math-block {
    display: block;
    margin: 1em 0;
    text-align: center;
  }

  .math-inline {
    display: inline-block;
    vertical-align: middle;
  }
</style>===== ./src/lib/components/courses/CourseCarousel.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import CourseCard from './CourseCard.svelte';
  import type { ContentNode } from '$lib/services/courses/courseService';
  import Icon from '@iconify/svelte';
  
  export let courses: ContentNode[] = [];
  export let title: string = "Featured Courses";
  
  let selectedIndex = 0;
  
  function next() {
    if (selectedIndex < courses.length - 1) {
      selectedIndex++;
    }
  }
  
  function prev() {
    if (selectedIndex > 0) {
      selectedIndex--;
    }
  }
</script>

<div class="course-carousel">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-bold text-gray-900 dark:text-white">{title}</h2>
    
    <div class="flex space-x-2">
      <button 
        on:click={prev}
        class="p-2 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled={selectedIndex === 0}
      >
        <Icon icon="mdi:chevron-left" class="w-5 h-5" />
      </button>
      
      <button 
        on:click={next}
        class="p-2 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled={selectedIndex === courses.length - 1}
      >
        <Icon icon="mdi:chevron-right" class="w-5 h-5" />
      </button>
    </div>
  </div>
  
  <div class="carousel-container overflow-hidden">
    <div class="carousel-track flex transition-transform duration-300" style="transform: translateX(-{selectedIndex * 100}%)">
      {#each courses as course, i}
        <div class="carousel-item w-full flex-shrink-0 p-2">
          <CourseCard {course} isSelected={i === selectedIndex} />
        </div>
      {/each}
    </div>
  </div>
</div>===== ./src/lib/components/courses/exercise/ExerciseMarkdown.svelte =====
<script lang="ts">
  import MarkdownRenderer from '../../shared/MarkdownRenderer.svelte';
  import MathContent from '../../shared/MathContent.svelte';
  
  export let markdown: string = '';
  
  // Process any special exercise-specific markdown features
  let processedMarkdown = markdown;
  
  // Look for code exercise placeholders and format them
  $: processedMarkdown = processMathAndCode(markdown);
  
  function processMathAndCode(text: string): string {
    // Process math expressions
    let processed = text.replace(/\$\$(.*?)\$\$/g, (match, p1) => {
      return `<div class="math-block">${p1}</div>`;
    });
    
    processed = processed.replace(/\$(.*?)\$/g, (match, p1) => {
      return `<span class="math-inline">${p1}</span>`;
    });
    
    // Add special formatting for code exercises
    processed = processed.replace(/```exercise([\s\S]*?)```/g, (match, p1) => {
      return `<div class="code-exercise-container">\n\`\`\`${p1}\`\`\`\n</div>`;
    });
    
    return processed;
  }
</script>

<div class="exercise-markdown">
  <MarkdownRenderer content={processedMarkdown} />
</div>

<style>
  .exercise-markdown :global(.code-exercise-container) {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1.5rem 0;
    background-color: #f9fafb;
  }
  
  /* Dark mode */
  :global(.dark) .exercise-markdown :global(.code-exercise-container) {
    background-color: #1f2937;
    border-color: #374151;
  }
  
  .exercise-markdown :global(.math-block),
  .exercise-markdown :global(.math-inline) {
    font-family: 'Cambria Math', 'STIX Two Math', serif;
  }
</style>===== ./src/lib/components/courses/exercise/ExerciseCard.svelte =====
<script lang="ts">
  import { fade } from 'svelte/transition';
  
  export let title: string;
  export let description: string = '';
  export let difficulty: 'beginner' | 'intermediate' | 'advanced' | null = null;
  export let estimatedTime: string = '';
  export let tags: string[] = [];
  export let id: string = '';
  export let type: 'exercise' | 'course' = 'exercise';
  export let onClick: () => void = () => {};
  export let progressStatus: 'notStarted' | 'inProgress' | 'completed' = 'notStarted';

  $: isCompleted = progressStatus === 'completed';
  $: isInProgress = progressStatus === 'inProgress';

  function getDifficultyColor(diff: string | null): string {
    switch (diff) {
      case 'beginner': return 'bg-green-500';
      case 'intermediate': return 'bg-yellow-500';
      case 'advanced': return 'bg-red-500';
      default: return 'bg-blue-500';
    }
  }
  
  function getDifficultyLabel(diff: string | null): string {
    if (!diff) return '';
    return diff.charAt(0).toUpperCase() + diff.slice(1);
  }
  
  function handleCardClick(e: MouseEvent) {
    if (e.target && (e.target as HTMLElement).closest('.progress-toggle')) {
      return;
    }
    onClick();
  }

  function handleCardKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter' || event.key === ' ') {
      handleCardClick(event as any);
    }
  }
</script>

{#if type === 'exercise'}
  <!-- Exercise Card (New Design) -->
  <div 
    role="button"
    tabindex="0"
    class="exercise-card {isCompleted ? 'completed' : isInProgress ? 'in-progress' : ''} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400 dark:focus:ring-red-500"
    on:click={handleCardClick}
    on:keydown={handleCardKeydown}
    in:fade={{ duration: 300 }}
  >
    <!-- State indicator -->
    <div class="completion-indicator">
      <div class="indicator-dot {isCompleted ? 'completed' : isInProgress ? 'in-progress' : 'not-started'}">
        <i class="fas {isCompleted ? 'fa-check' : isInProgress ? 'fa-spinner' : ''}"></i>
      </div>
    </div>
    
    <!-- Card content -->
    <div class="card-content">
      <h3 class="exercise-title">{title}</h3>
      
      {#if description}
        <p class="exercise-description">{description}</p>
      {/if}
      
      <div class="exercise-meta">
        {#if difficulty}
          <div class="difficulty-badge {difficulty}">
            <span class="difficulty-dot {getDifficultyColor(difficulty)}"></span>
            <span>{getDifficultyLabel(difficulty)}</span>
          </div>
        {/if}
        
        {#if estimatedTime}
          <div class="time-badge">
            <i class="fas fa-clock"></i>
            <span>{estimatedTime}</span>
          </div>
        {/if}
      </div>
      
      {#if tags && tags.length > 0}
        <div class="tags-container">
          {#each tags.slice(0, 3) as tag}
            <span class="tag">{tag}</span>
          {/each}
          {#if tags.length > 3}
            <span class="tag-more">+{tags.length - 3}</span>
          {/if}
        </div>
      {/if}
    </div>
    
    {#if difficulty}
      <div class="difficulty-stripe {difficulty}"></div>
    {/if}
    
    <div class="card-overlay"></div>
  </div>
{:else}
  <!-- Course Card (Original Design) -->
  <div 
    role="button"
    tabindex="0"
    class="course-card focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    on:click={onClick} 
    on:keydown={handleCardKeydown}
    in:fade={{ duration: 300 }}
  >
    <h3 class="course-title">{title}</h3>
    
    {#if description}
      <p class="course-description">{description}</p>
    {/if}
    
    <div class="card-meta">
      {#if difficulty}
        <span class="card-badge difficulty">
          {getDifficultyLabel(difficulty)}
        </span>
      {/if}
      
      {#if estimatedTime}
        <span class="card-badge time">
          <i class="fas fa-clock"></i> {estimatedTime}
        </span>
      {/if}
    </div>
    
    {#if tags && tags.length > 0}
      <div class="tags-row">
        {#each tags.slice(0, 3) as tag}
          <span class="tag-pill">{tag}</span>
        {/each}
        {#if tags.length > 3}
          <span class="tag-pill more">+{tags.length - 3}</span>
        {/if}
      </div>
    {/if}
    
    <div class="card-arrow">
      <i class="fas fa-arrow-right"></i>
    </div>
  </div>
{/if}

<style>
  /* Original Course Card Styles */
  .course-card {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    border: 1px solid #f0f0f0;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .course-card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }
  
  .course-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.5rem;
    padding-right: 1.5rem;
  }
  
  .course-description {
    color: #4b5563;
    font-size: 0.95rem;
    margin-bottom: 1rem;
    line-height: 1.4;
    flex-grow: 1;
  }
  
  .card-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .card-badge {
    font-size: 0.85rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .card-badge.difficulty {
    background: #f3f4f6;
    color: #374151;
  }
  
  .card-badge.time {
    background: #f3f4f6;
    color: #374151;
  }
  
  .tags-row {
    display: flex;
    flex-wrap: wrap;
    gap: 0.35rem;
  }
  
  .tag-pill {
    font-size: 0.75rem;
    padding: 0.15rem 0.5rem;
    border-radius: 0.25rem;
    background: #e5e7eb;
    color: #4b5563;
  }
  
  .tag-pill.more {
    background: transparent;
    color: #9ca3af;
  }
  
  .card-arrow {
    position: absolute;
    top: 1.25rem;
    right: 1.25rem;
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f9fafb;
    color: #4b5563;
    transition: all 0.3s ease;
  }
  
  .course-card:hover .card-arrow {
    background: #111827;
    color: white;
    transform: translateX(3px);
  }
  
  /* New Exercise Card Styles */
  .exercise-card {
    background: linear-gradient(145deg, #ffffff, #f9fafb);
    border-radius: 0.75rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    padding: 1.5rem 1.25rem 1.5rem 3rem;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    border: 1px solid #f0f0f0;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .exercise-card:hover {
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.1);
    transform: translateY(-4px);
  }
  
  .exercise-card.completed {
    border: 1px solid rgba(16, 185, 129, 0.3);
    background: linear-gradient(145deg, rgba(16, 185, 129, 0.05), rgba(16, 185, 129, 0.02));
  }
  
  .exercise-card.in-progress {
    border: 1px solid rgba(245, 158, 11, 0.3);
    background: linear-gradient(145deg, rgba(245, 158, 11, 0.05), rgba(245, 158, 11, 0.02));
  }
  
  .completion-indicator {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    width: 26px;
    height: 26px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .indicator-dot {
    width: 22px;
    height: 22px;
    border-radius: 50%;
    border: 2px solid #d1d5db;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    color: transparent;
    transition: all 0.3s ease;
  }
  
  .indicator-dot.completed {
    background: #10b981;
    border-color: #10b981;
    color: white;
  }
  
  .indicator-dot.in-progress {
    background: #f59e0b;
    border-color: #f59e0b;
    color: white;
  }
  
  .difficulty-stripe {
    position: absolute;
    top: 0;
    left: 0;
    width: 8px;
    height: 100%;
    z-index: 1;
  }
  
  .difficulty-stripe.beginner {
    background: linear-gradient(to bottom, #10b981, #059669);
  }
  
  .difficulty-stripe.intermediate {
    background: linear-gradient(to bottom, #f59e0b, #d97706);
  }
  
  .difficulty-stripe.advanced {
    background: linear-gradient(to bottom, #ef4444, #dc2626);
  }
  
  .card-content {
    position: relative;
    z-index: 2;
  }
  
  .exercise-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.5rem;
    line-height: 1.3;
  }
  
  .exercise-description {
    color: #4b5563;
    font-size: 0.95rem;
    margin-bottom: 1rem;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .exercise-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }
  
  .difficulty-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .difficulty-badge.beginner {
    background: rgba(16, 185, 129, 0.1);
    color: #065f46;
  }
  
  .difficulty-badge.intermediate {
    background: rgba(245, 158, 11, 0.1);
    color: #92400e;
  }
  
  .difficulty-badge.advanced {
    background: rgba(239, 68, 68, 0.1);
    color: #b91c1c;
  }
  
  .difficulty-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
  }
  
  .time-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    background: rgba(79, 70, 229, 0.1);
    color: #4338ca;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag {
    font-size: 0.8rem;
    padding: 0.2rem 0.6rem;
    border-radius: 0.25rem;
    background: #f3f4f6;
    color: #4b5563;
    font-weight: 500;
  }
  
  .tag-more {
    font-size: 0.8rem;
    padding: 0.2rem 0.5rem;
    color: #9ca3af;
  }
  
  .card-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to right, transparent, transparent);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 0;
    pointer-events: none;
  }
  
  .exercise-card:hover .card-overlay {
    background: linear-gradient(to right, transparent, rgba(0, 0, 0, 0.02));
    opacity: 1;
  }
  
  .exercise-card.completed:hover .card-overlay {
    background: linear-gradient(to right, transparent, rgba(16, 185, 129, 0.05));
  }
  
  .exercise-card.in-progress:hover .card-overlay {
    background: linear-gradient(to right, transparent, rgba(245, 158, 11, 0.05));
  }
</style>===== ./src/lib/components/courses/exercise/ExerciseRating.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { getAuth } from 'firebase/auth';
  import { doc, getDoc, setDoc, getFirestore, updateDoc, increment } from 'firebase/firestore';
  import Icon from '@iconify/svelte';

  export let exerciseId: string;

  let userRating: number | null = null;
  let isSubmitted = false;
  let feedbackText = '';
  let showFeedback = false;

  onMount(async () => {
    await loadUserRating();
  });

  async function loadUserRating() {
    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);
      const ratingDoc = await getDoc(ratingRef);

      if (ratingDoc.exists()) {
        const data = ratingDoc.data();
        userRating = data.rating;
        feedbackText = data.feedback || '';
        isSubmitted = true;
      }
    } catch (err) {
      console.error('Error loading rating:', err);
    }
  }

  async function submitRating() {
    if (userRating === null) return;

    const auth = getAuth();
    if (!auth.currentUser) return;

    try {
      const db = getFirestore();
      const ratingRef = doc(db, 'users', auth.currentUser.uid, 'ratings', exerciseId);
      
      // Save user's rating
      await setDoc(ratingRef, {
        rating: userRating,
        feedback: feedbackText,
        timestamp: new Date()
      });

      // Update exercise aggregated ratings
      const exerciseRef = doc(db, 'exercises', exerciseId);
      await updateDoc(exerciseRef, {
        ratingSum: increment(userRating),
        ratingCount: increment(1),
        averageRating: increment(0) // This will trigger a Cloud Function to recalculate
      });

      isSubmitted = true;
      showFeedback = false;
    } catch (err) {
      console.error('Error submitting rating:', err);
    }
  }

  function handleRatingClick(rating: number) {
    if (!isSubmitted) {
      userRating = rating;
    }
  }

  function editRating() {
    isSubmitted = false;
  }
</script>

<div class="exercise-rating">
  <h3 class="text-lg font-semibold mb-2">Rate this exercise</h3>
  
  {#if !isSubmitted}
    <div class="flex flex-col space-y-4">
      <div class="flex items-center space-x-1">
        {#each Array(5) as _, i}
          <button 
            on:click={() => handleRatingClick(i + 1)}
            class="text-2xl focus:outline-none" 
            disabled={isSubmitted}
          >
            <Icon 
              icon={userRating && i < userRating ? "mdi:star" : "mdi:star-outline"} 
              class={userRating && i < userRating ? "text-yellow-400" : "text-gray-400 hover:text-yellow-400"} 
              width="28" 
              height="28"
            />
          </button>
        {/each}
      </div>
      
      <div>
        <button 
          on:click={() => showFeedback = !showFeedback}
          class="text-sm text-cherry-600 dark:text-cherry-400 hover:underline"
        >
          {showFeedback ? "Hide feedback form" : "Add feedback (optional)"}
        </button>
        
        {#if showFeedback}
          <div class="mt-2">
            <textarea
              bind:value={feedbackText}
              class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-light focus:ring-cherry-500 focus:border-cherry-500 min-h-[80px]"
              placeholder="What did you think about this exercise?"
            ></textarea>
          </div>
        {/if}
      </div>
      
      <div>
        <button 
          on:click={submitRating}
          disabled={userRating === null}
          class="px-4 py-2 text-sm font-medium rounded-md bg-cherry-600 text-white hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Submit Rating
        </button>
      </div>
    </div>
  {:else}
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-1">
        {#each Array(5) as _, i}
          <Icon 
            icon={userRating && i < userRating ? "mdi:star" : "mdi:star-outline"} 
            class={userRating && i < userRating ? "text-yellow-400" : "text-gray-400"} 
            width="24" 
            height="24"
          />
        {/each}
      </div>
      
      <button 
        on:click={editRating}
        class="text-sm text-cherry-600 dark:text-cherry-400 hover:underline"
      >
        Edit Rating
      </button>
    </div>
    
    {#if feedbackText}
      <div class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        <p class="italic">"{feedbackText}"</p>
      </div>
    {/if}
  {/if}
</div>===== ./src/lib/components/courses/exercise/ExercisesSection.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade } from 'svelte/transition';
  import ExerciseCard from './ExerciseCard.svelte';
  import type { Exercise } from '$lib/services/courses/exerciseService';
  import { fetchExercises } from '$lib/services/courses/exerciseService';

  export let categoryId: string | null = null;
  export let limit: number | null = null;
  export let title: string = 'Exercises';
  export let onExerciseClick: (exercise: Exercise) => void = (exercise) => {
    console.log('Exercise clicked:', exercise.id);
  };

  let exercises: Exercise[] = [];
  let isLoading = true;
  let error: string | null = null;
  let filteredExercises: Exercise[] = [];
  let searchQuery = '';
  let selectedDifficulty: 'all' | 'beginner' | 'intermediate' | 'advanced' = 'all';
  let selectedTags: string[] = [];
  let showFilters = false;

  // Update filters when exercises or filter values change
  $: applyFilters();

  function applyFilters() {
    let result = exercises;

    if (searchQuery) {
      const lowerQuery = searchQuery.toLowerCase();
      result = result.filter(ex => ex.title.toLowerCase().includes(lowerQuery) || ex.description?.toLowerCase().includes(lowerQuery));
    }

    if (selectedDifficulty !== 'all') {
      result = result.filter(ex => ex.difficulty === selectedDifficulty);
    }

    if (selectedTags.length > 0) {
      result = result.filter(ex => selectedTags.every(tag => ex.tags?.includes(tag)));
    }

    if (limit !== null) {
      result = result.slice(0, limit);
    }

    filteredExercises = result;
  }

  async function load() {
    isLoading = true;
    error = null;
    try {
      const all = await fetchExercises(categoryId);
      exercises = all;
    } catch (err) {
      console.error(err);
      error = 'Failed to load exercises';
    } finally {
      isLoading = false;
    }
  }

  onMount(load);

  function handleSearchInput(e: InputEvent) {
    searchQuery = (e.target as HTMLInputElement).value;
  }

  function handleDifficultyChange(difficulty: typeof selectedDifficulty) {
    selectedDifficulty = difficulty;
  }

  function toggleTag(tag: string) {
    selectedTags = selectedTags.includes(tag) ? selectedTags.filter(t => t !== tag) : [...selectedTags, tag];
  }

  function clearFilters() {
    searchQuery = '';
    selectedDifficulty = 'all';
    selectedTags = [];
  }

  function toggleFilters() {
    showFilters = !showFilters;
  }
</script>

<section class="exercises-section" in:fade={{ duration: 300 }}>
  <div class="section-header">
    <h2 class="section-title">{title}</h2>
    <button on:click={toggleFilters} aria-expanded={showFilters} class="filter-toggle">
      <i class="fas fa-filter"></i> Filters
      {#if selectedDifficulty !== 'all' || selectedTags.length || searchQuery}
        <span class="filter-badge">{selectedTags.length + (selectedDifficulty !== 'all' ? 1 : 0) + (searchQuery ? 1 : 0)}</span>
      {/if}
    </button>
  </div>

  {#if isLoading}
    <div class="loading-state">Loading exercises...</div>
  {:else if error}
    <div class="error-state">{error}</div>
  {:else if filteredExercises.length === 0}
    <div class="empty-state">No exercises found.</div>
  {:else}
    <div class="exercises-grid">
      {#each filteredExercises as exercise (exercise.id)}
        <ExerciseCard {...exercise} on:click={() => onExerciseClick(exercise)} />
      {/each}
    </div>
  {/if}
</section>

<style>
  .exercises-section {
    margin-bottom: 3rem;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }
  
  .section-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #111827;
    margin: 0;
  }
  
  .filter-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    font-size: 0.95rem;
    color: #4b5563;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .filter-toggle:hover {
    background: #f3f4f6;
    border-color: #d1d5db;
  }
  
  .filter-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #ef4444;
    color: white;
    width: 1.25rem;
    height: 1.25rem;
    font-size: 0.75rem;
    border-radius: 50%;
    font-weight: 600;
  }
  
  .exercises-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem 0;
    color: #6b7280;
  }
  
  .error-state, .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem 0;
    text-align: center;
    color: #6b7280;
  }
</style>
===== ./src/lib/components/courses/CourseCard.svelte =====
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import Icon from '@iconify/svelte';
  import type { ContentNode } from '$lib/services/courses/courseService';
  
  export let course: ContentNode;
  export let isSelected: boolean = false;
  export let isCompleted: boolean = false;
  export let progress: number = 0;
  
  const dispatch = createEventDispatcher<{
    select: { course: ContentNode };
  }>();
  
  function handleSelect() {
    dispatch('select', { course });
  }
  
  $: statusClass = isCompleted ? 
    'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' : 
    progress > 0 ? 
      'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400' : 
      'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-400';
  
  $: statusText = isCompleted ? 
    'Completed' : 
    progress > 0 ? 
      `In Progress (${Math.round(progress)}%)` : 
      'Not Started';
</script>

<div 
  class="course-card relative p-4 rounded-lg border transition-all duration-200 hover:shadow-md mb-4 cursor-pointer {isSelected ? 'border-cherry-500 bg-cherry-50 dark:bg-cherry-900/20 shadow-md' : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'}"
  on:click={handleSelect}
>
  <div class="flex justify-between items-start">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{course.title}</h3>
    {#if course.level}
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400">
        {course.level}
      </span>
    {/if}
  </div>
  
  {#if course.description}
    <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">{course.description}</p>
  {/if}
  
  <div class="flex flex-wrap gap-2 mb-3">
    {#if course.category}
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-cherry-100 dark:bg-cherry-900/30 text-cherry-800 dark:text-cherry-400">
        {course.category}
      </span>
    {/if}
    {#if course.tags && course.tags.length > 0}
      {#each course.tags.slice(0, 3) as tag}
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
          {tag}
        </span>
      {/each}
      {#if course.tags.length > 3}
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
          +{course.tags.length - 3} more
        </span>
      {/if}
    {/if}
  </div>
  
  <div class="flex justify-between items-center">
    <span class="inline-flex items-center text-xs {statusClass} px-2.5 py-0.5 rounded-full">
      {statusText}
    </span>
    
    {#if progress > 0 && !isCompleted}
      <div class="w-24 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
        <div class="bg-amber-500 dark:bg-amber-400 h-2 rounded-full" style="width: {progress}%"></div>
      </div>
    {/if}
    
    <div class="flex items-center space-x-1 text-gray-500 dark:text-gray-400">
      {#if course.duration}
        <Icon icon="mdi:clock-outline" class="w-4 h-4" />
        <span class="text-xs">{course.duration}</span>
      {/if}
    </div>
  </div>
  
  {#if isSelected}
    <div class="absolute top-2 right-2 text-cherry-500 dark:text-cherry-400">
      <Icon icon="mdi:check-circle" class="w-5 h-5" />
    </div>
  {/if}
</div>===== ./src/lib/components/courses/CourseFlashcardGenerator.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/lib/components/CourseFlashcardGenerator.svelte -->
<script lang="ts">
  import { flashcards } from '$lib/stores/pipStores';
  
  export let content: string = '';
  export let courseName: string = '';
  let generating = false;
  let generatedCards: Array<{front: string, back: string}> = [];
  
  // Simple content parsing to generate flashcards
  function generateCards() {
    generating = true;
    generatedCards = [];
    
    // Split content into sections by headers
    const sections = content.split(/#{2,3}\s+/);
    
    sections.forEach(section => {
      const lines = section.split('\n').filter(l => l.trim());
      if (lines.length < 2) return;
      
      // First line after header is usually a concept/term
      const term = lines[0].trim();
      
      // Next few lines usually contain the explanation
      const explanation = lines.slice(1, 4).join('\n').trim();
      
      if (term && explanation) {
        generatedCards.push({
          front: term,
          back: explanation
        });
      }
      
      // Look for lists that might be definitions
      const lists = section.match(/[-*]\s+(.+?):\s+(.+)/g);
      if (lists) {
        lists.forEach(item => {
          const [, term, def] = item.match(/[-*]\s+(.+?):\s+(.+)/) || [];
          if (term && def) {
            generatedCards.push({
              front: term,
              back: def
            });
          }
        });
      }
    });
    
    generating = false;
  }
  
  function addSelectedCards() {
    const selectedCards = generatedCards.filter(card => 
      !$flashcards.some(existing => 
        existing.front === card.front && existing.back === card.back
      )
    );
    
    if (selectedCards.length === 0) return;
    
    flashcards.update(cards => [
      ...cards,
      ...selectedCards.map(card => ({
        id: crypto.randomUUID(),
        front: card.front,
        back: card.back,
        level: 0,
        tags: [courseName.toLowerCase()]
      }))
    ]);
    
    generatedCards = [];
  }
</script>

<div class="space-y-4">
  <div class="flex justify-between items-center">
    <button
      on:click={generateCards}
      class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition flex items-center"
      disabled={generating || !content}
    >
      {#if generating}
        <i class="fas fa-spinner fa-spin mr-2"></i>
      {:else}
        <i class="fas fa-magic mr-2"></i>
      {/if}
      Generate Flashcards
    </button>
    
    {#if generatedCards.length > 0}
      <button
        on:click={addSelectedCards}
        class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
      >
        Add {generatedCards.length} Cards
      </button>
    {/if}
  </div>
  
  {#if generatedCards.length > 0}
    <div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
      <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Generated Cards</h4>
      <div class="space-y-2">
        {#each generatedCards as card}
          <div class="bg-white dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700">
            <div class="font-medium text-gray-900 dark:text-white">{card.front}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">{card.back}</div>
          </div>
        {/each}
      </div>
    </div>
  {/if}
</div>===== ./src/lib/components/courses/CourseModal.svelte =====
<script>
  import { onMount } from 'svelte';
  import { courseModalOpen, currentCourse } from '$lib/stores/appStore';
  import * as marked from 'marked';
  
  export let markdownContent = `
# JavaScript Closures

A closure is a combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).

## Understanding Closures

In JavaScript, closures are created every time a function is created, at function creation time.

\`\`\`javascript
function outer() {
  const outerVar = 'I am outside!';
  
  function inner() {
    console.log(outerVar); // Accesses outerVar from the outer function's scope
  }
  
  return inner;
}

const myInner = outer();
myInner(); // Logs: "I am outside!"
\`\`\`

## Practical Uses of Closures

### Data Privacy
Closures can be used to create private variables.

\`\`\`javascript
function createCounter() {
  let count = 0;
  
  return {
    increment: function() { count++; },
    getCount: function() { return count; }
  };
}

const counter = createCounter();
counter.increment();
console.log(counter.getCount()); // 1
console.log(counter.count); // undefined (private)
\`\`\`

### Function Factories
Create specialized functions based on parameters.

\`\`\`javascript
function multiplyBy(factor) {
  return function(number) {
    return number * factor;
  };
}

const double = multiplyBy(2);
console.log(double(5)); // 10
\`\`\`

## Exercise

Create a closure that implements a simple bank account with:
- \`deposit(amount)\` method
- \`withdraw(amount)\` method
- \`getBalance()\` method

The balance should be private and only accessible through these methods.
`;
  
  let renderedContent = '';
  
  function closeModal() {
    courseModalOpen.set(false);
  }
  
  async function renderMarkdown() {
    // Use marked directly and await its result
    renderedContent = await marked.parse(markdownContent);
  }
  
  onMount(() => {
    renderMarkdown();
  });
</script>

{#if $courseModalOpen}
  <div 
    class="fixed inset-0 z-50 overflow-y-auto"
    aria-labelledby="modal-title"
    role="dialog" 
    aria-modal="true"
  >
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Background overlay -->
      <div 
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
        aria-hidden="true"
        on:click={closeModal}
        on:keydown={e => e.key === 'Escape' && closeModal()}
      ></div>
      
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">​</span>
      
      <!-- Modal panel -->
      <div class="inline-block align-bottom bg-gray-800 text-gray-100 rounded-2xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full squircle border border-orange-500">
        <div class="bg-gray-800 px-6 py-4">
          <div class="flex justify-between items-center border-b border-gray-700 pb-4">
            <h3 class="text-lg font-medium text-gray-100">
              {$currentCourse?.title || 'Course Content'}
            </h3>
            <button 
              on:click={closeModal} 
              class="text-gray-400 hover:text-gray-200"
              aria-label="Close modal"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>
          
          <div class="markdown-content py-4">
            {@html renderedContent}
          </div>
          
          <div class="border-t border-gray-700 pt-4 flex justify-between">
            <button class="px-4 py-2 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600">
              Previous
            </button>
            <button class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
              Next Lesson
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
{/if}
===== ./src/lib/types/mathjax.d.ts =====
export interface MathJax {
  typesetPromise: (elements: HTMLElement[]) => Promise<void>;
  startup: {
    defaultPageReady: () => Promise<void>;
    defaultReady: () => void;
  };
}

declare global {
  interface Window {
    MathJax?: MathJax;
  }
}

export {};===== ./src/lib/types/forumTypes.ts =====
export interface ForumCategory {
  id: string;
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ForumTopic {
  id: string;
  title: string;
  categoryId: string;
  authorId: string;
  createdAt: Date;
  lastPostAt: Date;
}

export interface ForumPost {
  id: string;
  content: string;
  topicId: string;
  authorId: string;
  createdAt: Date;
}
===== ./src/lib/utils/csrfProtection.ts =====
import { CSRF_HEADER, type CsrfResponse } from './csrfTypes.js';

/**
 * Retrieves the CSRF token from the page's meta tags
 */
export function getCsrfToken(): string | null {
  // First check for token in meta tag
  const metaTag = document.querySelector('meta[name="csrf-token"]');
  if (metaTag && metaTag.getAttribute('content')) {
    return metaTag.getAttribute('content');
  }
  
  // Fallback to localStorage
  return localStorage.getItem('csrf_token');
}

/**
 * Stores a CSRF token for future use
 */
export function storeCsrfToken(token: string): void {
  localStorage.setItem('csrf_token', token);
  
  let metaTag = document.querySelector('meta[name="csrf-token"]');
  if (!metaTag) {
    metaTag = document.createElement('meta');
    metaTag.setAttribute('name', 'csrf-token');
    document.head.appendChild(metaTag);
  }
  metaTag.setAttribute('content', token);
}

/**
 * Updates the CSRF token from response headers if present
 */
export function updateCsrfTokenFromResponse(response: Response): void {
  const newToken = response.headers.get(CSRF_HEADER);
  if (newToken) {
    storeCsrfToken(newToken);
  }
}

/**
 * Initializes CSRF protection by requesting a new token
 */
export async function initializeCsrf(): Promise<void> {
  try {
    const response = await fetch('/api/csrf/init', {
      method: 'GET',
      credentials: 'same-origin'
    });
    
    if (!response.ok) {
      console.warn('Failed to initialize CSRF token');
      return;
    }
    
    const token = response.headers.get(CSRF_HEADER);
    if (token) {
      storeCsrfToken(token);
    }
  } catch (error) {
    console.error('Error initializing CSRF token:', error);
  }
}===== ./src/lib/utils/secureFetch.ts =====
/**
 * Enhanced fetch wrapper with CSRF protection and error handling
 */
import { getCsrfToken, updateCsrfTokenFromResponse } from './csrf.client.js';
import { CSRF_HEADER } from './csrf.types.js';
import { get } from 'svelte/store';
import { isAuthenticated, user } from '../stores/authStore.js';
import { auth } from '../firebase.js';

export interface ApiResponse<T = any> {
  data?: T;
  error?: string;
  status: number;
}

/**
 * Secure fetch wrapper that:
 * 1. Adds CSRF tokens to requests
 * 2. Updates CSRF tokens from responses
 * 3. Adds Firebase auth token for authenticated requests
 * 4. Handles errors in a consistent way
 * 5. Provides type safety for API responses
 */
export async function secureFetch<T = any>(
  url: string,
  options: RequestInit = {}
): Promise<ApiResponse<T>> {
  // Merge default options with provided options
  const requestOptions: RequestInit = {
    credentials: 'same-origin',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  };

  // Add auth token if user is authenticated
  const headers = requestOptions.headers as Record<string, string>;
  if (get(isAuthenticated) && auth.currentUser) {
    try {
      const idToken = await auth.currentUser.getIdToken();
      headers['Authorization'] = `Bearer ${idToken}`;
    } catch (error) {
      console.error('Failed to get auth token:', error);
    }
  }

  // Add CSRF token to non-GET requests
  if (options.method && options.method !== 'GET') {
    const csrfToken = getCsrfToken();
    
    // If no CSRF token, try to obtain one first
    if (!csrfToken) {
      try {
        const response = await fetch('/api/csrf/refresh', {
          credentials: 'same-origin'
        });
        
        const newToken = response.headers.get(CSRF_HEADER);
        if (newToken) {
          headers[CSRF_HEADER] = newToken;
        } else {
          return {
            error: 'CSRF token required',
            status: 401
          };
        }
      } catch (error) {
        return {
          error: 'Failed to obtain CSRF token',
          status: 500
        };
      }
    } else {
      headers[CSRF_HEADER] = csrfToken;
    }
  }

  try {
    // Make the fetch request
    const response = await fetch(url, requestOptions);
    
    // Update CSRF token if present in response
    updateCsrfTokenFromResponse(response);
    
    // Check for CSRF errors (401/403) and retry once if needed
    if ((response.status === 401 || response.status === 403) && 
        response.headers.get('X-CSRF-Error') === 'true') {
      try {
        // Refresh token and retry
        await fetch('/api/csrf/refresh', { credentials: 'same-origin' });
        
        // Retry the original request with updated token
        const retryToken = getCsrfToken();
        if (retryToken) {
          (requestOptions.headers as Record<string, string>)[CSRF_HEADER] = retryToken;
          const retryResponse = await fetch(url, requestOptions);
          updateCsrfTokenFromResponse(retryResponse);
          
          // Parse and return response
          try {
            const data = await retryResponse.json();
            return {
              data,
              status: retryResponse.status
            };
          } catch {
            // If not JSON, return empty data
            return {
              status: retryResponse.status
            };
          }
        }
      } catch {
        // Fall through to original error handling
      }
    }
    
    // Parse and return response
    try {
      const data = await response.json();
      return {
        data,
        status: response.status
      };
    } catch {
      // If not JSON, return empty data
      return {
        status: response.status
      };
    }
  } catch (error) {
    console.error('Request failed:', error);
    return {
      error: error instanceof Error ? error.message : 'Network request failed',
      status: 0
    };
  }
}===== ./src/lib/utils/markdown.js =====
/**
 * Utility functions for working with markdown
 */

// Simple markdown renderer that doesn't require external libraries
export function renderMarkdown(markdown) {
  // This is a very basic markdown renderer
  // For a real app, you'd want to use a proper library
  if (!markdown) return '';
  
  return markdown
    // Handle headings
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    // Handle code blocks
    .replace(/```(\w*)\n([\s\S]*?)```/gm, '<pre><code class="language-$1">$2</code></pre>')
    // Handle inline code
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Handle bold
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // Handle emphasis
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // Handle links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
    // Handle paragraphs
    .replace(/^\s*(\n)?(.+)/gm, function(m) {
      return /^<(\/)?(h\d|pre|ul|ol|li|blockquote|p|table|tr|td|th)/.test(m) ? m : '<p>' + m + '</p>';
    })
    // Handle line breaks
    .replace(/\n/g, '<br>');
}

// Function to load external markdown renderer from CDN
export function loadMarkedLibrary() {
  return new Promise((resolve) => {
    // If already loaded, resolve immediately
    if (typeof window !== 'undefined' && window.marked) {
      resolve(window.marked);
      return;
    }
    
    // Otherwise load from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/marked@4.3.0/marked.min.js';
    script.onload = () => resolve(window.marked);
    document.head.appendChild(script);
  });
}
===== ./src/lib/utils/csrf.client.ts =====
/**
 * Client-side CSRF protection utilities
 */
import { CSRF_HEADER, CSRF_COOKIE } from './csrf.types.js';

/**
 * Retrieves the current CSRF token from either meta tag or localStorage
 */
export function getCsrfToken(): string | null {
  if (typeof window === 'undefined') return null;
  
  // First check for token in meta tag (set during initial page load)
  const metaTag = document.querySelector('meta[name="csrf-token"]');
  if (metaTag && metaTag.getAttribute('content')) {
    return metaTag.getAttribute('content');
  }
  
  // Fallback to localStorage
  return localStorage.getItem(CSRF_COOKIE);
}

/**
 * Stores a CSRF token in localStorage and updates meta tag
 */
export function storeCsrfToken(token: string): void {
  if (typeof window === 'undefined') return;
  
  localStorage.setItem(CSRF_COOKIE, token);
  
  // Also update the meta tag if it exists
  let metaTag = document.querySelector('meta[name="csrf-token"]');
  if (!metaTag) {
    metaTag = document.createElement('meta');
    metaTag.setAttribute('name', 'csrf-token');
    document.head.appendChild(metaTag);
  }
  metaTag.setAttribute('content', token);
}

/**
 * Updates CSRF token from response headers if present
 */
export function updateCsrfTokenFromResponse(response: Response): void {
  const newToken = response.headers.get(CSRF_HEADER);
  if (newToken) {
    storeCsrfToken(newToken);
  }
}

/**
 * Initializes CSRF protection by requesting a new token from server
 */
export async function initializeCsrf(): Promise<void> {
  try {
    const response = await fetch('/api/csrf/refresh', {
      method: 'GET',
      credentials: 'same-origin'
    });
    
    if (!response.ok) {
      console.warn('Failed to initialize CSRF token');
      return;
    }
    
    const token = response.headers.get(CSRF_HEADER);
    if (token) {
      storeCsrfToken(token);
    }
  } catch (error) {
    console.error('Error initializing CSRF token:', error);
  }
}===== ./src/lib/utils/csrf.types.ts =====
/**
 * Shared CSRF types and constants for both client and server
 * This file should only contain types, interfaces, and constants
 * No implementation code should be here
 */

// The header name used for CSRF token transmission
export const CSRF_HEADER = 'X-CSRF-Token';

// Cookie name for CSRF token storage
export const CSRF_COOKIE = 'csrf_token';

// Interface for CSRF token responses
export interface CsrfToken {
  token: string;
}===== ./src/lib/utils/csrf.server.ts =====
/**
 * Server-side CSRF protection utilities
 * This file should never be imported on the client
 */
import { CSRF_HEADER, CSRF_COOKIE } from './csrf.types.js';
import { env } from '$env/dynamic/private';
import type { Cookies } from '@sveltejs/kit';
import crypto from 'crypto';

// Make sure this file only runs on the server
if (typeof window !== 'undefined') {
  throw new Error('csrf.server.ts should only be imported on the server!');
}

// Secret used for CSRF token validation
const CSRF_SECRET = env.VITE_CSRF_SECRET || 'default-csrf-secret-key-should-be-changed-in-production';

/**
 * Generate a cryptographically secure random token
 */
export function generateToken(): string {
  return crypto.randomBytes(32).toString('hex');
}

/**
 * Set up CSRF protection by generating and storing a token in cookies
 */
export function setupCsrfToken(cookies: Cookies): string {
  const token = generateToken();
  
  cookies.set(CSRF_COOKIE, token, {
    path: '/',
    httpOnly: true,
    sameSite: 'strict',
    secure: process.env.NODE_ENV === 'production',
    maxAge: 60 * 60 * 24 // 24 hours
  });

  return token;
}

/**
 * Hash a token for secure comparison
 */
function hashToken(token: string): string {
  return crypto
    .createHmac('sha256', CSRF_SECRET)
    .update(token)
    .digest('hex');
}

/**
 * Validate a CSRF token against the cookie using constant-time comparison
 */
export function validateCsrfToken(cookies: Cookies, headerToken: string | null): boolean {
  if (!headerToken) return false;

  const cookieToken = cookies.get(CSRF_COOKIE);
  if (!cookieToken) return false;

  try {
    // Use constant-time comparison to prevent timing attacks
    return crypto.timingSafeEqual(
      Buffer.from(hashToken(headerToken)),
      Buffer.from(hashToken(cookieToken))
    );
  } catch (error) {
    console.error('CSRF validation error:', error);
    return false;
  }
}===== ./src/lib/server/firebaseAdmin.ts =====
// File: /home/linux/learnflow-app/learnflow-app/src/lib/server/firebaseAdmin.ts
import * as admin from 'firebase-admin';
import { getApps } from 'firebase-admin/app';

// Ensure environment variables are loaded (e.g., using dotenv in development)
// These should be set in your deployment environment.
// IMPORTANT: Do NOT prefix these with VITE_ as they are server-side only.
const serviceAccount = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,
  // Replace escaped newlines in the private key
  privateKey: (process.env.FIREBASE_ADMIN_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
};

// Check if all required service account details are present
const hasServiceAccount = serviceAccount.projectId && serviceAccount.clientEmail && serviceAccount.privateKey;

// Initialize Firebase Admin SDK only if not already initialized and credentials are provided
if (getApps().length === 0 && hasServiceAccount) {
  try {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      // Optional: Add databaseURL if using Realtime Database features
      // databaseURL: `https://${serviceAccount.projectId}.firebaseio.com`
    });
    console.log('Firebase Admin SDK initialized successfully.');
  } catch (error) {
    console.error('Error initializing Firebase Admin SDK:', error);
    // Optionally, throw an error or handle it based on your application's needs
    // throw new Error('Failed to initialize Firebase Admin SDK');
  }
} else if (getApps().length === 0 && !hasServiceAccount) {
    console.warn('Firebase Admin SDK not initialized: Missing service account environment variables (FIREBASE_PROJECT_ID, FIREBASE_ADMIN_CLIENT_EMAIL, FIREBASE_ADMIN_PRIVATE_KEY).');
}

// Export the admin instance
export { admin };

// Optional: Export specific admin services if needed elsewhere
// export const authAdmin = admin.auth();
// export const firestoreAdmin = admin.firestore();===== ./src/lib/server/contentService.ts =====
import { readFile } from 'fs/promises';
import { join } from 'path';
import { error } from '@sveltejs/kit';
import fs from 'fs/promises';
import path from 'path';

// Define the structure of items in the manifest
interface ContentManifestItem {
	id: string;
	title: string;
	path: string; // Relative path within the content type (e.g., "category/subcategory/item")
	type: string; // More flexible type, e.g., 'category', 'course', 'module', 'lesson', 'exercise', 'topic', 'course-category', 'exercise-category'
	description?: string;
	contentPath?: string; // Path to the actual content file (e.g., markdown)
	children?: ContentManifestItem[];
	// Add other relevant metadata fields here
	tags?: string[];
	difficulty?: string;
	estimatedTime?: string | number; // Allow string or number
	icon?: string; // Added for categories
	courseCount?: number; // Added for course categories
	exerciseCount?: number; // Added for exercise categories
	subcategoryCount?: number; // Added for exercise categories
	category?: string; // Added for exercises to link them to categories
	comingSoon?: boolean; // Added for categories
}

// Raw structure from JSON files might differ
interface RawCourseManifest {
	categories: ContentManifestItem[];
	featuredCourses?: any[]; // Keep other potential top-level keys
	// ... other potential top-level keys
}

interface RawExerciseManifest {
	exercises: ContentManifestItem[];
	categories: ContentManifestItem[];
	featuredExercises?: any[]; // Keep other potential top-level keys
	// ... other potential top-level keys
}

// The structure we *want* after processing
interface ProcessedContentManifest {
	items: ContentManifestItem[];
	// We might store other processed data here if needed
}

// Cache for loaded *processed* manifests
const manifestCache: Map<string, ProcessedContentManifest> = new Map();

/**
 * Loads and processes the manifest file for a given content type.
 * Handles different structures in courses/index.json and exercises/index.json.
 * Assumes manifest files are located at 'static/content/[contentType]/index.json'.
 * @param contentType The type of content (e.g., 'courses', 'exercises').
 * @returns The processed manifest object with a unified 'items' structure.
 * @throws SvelteKit error if the manifest file cannot be read or parsed, or if processing fails.
 */
async function loadManifest(contentType: string): Promise<ProcessedContentManifest> {
	if (manifestCache.has(contentType)) {
		return manifestCache.get(contentType)!;
	}

	const manifestPath = join(process.cwd(), 'static', 'content', contentType, 'index.json');
	console.log(`Attempting to load manifest from: ${manifestPath}`); // Debug log

	try {
		const fileContent = await readFile(manifestPath, 'utf-8');
		const rawManifest: any = JSON.parse(fileContent); // Parse as 'any' initially

		let processedManifest: ProcessedContentManifest = { items: [] };

		// --- Processing Logic ---
		if (contentType === 'courses' && rawManifest.categories) {
			// For courses, the 'categories' array is the primary structure
			processedManifest.items = (rawManifest as RawCourseManifest).categories.map(category => ({
				...category,
				// Ensure children is an empty array if not present
				children: category.children || []
				// Add any other necessary transformations for course categories
			}));
			// Potentially process featuredCourses or other top-level elements if needed
			console.log(`Processed 'courses' manifest. Found ${processedManifest.items.length} categories.`);

		} else if (contentType === 'exercises' && rawManifest.categories && rawManifest.exercises) {
			// For exercises, use 'categories' as the base, then populate with 'exercises'
			const categories = (rawManifest as RawExerciseManifest).categories;
			const exercises = (rawManifest as RawExerciseManifest).exercises;

			const categoryMap = new Map<string, ContentManifestItem>();

			// Initialize categories in the map and ensure 'children' array exists
			categories.forEach(category => {
				category.children = category.children || []; // Ensure children array exists
				categoryMap.set(category.id, category);
			});

			// Assign exercises to their respective categories
			exercises.forEach(exercise => {
				const categoryId = exercise.category; // Assumes exercise has a 'category' field matching a category 'id'
				if (categoryId && categoryMap.has(categoryId)) {
					const parentCategory = categoryMap.get(categoryId)!;
					// Ensure contentPath is correctly formed if needed (exercise.path might be relative to category)
					// Example: exercise.contentPath = join('exercises', parentCategory.path, exercise.path); // Adjust as needed
					exercise.contentPath = join('content', contentType, exercise.path || ''); // Assuming exercise.path is the full content path relative to static/
					parentCategory.children!.push(exercise);
				} else {
					console.warn(`Exercise "${exercise.id}" has an unknown or missing category "${categoryId}". Skipping.`);
				}
			});

			processedManifest.items = Array.from(categoryMap.values());
			console.log(`Processed 'exercises' manifest. Found ${processedManifest.items.length} categories and assigned exercises.`);
			// Potentially process featuredExercises or other top-level elements if needed

		} else {
			// Fallback or error for unexpected structures or content types
			// Maybe try to find a generic 'items' array?
			if (Array.isArray(rawManifest.items)) {
				console.warn(`Manifest for "${contentType}" does not match expected course/exercise structure, but found an 'items' array. Using it directly.`);
				processedManifest.items = rawManifest.items;
			} else {
				throw new Error(`Invalid or unrecognized manifest structure for content type "${contentType}". Expected 'categories' (for courses/exercises) or a top-level 'items' array.`);
			}
		}

		// --- Validation (on the *processed* manifest) ---
		if (!processedManifest || !Array.isArray(processedManifest.items)) {
			// This should ideally not happen if processing logic is correct
			throw new Error('Manifest processing failed: resulting "items" array is invalid.');
		}

		manifestCache.set(contentType, processedManifest);
		console.log(`Manifest processed and cached successfully for type: ${contentType}`); // Debug log
		return processedManifest;

	} catch (err: any) {
		console.error(`Error loading, parsing, or processing manifest for ${contentType} at ${manifestPath}:`, err);
		manifestCache.delete(contentType); // Clear cache entry if loading/processing failed

		// Throw a more specific error based on the cause
		if (err.code === 'ENOENT') {
			 error(404, `Content manifest file not found for type "${contentType}" at ${manifestPath}`);
		} else if (err instanceof SyntaxError) {
			 error(500, `Failed to parse content manifest for "${contentType}": Invalid JSON.`);
		} else {
			// Include the processing error message if available
			 error(500, `Failed to load or process content manifest for "${contentType}": ${err.message}`);
		}
		// Ensure an error is thrown to stop execution flow
		throw new Error(`Failed loading/processing manifest for ${contentType}`);
	}
}

/**
 * Recursively searches for a content node by its *full* path within a list of items.
 * Assumes item.path is the full path relative to the content type root OR the unique ID for exercises if path isn't unique.
 * @param items The list of manifest items to search within.
 * @param identifier The identifier to search for (can be path or id).
 * @returns The found ContentManifestItem or null if not found.
 */
function findNodeByIdentifierRecursive(items: ContentManifestItem[], identifier: string): ContentManifestItem | null {
    if (!items) return null;

    for (const item of items) {
        // Check both path and id for flexibility, prioritizing path if it exists and matches
        if (item.path === identifier || item.id === identifier) {
            return item; // Found the exact match
        }
        // If the current item's path is a prefix of the target path (less reliable now), search its children
        // A better approach might be needed if paths aren't strictly hierarchical in the identifier
        if (item.children && item.children.length > 0) {
            const foundInChildren = findNodeByIdentifierRecursive(item.children, identifier);
            if (foundInChildren) {
                return foundInChildren;
            }
        }
    }

    return null; // Not found in this branch
}

/**
 * Retrieves a specific content node (and its potential children) based on its identifier (path or ID).
 * Handles the root path ('') by returning the top-level items.
 * @param contentType The type of content (e.g., 'courses', 'exercises').
 * @param identifier The identifier of the content node (e.g., 'category/subcategory/item' or 'unique-exercise-id'). An empty string retrieves the root.
 * @returns The found ContentManifestItem or the root structure.
 * @throws SvelteKit error if the node is not found or manifest fails to load.
 */
export async function getContentNodeByIdentifier(contentType: string, identifier: string): Promise<ContentManifestItem | { type: 'root', children: ContentManifestItem[], title: string }> {
    try {
        const manifest = await loadManifest(contentType); // Gets the processed manifest
        const cleanIdentifier = identifier.split('?')[0].replace(/^\/|\/$/g, ''); // Clean the identifier

        if (cleanIdentifier === '') {
             // Return a synthetic root node containing top-level items
             const title = contentType.charAt(0).toUpperCase() + contentType.slice(1); // Capitalize type
             return { type: 'root', children: manifest.items, title: title };
        }

        // Start search from the root items using the recursive finder
        const node = findNodeByIdentifierRecursive(manifest.items, cleanIdentifier);

        if (!node) {
             console.warn(`Content node not found for type "${contentType}" and identifier "${cleanIdentifier}"`);
             error(404, `Content not found for identifier: ${cleanIdentifier || '/'}`); // Throw 404 if node not found
             throw new Error(`Content node not found: ${cleanIdentifier}`);
        }

        // If the node is found, potentially load its markdown content if applicable
        // Ensure contentPath exists and is correctly formed relative to 'static'
        if (node.contentPath && node.type !== 'category' && node.type !== 'topic' && node.type !== 'course-category' && node.type !== 'exercise-category') {
            try {
                // contentPath should already be relative to 'static' from the processing step
                const contentFilePath = join(process.cwd(), 'static', node.contentPath);
                 console.log(`Attempting to load content from: ${contentFilePath}`); // Debug log
                (node as any).markdownContent = await readFile(contentFilePath, 'utf-8');
            } catch (contentError: any) {
                console.error(`Failed to load markdown content for ${node.id} (path: ${node.path}) from ${node.contentPath}:`, contentError);
                 (node as any).markdownContent = `*Error loading content from ${node.contentPath}. Please check server logs.*`;
                 (node as any).contentLoadingError = contentError.message;
                 // Optionally, re-throw a 500 if content is critical
                 // error(500, `Failed to load required content file: ${node.contentPath}`);
            }
        }

        return node;

    } catch (err: any) {
        // Catch specific SvelteKit errors and re-throw them
        if (err.status) throw err;

        // Log unexpected errors before throwing a generic 500
        console.error(`Unexpected error in getContentNodeByIdentifier for ${contentType} identifier "${identifier}":`, err);
        error(500, `Failed to retrieve content data for ${contentType}: ${err.message || 'Internal Server Error'}`);
        throw new Error(`Failed retrieving content node for ${contentType} identifier ${identifier}`);
    }
}

/**
 * Generates breadcrumbs for a given content identifier (path or ID).
 * Relies on the hierarchical structure defined by `children`.
 * @param contentType The type of content (e.g., 'courses', 'exercises').
 * @param identifier The identifier of the content node.
 * @returns An array of breadcrumb items { title: string, path: string }.
 * @throws Error if the manifest fails to load.
 */
export async function getBreadcrumbs(contentType: string, identifier: string): Promise<{ title: string; path: string }[]> {
     const cleanIdentifier = identifier.split('?')[0].replace(/^\/|\/$/g, ''); // Clean the identifier
     if (!cleanIdentifier) return []; // No breadcrumbs for the root

     try {
        const manifest = await loadManifest(contentType);
        const breadcrumbs: { title: string; path: string }[] = [];

        // Recursive function to find the path to the node
        const findPath = (items: ContentManifestItem[], targetId: string, currentPath: { title: string; path: string }[]): boolean => {
            for (const item of items) {
                const itemIdentifier = item.path || item.id; // Use path if available, else id
                const newPath = [...currentPath, { title: item.title, path: `/${contentType}?path=${itemIdentifier}` }]; // Use identifier in path query

                if (itemIdentifier === targetId) {
                    breadcrumbs.push(...newPath);
                    return true; // Found the node
                }

                if (item.children && item.children.length > 0) {
                    if (findPath(item.children, targetId, newPath)) {
                        return true; // Found in children
                    }
                }
            }
            return false; // Not found in this branch
        };

        findPath(manifest.items, cleanIdentifier, []);

        if (breadcrumbs.length === 0) {
             console.warn(`Breadcrumb generation failed: Could not find node for identifier "${cleanIdentifier}" in contentType "${contentType}"`);
        }

        return breadcrumbs;
    } catch (err: any) {
         // Catch SvelteKit errors (like 404/500 from loadManifest) and re-throw
         if (err.status) throw err;

        console.error(`Error generating breadcrumbs for ${contentType} identifier "${identifier}":`, err);
        // Don't throw 500 here, return empty breadcrumbs.
        return [];
    }
}

/**
 * Retrieves a list of content items for a specific category identifier (path or ID).
 * If identifier is empty, returns top-level items.
 * @param contentType The type of content (e.g., 'courses', 'exercises').
 * @param categoryIdentifier The identifier of the category. Empty string for root.
 * @returns An array of ContentManifestItem children of the specified category.
 * @throws SvelteKit error if category not found or manifest fails.
 */
export async function getContentListByCategory(contentType: string, categoryIdentifier: string): Promise<ContentManifestItem[]> {
    try {
        const manifest = await loadManifest(contentType); // Gets processed manifest
        const cleanIdentifier = categoryIdentifier.split('?')[0].replace(/^\/|\/$/g, ''); // Clean the identifier

        if (cleanIdentifier === '') {
            return manifest.items; // Return top-level items for root path
        }

        // Use the recursive finder based on identifier
        const node = findNodeByIdentifierRecursive(manifest.items, cleanIdentifier);

        if (!node) {
            error(404, `Category not found for type "${contentType}" and identifier "${cleanIdentifier}"`);
            throw new Error(`Category node not found: ${cleanIdentifier}`);
        }

        // Check if the found node is a type that should contain children
        // Updated types based on observed JSON structures
        const containerTypes = ['category', 'topic', 'course', 'module', 'course-category', 'exercise-category'];
        if (!containerTypes.includes(node.type)) {
             error(400, `Identifier "${cleanIdentifier}" (type: ${node.type}) does not refer to a valid container node.`);
             throw new Error(`Invalid container node type: ${node.type}`);
        }

        return node.children || []; // Return children or empty array if none
    } catch (err: any) {
        // Catch specific SvelteKit errors and re-throw them
        if (err.status) throw err;

        console.error(`Error in getContentListByCategory for ${contentType} identifier "${categoryIdentifier}":`, err);
        error(500, `Failed to retrieve content list for ${contentType}: ${err.message || 'Internal Server Error'}`);
        throw new Error(`Failed retrieving content list for ${contentType} identifier ${categoryIdentifier}`);
    }
}

/**
 * Recursively collects all content items of a specific type (e.g., 'course', 'lesson') from the manifest.
 * @param items The list of manifest items to search within.
 * @param targetType The type of item to collect.
 * @returns An array of ContentManifestItem matching the target type.
 */
function collectItemsByTypeRecursive(items: ContentManifestItem[], targetType: string): ContentManifestItem[] {
    let collected: ContentManifestItem[] = [];
    if (!items) return collected;

    for (const item of items) {
        if (item.type === targetType) {
            collected.push(item);
        }
        if (item.children && item.children.length > 0) {
            collected = collected.concat(collectItemsByTypeRecursive(item.children, targetType));
        }
    }
    return collected;
}

/**
 * Retrieves all content items of a specific type (e.g., 'course', 'lesson') from the manifest.
 * @param contentType The type of content manifest (e.g., 'courses', 'exercises').
 * @param itemType The specific type of item to retrieve (e.g., 'course', 'lesson').
 * @returns A promise resolving to an array of ContentManifestItem.
 * @throws SvelteKit error if the manifest fails to load.
 */
export async function getAllContentItemsByType(contentType: string, itemType: string): Promise<ContentManifestItem[]> {
    try {
        const manifest = await loadManifest(contentType);
        return collectItemsByTypeRecursive(manifest.items, itemType);
    } catch (err: any) {
        console.error(`Error in getAllContentItemsByType for contentType "${contentType}" and itemType "${itemType}":`, err);
        error(500, `Failed to retrieve all content items for ${contentType}: ${err.message}`);
        throw new Error(`Failed retrieving all content items for ${contentType} type ${itemType}`);
    }
}

/**
 * Retrieves suggested content items of a specific type, excluding items the user is already enrolled in.
 * @param contentType The type of content manifest (e.g., 'courses', 'exercises').
 * @param itemType The specific type of item to retrieve (e.g., 'course', 'exercise').
 * @param enrolledIds An array of IDs the user is already enrolled in.
 * @returns A promise resolving to an array of suggested ContentManifestItem.
 * @throws SvelteKit error if the manifest fails to load.
 */
export async function getSuggestedContentItems(contentType: string, itemType: string, enrolledIds: string[] = []): Promise<ContentManifestItem[]> {
    try {
        const allItems = await getAllContentItemsByType(contentType, itemType);
        if (!enrolledIds || enrolledIds.length === 0) {
            return allItems; // Return all if no enrollment info
        }
        const suggestedItems = allItems.filter((item: ContentManifestItem) => !enrolledIds.includes(item.id));
        return suggestedItems;
    } catch (err: any) {
         // Re-throw SvelteKit errors directly (already handled by getAllContentItemsByType)
        if (err.status) throw err;

        // Log unexpected errors before throwing a generic 500
        console.error(`Unexpected error in getSuggestedContentItems for ${contentType} type ${itemType}:`, err);
        error(500, `Failed to retrieve suggested content items for ${contentType}: ${err.message || 'Internal Server Error'}`);
        throw new Error(`Failed retrieving suggested content items for ${contentType} type ${itemType}`);
    }
}

// Alias for legacy route imports: allow using getContentNodeByPath
export { getContentNodeByIdentifier as getContentNodeByPath };
===== ./src/app.d.ts =====
/// <reference types="@sveltejs/kit" />

import type { User } from 'firebase/auth';

declare global {
    namespace App {
        interface Locals {
            user: User | null;
            isAuthenticated: boolean;
            [key: string]: User | null | boolean | undefined;
        }
    }

    // Add Splide to the Window interface
    interface Window {
        Splide: any; // Use 'any' for simplicity, or install @splidejs/splide types
    }
}

export {};
===== ./src/routes/events/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade } from 'svelte/transition';
  import { user } from '$lib/stores/authStore.js';

  // Types
  type PlatformEvent = {
    id: string;
    title: string;
    type: 'Webinar' | 'Workshop' | 'Q&A' | 'Competition' | 'Social';
    date: string;
    startTime: string;
    endTime?: string;
    description: string;
    image?: string;
    location: string; // Can be 'Online', a specific URL, or a physical location
    organizer: string;
    isFeatured?: boolean;
    isRegistered?: boolean;
    tags?: string[];
    registrationLink?: string;
  };

  // Mock Events Data
  let allEvents: PlatformEvent[] = [
    {
      id: 'event-1',
      title: 'Live Q&A: Mastering CSS Grid',
      type: 'Q&A',
      date: '2023-05-15',
      startTime: '4:00 PM UTC',
      description: 'Join expert Sarah Johnson for a live Q&A session on advanced CSS Grid techniques.',
      image: '/images/events/css-grid-qa.jpg',
      location: 'Online - YouTube Live',
      organizer: 'LearnFlow Team',
      isFeatured: true,
      isRegistered: false,
      tags: ['CSS', 'Frontend', 'Q&A'],
      registrationLink: '#'
    },
    {
      id: 'event-2',
      title: 'Workshop: Introduction to Machine Learning',
      type: 'Workshop',
      date: '2023-05-22',
      startTime: '1:00 PM UTC',
      endTime: '5:00 PM UTC',
      description: 'Hands-on workshop covering the fundamentals of machine learning with Python.',
      image: '/images/events/ml-workshop.jpg',
      location: 'Online - Zoom',
      organizer: 'Data Science Society',
      isRegistered: true,
      tags: ['Machine Learning', 'Python', 'Workshop']
    },
    {
      id: 'event-3',
      title: 'Webinar: Building Accessible Web Apps',
      type: 'Webinar',
      date: '2023-05-25',
      startTime: '6:00 PM UTC',
      description: 'Learn best practices for creating web applications accessible to everyone.',
      location: 'Online - Webinar Platform',
      organizer: 'LearnFlow Team',
      isRegistered: false,
      tags: ['Accessibility', 'Web Development', 'Webinar']
    },
    {
      id: 'event-4',
      title: 'LearnFlow Community Meetup',
      type: 'Social',
      date: '2023-06-01',
      startTime: '5:00 PM UTC',
      description: 'Connect with fellow learners and the LearnFlow team in this informal online meetup.',
      location: 'Online - Discord',
      organizer: 'LearnFlow Community',
      isRegistered: false,
      tags: ['Community', 'Social']
    },
     {
      id: 'event-5',
      title: 'Past Event: Design Thinking Challenge',
      type: 'Competition',
      date: '2023-04-10',
      startTime: '9:00 AM UTC',
      endTime: 'April 14th, 5:00 PM UTC',
      description: 'A week-long challenge to apply design thinking principles to solve a real-world problem.',
      image: '/images/events/design-challenge.jpg',
      location: 'Online Platform',
      organizer: 'Design Club',
      isRegistered: true, // Assume user participated
      tags: ['Design Thinking', 'Competition', 'UX']
    }
  ];

  // State for filters
  let selectedType = 'all';
  let selectedDateRange = 'upcoming'; // 'upcoming', 'past', 'all'

  // Event Types for filtering
  const eventTypes = [
    'all',
    ...new Set(allEvents.map(event => event.type))
  ];

  // Filtered Events
  $: filteredEvents = allEvents.filter(event => {
    const matchesType = selectedType === 'all' || event.type === selectedType;
    
    const eventDate = new Date(event.date);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Set time to midnight for accurate date comparison
    
    let matchesDate = true;
    if (selectedDateRange === 'upcoming') {
      matchesDate = eventDate >= today;
    } else if (selectedDateRange === 'past') {
      matchesDate = eventDate < today;
    }
    
    return matchesType && matchesDate;
  }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // Sort by date

  // Separate featured event (most recent upcoming featured event)
  $: featuredEvent = filteredEvents.find(event => event.isFeatured && new Date(event.date) >= new Date());

  // Function to format date and time nicely
  function formatEventDateTime(dateStr: string, startTime: string, endTime?: string): string {
    const date = new Date(dateStr);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    let formattedString = date.toLocaleDateString('en-US', dateOptions);
    formattedString += ` at ${startTime}`;
    if (endTime) {
      formattedString += ` - ${endTime}`;
    }
    return formattedString;
  }

  // Placeholder for registration logic
  function handleRegistration(eventId: string) {
     console.log(`Handling registration for event ${eventId}`);
     const eventIndex = allEvents.findIndex(e => e.id === eventId);
     if (eventIndex !== -1) {
       allEvents[eventIndex].isRegistered = !allEvents[eventIndex].isRegistered;
       allEvents = [...allEvents]; // Trigger reactivity
     }
  }

  // Loading state
  let loading = true;

  onMount(() => {
    setTimeout(() => {
      loading = false;
    }, 800);
  });
</script>

<svelte:head>
  <title>Events | LearnFlow</title>
</svelte:head>

<div class="container mx-auto px-4 py-8 max-w-7xl">
  {#if loading}
    <div class="flex justify-center items-center h-64">
      <div class="loader"></div>
    </div>
  {:else}
    <div in:fade={{ duration: 300 }}>
      <!-- Header Section -->
      <div class="text-center mb-12">
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-3">LearnFlow Events</h1>
        <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
          Join webinars, workshops, Q&A sessions, and community meetups.
        </p>
      </div>

      <!-- Featured Event Section -->
      {#if featuredEvent}
        <div class="bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-800 dark:to-purple-800 rounded-xl shadow-lg p-6 md:p-8 mb-12 text-white">
          <div class="flex flex-col md:flex-row items-center">
            {#if featuredEvent.image}
              <div class="w-full md:w-1/3 mb-4 md:mb-0 md:mr-8 flex-shrink-0">
                <img src={featuredEvent.image} alt={featuredEvent.title} class="rounded-lg shadow-md aspect-video object-cover w-full"/>
              </div>
            {/if}
            <div class="flex-1">
              <span class="inline-block bg-white/20 text-white text-xs font-semibold px-3 py-1 rounded-full mb-3">
                Featured Event
              </span>
              <h2 class="text-2xl md:text-3xl font-bold mb-2">{featuredEvent.title}</h2>
              <p class="text-indigo-100 dark:text-indigo-200 mb-3 text-sm">
                 <i class="fas fa-calendar-alt mr-1"></i> {formatEventDateTime(featuredEvent.date, featuredEvent.startTime, featuredEvent.endTime)}
              </p>
              <p class="text-indigo-100 dark:text-indigo-200 mb-5">
                {featuredEvent.description}
              </p>
              <button 
                on:click={() => handleRegistration(featuredEvent.id)}
                class="px-5 py-2.5 rounded-md bg-white text-indigo-700 text-base font-medium hover:bg-gray-50 transition-colors flex items-center"
              >
                 {#if featuredEvent.isRegistered}
                   <i class="fas fa-check-circle mr-2"></i> Registered
                 {:else}
                   <i class="fas fa-ticket-alt mr-2"></i> Register Now
                 {/if}
              </button>
            </div>
          </div>
        </div>
      {/if}

      <!-- Filter Bar -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4 mb-8">
        <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
          <span class="text-lg font-medium text-gray-700 dark:text-gray-300">Browse Events</span>
          <div class="flex flex-col sm:flex-row gap-3">
             <div class="relative">
              <select
                class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 min-w-[160px] text-sm"
                bind:value={selectedDateRange}
              >
                <option value="upcoming">Upcoming Events</option>
                <option value="past">Past Events</option>
                <option value="all">All Events</option>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <i class="fas fa-chevron-down text-gray-400"></i>
              </div>
            </div>
            <div class="relative">
              <select
                class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 min-w-[160px] text-sm"
                bind:value={selectedType}
              >
                {#each eventTypes as type}
                  <option value={type}>{type === 'all' ? 'All Types' : type}</option>
                {/each}
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <i class="fas fa-chevron-down text-gray-400"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Events List/Grid -->
      {#if filteredEvents.length === 0}
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-8 text-center">
          <div class="w-16 h-16 mx-auto bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
            <i class="fas fa-calendar-times text-gray-400 dark:text-gray-500 text-2xl"></i>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No events found</h3>
          <p class="text-gray-600 dark:text-gray-400 mb-6">
            There are no {selectedDateRange !== 'all' ? selectedDateRange : ''} 
            {selectedType !== 'all' ? selectedType.toLowerCase() : ''} events matching your criteria.
          </p>
          <button 
            class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors"
            on:click={() => { selectedType = 'all'; selectedDateRange = 'upcoming'; }}
          >
            Reset Filters
          </button>
        </div>
      {:else}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {#each filteredEvents as event (event.id)}
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden flex flex-col transition-shadow hover:shadow-md">
              {#if event.image}
                <img src={event.image} alt={event.title} class="w-full h-40 object-cover"/>
              {:else}
                 <div class="w-full h-40 bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 flex items-center justify-center">
                    <i class="fas fa-calendar-star text-4xl text-purple-400 dark:text-purple-600"></i>
                 </div>
              {/if}
              <div class="p-5 flex-1 flex flex-col">
                <div class="mb-2">
                   <span class="inline-block bg-gray-100 dark:bg-gray-700 text-indigo-800 dark:text-indigo-300 text-xs font-medium px-2.5 py-0.5 rounded-full">{event.type}</span>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2">{event.title}</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">
                  <i class="fas fa-calendar-alt mr-1"></i> {formatEventDateTime(event.date, event.startTime, event.endTime)}
                </p>
                 <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
                  <i class="fas fa-map-marker-alt mr-1"></i> {event.location}
                </p>
                <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-3 flex-1">{event.description}</p>
                
                 {#if event.tags && event.tags.length > 0}
                  <div class="flex flex-wrap gap-1 mb-4">
                    {#each event.tags as tag}
                      <span class="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded text-xs">
                        #{tag}
                      </span>
                    {/each}
                  </div>
                {/if}
                
                <div class="mt-auto">
                  {#if new Date(event.date) < new Date()}
                     <span class="w-full block text-center px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 rounded-md text-sm font-medium">
                        <i class="fas fa-history mr-2"></i> Event Ended
                     </span>
                  {:else if event.isRegistered}
                     <span class="w-full block text-center px-4 py-2 bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-md text-sm font-medium">
                        <i class="fas fa-check-circle mr-2"></i> Registered
                     </span>
                  {:else}
                    <button 
                      on:click={() => handleRegistration(event.id)}
                      class="w-full px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors flex items-center justify-center"
                    >
                       <i class="fas fa-ticket-alt mr-2"></i> Register
                    </button>
                  {/if}
                </div>
              </div>
            </div>
          {/each}
        </div>
      {/if}

    </div>
  {/if}
</div>

<style>
  .loader {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: #4f46e5;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

   .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
   .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
   .aspect-video {
    aspect-ratio: 16 / 9;
  }
</style> ===== ./src/routes/login/+page.svelte =====
<script lang="ts">
  import Login from '$lib/components/Login.svelte';
  import { isAuthenticated, loading } from '$lib/stores/authStore.js';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';
  import { page } from '$app/stores';

  // Get the redirect parameter if present
  $: redirectTo = $page.url.searchParams.get('redirect') || '/';

  onMount(() => {
    // Redirect to home or specified redirect path if already authenticated
    if ($isAuthenticated) {
      goto(redirectTo);
    }
  });

  // Watch for authentication status changes
  $: if (!$loading && $isAuthenticated) {
    goto(redirectTo);
  }
</script>

<svelte:head>
  <title>Login - LearnFlow</title>
</svelte:head>

<div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
  {#if $loading}
    <div class="flex flex-col items-center justify-center">
      <div class="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
    </div>
  {:else}
    <Login {redirectTo} />
  {/if}
</div> ===== ./src/routes/api/csrfMiddleware.ts =====
/**
 * CSRF middleware for protecting API endpoints
 */
import type { Handle } from '@sveltejs/kit';
import { error } from '@sveltejs/kit';
import { validateCsrfToken, setupCsrfToken } from '$lib/utils/csrf.server';
import { CSRF_HEADER } from '$lib/utils/csrf.types';

// Server-side only check
if (typeof window !== 'undefined') {
  throw new Error('csrfMiddleware.ts should only be imported on the server!');
}

export const csrfProtect: Handle = async ({ event, resolve }) => {
  // Skip CSRF check for GET requests (they should be idempotent)
  if (event.request.method === 'GET') {
    // Generate a new token for the next request
    const newToken = setupCsrfToken(event.cookies);
    const response = await resolve(event);
    
    // Add the token to response headers
    const headers = new Headers(response.headers);
    headers.set(CSRF_HEADER, newToken);
    
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers
    });
  }
  
  // For non-GET requests, validate the token
  const headerToken = event.request.headers.get(CSRF_HEADER);
  
  if (!validateCsrfToken(event.cookies, headerToken)) {
    throw error(403, {
      message: 'CSRF token validation failed'
    });
  }
  
  // Generate a new token for the next request
  const newToken = setupCsrfToken(event.cookies);
  const response = await resolve(event);
  
  // Add the new token to response headers
  const headers = new Headers(response.headers);
  headers.set(CSRF_HEADER, newToken);
  
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers
  });
};===== ./src/routes/api/csrf/refresh/+server.ts =====
/**
 * CSRF token refresh endpoint
 * 
 * Generates a new CSRF token and returns it in the response headers
 */
import { setupCsrfToken } from '$lib/utils/csrf.server.js';
import { CSRF_HEADER } from '$lib/utils/csrf.types.js';
import type { RequestEvent } from '@sveltejs/kit';

// Server-side only check
if (typeof window !== 'undefined') {
  throw new Error('This endpoint should only be imported on the server!');
}

export function GET(event: RequestEvent) {
  // Generate a new CSRF token
  const token = setupCsrfToken(event.cookies);
  
  // Return an empty response with the token in headers
  return new Response(null, {
    status: 200,
    headers: {
      [CSRF_HEADER]: token
    }
  });
}===== ./src/routes/api/csrf/init/+server.ts =====
/**
 * CSRF token initialization endpoint
 * 
 * Generates a new CSRF token and returns it in the response headers
 */
import { json } from '@sveltejs/kit';
import type { RequestHandler } from '@sveltejs/kit';
import { setupCsrfToken } from '$lib/utils/csrf.server.js';
import { CSRF_HEADER } from '$lib/utils/csrf.types.js';

// Server-side only check
if (typeof window !== 'undefined') {
  throw new Error('This endpoint should only be imported on the server!');
}

export const GET: RequestHandler = async ({ cookies }) => {
  // Generate a new CSRF token using our standard utility
  const token = setupCsrfToken(cookies);
  
  // Return the token in both the response headers and body
  return new Response(JSON.stringify({ token }), {
    status: 200,
    headers: {
      [CSRF_HEADER]: token
    }
  });
};===== ./src/routes/api/authMiddleware.server.ts =====
// Firebase authentication middleware for API routes
import type { Handle, RequestEvent } from '@sveltejs/kit';
// Import admin from the correct server-side file
import { admin } from '$lib/server/firebaseAdmin.js';
import type { DecodedIdToken } from 'firebase-admin/auth';

// Type for request event with decoded user
interface RequestEventWithAuth extends RequestEvent {
  locals: {
    user?: DecodedIdToken;
    csrfToken?: string;
  };
}

// Middleware that adds decoded Firebase token to `locals.user` if available
export const authMiddleware: Handle = async ({ event, resolve }) => {
  const authHeader = event.request.headers.get('Authorization');
  
  if (authHeader && authHeader.startsWith('Bearer ')) {
    const token = authHeader.slice(7);
    try {
      // Verify and decode the Firebase token
      const decodedToken = await admin.auth().verifyIdToken(token);
      // Add the decoded token to locals
      event.locals.user = decodedToken;
      console.log(`User authenticated: ${decodedToken.uid}`);
    } catch (error) {
      console.error('Token verification failed:', error);
      // Don't set event.locals.user if token is invalid
    }
  }
  
  // Continue to the next middleware or route handler
  return resolve(event);
};

// Middleware that requires authentication (for protected routes)
export const requireAuth: Handle = async ({ event, resolve }) => {
  // First apply the standard auth middleware to verify and decode the token
  await authMiddleware({ event, resolve: e => Promise.resolve(new Response()) });
  
  // Now check if user is authenticated
  if (!event.locals.user) {
    // No valid user found, return 401 Unauthorized
    return new Response(JSON.stringify({ error: 'Unauthorized' }), {
      status: 401,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
  
  // User is authenticated, continue to the next middleware or route handler
  return resolve(event);
};===== ./src/routes/api/score/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { calculateUserScore } from '$lib/services/scoreService';

export const GET: RequestHandler = async ({ locals }) => {
  // Get user ID from the decoded token
  const userId = locals.user?.uid;
  
  if (!userId) {
    console.error('Unauthorized attempt to access score API');
    return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401, headers: { 'Content-Type': 'application/json' } });
  }
  
  try {
    console.log(`Calculating score for user: ${userId}`);
    const score = await calculateUserScore(userId);
    return new Response(JSON.stringify({ score }), { headers: { 'Content-Type': 'application/json' } });
  } catch (err) {
    console.error('Score error:', err);
    return new Response(JSON.stringify({ error: 'Failed to compute score' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
  }
};===== ./src/routes/api/csrfMiddleware.server.ts =====
/**
 * CSRF middleware for protecting API endpoints
 */
import type { Handle } from '@sveltejs/kit';
import { error } from '@sveltejs/kit';
import { validateCsrfToken, setupCsrfToken } from '$lib/utils/csrf.server';
import { CSRF_HEADER } from '$lib/utils/csrf.types';

// Server-side only check
if (typeof window !== 'undefined') {
  throw new Error('csrfMiddleware.ts should only be imported on the server!');
}

export const csrfProtect: Handle = async ({ event, resolve }) => {
  // Skip CSRF check for GET requests (they should be idempotent)
  if (event.request.method === 'GET') {
    // Generate a new token for the next request
    const newToken = setupCsrfToken(event.cookies);
    const response = await resolve(event);
    
    // Add the token to response headers
    const headers = new Headers(response.headers);
    headers.set(CSRF_HEADER, newToken);
    
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers
    });
  }
  
  // For non-GET requests, validate the token
  const headerToken = event.request.headers.get(CSRF_HEADER);
  
  if (!validateCsrfToken(event.cookies, headerToken)) {
    throw error(403, {
      message: 'CSRF token validation failed'
    });
  }
  
  // Generate a new token for the next request
  const newToken = setupCsrfToken(event.cookies);
  const response = await resolve(event);
  
  // Add the new token to response headers
  const headers = new Headers(response.headers);
  headers.set(CSRF_HEADER, newToken);
  
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers
  });
};===== ./src/routes/api/exercises/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import fs from 'fs/promises';
import path from 'path';
import matter from 'gray-matter';

export const GET: RequestHandler = async () => {
  const exercisesDir = path.join(process.cwd(), 'static', 'content', 'exercises');
  try {
    const files = await fs.readdir(exercisesDir);
    const items = await Promise.all(
      files.filter(f => f.endsWith('.md')).map(async (file) => {
        const id = file.replace(/\.md$/, '');
        const filePath = path.join(exercisesDir, file);
        const raw = await fs.readFile(filePath, 'utf8');
        const parsed = matter(raw);
        const data = parsed.data as Record<string, any>;
        return {
          id,
          slug: id,
          type: 'exercise',
          title: data.title || id,
          description: data.description,
          tags: data.tags || [],
          difficulty: data.difficulty,
          estimatedTime: data.estimatedTime
        };
      })
    );
    return new Response(JSON.stringify(items), { headers: { 'Content-Type': 'application/json' } });
  } catch (err) {
    console.error('Error listing exercises:', err);
    return new Response(JSON.stringify([]), { status: 500, headers: { 'Content-Type': 'application/json' } });
  }
};===== ./src/routes/api/recommendations/+server.ts =====
import { json, error } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { getFirestore, collection, query, where, orderBy, limit as limitQuery, getDocs } from 'firebase/firestore';
import { getAllContentItemsByType, getContentNodeByPath, type ContentNode } from '$lib/server/contentService'; // Server import OK here
import { admin } from '$lib/server/firebaseAdmin'; // Assuming auth check needed

interface SimpleLesson {
  id: string;
  title: string;
  type: 'lesson';
  path?: string; // Added path
}

export interface Recommendation {
  type: string;
  referenceId: string;
  title: string;
  description: string;
  metadata?: Record<string, any>;
}

/**
 * Helper to find the next lesson within a course structure node.
 */
function findNextLesson(node: ContentNode | null, currentLessonId: string): SimpleLesson | null {
  if (!node || !node.children) return null;

  for (const module of node.children) {
    if (module.type === 'module' && module.children) {
      const lessonIndex = module.children.findIndex((l) => l.type === 'lesson' && l.id === currentLessonId);
      if (lessonIndex !== -1 && lessonIndex + 1 < module.children.length) {
        const nextLesson = module.children[lessonIndex + 1];
        if (nextLesson.type === 'lesson') {
          // Ensure path is included if available
          return {
              id: nextLesson.id,
              title: nextLesson.title || nextLesson.id,
              type: 'lesson',
              path: nextLesson.path
          };
        }
      }
    }
  }
  // Check next module if current lesson was the last in its module
  for (let i = 0; i < node.children.length; i++) {
      const module = node.children[i];
      if (module.type === 'module' && module.children) {
          const lessonIndex = module.children.findIndex((l) => l.type === 'lesson' && l.id === currentLessonId);
          if (lessonIndex !== -1 && i + 1 < node.children.length) {
              // Find the first lesson in the next module
              const nextModule = node.children[i + 1];
              if (nextModule.type === 'module' && nextModule.children) {
                  const firstLessonOfNextModule = nextModule.children.find(l => l.type === 'lesson');
                  if (firstLessonOfNextModule) {
                      return {
                          id: firstLessonOfNextModule.id,
                          title: firstLessonOfNextModule.title || firstLessonOfNextModule.id,
                          type: 'lesson',
                          path: firstLessonOfNextModule.path
                      };
                  }
              }
          }
      }
  }

  return null;
}


export const GET: RequestHandler = async ({ locals, url }) => {
  // Basic Auth Check (Adapt as needed based on your auth setup)
  if (!locals.user) {
    throw error(401, 'Unauthorized');
  }
  const userId = locals.user.uid;
  const limit = parseInt(url.searchParams.get('limit') || '5', 10);

  try {
    // Ensure admin app is initialized before getting Firestore
    if (!admin.apps.length) {
        console.error('Firebase Admin SDK not initialized!');
        throw error(500, 'Server configuration error');
    }
    const db = getFirestore(admin.apps[0]); // Use admin app's firestore instance
    const activitiesRef = collection(db, 'activities');

    const q = query(
      activitiesRef,
      where('userId', '==', userId),
      orderBy('timestamp', 'desc'),
      limitQuery(limit * 2) // Fetch more activities to have options
    );

    const snapshot = await getDocs(q);
    const acts = snapshot.docs.map(doc => ({
      type: doc.data().eventType as string,
      referenceId: doc.data().referenceId as string,
      timestampStart: doc.data().timestamp, // Assuming timestamp is stored
      metadata: doc.data().metadata || {}
    }));

    const recs: Recommendation[] = [];

    // --- Recommendation Logic (Moved from service) ---

    // 1. Next lesson based on last viewed lesson
    const lastViewLesson = acts.find(a => a.type === 'view_lesson' && a.metadata?.courseId && a.referenceId);
    if (lastViewLesson && lastViewLesson.metadata?.courseId) {
        const courseId = lastViewLesson.metadata.courseId;
        const lessonId = lastViewLesson.referenceId;
        try {
            const structureNode = await getContentNodeByPath('courses', courseId); // Use server function
            if (structureNode) {
                const nextLesson = findNextLesson(structureNode, lessonId);
                if (nextLesson && !recs.some(r => r.type === 'next_lesson')) { // Avoid duplicates
                    recs.push({
                        type: 'next_lesson',
                        referenceId: nextLesson.id,
                        title: `Next: ${nextLesson.title}`,
                        description: `Continue in ${structureNode.title || courseId}`,
                        metadata: { courseId: structureNode.id, path: nextLesson.path } // Include path
                    });
                }
            }
        } catch (e) {
            console.warn(`Error fetching course structure for ${courseId}:`, e);
        }
    }


    // 2. Review flashcards suggestion (Simplified - needs actual logic based on your flashcard system)
    const hasFlashcards = true; // Replace with actual check if user has flashcards
    if (hasFlashcards && !recs.some(r => r.type === 'review_flashcards')) {
        recs.push({
            type: 'review_flashcards',
            referenceId: '/tools/flashcards', // Link to the tool
            title: 'Review your flashcards',
            description: 'Keep your knowledge fresh with spaced repetition.',
            metadata: { tool: 'flashcards' }
        });
    }

    // 3. Suggest related exercises
    const lastStartedExercise = acts.find(a => (a.type === 'start_exercise' || a.type === 'complete_exercise') && a.referenceId);
    if (lastStartedExercise && recs.length < limit) {
        try {
            const allExercises = await getAllContentItemsByType('exercises', 'exercise'); // Use server function
            const current = allExercises.find(e => e.id === lastStartedExercise.referenceId);
            if (current?.tags) {
                const userCompletedExercises = new Set(acts.filter(a => a.type === 'complete_exercise').map(a => a.referenceId));
                const similar = allExercises.filter(e =>
                    e.id !== current.id &&
                    !userCompletedExercises.has(e.id) && // Don't suggest completed ones
                    e.tags?.some(tag => current.tags?.includes(tag))
                );
                for (const ex of similar) {
                    if (recs.length >= limit) break;
                    if (!recs.some(r => r.referenceId === ex.id && r.type === 'exercise')) {
                        recs.push({
                            type: 'exercise',
                            referenceId: ex.id,
                            title: ex.title || ex.id,
                            description: `Practice ${ex.tags?.join(', ') || 'related skills'}`, // Improved description
                            metadata: { path: ex.path } // Include path
                        });
                    }
                }
            }
        } catch (e) {
            console.warn(`Error fetching exercises for recommendations:`, e);
        }
    }


    // 4. Suggest new courses (not already started/completed)
    if (recs.length < limit) {
        try {
            const allCourses = await getAllContentItemsByType('courses', 'course'); // Use server function
            const userCourseProgress = new Map<string, number>();
             acts.filter(a => a.type === 'start_course' || a.type === 'complete_course' || a.type === 'view_lesson')
                 .forEach(a => {
                     const courseId = a.metadata?.courseId || (a.type === 'start_course' ? a.referenceId : null);
                     if (courseId) {
                         const progress = a.type === 'complete_course' ? 100 : (userCourseProgress.get(courseId) || 1);
                         userCourseProgress.set(courseId, progress);
                     }
                 });

            const unstartedCourses = allCourses.filter(c => (userCourseProgress.get(c.id) || 0) < 100); // Suggest courses not completed

            for (const course of unstartedCourses) {
                if (recs.length >= limit) break;
                 if (!recs.some(r => r.referenceId === course.id && r.type === 'course')) {
                    recs.push({
                        type: 'course',
                        referenceId: course.id,
                        title: course.title || course.id,
                        description: course.description || `Explore ${course.title || course.id}`, // Fallback description
                        metadata: { path: course.path } // Include path
                    });
                }
            }
        } catch (e) {
            console.warn(`Error fetching courses for recommendations:`, e);
        }
    }

    // --- End Recommendation Logic ---

    return json(recs.slice(0, limit));

  } catch (err: any) {
    console.error("Error fetching recommendations:", err);
    // Ensure a proper error response is sent
    throw error(err.status || 500, err.body?.message || err.message || 'Failed to fetch recommendations');
  }
};===== ./src/routes/api/activities/end/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { pool } from '$lib/services/userService.server';

export const POST: RequestHandler = async ({ request, locals }) => {
  const { eventId } = await request.json();
  const userId = locals.user?.uid;
  if (!userId) return new Response(null, { status: 401 });

  const now = Date.now();
  await pool.query(
    'UPDATE activities SET timestamp_end=$1 WHERE id=$2 AND user_id=$3',
    [now, eventId, userId]
  );

  return new Response(null, { status: 204 });
};===== ./src/routes/api/activities/recent/+server.ts =====
import { json } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import { getRecentActivities } from '$lib/services/activityService.js';

function getUserId(event: RequestEvent): string | null {
  return event.locals?.user?.uid || null;
}

export const GET = async (event: RequestEvent) => {
  const userId = getUserId(event);
  if (!userId) {
    return json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const limit = Number(event.url.searchParams.get('limit')) || 10;
    const activities = await getRecentActivities(userId, limit);
    return json(activities);
  } catch (error) {
    console.error('Error fetching recent activities:', error);
    return json({ error: 'Failed to fetch activities' }, { status: 500 });
  }
};===== ./src/routes/api/activities/start/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { pool } from '$lib/services/userService.server';

export const POST: RequestHandler = async ({ request, locals }) => {
  const { eventType, referenceId, metadata } = await request.json();
  const userId = locals.user?.uid;
  if (!userId) {
    return new Response(null, { status: 401 });
  }

  // Link to previous event
  const prevRes = await pool.query(
    'SELECT id FROM activities WHERE user_id=$1 ORDER BY timestamp_start DESC LIMIT 1',
    [userId]
  );
  const previousEventId = prevRes.rows[0]?.id || null;
  const now = Date.now();

  const insertRes = await pool.query(
    `INSERT INTO activities
       (user_id, event_type, reference_id, timestamp_start, metadata, previous_event_id)
     VALUES ($1,$2,$3,$4,$5,$6)
     RETURNING id`,
    [userId, eventType, referenceId, now, metadata, previousEventId]
  );

  const eventId = insertRes.rows[0].id;
  return new Response(JSON.stringify({ eventId }), { headers: { 'Content-Type': 'application/json' } });
};===== ./src/routes/api/activities/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { pool } from '$lib/services/userService.server';

export const GET: RequestHandler = async ({ url, locals }) => {
  // Get user ID from the decoded token
  const userId = locals.user?.uid;
  
  if (!userId) {
    console.error('Unauthorized attempt to access activities API');
    return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401, headers: { 'Content-Type': 'application/json' } });
  }
  
  const limit = parseInt(url.searchParams.get('limit') || '10', 10);
  
  try {
    console.log(`Getting activities for user: ${userId}, limit: ${limit}`);
    const res = await pool.query(
      `SELECT id, event_type AS "eventType", reference_id AS "referenceId", timestamp_start AS "timestampStart", timestamp_end AS "timestampEnd", metadata
         FROM activities
         WHERE user_id = $1
         ORDER BY timestamp_start DESC
         LIMIT $2`,
      [userId, limit]
    );
    const activities = res.rows;
    return new Response(JSON.stringify({ activities }), { headers: { 'Content-Type': 'application/json' } });
  } catch (err) {
    console.error('Activities error:', err);
    return new Response(JSON.stringify({ error: 'Failed to fetch activities' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
  }
};===== ./src/routes/api/activities/event/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { pool } from '$lib/services/userService.server';

export const POST: RequestHandler = async ({ request, locals }) => {
  const { eventType, referenceId, metadata } = await request.json();
  const userId = locals.user?.uid;
  if (!userId) return new Response(null, { status: 401 });

  const prevRes = await pool.query(
    'SELECT id FROM activities WHERE user_id=$1 ORDER BY timestamp_start DESC LIMIT 1',
    [userId]
  );
  const previousEventId = prevRes.rows[0]?.id || null;
  const now = Date.now();

  await pool.query(
    `INSERT INTO activities
       (user_id, event_type, reference_id, timestamp_start, timestamp_end, metadata, previous_event_id)
     VALUES ($1,$2,$3,$4,$4,$5,$6)`,
    [userId, eventType, referenceId, now, metadata, previousEventId]
  );

  return new Response(null, { status: 201 });
};===== ./src/routes/api/groups/join/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { joinGroup } from '$lib/services/groupService';

function getUserId(event: any): string | null {
  return event.locals?.user?.uid || null;
}

export const POST: RequestHandler = async (event) => {
  const userId = getUserId(event);
  if (!userId) {
    return new Response('Unauthorized', { status: 401 });
  }

  const { group_id } = await event.request.json();
  if (!group_id) {
    return new Response('Missing group_id', { status: 400 });
  }

  try {
    await joinGroup(group_id, userId);
    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (e) {
    console.error(e);
    return new Response('Failed to join group', { status: 500 });
  }
};
===== ./src/routes/api/groups/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { getAllGroups, createGroup } from '$lib/services/groupService';

function getUserId(event: any): string | null {
  return event.locals?.user?.uid || null;
}

export const GET: RequestHandler = async (event) => {
  const userId = getUserId(event);
  try {
    const groups = await getAllGroups(userId);
    return new Response(JSON.stringify(groups), { status: 200 });
  } catch (e) {
    console.error(e);
    return new Response('Failed to fetch groups', { status: 500 });
  }
};

export const POST: RequestHandler = async (event) => {
  const userId = getUserId(event);
  if (!userId) {
    return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 });
  }

  try {
    const { name, description, topic, image, is_public } = await event.request.json();
    if (!name || !description || !topic) {
      return new Response(JSON.stringify({ error: 'Missing required fields' }), { status: 400 });
    }

    const group = await createGroup({
      name,
      description,
      topic,
      image,
      is_public,
      created_by: userId
    });

    return new Response(JSON.stringify(group), { status: 201 });
  } catch (e) {
    console.error(e);
    return new Response(JSON.stringify({ error: 'Failed to create group' }), { status: 500 });
  }
};
===== ./src/routes/api/groups/leave/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { leaveGroup } from '$lib/services/groupService';

function getUserId(event: any): string | null {
  return event.locals?.user?.uid || null;
}

export const POST: RequestHandler = async (event) => {
  const userId = getUserId(event);
  if (!userId) {
    return new Response('Unauthorized', { status: 401 });
  }

  const { group_id } = await event.request.json();
  if (!group_id) {
    return new Response('Missing group_id', { status: 400 });
  }

  try {
    await leaveGroup(group_id, userId);
    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (e) {
    console.error(e);
    return new Response('Failed to leave group', { status: 500 });
  }
};
===== ./src/routes/api/groups/[id]/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { getGroupById } from '$lib/services/groupService';

export const GET: RequestHandler = async ({ params }) => {
  const groupId = params.id;
  if (!groupId) {
    return new Response(JSON.stringify({ error: 'Missing group id' }), { status: 400 });
  }

  try {
    const result = await getGroupById(groupId);
    if (!result) {
      return new Response(JSON.stringify({ error: 'Group not found' }), { status: 404 });
    }
    return new Response(JSON.stringify(result), { status: 200 });
  } catch (e) {
    console.error(e);
    return new Response(JSON.stringify({ error: 'Failed to fetch group' }), { status: 500 });
  }
};
===== ./src/routes/api/forum/topics/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { getAllTopics, createTopic, updateTopic, deleteTopic, getTopic } from '$lib/services/forums/forumService';

export const GET: RequestHandler = async ({ url }) => {
  const categoryId = url.searchParams.get('category_id');
  let topics;

  try {
    topics = await getAllTopics();
    if (categoryId) {
      topics = topics.filter(t => t.category_id === categoryId);
    }
    return new Response(JSON.stringify(topics), { status: 200 });
  } catch (error) {
    console.error('Error fetching topics:', error);
    return new Response('Failed to fetch topics', { status: 500 });
  }
};

export const POST: RequestHandler = async ({ request }) => {
  const { title, category_id, author_id, content } = await request.json();

  if (!title || !category_id || !author_id || !content) {
    const missing = [];
    if (!title) missing.push('title');
    if (!category_id) missing.push('category_id');
    if (!author_id) missing.push('author_id');
    if (!content) missing.push('content');
    return new Response(`Missing required fields: ${missing.join(', ')}`, { status: 400 });
  }

  try {
    const newTopic = await createTopic({ title, category_id, author_id, content });
    return new Response(JSON.stringify(newTopic), { status: 201 });
  } catch (error) {
    console.error('Error creating topic:', error);
    return new Response('Failed to create topic', { status: 500 });
  }
};

export const PUT: RequestHandler = async ({ request }) => {
  const { id, ...data } = await request.json();

  if (!id) {
    return new Response('Topic ID is required', { status: 400 });
  }

  try {
    const topic = await updateTopic(id, data);
    if (!topic) {
      return new Response('Topic not found', { status: 404 });
    }
    return new Response(JSON.stringify(topic), { status: 200 });
  } catch (error) {
    console.error('Error updating topic:', error);
    return new Response('Failed to update topic', { status: 500 });
  }
};

export const DELETE: RequestHandler = async ({ url }) => {
  const id = url.searchParams.get('id');

  if (!id) {
    return new Response('Topic ID is required', { status: 400 });
  }

  try {
    const result = await deleteTopic(id);
    if (!result) {
      return new Response('Topic not found', { status: 404 });
    }
    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (error) {
    console.error('Error deleting topic:', error);
    return new Response('Failed to delete topic', { status: 500 });
  }
};===== ./src/routes/api/forum/topics/[id]/vote/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { handleTopicVote } from '$lib/services/forums/topicService';

export const POST: RequestHandler = async ({ request, params }) => {
  const { user_id, vote_type } = await request.json();
  if (!user_id || ![1, -1].includes(vote_type)) {
    return new Response('Invalid vote payload', { status: 400 });
  }

  try {
    const result = await handleTopicVote(params.id, user_id, vote_type as 1 | -1);
    return new Response(JSON.stringify(result), { status: 200 });
  } catch (err) {
    console.error('Error processing vote:', err);
    return new Response('Failed to record vote', { status: 500 });
  }
};===== ./src/routes/api/forum/topics/[id]/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { updateTopic, deleteTopic } from '$lib/services/forums/forumService';
import { getTopic, createPost } from '$lib/services/forums/topicService';

export const PUT: RequestHandler = async ({ request, params }) => {
  const topicId = params.id;
  const data = await request.json();
  
  try {
    const updatedTopic = await updateTopic(topicId, {
      title: data.title,
      content: data.content,
      category_id: data.category_id,
      is_pinned: data.is_pinned,
      is_locked: data.is_locked
    });
    
    if (!updatedTopic) {
      return new Response(JSON.stringify({ message: 'Topic not found' }), { 
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify(updatedTopic), { 
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Error updating topic:', error);
    return new Response(JSON.stringify({ message: 'Failed to update topic' }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};

export const DELETE: RequestHandler = async ({ params }) => {
  const topicId = params.id;
  
  try {
    const success = await deleteTopic(topicId);
    
    if (!success) {
      return new Response(JSON.stringify({ message: 'Topic not found' }), { 
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify({ message: 'Topic deleted successfully' }), { 
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Error deleting topic:', error);
    return new Response(JSON.stringify({ message: 'Failed to delete topic' }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};

export async function GET({ params }) {
  const topic = await getTopic(params.id);
  return new Response(JSON.stringify(topic));
}

export async function POST({ params, request }) {
  const data = await request.json();
  const newPost = await createPost(params.id, data);
  return new Response(JSON.stringify(newPost));
}===== ./src/routes/api/forum/categories/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { createCategory, getAllCategories, updateCategory, deleteCategory } from '$lib/services/forums/forumService';

export const GET: RequestHandler = async () => {
  try {
    const categories = await getAllCategories();
    return new Response(JSON.stringify(categories), { status: 200 });
  } catch (error) {
    console.error('Error fetching categories:', error);
    return new Response('Failed to fetch categories', { status: 500 });
  }
};

export const POST: RequestHandler = async ({ request }) => {
  const data = await request.json();
  
  try {
    if (!data.name || !data.description || !data.icon || !data.color) {
      return new Response('Missing required fields', { status: 400 });
    }
    
    const newCategory = await createCategory(data);
    return new Response(JSON.stringify(newCategory), { status: 201 });
  } catch (error) {
    console.error('Error creating category:', error);
    return new Response('Failed to create category', { status: 500 });
  }
};

export const PUT: RequestHandler = async ({ request }) => {
  const { id, ...data } = await request.json();

  if (!id) {
    return new Response('Category ID is required', { status: 400 });
  }

  try {
    const updated = await updateCategory(id, data);
    if (!updated) {
      return new Response('Category not found', { status: 404 });
    }
    return new Response(JSON.stringify(updated), { status: 200 });
  } catch (error) {
    console.error('Error updating category:', error);
    return new Response('Failed to update category', { status: 500 });
  }
};

export const DELETE: RequestHandler = async ({ url }) => {
  const id = url.searchParams.get('id');

  if (!id) {
    return new Response('Category ID is required', { status: 400 });
  }

  try {
    const result = await deleteCategory(id);
    if (!result) {
      return new Response('Category not found', { status: 404 });
    }
    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (error) {
    if (error instanceof Error && error.message === 'Cannot delete category with topics') {
      return new Response('Cannot delete category that contains topics', { status: 400 });
    }
    console.error('Error deleting category:', error);
    return new Response('Failed to delete category', { status: 500 });
  }
};===== ./src/routes/api/forum/categories/[id]/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { updateCategory, deleteCategory } from '$lib/services/forums/forumService';

// Placeholder for categories API route

export const PUT: RequestHandler = async ({ request, params }) => {
  const categoryId = params.id;
  const data = await request.json();
  
  try {
    const updatedCategory = await updateCategory(categoryId, {
      name: data.name,
      description: data.description,
      icon: data.icon,
      color: data.color
    });
    
    if (!updatedCategory) {
      return new Response(JSON.stringify({ message: 'Category not found' }), { 
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify(updatedCategory), { 
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Error updating category:', error);
    return new Response(JSON.stringify({ message: 'Failed to update category' }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};

export const DELETE: RequestHandler = async ({ params }) => {
  const categoryId = params.id;
  
  try {
    const success = await deleteCategory(categoryId);
    
    if (!success) {
      return new Response(JSON.stringify({ message: 'Category not found' }), { 
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify({ message: 'Category deleted successfully' }), { 
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error: any) {
    console.error('Error deleting category:', error);
    // Check if the error is because there are topics in this category
    if (error.message && error.message.includes('Cannot delete category with topics')) {
      return new Response(JSON.stringify({ message: 'Cannot delete category that contains topics. Move or delete the topics first.' }), { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify({ message: 'Failed to delete category' }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};===== ./src/routes/api/forum/posts/+server.ts =====
import type { RequestHandler } from '@sveltejs/kit';
import { getPostsByTopicId, createPost, updatePost, deletePost } from '$lib/services/forums/forumService';

// Placeholder for posts API route

export const GET: RequestHandler = async ({ url }) => {
  const topicId = url.searchParams.get('topic_id');
  
  if (!topicId) {
    return new Response('Topic ID is required', { status: 400 });
  }

  try {
    const posts = await getPostsByTopicId(topicId);
    return new Response(JSON.stringify(posts), { status: 200 });
  } catch (error) {
    console.error('Error fetching posts:', error);
    return new Response('Failed to fetch posts', { status: 500 });
  }
};

export const POST: RequestHandler = async ({ request }) => {
  const { topic_id, author_id, content } = await request.json();

  if (!topic_id || !author_id || !content) {
    return new Response('Missing required fields', { status: 400 });
  }

  try {
    const post = await createPost({ topic_id, author_id, content });
    return new Response(JSON.stringify(post), { status: 201 });
  } catch (error) {
    console.error('Error creating post:', error);
    return new Response('Failed to create post', { status: 500 });
  }
};

export const PUT: RequestHandler = async ({ request }) => {
  const { id, content } = await request.json();

  if (!id || !content) {
    return new Response('Missing required fields', { status: 400 });
  }

  try {
    const post = await updatePost(id, content);
    if (!post) {
      return new Response('Post not found', { status: 404 });
    }
    return new Response(JSON.stringify(post), { status: 200 });
  } catch (error) {
    console.error('Error updating post:', error);
    return new Response('Failed to update post', { status: 500 });
  }
};

export const DELETE: RequestHandler = async ({ url }) => {
  const id = url.searchParams.get('id');

  if (!id) {
    return new Response('Post ID is required', { status: 400 });
  }

  try {
    const result = await deletePost(id);
    if (!result) {
      return new Response('Post not found', { status: 404 });
    }
    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (error) {
    console.error('Error deleting post:', error);
    return new Response('Failed to delete post', { status: 500 });
  }
};===== ./src/routes/register/+page.svelte =====
<script lang="ts">
  import Register from '$lib/components/Register.svelte';
  import { isAuthenticated, loading } from '$lib/stores/authStore.js';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';

  onMount(() => {
    // Redirect to home if already authenticated
    if ($isAuthenticated) {
      goto('/');
    }
  });
</script>

<svelte:head>
  <title>Sign Up - LearnFlow</title>
</svelte:head>

<div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
  {#if $loading}
    <div class="flex flex-col items-center justify-center">
      <div class="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
    </div>
  {:else}
    <Register />
  {/if}
</div> ===== ./src/routes/category/[slug]/+page.svelte =====
<script lang="ts">
  export let data: { slug: string, categoryName: string };
</script>

<svelte:head>
  <title>LearnFlow | Category: {data.categoryName}</title>
</svelte:head>

<div class="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
  <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-6">Category: {data.categoryName}</h1>
  <p class="text-gray-600 dark:text-gray-300">Courses and content related to '{data.slug}' will be listed here. (Placeholder)</p>
  <!-- Add category content listing logic here -->
</div> ===== ./src/routes/category/[slug]/+page.ts =====
import type { PageLoad } from './$types';

// Simple mapping for demonstration. You might fetch this from an API or a more structured source.
const categoryMap: Record<string, string> = {
    cs: 'Computer Science',
    math: 'Mathematics',
    languages: 'Languages',
    science: 'Science'
};

// Explicitly type params using the PageLoad generic or an inline type
export const load: PageLoad = ({ params }: { params: { slug: string } }) => {
    const slug = params.slug;
    const categoryName = categoryMap[slug] || 'Unknown Category'; // Provide a fallback name

    return {
        slug: slug,
        categoryName: categoryName
    };
}; ===== ./src/routes/+page.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import WelcomeBanner from '$lib/components/WelcomeBanner.svelte';
  import ProgressMetrics from '$lib/components/ProgressMetrics.svelte';
  import CourseCarousel from '$lib/components/courses/CourseCarousel.svelte';
  import ExercisesSection from '$lib/components/courses/exercise/ExercisesSection.svelte';
  import RecentActivity from '$lib/components/RecentActivity.svelte';
  import { isAuthenticated, user, loading as authLoading } from '$lib/stores/authStore.js';
  import GeneralWelcome from '$lib/components/GeneralWelcome.svelte';
  import { userProfile, userProfileLoading } from '$lib/stores/userProfileStore.js';
  import { focusSessions, todos } from '$lib/stores/pipStores';
  import FocusTimeChart from '$lib/components/FocusTimeChart.svelte';
  import { logStart, logEnd } from '$lib/services/activityService';
  import RecommendationsSection from '$lib/components/RecommendationsSection.svelte';
  import ScoreCard from '$lib/components/ScoreCard.svelte';
  import type { PageData } from './$types';

  export let data: PageData;
  $: suggestedCourses = data.suggestedCourses || [];

  type Metric = { title: string; value: string; icon: string; color: string };
  let metrics: Metric[] = [];
  let dashboardEventId: string | null = null;

  onMount(async () => {
    dashboardEventId = await logStart('view_dashboard', 'dashboard');
    const updateMetrics = () => {
      if ($isAuthenticated && $userProfile) {
        const enrollments: any[] = $userProfile.preferences?.enrollments || [];
        const inProgress = enrollments.filter((e: any) => e.progress > 0 && e.progress < 100).length;
        const completed = enrollments.filter((e: any) => e.progress === 100).length;
        const sessions = $focusSessions;
        const sessionCount = sessions.length;
        const totalFocus = sessions.reduce((sum: number, s: any) => sum + (s.duration || 0) / 60, 0).toFixed(0);
        const tasksDone = $todos.filter((t: any) => t.completed).length;
        metrics = [
          { title: 'Courses In Progress', value: String(inProgress), icon: 'fa-book', color: 'indigo' },
          { title: 'Courses Completed', value: String(completed), icon: 'fa-award', color: 'green' },
          { title: 'Focus Sessions', value: String(sessionCount), icon: 'fa-stopwatch', color: 'yellow' },
          { title: 'Total Focus Time (min)', value: totalFocus, icon: 'fa-clock', color: 'purple' },
          { title: 'Tasks Completed', value: String(tasksDone), icon: 'fa-list-check', color: 'blue' }
        ];
      }
    };

    updateMetrics();

    const unsubscribeUserProfile = userProfile.subscribe(updateMetrics);
    const unsubscribeFocusSessions = focusSessions.subscribe(updateMetrics);
    const unsubscribeTodos = todos.subscribe(updateMetrics);

    return () => {
      unsubscribeUserProfile();
      unsubscribeFocusSessions();
      unsubscribeTodos();
    };
  });

  onDestroy(() => {
    if (dashboardEventId) {
      logEnd(dashboardEventId);
    }
  });
</script>

<svelte:head>
  <title>LearnFlow | Your Dashboard</title>
  <meta name="description" content="Your personalized learning dashboard on LearnFlow." />
</svelte:head>

<div class="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
  {#if $authLoading || $userProfileLoading}
    <div class="flex justify-center items-center min-h-[60vh]"><i class="fas fa-spinner fa-spin text-4xl text-indigo-500"></i></div>
  {:else if $isAuthenticated && $userProfile}
    <WelcomeBanner username={$user ? ($user.displayName ?? $user.email ?? '') : ''} />

    <ProgressMetrics {metrics} />

    <div class="mb-8">
      <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">Focus Time Log</h2>
      <FocusTimeChart sessions={$focusSessions} timeUnit="day" />
    </div>

    <div class="mb-8">
      <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">Quick Actions</h2>
      <div class="flex flex-col gap-4 w-full">
        <CourseCarousel title="Suggested Courses" items={suggestedCourses} />
        <ExercisesSection limit={5} />
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow min-h-[140px] flex flex-col items-center justify-center text-center transition hover:shadow-xl hover:ring-2 hover:ring-indigo-300 w-full">
          <h3 class="text-lg font-semibold mb-2">Your Tasks</h3>
          <p class="text-gray-600 dark:text-gray-300">Manage your study tasks.</p>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow min-h-[140px] flex flex-col items-center justify-center text-center transition hover:shadow-xl hover:ring-2 hover:ring-indigo-300 w-full">
          <h3 class="text-lg font-semibold mb-2">Your Notes</h3>
          <p class="text-gray-600 dark:text-gray-300">Jot down quick thoughts.</p>
        </div>
      </div>
    </div>

    <ScoreCard />

    <RecommendationsSection limit={5} />

    <RecentActivity />

  {:else}
    <GeneralWelcome />
  {/if}
</div>
===== ./src/routes/tools/notepad/+page.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import { notepadContent } from '$lib/stores/pipStores';
  import MarkdownRenderer from '$lib/components/MarkdownRendererComponent.svelte';
  import { logStart, logEnd } from '$lib/services/activityService';

  // Bind directly to the persistent store
  let note = '';
  const unsubscribe = notepadContent.subscribe(value => note = value);

  let saved = false;
  let showSaveAnim = false;
  let notepadViewId: string | null = null;
  let showPreview = true;

  onMount(async () => {
    notepadViewId = await logStart('view_notepad', 'notepad');
  });

  onDestroy(() => {
    if (notepadViewId) logEnd(notepadViewId);
    unsubscribe();
  });

  function saveNote() {
    notepadContent.set(note);
    saved = true;
    showSaveAnim = true;
    setTimeout(() => showSaveAnim = false, 1200);
    setTimeout(() => saved = false, 2000);
  }

  function clearNote() {
    note = '';
    notepadContent.set('');
  }

  function handleInput() {
    saved = false;
  }

  function togglePreview() {
    showPreview = !showPreview;
  }
</script>

<svelte:head>
  <title>Notepad | LearnFlow</title>
</svelte:head>

<div class="max-w-4xl mx-auto px-4 py-10">
  <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
    <i class="fas fa-sticky-note mr-3 text-yellow-400"></i> Notepad
  </h1>
  <p class="text-gray-600 dark:text-gray-300 mb-6">Jot down notes, ideas, or summaries. Supports <span class="font-semibold">Markdown</span> with live preview!</p>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="flex flex-col">
      <label class="mb-2 text-sm font-medium text-gray-700 dark:text-gray-200" for="notepad">Your Notes</label>
      <textarea
        id="notepad"
        class="w-full h-64 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-4 font-mono text-base shadow focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 resize-vertical transition"
        bind:value={note}
        on:input={handleInput}
        placeholder="Write your notes here..."
      ></textarea>
      <div class="flex space-x-2 mt-4">
        <button class="px-4 py-2 bg-indigo-600 text-white rounded-md font-semibold shadow hover:bg-indigo-700 transition" on:click={saveNote}>
          <i class="fas fa-save mr-2"></i> Save
        </button>
        <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md font-semibold shadow hover:bg-gray-300 transition" on:click={clearNote}>
          <i class="fas fa-eraser mr-2"></i> Clear
        </button>
        <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md font-semibold shadow hover:bg-gray-300 transition" on:click={togglePreview}>
          Toggle Preview
        </button>
        {#if showSaveAnim}
          <span class="ml-2 animate-bounce text-green-500 text-xl">✔️</span>
        {/if}
        {#if saved && !showSaveAnim}
          <span class="ml-2 text-green-500 text-sm">Saved!</span>
        {/if}
      </div>
    </div>
    {#if showPreview}
      <div>
        <label class="mb-2 text-sm font-medium text-gray-700 dark:text-gray-200 block">Live Preview</label>
        <div class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg p-4 h-64 overflow-auto shadow-inner prose dark:prose-invert">
          <MarkdownRenderer content={note} />
        </div>
      </div>
    {/if}
  </div>
</div>

<style>
  .animate-bounce {
    animation: bounce 0.7s infinite alternate;
  }
  @keyframes bounce {
    0% { transform: translateY(0); }
    100% { transform: translateY(-10px); }
  }
</style>
===== ./src/routes/tools/+page.svelte =====
<script>
  import { onMount, onDestroy } from 'svelte';
  import { logStart, logEnd, logEvent } from '$lib/services/activityService';

  const tools = [
    { name: 'Pomodoro Timer', path: '/tools/pomodoro', icon: 'fa-clock' },
    { name: 'Notepad', path: '/tools/notepad', icon: 'fa-sticky-note' },
    { name: 'Tasks', path: '/tools/tasks', icon: 'fa-list-check' },
    { name: 'AI Study Chat', path: '/tools/chat', icon: 'fa-robot' },
    { name: 'Flashcards', path: '/tools/flashcards', icon: 'fa-layer-group' },
    { name: 'Calculator', path: '/tools/calculator', icon: 'fa-calculator' },
    { name: 'Dictionary', path: '/tools/dictionary', icon: 'fa-book' }
  ];

  let toolsViewId = null;

  onMount(async () => {
    toolsViewId = await logStart('view_tools', 'toolsOverview');
  });
  onDestroy(() => {
    if (toolsViewId) logEnd(toolsViewId);
  });

  function selectTool(path) {
    logEvent('view_tool', path);
  }
</script>

<svelte:head>
  <title>Productivity Tools | LearnFlow</title>
</svelte:head>

<div class="max-w-4xl mx-auto px-4 py-10">
  <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-6">Productivity & Focus Tools</h1>
  <p class="text-gray-600 dark:text-gray-300 mb-8">Boost your study sessions with these integrated tools.</p>
  <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
    {#each tools as tool}
      <a href={tool.path} on:click={() => selectTool(tool.path)} class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex items-center space-x-4 hover:shadow-lg transition">
        <i class={`fas ${tool.icon} text-3xl text-indigo-500`}></i>
        <span class="text-lg font-medium text-gray-900 dark:text-white">{tool.name}</span>
      </a>
    {/each}
  </div>
</div>
===== ./src/routes/tools/dictionary/+page.svelte =====
<!-- filepath: /home/linux/learnflow-app/learnflow-app/src/routes/tools/dictionary/+page.svelte -->
<script lang="ts">
  import { persistentStore } from '$lib/stores/persistentStore';

  interface DictionaryEntry {
    word: string;
    timestamp: number;
  }

  const searchHistory = persistentStore<DictionaryEntry[]>('learnflow-dictionary-history', []);
  let searchTerm = '';
  let searching = false;
  let result: any = null;
  let error: string | null = null;
  let audioUrl: string | null = null;
  let synonyms: string[] = [];
  let antonyms: string[] = [];

  async function searchWord(term: string) {
    if (!term.trim()) return;
    
    searching = true;
    error = null;
    result = null;
    audioUrl = null;
    synonyms = [];
    antonyms = [];
    
    try {
      // Dictionary lookup
      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(term)}`);
      if (!response.ok) throw new Error('Word not found');
      const data = await response.json();
      result = data[0];
      
      // Get audio URL if available
      const phonetics = result.phonetics || [];
      for (const phonetic of phonetics) {
        if (phonetic.audio) {
          audioUrl = phonetic.audio;
          break;
        }
      }
      
      // Add to search history
      searchHistory.update(history => {
        const newHistory = [
          { word: term, timestamp: Date.now() },
          ...history.filter(entry => entry.word !== term)
        ].slice(0, 10); // Keep only last 10 searches
        return newHistory;
      });
      
      // Try to get synonyms and antonyms
      try {
        const thesaurusResponse = await fetch(`https://api.datamuse.com/words?rel_syn=${encodeURIComponent(term)}`);
        const synData = await thesaurusResponse.json();
        synonyms = synData.slice(0, 5).map(s => s.word);
        
        const antonymResponse = await fetch(`https://api.datamuse.com/words?rel_ant=${encodeURIComponent(term)}`);
        const antData = await antonymResponse.json();
        antonyms = antData.slice(0, 5).map(a => a.word);
      } catch (e) {
        console.error('Error fetching synonyms/antonyms:', e);
      }
      
    } catch (e: any) {
      error = e.message;
    } finally {
      searching = false;
    }
  }

  function playAudio() {
    if (audioUrl) {
      new Audio(audioUrl).play();
    }
  }

  function handleSubmit() {
    if (searchTerm.trim()) {
      searchWord(searchTerm);
    }
  }

  function formatDate(timestamp: number): string {
    return new Date(timestamp).toLocaleString();
  }

  // Handle keyboard shortcuts
  function handleKeydown(event: KeyboardEvent) {
    // Ctrl/Cmd + / to focus search
    if ((event.ctrlKey || event.metaKey) && event.key === '/') {
      event.preventDefault();
      const searchInput = document.querySelector<HTMLInputElement>('#word-search');
      if (searchInput) {
        searchInput.focus();
      }
    }
  }

  onMount(() => {
    window.addEventListener('keydown', handleKeydown);
    return () => {
      window.removeEventListener('keydown', handleKeydown);
    };
  });
</script>

<svelte:head>
  <title>Dictionary & Reference | LearnFlow</title>
</svelte:head>

<div class="max-w-4xl mx-auto px-4 py-10">
  <div class="flex justify-between items-start mb-8">
    <div>
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2 flex items-center">
        <i class="fas fa-book mr-3 text-cyan-500"></i> Dictionary & Reference
      </h1>
      <p class="text-gray-600 dark:text-gray-400">Look up definitions, pronunciations, and related words</p>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <!-- Main Search and Results -->
    <div class="lg:col-span-3">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg mb-6">
        <form on:submit|preventDefault={handleSubmit}>
          <div class="flex gap-2">
            <div class="flex-1 relative">
              <input
                id="word-search"
                type="text"
                bind:value={searchTerm}
                placeholder="Enter a word to look up..."
                class="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500"
              >
              <div class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 dark:text-gray-500 pointer-events-none">
                <kbd class="px-2 py-1 text-xs rounded border border-gray-300 dark:border-gray-600">Ctrl</kbd>
                <span class="mx-1">+</span>
                <kbd class="px-2 py-1 text-xs rounded border border-gray-300 dark:border-gray-600">/</kbd>
              </div>
            </div>
            <button
              type="submit"
              class="px-6 py-3 bg-cyan-600 text-white rounded-lg hover:bg-cyan-700 transition flex items-center disabled:opacity-50"
              disabled={searching || !searchTerm.trim()}
            >
              {#if searching}
                <i class="fas fa-spinner fa-spin mr-2"></i> Searching...
              {:else}
                <i class="fas fa-search mr-2"></i> Search
              {/if}
            </button>
          </div>
        </form>
      </div>

      {#if error}
        <div class="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg text-center">
          <i class="fas fa-exclamation-circle text-3xl text-red-500 mb-4"></i>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Word Not Found</h3>
          <p class="text-gray-600 dark:text-gray-400">{error}</p>
        </div>
      {:else if result}
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
          <div class="flex items-baseline gap-4 mb-6">
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white">{result.word}</h2>
            {#if result.phonetic}
              <div class="flex items-center gap-2">
                <span class="text-lg text-gray-500 dark:text-gray-400">{result.phonetic}</span>
                {#if audioUrl}
                  <button
                    on:click={playAudio}
                    class="p-2 text-cyan-600 hover:text-cyan-700 transition"
                    title="Listen to pronunciation"
                  >
                    <i class="fas fa-volume-up"></i>
                  </button>
                {/if}
              </div>
            {/if}
          </div>

          {#if result.meanings?.length > 0}
            <div class="space-y-6">
              {#each result.meanings as meaning}
                <div>
                  <h3 class="text-lg font-semibold text-cyan-600 dark:text-cyan-400 mb-3">
                    {meaning.partOfSpeech}
                  </h3>
                  <ul class="space-y-4">
                    {#each meaning.definitions as def, i}
                      <li>
                        <div class="flex gap-2">
                          <span class="text-gray-400 shrink-0">{i + 1}.</span>
                          <div>
                            <p class="text-gray-900 dark:text-gray-100">{def.definition}</p>
                            {#if def.example}
                              <p class="text-gray-600 dark:text-gray-400 italic mt-1">"{def.example}"</p>
                            {/if}
                          </div>
                        </div>
                      </li>
                    {/each}
                  </ul>
                </div>
              {/each}
            </div>
          {/if}

          {#if synonyms.length > 0 || antonyms.length > 0}
            <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
              {#if synonyms.length > 0}
                <div class="mb-4">
                  <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Synonyms</h3>
                  <div class="flex flex-wrap gap-2">
                    {#each synonyms as syn}
                      <button
                        class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-sm hover:bg-gray-200 dark:hover:bg-gray-600 transition"
                        on:click={() => {
                          searchTerm = syn;
                          searchWord(syn);
                        }}
                      >
                        {syn}
                      </button>
                    {/each}
                  </div>
                </div>
              {/if}

              {#if antonyms.length > 0}
                <div>
                  <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Antonyms</h3>
                  <div class="flex flex-wrap gap-2">
                    {#each antonyms as ant}
                      <button
                        class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-sm hover:bg-gray-200 dark:hover:bg-gray-600 transition"
                        on:click={() => {
                          searchTerm = ant;
                          searchWord(ant);
                        }}
                      >
                        {ant}
                      </button>
                    {/each}
                  </div>
                </div>
              {/if}
            </div>
          {/if}
        </div>
      {:else}
        <div class="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg text-center">
          <i class="fas fa-search text-4xl text-gray-400 dark:text-gray-600 mb-4"></i>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Ready to Look Up Words</h3>
          <p class="text-gray-600 dark:text-gray-400">Enter a word in the search box above to get started</p>
        </div>
      {/if}
    </div>

    <!-- Search History Sidebar -->
    <div class="lg:col-span-1">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg sticky top-4">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Recent Searches</h3>
        {#if $searchHistory.length === 0}
          <p class="text-gray-500 dark:text-gray-400 text-sm">No recent searches</p>
        {:else}
          <div class="space-y-3">
            {#each $searchHistory as entry}
              <button
                class="w-full text-left p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition group"
                on:click={() => {
                  searchTerm = entry.word;
                  searchWord(entry.word);
                }}
              >
                <div class="text-gray-900 dark:text-gray-100 font-medium group-hover:text-cyan-600 dark:group-hover:text-cyan-400">
                  {entry.word}
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-400">
                  {formatDate(entry.timestamp)}
                </div>
              </button>
            {/each}
          </div>
        {/if}
      </div>
    </div>
  </div>
</div>===== ./src/routes/tools/workspace/+page.svelte =====
<script lang="ts">
  import Timer from '$lib/components/Timer.svelte';
  import StickyNotes from '$lib/components/StickyNotes.svelte';
  import Quotes from '$lib/components/Quotes.svelte';
</script>

<svelte:head>
  <title>Workspace | LearnFlow</title>
</svelte:head>

<div class="max-w-5xl mx-auto px-4 py-8 grid grid-cols-1 sm:grid-cols-2 gap-8">
  <!-- Timer Card -->
  <div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center">
        <i class="fas fa-stopwatch text-xl text-gray-800 dark:text-gray-200 mr-2"></i>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Timer</h2>
      </div>
      <div class="p-6">
        <Timer />
      </div>
    </div>
  </div>

  <!-- Sticky Notes Card -->
  <div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center">
        <i class="fas fa-sticky-note text-xl text-gray-800 dark:text-gray-200 mr-2"></i>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Sticky Notes</h2>
      </div>
      <div class="p-6">
        <StickyNotes />
      </div>
    </div>
  </div>

  <!-- YouTube Video Card -->
  <div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center">
        <i class="fas fa-video text-xl text-gray-800 dark:text-gray-200 mr-2"></i>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Tutorial Video</h2>
      </div>
      <div class="relative w-full" style="padding-top:56.25%">
        <iframe
          class="absolute top-0 left-0 w-full h-full"
          src="https://www.youtube.com/embed/8iP3J8jFYdM"
          title="Chill beats - Study Music"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
        ></iframe>
      </div>
    </div>
  </div>

  <!-- Motivational Quote Card -->
  <div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center">
        <i class="fas fa-lightbulb text-xl text-gray-800 dark:text-gray-200 mr-2"></i>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Quote</h2>
      </div>
      <div class="p-6">
        <Quotes />
      </div>
    </div>
  </div>
</div>===== ./src/routes/tools/pomodoro/+page.svelte =====
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import { tick } from 'svelte';
  import { logStart, logEnd, logEvent } from '$lib/services/activityService';

  // Pomodoro settings
  const WORK_MIN = 25;
  const BREAK_MIN = 5;
  const LONG_BREAK_MIN = 15;
  const CYCLES_BEFORE_LONG = 4;

  let minutes = WORK_MIN;
  let seconds = 0;
  let isRunning = false;
  let isWork = true;
  let cycle = 1;
  let interval: any = null;
  let completedCycles = 0;
  let showConfetti = false;
  let pomodoroEventId: string | null = null;

  onMount(async () => {
    pomodoroEventId = await logStart('view_pomodoro', 'pomodoro');
    resetTimer();
  });

  onDestroy(() => {
    if (pomodoroEventId) logEnd(pomodoroEventId);
  });

  function startTimer() {
    logEvent('start_pomodoro', 'pomodoro');
    if (!isRunning) {
      isRunning = true;
      interval = setInterval(tickTimer, 1000);
    }
  }

  function pauseTimer() {
    logEvent('pause_pomodoro', 'pomodoro');
    isRunning = false;
    clearInterval(interval);
  }

  function resetTimer() {
    logEvent('reset_pomodoro', 'pomodoro');
    pauseTimer();
    minutes = isWork ? WORK_MIN : (cycle % CYCLES_BEFORE_LONG === 0 ? LONG_BREAK_MIN : BREAK_MIN);
    seconds = 0;
  }

  async function completeSession() {
    logEvent('complete_session', 'pomodoro', { isWork });
    pauseTimer();
    showConfetti = true;
    await tick();
    setTimeout(() => showConfetti = false, 2000);
    if (isWork) {
      completedCycles++;
      isWork = false;
      minutes = (cycle % CYCLES_BEFORE_LONG === 0) ? LONG_BREAK_MIN : BREAK_MIN;
      cycle++;
    } else {
      isWork = true;
      minutes = WORK_MIN;
    }
    seconds = 0;
  }

  function tickTimer() {
    if (seconds === 0) {
      if (minutes === 0) {
        completeSession();
        return;
      } else {
        minutes--;
        seconds = 59;
      }
    } else {
      seconds--;
    }
  }

  // Format time as MM:SS
  $: timeStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
</script>

<svelte:head>
  <title>Pomodoro Timer | LearnFlow</title>
</svelte:head>

<div class="flex flex-col items-center justify-center min-h-[60vh] py-10">
  <div class="relative mb-8">
    <!-- Animated tomato/progress ring -->
    <svg width="180" height="180" viewBox="0 0 180 180">
      <circle cx="90" cy="90" r="80" fill="#f3f4f6" />
      <circle
        cx="90" cy="90" r="80"
        fill="none" stroke="#f87171" stroke-width="14"
        stroke-dasharray="502"
        stroke-dashoffset={isWork ? 502 - (502 * ((WORK_MIN*60 - (minutes*60+seconds)) / (WORK_MIN*60))) : 502 - (502 * ((cycle % CYCLES_BEFORE_LONG === 0 ? LONG_BREAK_MIN : BREAK_MIN)*60 - (minutes*60+seconds)) / ((cycle % CYCLES_BEFORE_LONG === 0 ? LONG_BREAK_MIN : BREAK_MIN)*60))}
        stroke-linecap="round"
        style="transition: stroke-dashoffset 0.5s linear;"
      />
      <!-- Tomato face -->
      <circle cx="90" cy="90" r="60" fill="#f87171" />
      <ellipse cx="90" cy="70" rx="18" ry="10" fill="#34d399" />
      <ellipse cx="80" cy="100" rx="6" ry="8" fill="#fff" />
      <ellipse cx="100" cy="100" rx="6" ry="8" fill="#fff" />
      <ellipse cx="80" cy="102" rx="2" ry="3" fill="#222" />
      <ellipse cx="100" cy="102" rx="2" ry="3" fill="#222" />
      <path d="M80 115 Q90 125 100 115" stroke="#222" stroke-width="3" fill="none" />
    </svg>
    {#if showConfetti}
      <div class="absolute inset-0 flex items-center justify-center pointer-events-none animate-bounce">
        <span class="text-5xl">🎉</span>
      </div>
    {/if}
    <div class="absolute inset-0 flex flex-col items-center justify-center">
      <span class="text-5xl font-mono font-bold text-gray-900 dark:text-white drop-shadow">{timeStr}</span>
      <span class="mt-2 text-lg font-semibold {isWork ? 'text-red-500' : 'text-green-500'}">
        {isWork ? 'Work' : (cycle % CYCLES_BEFORE_LONG === 0 ? 'Long Break' : 'Break')}
      </span>
    </div>
  </div>
  <div class="flex space-x-4 mb-6">
    <button class="px-6 py-2 rounded-lg bg-indigo-600 text-white font-bold shadow hover:bg-indigo-700 transition" on:click={startTimer} disabled={isRunning}>
      <i class="fas fa-play mr-2"></i> Start
    </button>
    <button class="px-6 py-2 rounded-lg bg-yellow-400 text-white font-bold shadow hover:bg-yellow-500 transition" on:click={pauseTimer} disabled={!isRunning}>
      <i class="fas fa-pause mr-2"></i> Pause
    </button>
    <button class="px-6 py-2 rounded-lg bg-gray-300 text-gray-700 font-bold shadow hover:bg-gray-400 transition" on:click={resetTimer}>
      <i class="fas fa-redo mr-2"></i> Reset
    </button>
  </div>
  <div class="flex items-center space-x-6 mt-2">
    <span class="text-sm text-gray-500">Cycle: <span class="font-bold text-indigo-600">{cycle}</span></span>
    <span class="text-sm text-gray-500">Completed: <span class="font-bold text-green-500">{completedCycles}</span></span>
  </div>
  <div class="mt-8 text-center text-gray-400 text-xs">
    <span>Stay focused! Every 4 cycles, enjoy a longer break 🍅</span>
  </div>
</div>

<style>
  .animate-bounce {
    animation: bounce 1s infinite alternate;
  }
  @keyframes bounce {
    0% { transform: translateY(0); }
    100% { transform: translateY(-20px); }
  }
</style>
===== ./src/routes/tools/chat/+page.svelte =====
<script lang="ts">
  import { onMount, onDestroy, afterUpdate } from 'svelte';
  import { writable } from 'svelte/store';
  import MarkdownIt from 'markdown-it';
  import markdownItKatex from 'markdown-it-katex';
  // Set up Markdown-It with KaTeX for math rendering
  const md = new MarkdownIt({ html: true }).use(markdownItKatex);
  import { logStart, logEnd, logEvent } from '$lib/services/activityService';

  const API_URL = 'https://openrouter.ai/api/v1/chat/completions';
  const API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;
  const SITE_URL = import.meta.env.VITE_SITE_URL || location.origin;
  const SITE_NAME = import.meta.env.VITE_SITE_NAME || 'LearnFlow';

  type Role = 'user' | 'assistant';
  interface ChatMessage { role: Role; text: string; }

  const modes = [
    { id: 'assist', label: 'Assist Mode', model: 'deepseek/deepseek-prover-v2:free' },
    { id: 'support', label: 'Support Mode', model: 'google/gemini-2.5-pro-exp-03-25:free' }
  ];

  let mode = 'assist';
  let messages: ChatMessage[] = [];
  let input = '';
  let loading = false;
  let error = '';
  let chatWindow: HTMLElement;
  let chatViewEventId: string | null = null;

  onMount(async () => {
    chatViewEventId = await logStart('view_chat', 'chat');
  });

  onDestroy(() => {
    if (chatViewEventId) logEnd(chatViewEventId);
  });

  afterUpdate(() => {
    if (chatWindow) {
      chatWindow.scrollTop = chatWindow.scrollHeight;
    }
  });

  async function send() {
    if (!input.trim()) return;
    await logEvent('send_message', 'chat', { content: input });
    // add user message
    messages = [...messages, { role: 'user', text: input }];
    const userContent = input;
    input = '';
    loading = true;
    error = '';
    const selected = modes.find(m => m.id === mode);
    try {
      // Build request with full chat history for context (memory)
      // Include full history and enable streaming
      const body = {
        model: selected.model,
        stream: true,
        messages: messages.map(msg => ({ role: msg.role, content: [{ type: 'text', text: msg.text }] }))
      };
      const res = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${API_KEY}`,
          'HTTP-Referer': SITE_URL,
          'X-Title': SITE_NAME,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });
      if (!res.ok) throw new Error(await res.text());
      // Prepare streaming of assistant reply
      messages = [...messages, { role: 'assistant', text: '' }];
      const assistantIndex = messages.length - 1;
      const reader = res.body.getReader();
      const decoder = new TextDecoder();
      let buffer = '';
      let done = false;
      while (!done) {
        const { value, done: readerDone } = await reader.read();
        done = readerDone;
        buffer += decoder.decode(value || new Uint8Array(), { stream: true });
        let boundary;
        while ((boundary = buffer.indexOf('\n\n')) !== -1) {
          const eventStr = buffer.slice(0, boundary);
          buffer = buffer.slice(boundary + 2);
          for (const line of eventStr.split(/\r?\n/)) {
            if (!line.startsWith('data: ')) continue;
            const dataStr = line.slice(6).trim();
            if (dataStr === '[DONE]') { done = true; break; }
            try {
              const json = JSON.parse(dataStr);
              const delta = json.choices?.[0]?.delta || {};
              const content = delta.content || delta.text || '';
              if (content) {
                messages[assistantIndex].text += content;
                messages = messages.slice();
              }
            } catch {
              // skip invalid JSON
            }
          }
        }
      }
    } catch (e:any) {
      console.error(e);
      error = e.message || 'Error fetching AI response';
    } finally {
      loading = false;
    }
  }
</script>

<svelte:head>
  <title>AI Study Chat | LearnFlow</title>
</svelte:head>

<div class="max-w-2xl mx-auto px-4 py-10 flex flex-col h-[75vh]">
  <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">AI Study Chat</h1>
  <div class="flex space-x-4 mb-4">
    {#each modes as m}
      <button
        class="px-4 py-2 rounded-lg font-semibold transition 
          {mode === m.id 
            ? 'bg-indigo-600 text-white' 
            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600'}"
        on:click={() => mode = m.id}
      >{m.label}</button>
    {/each}
  </div>
  <div bind:this={chatWindow} class="flex-1 overflow-y-auto space-y-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-inner" id="chat-window">
    {#each messages as msg}
      <div class="flex {msg.role === 'assistant' ? 'justify-start' : 'justify-end'}">
        <div class="max-w-[80%] p-3 prose dark:prose-invert 
          {msg.role === 'assistant'
            ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-tr-xl rounded-br-xl rounded-tl-xl'
            : 'bg-indigo-600 dark:bg-indigo-500 text-white rounded-tl-xl rounded-bl-xl rounded-br-xl'}">
          {@html md.render(msg.text)}
        </div>
      </div>
    {/each}
    {#if loading}
      <div class="flex justify-start mb-3">
        <div class="loading-dot bg-gray-400 dark:bg-gray-600"></div>
        <div class="loading-dot bg-gray-400 dark:bg-gray-600"></div>
        <div class="loading-dot bg-gray-400 dark:bg-gray-600"></div>
      </div>
    {/if}
    {#if error}
      <div class="text-red-500 text-sm">{error}</div>
    {/if}
  </div>
  <div class="mt-4 flex">
    <textarea
      class="flex-1 rounded-lg border border-gray-300 dark:border-gray-600 p-2 resize-none focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
      rows="2"
      bind:value={input}
      placeholder="Type your question..."
      on:keydown={e => e.key === 'Enter' && !e.shiftKey && (e.preventDefault(), send())}
    ></textarea>
    <button
      class="ml-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow transition disabled:opacity-50"
      on:click={send}
      disabled={loading || !input.trim()}
    >Send</button>
  </div>
</div>

<style>
  #chat-window {
    scrollbar-width: thin;
  }
  #chat-window::-webkit-scrollbar {
    width: 6px;
  }
  #chat-window::-webkit-scrollbar-thumb {
    background-color: rgba(100,100,100,0.4);
    border-radius: 3px;
  }
  .loading-dot {
    width: 8px;
    height: 8px;
    margin-right: 4px;
    border-radius: 50%;
    animation: blink 1s infinite ease-in-out;
  }
  .loading-dot:nth-child(2) { animation-delay: 0.2s }
  .loading-dot:nth-child(3) { animation-delay: 0.4s }
  @keyframes blink {
    0%, 80%, 100% { opacity: 0 }
    40% { opacity: 1 }
  }
</style>
===== ./src/routes/tools/calculator/+page.svelte =====
<script lang="ts">
  import { calcDisplay, calcCurrentInput, calcOperator, calcPreviousValue, calcWaitingForSecondOperand } from '$lib/stores/pipStores';
  import { onMount, onDestroy } from 'svelte';

  let scientificMode = false;
  let showHistory = false;
  let calculationHistory: string[] = [];
  let angleMode: 'deg' | 'rad' = 'deg';

  onMount(() => {
    window.addEventListener('keydown', handleKeydown);
  });

  onDestroy(() => {
    window.removeEventListener('keydown', handleKeydown);
  });

  function inputDigit(digit: string) {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set(digit);
      calcWaitingForSecondOperand.set(false);
    } else {
      calcDisplay.set($calcDisplay === '0' ? digit : $calcDisplay + digit);
    }
    calcCurrentInput.set($calcDisplay);
  }

  function inputDecimal() {
    if ($calcWaitingForSecondOperand) {
      calcDisplay.set('0.');
      calcWaitingForSecondOperand.set(false);
      return;
    }

    if (!$calcDisplay.includes('.')) {
      calcDisplay.set($calcDisplay + '.');
      calcCurrentInput.set($calcDisplay);
    }
  }

  function clearAll() {
    calcDisplay.set('0');
    calcCurrentInput.set('');
    calcOperator.set(null);
    calcPreviousValue.set(null);
    calcWaitingForSecondOperand.set(false);
  }

  function handleOperator(nextOperator: string) {
    const inputValue = parseFloat($calcDisplay);

    if ($calcPreviousValue === null) {
      calcPreviousValue.set(inputValue);
    } else if ($calcOperator) {
      const result = performCalculation();
      calcDisplay.set(String(result));
      calcPreviousValue.set(result);
    }

    calcWaitingForSecondOperand.set(true);
    calcOperator.set(nextOperator);
  }

  function performCalculation(): number {
    const prevValue = $calcPreviousValue;
    const currentValue = parseFloat($calcDisplay);

    if (prevValue === null) return currentValue;

    let result: number;
    switch ($calcOperator) {
      case '+':
        result = prevValue + currentValue;
        break;
      case '-':
        result = prevValue - currentValue;
        break;
      case '*':
        result = prevValue * currentValue;
        break;
      case '/':
        result = prevValue / currentValue;
        break;
      case 'pow':
        result = Math.pow(prevValue, currentValue);
        break;
      default:
        return currentValue;
    }

    // Add to history
    calculationHistory = [...calculationHistory, `${prevValue} ${$calcOperator} ${currentValue} = ${result}`];
    return result;
  }

  function handleScientificFunction(fn: string) {
    const currentValue = parseFloat($calcDisplay);
    let result: number;

    switch (fn) {
      case 'sin':
        result = angleMode === 'deg' ? 
          Math.sin(currentValue * Math.PI / 180) : 
          Math.sin(currentValue);
        break;
      case 'cos':
        result = angleMode === 'deg' ? 
          Math.cos(currentValue * Math.PI / 180) : 
          Math.cos(currentValue);
        break;
      case 'tan':
        result = angleMode === 'deg' ? 
          Math.tan(currentValue * Math.PI / 180) : 
          Math.tan(currentValue);
        break;
      case 'sqrt':
        result = Math.sqrt(currentValue);
        break;
      case 'log':
        result = Math.log10(currentValue);
        break;
      case 'ln':
        result = Math.log(currentValue);
        break;
      case 'exp':
        result = Math.exp(currentValue);
        break;
      case 'pi':
        result = Math.PI;
        break;
      case 'e':
        result = Math.E;
        break;
      default:
        return;
    }

    calcDisplay.set(String(result));
    calcCurrentInput.set($calcDisplay);
    calculationHistory = [...calculationHistory, `${fn}(${currentValue}) = ${result}`];
  }

  function copyToClipboard() {
    navigator.clipboard.writeText($calcDisplay);
  }

  function clearHistory() {
    calculationHistory = [];
  }

  // Handle keyboard input
  function handleKeydown(event: KeyboardEvent) {
    const key = event.key;
    
    if (/[0-9]/.test(key)) {
      inputDigit(key);
    } else if (key === '.') {
      inputDecimal();
    } else if (['+', '-', '*', '/'].includes(key)) {
      handleOperator(key);
    } else if (key === 'Enter' || key === '=') {
      handleOperator('=');
    } else if (key === 'Escape') {
      clearAll();
    } else if (key === 'Backspace') {
      calcDisplay.set($calcDisplay.slice(0, -1) || '0');
    }
  }
</script>

<svelte:head>
  <title>Scientific Calculator | LearnFlow</title>
</svelte:head>

<div class="max-w-2xl mx-auto px-4 py-10">
  <div class="flex justify-between items-start mb-8">
    <div>
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2 flex items-center">
        <i class="fas fa-calculator mr-3 text-purple-500"></i> Scientific Calculator
      </h1>
      <p class="text-gray-600 dark:text-gray-400">Advanced calculator with scientific functions</p>
    </div>
    <div class="flex gap-2">
      <button 
        class="text-sm px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition"
        on:click={() => { showHistory = !showHistory; }}
      >
        <i class="fas fa-history mr-2"></i> History
      </button>
      <button 
        class="text-sm px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition"
        on:click={() => { scientificMode = !scientificMode; }}
      >
        {scientificMode ? 'Basic' : 'Scientific'}
      </button>
    </div>
  </div>

  <div class="grid grid-cols-1 {showHistory ? 'lg:grid-cols-3' : ''} gap-8">
    <div class="lg:col-span-2">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
        <!-- Display -->
        <div class="mb-4 relative">
          <input
            type="text"
            class="w-full text-right px-4 py-3 text-2xl font-mono bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 rounded-lg"
            bind:value={$calcDisplay}
            readonly
          >
          <button
            class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
            on:click={() => { copyToClipboard(); }}
            title="Copy to clipboard"
          >
            <i class="fas fa-copy"></i>
          </button>
        </div>

        {#if scientificMode}
          <!-- Scientific Functions -->
          <div class="grid grid-cols-4 gap-2 mb-4">
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('sin'); }}
            >sin</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('cos'); }}
            >cos</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('tan'); }}
            >tan</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { angleMode = angleMode === 'deg' ? 'rad' : 'deg'; }}
            >{angleMode}</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('log'); }}
            >log</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('ln'); }}
            >ln</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('exp'); }}
            >exp</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('sqrt'); }}
            >√</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleOperator('pow'); }}
            >x^y</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('pi'); }}
            >π</button>
            <button 
              class="p-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
              on:click={() => { handleScientificFunction('e'); }}
            >e</button>
          </div>
        {/if}

        <!-- Basic Calculator Grid -->
        <div class="grid grid-cols-4 gap-2">
          <button
            class="p-4 bg-red-600 text-white rounded hover:bg-red-700 transition"
            on:click={() => { clearAll(); }}
          >AC</button>
          <button
            class="p-4 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
            on:click={() => { calcDisplay.set(String(-parseFloat($calcDisplay))); }}
          >±</button>
          <button
            class="p-4 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
            on:click={() => { calcDisplay.set(String(parseFloat($calcDisplay) / 100)); }}
          >%</button>
          <button
            class="p-4 bg-purple-600 text-white rounded hover:bg-purple-700 transition"
            on:click={() => { handleOperator('/'); }}
          >÷</button>
          
          {#each [7, 8, 9, '*', 4, 5, 6, '-', 1, 2, 3, '+', 0, '.', '='] as key}
            {@const isOperator = ['*', '-', '+', '='].includes(String(key))}
            {@const isZero = key === 0}
            <button
              class="p-4 {isOperator ? 'bg-purple-600 hover:bg-purple-700' : 'bg-gray-600 hover:bg-gray-700'} 
                     text-white rounded transition {isZero ? 'col-span-2' : ''}"
              on:click={() => {
                if (typeof key === 'number' || key === '.') {
                  key === '.' ? inputDecimal() : inputDigit(String(key));
                } else {
                  handleOperator(key);
                }
              }}
            >
              {#if key === '*'}<i class="fas fa-times"></i>
              {:else if key === '-'}<i class="fas fa-minus"></i>
              {:else if key === '+'}<i class="fas fa-plus"></i>
              {:else if key === '='}<i class="fas fa-equals"></i>
              {:else}{key}{/if}
            </button>
          {/each}
        </div>
      </div>
    </div>

    {#if showHistory}
      <div class="lg:col-span-1">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">History</h3>
            <button
              class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              on:click={() => { clearHistory(); }}
            >
              Clear
            </button>
          </div>
          {#if calculationHistory.length === 0}
            <p class="text-gray-500 dark:text-gray-400 text-sm">No calculations yet</p>
          {:else}
            <div class="space-y-2">
              {#each calculationHistory as calc}
                <div class="text-sm text-gray-600 dark:text-gray-300 font-mono">{calc}</div>
              {/each}
            </div>
          {/if}
        </div>
      </div>
    {/if}
  </div>
</div>===== ./src/routes/tools/flashcards/+page.svelte =====
<script lang="ts">
  import { persistentStore } from '$lib/stores/persistentStore';
  import { fade } from 'svelte/transition';

  interface Flashcard {
    id: string;
    front: string;
    back: string;
    tags: string[];
    lastReviewed?: number;
    nextReview?: number;
    level: number;
    createdAt: number;
  }

  const flashcards = persistentStore<Flashcard[]>('learnflow-flashcards', []);
  let currentCard: Flashcard | null = null;
  let showingFront = true;
  let newCardFront = '';
  let newCardBack = '';
  let newCardTags = '';
  let filterTag = '';
  let sortBy: 'nextReview' | 'level' | 'created' = 'nextReview';

  $: filteredCards = filterTag 
    ? $flashcards.filter(card => card.tags.includes(filterTag))
    : $flashcards;

  $: sortedCards = [...filteredCards].sort((a, b) => {
    if (sortBy === 'nextReview') {
      return (a.nextReview || 0) - (b.nextReview || 0);
    } else if (sortBy === 'level') {
      return b.level - a.level;
    } else {
      return (a.createdAt || 0) - (b.createdAt || 0);
    }
  });

  $: stats = {
    total: $flashcards.length,
    mastered: $flashcards.filter(c => c.level === 5).length,
    dueToday: $flashcards.filter(c => !c.nextReview || c.nextReview <= Date.now()).length,
    avgLevel: $flashcards.length ? 
      Math.round($flashcards.reduce((sum, c) => sum + c.level, 0) / $flashcards.length * 10) / 10 
      : 0
  };

  function getNextCard(): Flashcard | null {
    const now = Date.now();
    const dueCards = sortedCards.filter(card => !card.nextReview || card.nextReview <= now);
    if (dueCards.length === 0) return null;
    return dueCards[0];
  }

  function addCard() {
    if (!newCardFront.trim() || !newCardBack.trim()) return;
    
    const card: Flashcard = {
      id: crypto.randomUUID(),
      front: newCardFront,
      back: newCardBack,
      level: 0,
      tags: newCardTags.split(',').map(t => t.trim()).filter(t => t),
      createdAt: Date.now()
    };
    
    flashcards.update(cards => [...cards, card]);
    newCardFront = '';
    newCardBack = '';
    newCardTags = '';
  }

  function flipCard() {
    showingFront = !showingFront;
  }

  async function reviewCard(success: boolean) {
    if (!currentCard) return;
    
    const now = Date.now();
    let nextLevel = success ? currentCard.level + 1 : Math.max(0, currentCard.level - 1);
    nextLevel = Math.min(5, nextLevel);
    
    const intervals = [
      1000 * 60 * 30,
      1000 * 60 * 60 * 4,
      1000 * 60 * 60 * 24,
      1000 * 60 * 60 * 24 * 3,
      1000 * 60 * 60 * 24 * 7,
      1000 * 60 * 60 * 24 * 14
    ];

    flashcards.update(cards => 
      cards.map(card => 
        card.id === currentCard.id 
          ? {
              ...card,
              level: nextLevel,
              lastReviewed: now,
              nextReview: now + intervals[nextLevel]
            }
          : card
      )
    );

    currentCard = getNextCard();
    showingFront = true;
  }

  function deleteCard(id: string) {
    if (!confirm('Are you sure you want to delete this card?')) return;
    flashcards.update(cards => cards.filter(c => c.id !== id));
    if (currentCard?.id === id) {
      currentCard = getNextCard();
      showingFront = true;
    }
  }

  function handleCardKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter' || event.key === ' ') {
      flipCard();
    }
  }

  $: uniqueTags = Array.from(new Set($flashcards.flatMap(c => c.tags)));

  $: if (!currentCard) {
    currentCard = getNextCard();
  }
</script>

<svelte:head>
  <title>Flashcards | LearnFlow</title>
</svelte:head>

<div class="max-w-4xl mx-auto px-4 py-10">
  <div class="flex justify-between items-start mb-8">
    <div>
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2 flex items-center">
        <i class="fas fa-layer-group mr-3 text-orange-500"></i> Flashcards
      </h1>
      <p class="text-gray-600 dark:text-gray-400">Study smarter with spaced repetition flashcards</p>
    </div>
  </div>

  <div class="flex flex-wrap gap-4 mb-8">
    <select
      bind:value={filterTag}
      class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm"
    >
      <option value="">All Tags</option>
      {#each uniqueTags as tag}
        <option value={tag}>{tag}</option>
      {/each}
    </select>

    <select
      bind:value={sortBy}
      class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm"
    >
      <option value="nextReview">Sort by Due Date</option>
      <option value="level">Sort by Level</option>
      <option value="created">Sort by Created</option>
    </select>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
    <div class="lg:col-span-3">
      {#if currentCard}
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
          <div class="mb-4 flex justify-between items-center">
            <div class="flex gap-2">
              {#each currentCard.tags as tag}
                <span class="px-2 py-1 bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 rounded text-xs">{tag}</span>
              {/each}
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400">
              Level: {currentCard.level}/5
            </div>
          </div>

          <div
            role="button"
            tabindex="0"
            class="min-h-[200px] p-6 bg-gray-50 dark:bg-gray-900 rounded-lg shadow-inner flex items-center justify-center cursor-pointer select-none mb-6 focus:outline-none focus:ring-2 focus:ring-orange-500"
            on:click={flipCard}
            on:keydown={handleCardKeydown}
            transition:fade
          >
            <div class="prose dark:prose-invert max-w-none text-center">
              {showingFront ? currentCard.front : currentCard.back}
            </div>
          </div>

          <div class="flex justify-between">
            <button
              on:click={() => reviewCard(false)}
              class="px-6 py-3 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition flex items-center"
            >
              <i class="fas fa-times mr-2"></i> Again
            </button>
            <button
              on:click={() => deleteCard(currentCard.id)}
              class="px-6 py-3 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition"
            >
              <i class="fas fa-trash-alt"></i>
            </button>
            <button
              on:click={() => reviewCard(true)}
              class="px-6 py-3 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 transition flex items-center"
            >
              <i class="fas fa-check mr-2"></i> Good
            </button>
          </div>
        </div>
      {:else}
        <div class="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg text-center">
          <i class="fas fa-check-circle text-green-500 text-4xl mb-4"></i>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">All Caught Up!</h3>
          <p class="text-gray-600 dark:text-gray-400">No cards due for review. Add new cards or check back later.</p>
        </div>
      {/if}
    </div>

    <div class="lg:col-span-2">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
        <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">Add New Card</h3>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Front</label>
            <textarea
              bind:value={newCardFront}
              rows="3"
              class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg"
              placeholder="Question or term..."
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Back</label>
            <textarea
              bind:value={newCardBack}
              rows="3"
              class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg"
              placeholder="Answer or definition..."
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tags</label>
            <input
              type="text"
              bind:value={newCardTags}
              class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg"
              placeholder="math, history, etc (comma separated)"
            />
          </div>
          <button
            on:click={addCard}
            class="w-full py-3 bg-orange-600 text-white rounded-lg font-medium hover:bg-orange-700 transition"
            disabled={!newCardFront.trim() || !newCardBack.trim()}
          >
            <i class="fas fa-plus mr-2"></i> Add Card
          </button>
        </div>
      </div>
    </div>
  </div>
</div>===== ./src/routes/tools/tasks/+page.svelte =====
<script lang="ts">
  import { todos, type TodoItem } from '$lib/stores/pipStores';
  import { onMount } from 'svelte';
  import { fade, fly, scale, slide } from 'svelte/transition';
  import { quintOut, cubicOut, bounceOut, elasticOut } from 'svelte/easing';

  let selectedId: string | null = null;
  let editing = false;
  let editTask: TodoItem | null = null;
  let newTask: Partial<TodoItem> = { text: '', description: '', deadline: '', emergency: 3, tag: '' };
  let showAddPanel = false;
  let isMobile = false;

  // Filtering state
  let filterTag = '';
  let filterEmergency = 'all';
  let searchTerm = '';
  let sortBy = 'createdAt'; // Options: createdAt, emergency, deadline
  let sortDir = 'desc'; // Options: asc, desc

  // Drag-and-drop state
  let draggingId: string | null = null;
  let dragOverId: string | null = null;

  onMount(() => {
    const checkMobile = () => {
      isMobile = window.innerWidth < 768;
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  });

  // Task data processing
  $: allTodos = $todos;
  $: selectedTask = allTodos.find(t => t.id === selectedId) || null;
  $: filteredTodos = allTodos.filter(task => {
    if (filterTag && task.tag !== filterTag) return false;
    if (filterEmergency !== 'all' && String(task.emergency) !== filterEmergency) return false;
    if (searchTerm && !task.text.toLowerCase().includes(searchTerm.toLowerCase())) return false;
    return true;
  }).sort((a, b) => {
    let aVal = sortBy === 'deadline' ? (a.deadline ? new Date(a.deadline).getTime() : Infinity) :
              sortBy === 'emergency' ? a.emergency : 
              a.createdAt;
    
    let bVal = sortBy === 'deadline' ? (b.deadline ? new Date(b.deadline).getTime() : Infinity) :
              sortBy === 'emergency' ? b.emergency : 
              b.createdAt;
              
    return sortDir === 'asc' ? aVal - bVal : bVal - aVal;
  });

  $: uniqueTags = [...new Set(allTodos.map(t => t.tag).filter(Boolean))];
  $: completedCount = allTodos.filter(t => t.completed).length;
  $: totalCount = allTodos.length;
  $: progressPercentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

  // Task functions
  function selectTask(id: string) {
    selectedId = id;
    editing = false;
    editTask = null;
    if (isMobile) {
      showAddPanel = false;
    }
  }

  function startEdit(task: TodoItem) {
    editing = true;
    editTask = { ...task };
  }

  function saveEdit() {
    if (!editTask) return;
    todos.update(ts => ts.map(t => t.id === editTask!.id ? { ...editTask } : t));
    editing = false;
    editTask = null;
  }

  function toggleTaskComplete(task: TodoItem) {
    todos.update(ts => ts.map(t => t.id === task.id ? { ...t, completed: !t.completed } : t));
  }

  function addTask() {
    if (!newTask.text?.trim()) return;
    const task: TodoItem = {
      id: crypto.randomUUID(),
      text: newTask.text!,
      completed: false,
      createdAt: Date.now(),
      description: newTask.description || '',
      deadline: newTask.deadline || '',
      emergency: newTask.emergency || 3,
      tag: newTask.tag || ''
    };
    todos.update(ts => [...ts, task]);
    newTask = { text: '', description: '', deadline: '', emergency: 3, tag: '' };
    selectedId = task.id;
    showAddPanel = false;
  }

  function deleteTask(id: string) {
    todos.update(ts => ts.filter(t => t.id !== id));
    if (selectedId === id) selectedId = null;
  }

  function clearCompletedTasks() {
    todos.update(ts => ts.filter(t => !t.completed));
    if (selectedTask?.completed) selectedId = null;
  }

  // Drag and drop functions
  function handleDragStart(id: string) {
    draggingId = id;
  }

  function handleDragOver(id: string) {
    dragOverId = id;
  }

  function handleDrop() {
    if (draggingId && dragOverId && draggingId !== dragOverId) {
      const fromIdx = allTodos.findIndex(t => t.id === draggingId);
      const toIdx = allTodos.findIndex(t => t.id === dragOverId);
      if (fromIdx !== -1 && toIdx !== -1) {
        const reordered = [...allTodos];
        const [moved] = reordered.splice(fromIdx, 1);
        reordered.splice(toIdx, 0, moved);
        todos.set(reordered);
      }
    }
    draggingId = null;
    dragOverId = null;
  }

  function handleDragEnd() {
    draggingId = null;
    dragOverId = null;
  }

  function handleTaskKeydown(event: KeyboardEvent, taskId: string) {
    if (event.key === 'Enter' || event.key === ' ') {
      selectTask(taskId);
    }
  }

  // UI helper functions
  function getEmergencyColor(level: number) {
    switch(Number(level)) {
      case 1: return 'bg-green-50 dark:bg-green-950 text-green-600 dark:text-green-300 border-green-200 dark:border-green-800';
      case 2: return 'bg-blue-50 dark:bg-blue-950 text-blue-600 dark:text-blue-300 border-blue-200 dark:border-blue-800';
      case 3: return 'bg-yellow-50 dark:bg-yellow-950 text-yellow-600 dark:text-yellow-300 border-yellow-200 dark:border-yellow-800';
      case 4: return 'bg-orange-50 dark:bg-orange-950 text-orange-600 dark:text-orange-300 border-orange-200 dark:border-orange-800';
      case 5: return 'bg-red-50 dark:bg-red-950 text-red-600 dark:text-red-300 border-red-200 dark:border-red-800';
      default: return 'bg-gray-50 dark:bg-gray-800 text-gray-600 dark:text-gray-300 border-gray-200 dark:border-gray-700';
    }
  }

  function getEmergencyLabel(level: number) {
    switch(Number(level)) {
      case 1: return 'Low';
      case 2: return 'Medium-Low';
      case 3: return 'Medium';
      case 4: return 'High';
      case 5: return 'Critical';
      default: return 'None';
    }
  }

  function getTaskStatusClass(task: TodoItem) {
    if (task.completed) {
      return 'opacity-75';
    }
    
    if (task.deadline) {
      const deadlineDate = new Date(task.deadline);
      const today = new Date();
      const timeDiff = deadlineDate.getTime() - today.getTime();
      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
      
      if (daysDiff < 0) {
        return 'overdue';
      } else if (daysDiff <= 1) {
        return 'due-soon';
      }
    }
    
    return '';
  }

  function formatDate(dateStr: string) {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return new Intl.DateTimeFormat('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: 'numeric'
    }).format(date);
  }

  function formatRelativeDate(dateStr: string) {
    if (!dateStr) return '';
    
    const date = new Date(dateStr);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
      return `${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''} overdue`;
    } else if (diffDays === 0) {
      return 'Due today';
    } else if (diffDays === 1) {
      return 'Due tomorrow';
    } else if (diffDays < 7) {
      return `Due in ${diffDays} days`;
    } else {
      return formatDate(dateStr);
    }
  }
</script>

<svelte:head>
  <title>Tasks | LearnFlow</title>
</svelte:head>

<div class="flex flex-col md:flex-row h-[85vh] max-w-7xl mx-auto bg-white dark:bg-gray-900 rounded-2xl shadow-xl overflow-hidden mt-6 border border-gray-200 dark:border-gray-800">
  <!-- Left: Task List -->
  <div class="w-full md:w-2/5 lg:w-1/3 border-r border-gray-200 dark:border-gray-800 bg-gradient-to-br from-indigo-50/80 via-purple-50/50 dark:from-indigo-950/30 dark:via-purple-950/20 to-white dark:to-gray-900 overflow-y-auto relative {isMobile && selectedTask && !showAddPanel ? 'hidden' : ''}">
    <div class="sticky top-0 z-10 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-100 dark:border-gray-800 p-5 space-y-5">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-400 dark:to-purple-400 flex items-center">
          <i class="fas fa-tasks mr-3"></i> My Tasks
        </h2>
        <button 
          class="h-10 w-10 flex items-center justify-center rounded-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-md transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:ring-opacity-50"
          on:click={() => showAddPanel = !showAddPanel}
          aria-label={showAddPanel ? "Close add task panel" : "Open add task panel"}
        >
          <i class="fas {showAddPanel ? 'fa-times' : 'fa-plus'}"></i>
        </button>
      </div>
      
      <!-- Progress bar -->
      <div class="w-full h-4 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
        <div class="bg-gradient-to-r from-indigo-500 to-purple-500 h-full rounded-full relative overflow-hidden" 
             style="width: {progressPercentage}%"
             transition:scale={{ duration: 300, easing: cubicOut }}
             >
          <div class="absolute inset-0 opacity-30 bg-striped"></div>
        </div>
      </div>
      <div class="text-xs text-gray-500 dark:text-gray-400 flex justify-between">
        <span>{completedCount} of {totalCount} tasks completed</span>
        <span class="font-semibold">{progressPercentage}%</span>
      </div>
      
      <!-- Search and filter bar -->
      <div class="space-y-3">
        <div class="relative">
          <i class="fas fa-search absolute left-3.5 top-3 text-gray-400 dark:text-gray-500"></i>
          <input 
            class="w-full pl-10 pr-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition text-sm" 
            placeholder="Search tasks..." 
            bind:value={searchTerm}
          />
        </div>
        
        <div class="flex flex-wrap gap-2">
          <select 
            class="text-xs px-3 py-1.5 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 cursor-pointer"
            bind:value={filterEmergency}
          >
            <option value="all">All Priorities</option>
            <option value="1">Low</option>
            <option value="2">Medium-Low</option>
            <option value="3">Medium</option>
            <option value="4">High</option>
            <option value="5">Critical</option>
          </select>
          
          <select 
            class="text-xs px-3 py-1.5 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 cursor-pointer"
            bind:value={filterTag}
          >
            <option value="">All Tags</option>
            {#each uniqueTags as tag}
              <option value={tag}>{tag}</option>
            {/each}
          </select>
          
          <div class="ml-auto flex text-xs gap-1 items-center">
            <select 
              class="px-2 py-1.5 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 cursor-pointer"
              bind:value={sortBy}
            >
              <option value="createdAt">Created</option>
              <option value="deadline">Deadline</option>
              <option value="emergency">Priority</option>
            </select>
            <button 
              class="h-7 w-7 flex items-center justify-center bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md"
              on:click={() => sortDir = sortDir === 'asc' ? 'desc' : 'asc'}
              title={sortDir === 'asc' ? 'Sort Ascending' : 'Sort Descending'}
            >
              <i class="fas fa-sort-{sortDir === 'asc' ? 'up' : 'down'} text-gray-500"></i>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Tasks List -->
    <div class="p-4 space-y-1.5">
      {#if filteredTodos.length === 0}
        <div 
          class="text-center py-10 text-gray-500 dark:text-gray-400 italic"
          in:fade={{ duration: 200 }}
        >
          {searchTerm || filterTag || filterEmergency !== 'all' ? 'No matching tasks found' : 'No tasks yet. Create one!'}
        </div>
      {:else}
        {#each filteredTodos as task (task.id)}
          <div 
            role="button"
            tabindex="0"
            class="bg-white dark:bg-gray-800/90 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md hover:border-indigo-200 dark:hover:border-indigo-700/50 transition-all cursor-pointer relative overflow-hidden {selectedId === task.id ? 'border-l-4 border-l-indigo-500 dark:border-l-indigo-400' : ''} {getTaskStatusClass(task)} focus:outline-none focus:ring-2 focus:ring-indigo-300 dark:focus:ring-indigo-600"
            draggable="true"
            on:dragstart={() => handleDragStart(task.id)}
            on:dragover|preventDefault={() => handleDragOver(task.id)}
            on:drop|preventDefault={handleDrop}
            on:dragend={handleDragEnd}
            on:click={() => selectTask(task.id)}
            on:keydown={(e) => handleTaskKeydown(e, task.id)}
            in:fly={{ y: 10, duration: 200, delay: 50 }}
            out:fly={{ y: -10, duration: 200 }}
          >
            {#if draggingId === task.id}
              <div class="absolute inset-0 bg-indigo-100 dark:bg-indigo-900/30 z-0"></div>
            {/if}
            {#if dragOverId === task.id}
              <div class="absolute inset-0 border-2 border-dashed border-indigo-300 dark:border-indigo-700 rounded-xl z-0"></div>
            {/if}
            <div class="p-3 z-10 relative flex items-start gap-3">
              <div>
                <button 
                  class="h-5 w-5 rounded-full flex items-center justify-center border {task.completed ? 'bg-green-100 dark:bg-green-900/30 border-green-400 dark:border-green-600 text-green-600 dark:text-green-400' : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800'}"
                  on:click|stopPropagation={() => toggleTaskComplete(task)}
                >
                  {#if task.completed}
                    <i class="fas fa-check text-xs"></i>
                  {/if}
                </button>
              </div>
              <div class="flex-1 min-w-0">
                <div class="flex justify-between items-start">
                  <h3 class="font-medium truncate text-sm {task.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'}">{task.text}</h3>
                  <span 
                    class="ml-2 text-xs px-2 py-0.5 rounded-full border {getEmergencyColor(task.emergency)} whitespace-nowrap flex-shrink-0"
                  >
                    {getEmergencyLabel(task.emergency)}
                  </span>
                </div>
                
                <div class="mt-1 flex flex-wrap items-center gap-x-3 gap-y-1 text-xs">
                  {#if task.deadline}
                    <span class="{task.deadline && new Date(task.deadline) < new Date() ? 'text-red-500 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'} flex items-center">
                      <i class="fas fa-calendar-alt mr-1.5"></i>
                      {formatRelativeDate(task.deadline)}
                    </span>
                  {/if}
                  
                  {#if task.tag}
                    <span class="text-gray-500 dark:text-gray-400 flex items-center">
                      <i class="fas fa-tag mr-1.5"></i>
                      {task.tag}
                    </span>
                  {/if}
                </div>
              </div>
            </div>
            
            {#if task.deadline && new Date(task.deadline) < new Date() && !task.completed}
              <div class="absolute top-0 right-0 w-0 h-0 border-solid border-t-[20px] border-t-red-500 border-l-transparent border-l-[20px]"></div>
            {/if}
          </div>
        {/each}
      {/if}
      
      {#if completedCount > 0}
        <div class="flex justify-center pt-3">
          <button 
            class="text-xs px-3 py-1.5 text-gray-600 dark:text-gray-300 hover:bg-red-50 dark:hover:bg-red-900/20 hover:text-red-500 transition rounded-md"
            on:click={clearCompletedTasks}
          >
            <i class="fas fa-trash-alt mr-1.5"></i>
            Clear completed ({completedCount})
          </button>
        </div>
      {/if}
    </div>
  </div>

  <!-- Right: Task Detail or Add Panel -->
  <div class="flex-1 bg-white dark:bg-gray-900 overflow-y-auto">
    {#if showAddPanel}
      <!-- Add Task Form -->
      <div 
        class="h-full flex flex-col p-6"
        in:fly={{ x: 20, duration: 200, easing: cubicOut }}
        out:fly={{ x: 20, duration: 200, easing: cubicOut }}
      >
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-400 dark:to-purple-400">Add New Task</h2>
          <button 
            class="h-8 w-8 flex md:hidden items-center justify-center rounded-full bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300"
            on:click={() => showAddPanel = false}
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="space-y-5 flex-1">
          <div>
            <label for="task-title" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Task Title*</label>
            <input 
              id="task-title"
              type="text" 
              class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
              placeholder="What needs to be done?"
              bind:value={newTask.text}
            />
          </div>
          
          <div>
            <label for="task-description" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Description (optional)</label>
            <textarea 
              id="task-description"
              class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 h-32 bg-white dark:bg-gray-800" 
              placeholder="Add details about this task..."
              bind:value={newTask.description}
            ></textarea>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="task-deadline" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Deadline (optional)</label>
              <input 
                id="task-deadline"
                type="date" 
                class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
                bind:value={newTask.deadline}
              />
            </div>
            
            <div>
              <label for="task-priority" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Priority</label>
              <select 
                id="task-priority"
                class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800"
                bind:value={newTask.emergency}
              >
                <option value={1}>Low</option>
                <option value={2}>Medium-Low</option>
                <option value={3}>Medium</option>
                <option value={4}>High</option>
                <option value={5}>Critical</option>
              </select>
            </div>
          </div>
          
          <div>
            <label for="task-tag" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Tag (optional)</label>
            <div class="relative">
              <input 
                id="task-tag"
                list="tag-options"
                type="text" 
                class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
                placeholder="Add or select a tag"
                bind:value={newTask.tag}
              />
              <datalist id="tag-options">
                {#each uniqueTags as tag}
                  <option value={tag} />
                {/each}
              </datalist>
              <i class="fas fa-tag absolute right-4 top-3 text-gray-400"></i>
            </div>
          </div>
          
          <div class="pt-4">
            <button 
              class="w-full py-3 px-6 rounded-xl bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium shadow-md transition transform hover:translate-y-[-1px] disabled:opacity-70 disabled:cursor-not-allowed"
              on:click={addTask}
              disabled={!newTask.text?.trim()}
            >
              <i class="fas fa-plus mr-2"></i>
              Create Task
            </button>
          </div>
        </div>
      </div>
    {:else if selectedTask}
      <!-- Task Detail View -->
      <div 
        class="h-full flex flex-col p-6"
        in:fade={{ duration: 200 }}
      >
        <div class="flex justify-between items-center mb-6">
          <div class="flex items-center gap-3">
            <button 
              class="h-8 w-8 md:hidden flex items-center justify-center rounded-full bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300"
              on:click={() => selectedId = null}
            >
              <i class="fas fa-arrow-left"></i>
            </button>
            <h2 class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 dark:from-indigo-400 dark:to-purple-400">Task Details</h2>
          </div>
          <div class="flex gap-2">
            <button 
              class="h-9 w-9 flex items-center justify-center rounded-lg bg-indigo-50 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 hover:bg-indigo-100 dark:hover:bg-indigo-800/30 transition"
              on:click={() => startEdit(selectedTask)}
              title="Edit task"
            >
              <i class="fas fa-edit"></i>
            </button>
            <button 
              class="h-9 w-9 flex items-center justify-center rounded-lg bg-red-50 dark:bg-red-900/30 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-800/30 transition"
              on:click={() => deleteTask(selectedTask.id)}
              title="Delete task"
            >
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
        
        {#if editing && editTask}
          <!-- Edit Task Form -->
          <div 
            class="space-y-5 flex-1 animate__animated animate__fadeIn"
            in:fade={{ duration: 200 }}
          >
            <div>
              <label for="edit-title" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Task Title*</label>
              <input 
                id="edit-title"
                type="text" 
                class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
                bind:value={editTask.text}
              />
            </div>
            
            <div>
              <label for="edit-description" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Description</label>
              <textarea 
                id="edit-description"
                class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 h-32 bg-white dark:bg-gray-800" 
                bind:value={editTask.description}
              ></textarea>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="edit-deadline" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Deadline</label>
                <input 
                  id="edit-deadline"
                  type="date" 
                  class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
                  bind:value={editTask.deadline}
                />
              </div>
              
              <div>
                <label for="edit-priority" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Priority</label>
                <select 
                  id="edit-priority"
                  class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800"
                  bind:value={editTask.emergency}
                >
                  <option value={1}>Low</option>
                  <option value={2}>Medium-Low</option>
                  <option value={3}>Medium</option>
                  <option value={4}>High</option>
                  <option value={5}>Critical</option>
                </select>
              </div>
            </div>
            
            <div>
              <label for="edit-tag" class="block text-sm font-medium mb-1.5 text-gray-700 dark:text-gray-300">Tag</label>
              <div class="relative">
                <input 
                  id="edit-tag"
                  list="edit-tag-options"
                  type="text" 
                  class="w-full px-4 py-2.5 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-800" 
                  placeholder="Add or select a tag"
                  bind:value={editTask.tag}
                />
                <datalist id="edit-tag-options">
                  {#each uniqueTags as tag}
                    <option value={tag} />
                  {/each}
                </datalist>
                <i class="fas fa-tag absolute right-4 top-3 text-gray-400"></i>
              </div>
            </div>
            
            <div class="flex gap-3 pt-4 justify-end">
              <button 
                class="py-2.5 px-5 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 font-medium transition"
                on:click={() => {editing = false; editTask = null;}}
              >
                Cancel
              </button>
              <button 
                class="py-2.5 px-5 rounded-lg bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium shadow-md transition"
                on:click={saveEdit}
                disabled={!editTask.text?.trim()}
              >
                Save Changes
              </button>
            </div>
          </div>
        {:else}
          <!-- Task Viewing -->
          <div class="space-y-6 flex-1">
            <div class="flex items-start gap-4">
              <button 
                class="mt-1 h-6 w-6 rounded-full flex items-center justify-center border {selectedTask.completed ? 'bg-green-100 dark:bg-green-900/30 border-green-400 dark:border-green-600 text-green-600 dark:text-green-400' : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800'}"
                on:click={() => toggleTaskComplete(selectedTask)}
              >
                {#if selectedTask.completed}
                  <i class="fas fa-check text-xs"></i>
                {/if}
              </button>
              <div class="flex-1">
                <h3 class="text-xl font-semibold {selectedTask.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'}">{selectedTask.text}</h3>
              </div>
            </div>
            
            <div class="flex flex-wrap gap-3 pt-2">
              <span 
                class="text-sm px-3 py-1 rounded-lg {getEmergencyColor(selectedTask.emergency)}"
              >
                <i class="fas fa-flag mr-1.5"></i>
                {getEmergencyLabel(selectedTask.emergency)}
              </span>
              
              {#if selectedTask.deadline}
                <span 
                  class="text-sm px-3 py-1 rounded-lg {new Date(selectedTask.deadline) < new Date() && !selectedTask.completed ? 'bg-red-50 dark:bg-red-900/30 text-red-600 dark:text-red-400 border border-red-200 dark:border-red-800' : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700'}"
                >
                  <i class="fas fa-calendar-alt mr-1.5"></i>
                  {formatRelativeDate(selectedTask.deadline)}
                </span>
              {/if}
              
              {#if selectedTask.tag}
                <span 
                  class="text-sm px-3 py-1 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700"
                >
                  <i class="fas fa-tag mr-1.5"></i>
                  {selectedTask.tag}
                </span>
              {/if}
              
              <span 
                class="text-sm px-3 py-1 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700"
              >
                <i class="fas fa-clock mr-1.5"></i>
                Created {new Date(selectedTask.createdAt).toLocaleDateString()}
              </span>
            </div>
            
            <div class="pt-6">
              <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</h4>
              <div class="p-4 rounded-xl bg-gray-50 dark:bg-gray-800/80 border border-gray-200 dark:border-gray-700/80 min-h-[200px] text-gray-700 dark:text-gray-300 whitespace-pre-line">
                {selectedTask.description || 'No description provided.'}
              </div>
            </div>
          </div>
        {/if}
      </div>
    {:else}
      <!-- No task selected -->
      <div class="h-full flex flex-col items-center justify-center p-6 text-center">
        <img src="https://illustrations.popsy.co/gray/task-list.svg" alt="No task selected" class="w-64 h-64 mb-6 opacity-70" />
        <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2">No Task Selected</h3>
        <p class="text-gray-500 dark:text-gray-400 max-w-md mb-6">Select a task from the list to view details or click the + button to create a new task.</p>
        <button 
          class="py-2.5 px-5 rounded-lg bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium shadow-md transition transform hover:translate-y-[-1px]"
          on:click={() => showAddPanel = true}
        >
          <i class="fas fa-plus mr-2"></i>
          Create New Task
        </button>
      </div>
    {/if}
  </div>
</div>

<style>
  .bg-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
    animation: progress-bar-stripes 1s linear infinite;
  }

  @keyframes progress-bar-stripes {
    from { background-position: 1rem 0; }
    to { background-position: 0 0; }
  }

  .overdue {
    @apply border-l-red-500 dark:border-l-red-400 border-l-4;
  }

  .due-soon {
    @apply border-l-yellow-500 dark:border-l-yellow-400 border-l-4;
  }
</style>
===== ./src/routes/statistics/+page.svelte =====
<script lang="ts">
  import { isAuthenticated, loading as authLoading } from '$lib/stores/authStore.js';
  import { userProfile, userProfileLoading } from '$lib/stores/userProfileStore.js';
  import { focusSessions, todos, exerciseSessions } from '$lib/stores/pipStores';
  import { goto } from '$app/navigation';
  import StatCard from '$lib/components/StatCard.svelte';
  import FocusTimeChart from '$lib/components/FocusTimeChart.svelte';

  // Chart unit
  let unit: 'day' | 'week' | 'month' = 'week';

  // Derived stats
  let totalFocus = 0;
  let sessionCount = 0;
  let avgSession = 0;
  let longestSession = 0;
  let tasksDone = 0;
  let exercisesCompleted = 0;
  let enrollmentsCount = 0;

  function goToLogin() {
    goto('/login?redirect=/statistics');
  }

  // Recompute stats whenever relevant stores update
  $: if ($isAuthenticated && !$authLoading && !$userProfileLoading && $userProfile) {
    const sessions = $focusSessions;
    sessionCount = sessions.length;
    totalFocus = sessions.reduce((sum, s) => sum + s.duration / 60, 0);
    avgSession = sessionCount ? totalFocus / sessionCount : 0;
    longestSession = sessions.reduce((max, s) => Math.max(max, s.duration / 60), 0);
    tasksDone = $todos.filter(t => t.completed).length;
    exercisesCompleted = $exerciseSessions.filter(es => es.completed).length;
    const enroll = $userProfile.preferences.enrollments || [];
    enrollmentsCount = enroll.filter(e => e.progress > 0 && e.progress < 100).length;
  }
</script>

<svelte:head>
  <title>Statistics | LearnFlow</title>
</svelte:head>

{#if $authLoading}
  <div class="flex items-center justify-center min-h-[60vh]"><i class="fas fa-spinner fa-spin text-4xl text-indigo-500"></i></div>
{:else if !$isAuthenticated}
  <div class="flex flex-col items-center justify-center min-h-[60vh]">
    <p class="text-lg text-gray-600 dark:text-gray-300 mb-4">Log in to view your statistics.</p>
    <button class="px-6 py-2 bg-indigo-600 text-white rounded" on:click={goToLogin}>Log In</button>
  </div>
{:else if $userProfileLoading}
  <div class="flex items-center justify-center min-h-[60vh]"><i class="fas fa-spinner fa-spin text-4xl text-indigo-500"></i></div>
{:else}
  <div class="max-w-5xl mx-auto px-4 py-6 space-y-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Your Statistics</h1>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
      <StatCard title="Focus Sessions" value={String(sessionCount)} icon="fa-stopwatch" color="yellow" />
      <StatCard title="Total Focus (min)" value={String(Math.round(totalFocus))} icon="fa-clock" color="purple" />
      <StatCard title="Avg Session (min)" value={avgSession.toFixed(1)} icon="fa-chart-line" color="blue" />
      <StatCard title="Longest Session" value={longestSession.toFixed(1)} icon="fa-mountain" color="indigo" />
      <StatCard title="Tasks Completed" value={String(tasksDone)} icon="fa-list-check" color="green" />
      <StatCard title="Exercises Completed" value={String(exercisesCompleted)} icon="fa-pencil-alt" color="gray" />
      <StatCard title="Courses In Progress" value={String(enrollmentsCount)} icon="fa-book-open" color="red" />
    </div>
    <div class="space-y-4">
      <div class="flex items-center space-x-4">
        <label class="font-medium">View by:</label>
        <select bind:value={unit} class="rounded border-gray-300 p-2 bg-white dark:bg-gray-800">
          <option value="day">Daily</option>
          <option value="week">Weekly</option>
          <option value="month">Monthly</option>
        </select>
      </div>
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4" style="height: 300px;">
        <FocusTimeChart sessions={$focusSessions} timeUnit={unit} />
      </div>
    </div>
  </div>
{/if}===== ./src/routes/my-learning/+page.svelte =====
<script lang="ts">
  import { isAuthenticated, loading as authLoading } from '$lib/stores/authStore.js';
  import { goto } from '$app/navigation';
  import type { PageData } from './$types';

  export let data: PageData;

  let activeTab: 'in-progress' | 'completed' | 'all' = 'in-progress';

  function goToLogin() { goto('/login?redirect=/my-learning'); }

  $: enrolledCourses = data.enrolledCourses || [];
  $: myCourses = enrolledCourses.filter(c => c.enrollment.progress > 0 && c.enrollment.progress < 100);
  $: completedCourses = enrolledCourses.filter(c => c.enrollment.progress === 100);
  $: allCourses = enrolledCourses;
  $: suggestion = allCourses.find(c => c.enrollment.progress > 0 && c.enrollment.progress < 100);
</script>

<svelte:head>
  <title>My Learning | LearnFlow</title>
</svelte:head>

{#if $authLoading}
  <div class="flex items-center justify-center min-h-[60vh]"><i class="fas fa-spinner fa-spin text-4xl text-indigo-500"></i></div>
{:else if !$isAuthenticated}
  <div class="flex flex-col items-center justify-center min-h-[60vh]">
    <p class="text-xl text-gray-600 dark:text-gray-300 mb-4">Please log in to view your learning progress.</p>
    <button class="px-6 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md" on:click={goToLogin}>Log In</button>
  </div>
{:else}
  <div class="max-w-7xl mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">My Learning</h1>
    {#if data.error}
      <div class="text-red-500 mb-4">{data.error}</div>
    {/if}
    {#if allCourses.length === 0}
      <div class="text-center text-gray-600 dark:text-gray-400 py-20">
        <p>You are not enrolled in any courses yet.</p>
        <a href="/courses" class="mt-4 inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md">Browse Courses</a>
      </div>
    {:else}
      <!-- Suggestion -->
      {#if suggestion}
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-6">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Continue Learning</h2>
          <p class="text-gray-700 dark:text-gray-300">Next: {suggestion.meta.title}</p>
          <a href={suggestion.meta.path ? `/courses?path=${suggestion.meta.path}` : `/courses/${suggestion.meta.id}`} class="mt-4 inline-block text-indigo-600 hover:underline">Go to Course</a>
        </div>
      {/if}
      <!-- Tabs -->
      <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
        <button class={`py-2 px-4 ${activeTab==='in-progress'? 'border-b-2 border-indigo-500 text-indigo-600':''}`} on:click={()=>activeTab='in-progress'}>In Progress</button>
        <button class={`py-2 px-4 ${activeTab==='completed'? 'border-b-2 border-indigo-500 text-indigo-600':''}`} on:click={()=>activeTab='completed'}>Completed</button>
        <button class={`py-2 px-4 ${activeTab==='all'? 'border-b-2 border-indigo-500 text-indigo-600':''}`} on:click={()=>activeTab='all'}>All</button>
      </div>
      <!-- Course List -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each (activeTab==='in-progress'? myCourses : activeTab==='completed'? completedCourses : allCourses) as item (item.meta.id)}
          <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow flex flex-col">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{item.meta.title}</h3>
            <div class="flex items-center mb-2">
              <div class="w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden">
                <div class="h-2 bg-indigo-600 dark:bg-indigo-500" style="width:{item.enrollment.progress}%"></div>
              </div>
              <span class="ml-2 text-sm">{item.enrollment.progress}%</span>
            </div>
            <a href={item.meta.path ? `/courses?path=${item.meta.path}` : `/courses/${item.meta.id}`} class="mt-auto text-indigo-600 hover:underline">View Course</a>
          </div>
        {/each}
      </div>
    {/if}
  </div>
{/if}===== ./src/routes/my-learning/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { getAllContentItemsByType } from '$lib/server/contentService';
import { error } from '@sveltejs/kit';

export const load: PageServerLoad = async ({ parent }) => {
  const { userProfile } = await parent(); // Get userProfile from root layout

  if (!userProfile) {
    // This case might be handled by the layout guard, but good to be safe
    return { enrolledCourses: [] }; 
  }

  const enrolledIds = userProfile.preferences?.enrollments?.map((e: { id: string }) => e.id) || [];

  if (enrolledIds.length === 0) {
    return { enrolledCourses: [] };
  }

  try {
    // Fetch metadata for all courses
    const allCourses = await getAllContentItemsByType('courses', 'course');
    
    // Filter courses based on enrollment IDs and add enrollment details
    const enrolledCourses = allCourses
      .filter(course => enrolledIds.includes(course.id))
      .map(course => {
        const enrollment = userProfile.preferences.enrollments.find((e: { id: string }) => e.id === course.id);
        return {
          meta: course, // Contains id, title, description, path etc.
          enrollment: enrollment || { progress: 0, lastAccessed: 0 } // Add default if somehow missing
        };
      });

    return { enrolledCourses };

  } catch (err) {
    console.error("Error loading enrolled courses in /my-learning:", err);
    // Use SvelteKit's error helper for server-side errors
    throw error(500, 'Failed to load enrolled courses.'); 
  }
};
===== ./src/routes/help/+page.svelte =====
 ===== ./src/routes/reset-password/+page.svelte =====
<script lang="ts">
  import ResetPassword from '$lib/components/ResetPassword.svelte';
  import { loading } from '$lib/stores/authStore.js';
</script>

<svelte:head>
  <title>Reset Password - LearnFlow</title>
</svelte:head>

<div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
  {#if $loading}
    <div class="flex flex-col items-center justify-center">
      <div class="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
    </div>
  {:else}
    <ResetPassword />
  {/if}
</div> ===== ./src/routes/calendar/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade } from 'svelte/transition';

  // Types
  type CalendarEvent = {
    id: string;
    title: string;
    date: string;
    time?: string;
    type: 'lesson' | 'assignment' | 'deadline' | 'event';
    description?: string;
    course?: string;
    location?: string;
    color?: string;
    completed?: boolean;
  };

  // Mock events data
  const events: CalendarEvent[] = [
    {
      id: 'event-1',
      title: 'Introduction to JavaScript',
      date: '2023-04-12',
      time: '10:00 AM',
      type: 'lesson',
      description: 'Learn the basics of JavaScript programming language',
      course: 'Web Development Fundamentals',
      color: 'indigo'
    },
    {
      id: 'event-2',
      title: 'CSS Layout Assignment',
      date: '2023-04-14',
      time: '11:59 PM',
      type: 'assignment',
      description: 'Complete the CSS grid and flexbox assignment',
      course: 'Web Development Fundamentals',
      color: 'red'
    },
    {
      id: 'event-3',
      title: 'Data Visualization Workshop',
      date: '2023-04-18',
      time: '2:00 PM',
      type: 'event',
      description: 'Online workshop on data visualization techniques',
      location: 'Zoom Meeting',
      color: 'green'
    },
    {
      id: 'event-4',
      title: 'Project Proposal Deadline',
      date: '2023-04-20',
      time: '11:59 PM',
      type: 'deadline',
      description: 'Submit your project proposal',
      course: 'UX Research Methods',
      color: 'orange'
    },
    {
      id: 'event-5',
      title: 'Python Data Analysis',
      date: '2023-04-05',
      time: '3:30 PM',
      type: 'lesson',
      description: 'Using pandas for data analysis',
      course: 'Data Science Fundamentals',
      color: 'indigo',
      completed: true
    },
    {
      id: 'event-6',
      title: 'Machine Learning Quiz',
      date: '2023-04-25',
      time: '9:00 AM',
      type: 'assignment',
      description: 'Quiz on supervised learning algorithms',
      course: 'Machine Learning Basics',
      color: 'red'
    }
  ];

  // Calendar state
  let currentDate = new Date();
  let currentView = 'month';
  let currentYear = currentDate.getFullYear();
  let currentMonth = currentDate.getMonth();

  // Navigation functions
  function prevMonth() {
    if (currentMonth === 0) {
      currentYear -= 1;
      currentMonth = 11;
    } else {
      currentMonth -= 1;
    }
    currentDate = new Date(currentYear, currentMonth, 1); // Update currentDate
  }

  function nextMonth() {
    if (currentMonth === 11) {
      currentYear += 1;
      currentMonth = 0;
    } else {
      currentMonth += 1;
    }
    currentDate = new Date(currentYear, currentMonth, 1); // Update currentDate
  }

  function goToToday() {
    const today = new Date();
    currentYear = today.getFullYear();
    currentMonth = today.getMonth();
    currentDate = today; // Update currentDate to today
  }

  // Calendar helpers
  function getDaysInMonth(year: number, month: number): number {
    return new Date(year, month + 1, 0).getDate();
  }

  function getFirstDayOfMonth(year: number, month: number): number {
    return new Date(year, month, 1).getDay();
  }

  function getEventsForDay(year: number, month: number, day: number): CalendarEvent[] {
    const dateString = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    return events.filter(event => event.date === dateString);
  }

  function getEventsForMonth(year: number, month: number): CalendarEvent[] {
    const monthString = String(month + 1).padStart(2, '0');
    const datePrefix = `${year}-${monthString}`;
    return events.filter(event => event.date.startsWith(datePrefix))
      .sort((a, b) => {
        // Sort by date first
        if (a.date !== b.date) {
          return a.date.localeCompare(b.date);
        }
        // Then by time if available
        if (a.time && b.time) {
          // Simple time comparison (needs improvement for robust AM/PM handling)
          return a.time.localeCompare(b.time);
        }
        return 0;
      });
  }

  function formatMonthYear(date: Date): string {
    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
  }

  function getDayName(day: number): string {
    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][day];
  }

  function isSameDay(date1: Date, date2: Date): boolean {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    );
  }

  function getEventIcon(type: string): string {
    switch(type) {
      case 'lesson': return 'fa-book';
      case 'assignment': return 'fa-tasks';
      case 'deadline': return 'fa-clock';
      case 'event': return 'fa-calendar-alt';
      default: return 'fa-calendar-alt';
    }
  }

  // Build the days array for the month view
  let calendarDays: Array<{
    day: number;
    isCurrentMonth: boolean;
    isToday: boolean;
    events: CalendarEvent[];
  }> = [];

  $: {
    const daysInMonth = getDaysInMonth(currentYear, currentMonth);
    const firstDayOfMonth = getFirstDayOfMonth(currentYear, currentMonth);
    const today = new Date();

    // Previous month days
    const prevMonthDays = [];
    if (firstDayOfMonth > 0) {
      const daysInPrevMonth = getDaysInMonth(currentYear, currentMonth - 1);
      for (let i = daysInPrevMonth - firstDayOfMonth + 1; i <= daysInPrevMonth; i++) {
        prevMonthDays.push({ day: i, isCurrentMonth: false, isToday: false, events: [] });
      }
    }

    // Current month days
    const currentMonthDays = Array.from({ length: daysInMonth }).map((_, index) => {
      const day = index + 1;
      const date = new Date(currentYear, currentMonth, day);
      return {
        day,
        isCurrentMonth: true,
        isToday: isSameDay(date, today),
        events: getEventsForDay(currentYear, currentMonth, day)
      };
    });
    
    const allDays = [...prevMonthDays, ...currentMonthDays];

    // Next month days (to fill up to 6 weeks/42 cells for consistent height)
    const cellsNeeded = 42 - allDays.length;
    const nextMonthDays = Array.from({ length: cellsNeeded }).map((_, index) => {
      return { day: index + 1, isCurrentMonth: false, isToday: false, events: [] };
    });

    calendarDays = [...allDays, ...nextMonthDays];
  }

  // Get events for the selected month
  $: monthEvents = getEventsForMonth(currentYear, currentMonth);

  let loading = true;

  onMount(() => {
    setTimeout(() => {
      loading = false;
    }, 800);
  });
</script>

<svelte:head>
  <title>Calendar | LearnFlow</title>
</svelte:head>

<div class="container mx-auto px-4 py-8 max-w-6xl">
  {#if loading}
    <div class="flex justify-center items-center h-64">
      <div class="loader"></div>
    </div>
  {:else}
    <div in:fade={{ duration: 300 }}>
      <!-- Header Section -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Calendar</h1>
          <p class="text-gray-600 dark:text-gray-400">Manage your learning schedule and deadlines</p>
        </div>

        <div class="mt-4 md:mt-0 flex space-x-2">
          <button
            on:click={goToToday}
            class="px-4 py-2 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md text-sm font-medium border border-gray-300 dark:border-gray-600 transition-colors flex items-center"
          >
            <i class="fas fa-calendar-day mr-2"></i>
            Today
          </button>
          <a
            href="/calendar/add"
            class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium flex items-center transition-colors"
          >
            <i class="fas fa-plus mr-2"></i>
            Add Event
          </a>
        </div>
      </div>

      <!-- Calendar Controls -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 mb-6">
        <div class="p-4 flex flex-col sm:flex-row justify-between items-center border-b border-gray-200 dark:border-gray-700">
          <!-- Month/Year Navigation -->
          <div class="flex items-center mb-4 sm:mb-0">
            <button
              on:click={prevMonth}
              class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 focus:outline-none"
              aria-label="Previous month"
            >
              <i class="fas fa-chevron-left"></i>
            </button>

            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mx-4">
              {formatMonthYear(currentDate)}
            </h2>

            <button
              on:click={nextMonth}
              class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 focus:outline-none"
              aria-label="Next month"
            >
              <i class="fas fa-chevron-right"></i>
            </button>
          </div>

          <!-- View Toggle -->
          <div class="inline-flex rounded-md shadow-sm">
            <button
              on:click={() => currentView = 'month'}
              class={`px-4 py-2 text-sm font-medium border ${
                currentView === 'month'
                  ? 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
              } rounded-l-md transition-colors`}
            >
              <i class="fas fa-calendar-alt mr-1"></i>
              Month
            </button>
            <button
              on:click={() => currentView = 'week'}
              class={`px-4 py-2 text-sm font-medium border-t border-b ${
                currentView === 'week'
                  ? 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
              } transition-colors`}
            >
              <i class="fas fa-calendar-week mr-1"></i>
              Week
            </button>
            <button
              on:click={() => currentView = 'day'}
              class={`px-4 py-2 text-sm font-medium border-t border-b ${
                currentView === 'day'
                  ? 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
              } transition-colors`}
            >
              <i class="fas fa-calendar-day mr-1"></i>
              Day
            </button>
            <button
              on:click={() => currentView = 'list'}
              class={`px-4 py-2 text-sm font-medium border ${
                currentView === 'list'
                  ? 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
              } rounded-r-md transition-colors`}
            >
              <i class="fas fa-list mr-1"></i>
              List
            </button>
          </div>
        </div>
      </div>

      <!-- Calendar Views -->
      {#if currentView === 'month'}
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
          <!-- Day headers -->
          <div class="grid grid-cols-7 border-b border-gray-200 dark:border-gray-700">
            {#each ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] as day}
              <div class="py-2 text-center text-sm font-medium text-gray-600 dark:text-gray-400">
                {day}
              </div>
            {/each}
          </div>

          <!-- Calendar days -->
          <div class="grid grid-cols-7 grid-rows-6">
            {#each calendarDays as { day, isCurrentMonth, isToday, events } (day + isCurrentMonth.toString())}
              <div
                class={`min-h-[120px] p-1.5 border-r border-b border-gray-200 dark:border-gray-700 last:border-r-0 flex flex-col ${
                  isCurrentMonth ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-850'
                } ${isToday ? 'ring-2 ring-inset ring-indigo-500 dark:ring-indigo-400 z-10' : ''}`}
              >
                <div class="flex justify-between items-center mb-1">
                  <div
                    class={`text-sm font-medium rounded-full w-7 h-7 flex items-center justify-center ${
                      isToday
                        ? 'bg-indigo-500 text-white'
                        : isCurrentMonth
                          ? 'text-gray-900 dark:text-white'
                          : 'text-gray-400 dark:text-gray-500'
                    }`}
                  >
                    {day}
                  </div>
                  <!-- Add event button on hover? -->
                </div>

                {#if isCurrentMonth && events.length > 0}
                  <div class="flex-1 mt-1 space-y-1 overflow-y-auto">
                    {#each events as event}
                      <div
                        class="text-xs p-1 rounded bg-{event.color || 'indigo'}-100 dark:bg-{event.color || 'indigo'}-900/20
                               text-{event.color || 'indigo'}-700 dark:text-{event.color || 'indigo'}-300
                               flex items-center opacity-90 hover:opacity-100 cursor-pointer truncate border-l-2
                               border-{event.color || 'indigo'}-500"
                        title={event.title}
                      >
                        <i class={`fas ${getEventIcon(event.type)} mr-1 text-{event.color || 'indigo'}-500 dark:text-{event.color || 'indigo'}-400`}></i>
                        <span class="truncate">{event.title}</span>
                      </div>
                    {/each}
                  </div>
                {/if}
              </div>
            {/each}
          </div>
        </div>

      {:else if currentView === 'list'}
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700">
          <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-lg font-semibold text-gray-900 dark:text-white">
              {formatMonthYear(currentDate)} Events
            </h2>
          </div>

          {#if monthEvents.length === 0}
            <div class="p-8 text-center">
              <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full mx-auto flex items-center justify-center mb-4">
                <i class="fas fa-calendar text-gray-400 dark:text-gray-500 text-2xl"></i>
              </div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No events scheduled</h3>
              <p class="text-gray-600 dark:text-gray-400 mb-4">
                You don't have any events scheduled for this month.
              </p>
              <a
                href="/calendar/add"
                class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors"
              >
                <i class="fas fa-plus mr-2"></i>
                Add Event
              </a>
            </div>
          {:else}
            <div class="divide-y divide-gray-200 dark:divide-gray-700">
              {#each monthEvents as event}
                <div class="p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                  <div class="flex items-start">
                    <!-- Event Type Icon -->
                    <div class="mr-4 flex-shrink-0 mt-1">
                      <div class="w-10 h-10 rounded-full flex items-center justify-center bg-{event.color || 'indigo'}-100 dark:bg-{event.color || 'indigo'}-900/20">
                        <i class={`fas ${getEventIcon(event.type)} text-{event.color || 'indigo'}-600 dark:text-{event.color || 'indigo'}-400`}></i>
                      </div>
                    </div>

                    <!-- Event Details -->
                    <div class="flex-1">
                      <h3 class="text-base font-medium text-gray-900 dark:text-white">
                        {event.title}
                        {#if event.completed}
                          <span class="ml-2 text-xs px-2 py-0.5 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300 rounded-full font-medium">
                            <i class="fas fa-check-circle mr-1"></i>Completed
                          </span>
                        {/if}
                      </h3>

                      <div class="mt-1 flex flex-wrap text-sm text-gray-500 dark:text-gray-400 gap-x-3 gap-y-1">
                        <span>
                          <i class="fas fa-calendar-day mr-1 opacity-75"></i>
                          {new Date(event.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                        </span>

                        {#if event.time}
                          <span>
                            <i class="fas fa-clock mr-1 opacity-75"></i>
                            {event.time}
                          </span>
                        {/if}

                        {#if event.course}
                          <span>
                            <i class="fas fa-graduation-cap mr-1 opacity-75"></i>
                            {event.course}
                          </span>
                        {/if}

                        {#if event.location}
                          <span>
                            <i class="fas fa-map-marker-alt mr-1 opacity-75"></i>
                            {event.location}
                          </span>
                        {/if}

                        <span class="capitalize">
                          <i class={`fas ${getEventIcon(event.type)} mr-1 opacity-75`}></i>
                          {event.type}
                        </span>
                      </div>

                      {#if event.description}
                        <p class="mt-2 text-sm text-gray-600 dark:text-gray-300">
                          {event.description}
                        </p>
                      {/if}
                    </div>

                    <!-- Actions -->
                    <div class="ml-4 flex-shrink-0 flex space-x-1">
                      <button class="p-1 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300" title="Edit">
                        <i class="fas fa-pencil-alt text-xs"></i>
                      </button>
                      {#if !event.completed && (event.type === 'lesson' || event.type === 'assignment')}
                        <button class="p-1 text-gray-400 hover:text-green-600 dark:text-gray-500 dark:hover:text-green-400" title="Mark as completed">
                          <i class="fas fa-check text-xs"></i>
                        </button>
                      {/if}
                      <button class="p-1 text-gray-400 hover:text-red-600 dark:text-gray-500 dark:hover:text-red-400" title="Delete">
                        <i class="fas fa-trash-alt text-xs"></i>
                      </button>
                    </div>
                  </div>
                </div>
              {/each}
            </div>
          {/if}
        </div>

      <!-- Placeholder for Week/Day views -->
      {:else}
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-8 text-center">
          <div class="w-16 h-16 bg-indigo-100 dark:bg-indigo-900/20 rounded-full mx-auto flex items-center justify-center mb-4">
            <i class={`fas fa-calendar-${currentView === 'week' ? 'week' : 'day'} text-indigo-600 dark:text-indigo-400 text-2xl`}></i>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">{currentView === 'week' ? 'Week' : 'Day'} View Coming Soon</h3>
          <p class="text-gray-600 dark:text-gray-400 mb-6">
            We're working on a detailed {currentView} view. For now, you can use the month or list view to see your scheduled events.
          </p>
          <button
            on:click={() => currentView = 'month'}
            class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-md transition-colors"
          >
            Return to Month View
          </button>
        </div>
      {/if}
    </div>
  {/if}
</div>

<style>
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Ensure calendar grid maintains height */
  .grid-rows-6 {
    grid-template-rows: repeat(6, minmax(120px, 1fr));
  }
</style>===== ./src/routes/forums/category/[id]/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { categories, topics, loadCategories, loadTopics, isLoading, error, getCategoryById } from '$lib/stores/forumStore';
  import CreateTopicForm from '$lib/components/forums/CreateTopicForm.svelte';
  import Icon from '@iconify/svelte';
  
  let categoryId = $page.params.id;
  let searchQuery = '';
  let filteredTopics: typeof $topics = [];
  let showCreateForm = false;
  let category: ReturnType<typeof getCategoryById>;
  
  $: {
    // Filter topics based on search query
    filteredTopics = searchQuery ? 
      $topics.filter(topic => 
        topic.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        topic.content.toLowerCase().includes(searchQuery.toLowerCase())
      ) : 
      $topics;
  }
  
  $: {
    category = getCategoryById(categoryId);
  }
  
  onMount(async () => {
    await loadCategories();
    await loadTopics(categoryId);
  });
  
  function toggleCreateForm() {
    showCreateForm = !showCreateForm;
  }
</script>

<div class="container mx-auto px-4 py-8">
  <div class="mb-6">
    <a href="/forums" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
      <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
      Back to Forums
    </a>
    
    {#if category}
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">{category.name}</h1>
      <p class="text-gray-600 dark:text-gray-400 mt-2">{category.description}</p>
    {:else if !$isLoading}
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Category</h1>
      <p class="text-gray-600 dark:text-gray-400 mt-2">Loading category details...</p>
    {/if}
  </div>
  
  <div class="flex justify-between items-center mb-6">
    <div class="relative">
      <input
        type="text"
        bind:value={searchQuery}
        placeholder="Search topics..."
        class="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
      />
      <Icon icon="mdi:magnify" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
    </div>
    
    <button 
      on:click={toggleCreateForm}
      class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors"
    >
      {showCreateForm ? 'Cancel' : 'Create New Topic'}
    </button>
  </div>
  
  {#if showCreateForm}
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
      <CreateTopicForm {categoryId} />
    </div>
  {/if}
  
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
      <p>{$error}</p>
    </div>
  {:else if filteredTopics.length === 0}
    <div class="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <Icon icon="mdi:forum-outline" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No topics found</h3>
      {#if searchQuery}
        <p class="text-gray-600 dark:text-gray-400">No topics match your search criteria.</p>
      {:else}
        <p class="text-gray-600 dark:text-gray-400">There are no topics in this category yet. Be the first to create one!</p>
      {/if}
    </div>
  {:else}
    <div class="space-y-4">
      {#each filteredTopics as topic}
        <a href="/forums/topic/{topic.id}" class="block">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow {topic.isPinned ? 'border-l-4 border-cherry-500 dark:border-cherry-400' : ''}">
            <div class="p-4">
              <div class="flex items-start">
                {#if topic.isPinned}
                  <div class="flex-shrink-0 mr-3">
                    <Icon icon="mdi:pin" class="w-5 h-5 text-cherry-600 dark:text-cherry-400" />
                  </div>
                {/if}
                
                <div class="flex-1">
                  <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{topic.title}</h4>
                  
                  <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-2">
                    <span>{topic.authorName || 'Unknown'}</span>
                    <span class="mx-2">•</span>
                    <span>{new Date(topic.createdAt).toLocaleDateString()}</span>
                    <span class="mx-2">•</span>
                    <span class="flex items-center">
                      <Icon icon="mdi:eye-outline" class="w-4 h-4 mr-1" />
                      {topic.viewCount}
                    </span>
                    <span class="mx-2">•</span>
                    <span class="flex items-center">
                      <Icon icon="mdi:comment-outline" class="w-4 h-4 mr-1" />
                      {topic.replyCount}
                    </span>
                  </div>
                  
                  {#if topic.tags && topic.tags.length > 0}
                    <div class="flex flex-wrap gap-2">
                      {#each topic.tags as tag}
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
                          {tag}
                        </span>
                      {/each}
                    </div>
                  {/if}
                </div>
              </div>
            </div>
          </div>
        </a>
      {/each}
    </div>
  {/if}
</div>===== ./src/routes/forums/category/[id]/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';
import { error } from '@sveltejs/kit';

export const load: PageServerLoad = async ({ params }) => {
  const categories = await getAllCategories();
  const allTopics = await getAllTopics();
  const topics = allTopics.filter(t => t.category === params.id || t.category_id === params.id);
  if (!categories.find(c => c.id === params.id)) {
    throw error(404, 'Category not found');
  }
  return { topics, categories, selectedCategory: params.id };
};===== ./src/routes/forums/+page.svelte =====
<script lang="ts">
  import ForumList from '$lib/components/forums/ForumList.svelte';
  import { onMount } from 'svelte';
  import { topics, loadTopics, isLoading, error, pinnedTopics, recentTopics } from '$lib/stores/forumStore';
  import Icon from '@iconify/svelte';
  
  let searchQuery = '';
  let filteredTopics: typeof $topics = [];
  
  onMount(() => {
    loadTopics();
  });
  
  $: {
    // Filter topics based on search query
    filteredTopics = searchQuery ? 
      $topics.filter(topic => 
        topic.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        topic.content.toLowerCase().includes(searchQuery.toLowerCase())
      ) : 
      $topics;
  }
</script>

<div class="container mx-auto px-4 py-8">
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <div class="lg:col-span-2">
      <ForumList />
      
      {#if $topics.length > 0}
        <div class="mt-12">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Recent Discussions</h2>
            
            <div class="relative">
              <input
                type="text"
                bind:value={searchQuery}
                placeholder="Search topics..."
                class="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
              />
              <Icon icon="mdi:magnify" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
          </div>
          
          {#if $isLoading}
            <div class="flex justify-center items-center py-12">
              <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
            </div>
          {:else if $error}
            <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
              <p>{$error}</p>
            </div>
          {:else if searchQuery && filteredTopics.length === 0}
            <div class="text-center py-12">
              <Icon icon="mdi:search-off" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No matching topics</h3>
              <p class="text-gray-600 dark:text-gray-400">No topics match your search query. Try different keywords.</p>
            </div>
          {:else}
            {#if $pinnedTopics.length > 0 && !searchQuery}
              <div class="mb-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Pinned Topics</h3>
                
                <div class="space-y-4">
                  {#each $pinnedTopics as topic}
                    <a href="/forums/topic/{topic.id}" class="block">
                      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow border-l-4 border-cherry-500 dark:border-cherry-400">
                        <div class="p-4">
                          <div class="flex items-start">
                            <div class="flex-shrink-0 mr-3">
                              <Icon icon="mdi:pin" class="w-5 h-5 text-cherry-600 dark:text-cherry-400" />
                            </div>
                            
                            <div class="flex-1">
                              <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{topic.title}</h4>
                              
                              <div class="flex items-center text-sm text-gray-600 dark:text-gray-400">
                                <span>{topic.authorName || 'Unknown'}</span>
                                <span class="mx-2">•</span>
                                <span>{new Date(topic.createdAt).toLocaleDateString()}</span>
                                <span class="mx-2">•</span>
                                <span class="flex items-center">
                                  <Icon icon="mdi:comment-outline" class="w-4 h-4 mr-1" />
                                  {topic.replyCount}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  {/each}
                </div>
              </div>
            {/if}
            
            <div class="space-y-4">
              {#each (searchQuery ? filteredTopics : $recentTopics) as topic}
                <a href="/forums/topic/{topic.id}" class="block">
                  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                    <div class="p-4">
                      <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{topic.title}</h4>
                      
                      <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-2">
                        <span>{topic.authorName || 'Unknown'}</span>
                        <span class="mx-2">•</span>
                        <span>{new Date(topic.createdAt).toLocaleDateString()}</span>
                        <span class="mx-2">•</span>
                        <span class="flex items-center">
                          <Icon icon="mdi:eye-outline" class="w-4 h-4 mr-1" />
                          {topic.viewCount}
                        </span>
                        <span class="mx-2">•</span>
                        <span class="flex items-center">
                          <Icon icon="mdi:comment-outline" class="w-4 h-4 mr-1" />
                          {topic.replyCount}
                        </span>
                      </div>
                      
                      {#if topic.tags && topic.tags.length > 0}
                        <div class="flex flex-wrap gap-2">
                          {#each topic.tags as tag}
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
                              {tag}
                            </span>
                          {/each}
                        </div>
                      {/if}
                    </div>
                  </div>
                </a>
              {/each}
            </div>
          {/if}
        </div>
      {/if}
    </div>
    
    <div class="lg:col-span-1">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 mb-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Start a Discussion</h3>
        <p class="text-gray-600 dark:text-gray-400 mb-4">Have a question or want to share something with the community?</p>
        <a 
          href="/forums/create" 
          class="inline-block w-full px-4 py-2 text-center bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors"
        >
          Create New Topic
        </a>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Forum Guidelines</h3>
        <ul class="space-y-2 text-gray-600 dark:text-gray-400">
          <li class="flex items-start">
            <Icon icon="mdi:check-circle" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2 flex-shrink-0 mt-0.5" />
            <span>Be respectful and kind to others</span>
          </li>
          <li class="flex items-start">
            <Icon icon="mdi:check-circle" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2 flex-shrink-0 mt-0.5" />
            <span>Stay on topic and use appropriate categories</span>
          </li>
          <li class="flex items-start">
            <Icon icon="mdi:check-circle" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2 flex-shrink-0 mt-0.5" />
            <span>Search before posting to avoid duplicates</span>
          </li>
          <li class="flex items-start">
            <Icon icon="mdi:check-circle" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2 flex-shrink-0 mt-0.5" />
            <span>Use descriptive titles for your topics</span>
          </li>
          <li class="flex items-start">
            <Icon icon="mdi:check-circle" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2 flex-shrink-0 mt-0.5" />
            <span>Format code properly using markdown</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>===== ./src/routes/forums/tag/[tag]/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { topics, filterTopicsByTag, clearTagFilter, isLoading, error, activeTagFilter } from '$lib/stores/forumStore';
  import Icon from '@iconify/svelte';
  
  let tag = $page.params.tag;
  
  onMount(() => {
    filterTopicsByTag(tag);
    
    return () => {
      clearTagFilter();
    };
  });
</script>

<div class="container mx-auto px-4 py-8">
  <div class="mb-6">
    <a href="/forums" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
      <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
      Back to Forums
    </a>
    
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
      <span>Topics tagged:</span> 
      <span class="ml-2 px-2.5 py-0.5 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
        {tag}
      </span>
    </h1>
  </div>
  
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
      <p>{$error}</p>
    </div>
  {:else if $topics.length === 0}
    <div class="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <Icon icon="mdi:tag-outline" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No topics found</h3>
      <p class="text-gray-600 dark:text-gray-400">There are no topics with the tag "{tag}".</p>
    </div>
  {:else}
    <div class="space-y-4">
      {#each $topics as topic}
        <a href="/forums/topic/{topic.id}" class="block">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            <div class="p-4">
              <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-1">{topic.title}</h4>
              
              <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-2">
                <span>{topic.authorName || 'Unknown'}</span>
                <span class="mx-2">•</span>
                <span>{new Date(topic.createdAt).toLocaleDateString()}</span>
                <span class="mx-2">•</span>
                <span class="flex items-center">
                  <Icon icon="mdi:eye-outline" class="w-4 h-4 mr-1" />
                  {topic.viewCount}
                </span>
                <span class="mx-2">•</span>
                <span class="flex items-center">
                  <Icon icon="mdi:comment-outline" class="w-4 h-4 mr-1" />
                  {topic.replyCount}
                </span>
              </div>
              
              <div class="flex flex-wrap gap-2">
                {#each topic.tags || [] as topicTag}
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {topicTag === tag ? 'bg-cherry-100 dark:bg-cherry-900/30 text-cherry-800 dark:text-cherry-400' : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'}">
                    {topicTag}
                  </span>
                {/each}
              </div>
            </div>
          </div>
        </a>
      {/each}
    </div>
  {/if}
</div>===== ./src/routes/forums/tag/[tag]/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
import { getAllTopics, getAllCategories } from '$lib/services/forumService';

export const load: PageServerLoad = async ({ params }) => {
  const categories = await getAllCategories();
  const allTopics = await getAllTopics();
  const topics = allTopics.filter(t => t.tags?.includes(params.tag));
  if (!topics) {
    throw error(404, 'Tag not found or no topics');
  }
  return { topics, categories, selectedTag: params.tag };
};===== ./src/routes/forums/create/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { loadCategories } from '$lib/stores/forumStore';
  import CreateTopicForm from '$lib/components/forums/CreateTopicForm.svelte';
  import Icon from '@iconify/svelte';
</script>

<div class="container mx-auto px-4 py-8">
  <div class="max-w-3xl mx-auto">
    <div class="mb-6">
      <a href="/forums" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
        <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
        Back to Forums
      </a>
      
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Create New Topic</h1>
    </div>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <CreateTopicForm />
    </div>
  </div>
</div>
===== ./src/routes/forums/topic/[id]/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import ForumTopic from '$lib/components/forums/ForumTopic.svelte';
  
  const topicId = $page.params.id;
</script>

<div class="container mx-auto px-4 py-8">
  <ForumTopic {topicId} />
</div>

<style>
  /* Add any component-specific styles here */
</style>===== ./src/routes/forums/topic/[id]/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
import { getTopicById, getPostsByTopicId } from '$lib/services/forums/forumService';

export const load: PageServerLoad = async ({ params }) => {
  const topic = await getTopicById(params.id);
  if (!topic) {
    throw error(404, 'Topic not found');
  }
  const posts = await getPostsByTopicId(params.id);
  return { topic, posts };
};===== ./src/routes/forums/+page.server.ts =====
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async () => {
  try {
    const [topics, categories] = await Promise.all([
      getAllTopics(),
      getAllCategories()
    ]);
    return {
      topics,
      categories
    };
  } catch (error) {
    console.error('Error loading forum data:', error);
    return {
      topics: [],
      categories: [],
      error: 'Failed to load forum data'
    };
  }
};===== ./src/routes/(protected)/+layout.svelte =====
<script lang="ts">
  import { goto } from '$app/navigation';
  import { page } from '$app/stores';
  import { isAuthenticated, user, loading } from '$lib/stores/authStore.js';
  import { fade } from 'svelte/transition';
  import { onMount } from 'svelte';

  let checked = false;
  
  onMount(() => {
    console.log('Protected layout mounted', { 
      isAuthenticated: $isAuthenticated, 
      loading: $loading,
      user: $user ? { email: $user.email } : null 
    });
  });
  
  // Redirect if not authenticated
  $: if (!$loading && !checked) {
    checked = true;
    console.log('Auth check in protected layout:', {
      isAuthenticated: $isAuthenticated,
      loading: $loading
    });
    
    if (!$isAuthenticated) {
      console.warn('User not authenticated, redirecting to login');
      goto('/login?redirect=' + encodeURIComponent($page.url.pathname));
    }
  }
</script>

{#if $loading || !checked}
  <div in:fade class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex justify-center items-center">
    <div class="flex flex-col items-center">
      <div class="w-16 h-16 border-4 border-t-indigo-500 border-indigo-200 rounded-full animate-spin"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Verifying authentication...</p>
    </div>
  </div>
{:else if $isAuthenticated}
  <slot />
{:else}
  <div in:fade class="flex justify-center items-center min-h-screen bg-gray-100 dark:bg-gray-900">
    <div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg max-w-md w-full">
      <div class="text-center">
        <div class="mb-4 flex justify-center">
          <div class="h-16 w-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center">
            <i class="fas fa-lock text-red-600 dark:text-red-400 text-2xl"></i>
          </div>
        </div>
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Authentication Required</h2>
        <p class="text-gray-600 dark:text-gray-400 mb-6">
          You need to be logged in to access this page.
        </p>
        <a href="/login" class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded">
          Go to Login
        </a>
      </div>
    </div>
  </div>
{/if} ===== ./src/routes/+layout.server.ts =====
import type { LayoutServerLoad } from './$types.js';
import type { Cookies } from '@sveltejs/kit';
import { setupCsrfToken } from '$lib/utils/csrf.server.js';

export const load: LayoutServerLoad = async ({ cookies }: { cookies: Cookies }) => {
  // Generate and set CSRF token in cookies
  const csrfToken = setupCsrfToken(cookies);
  return { csrfToken };
};===== ./src/routes/admin/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { user } from '$lib/stores/authStore.js';
  import { fade } from 'svelte/transition';
  let currentUser;
  $: currentUser = $user;
</script>

<svelte:head>
  <title>Admin Dashboard | LearnFlow</title>
</svelte:head>

<div class="container mx-auto px-4 py-8" in:fade>
  <h1 class="text-3xl font-bold mb-6">Admin Dashboard</h1>
  <p class="mb-4 text-gray-600">Welcome, {currentUser?.displayName || currentUser?.email}!</p>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
    <!-- Users management -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col justify-between">
      <div>
        <h2 class="text-xl font-semibold mb-2">User Management</h2>
        <p class="text-gray-500 mb-4">Create, edit, and manage user accounts and roles.</p>
      </div>
      <a href="/admin/users" class="mt-auto inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded">Manage Users</a>
    </div>
    <!-- Courses management -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col justify-between">
      <div>
        <h2 class="text-xl font-semibold mb-2">Course Management</h2>
        <p class="text-gray-500 mb-4">Add, update, or remove courses and content.</p>
      </div>
      <a href="/admin/courses" class="mt-auto inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded">Manage Courses</a>
    </div>
    <!-- Forums management -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col justify-between">
      <div>
        <h2 class="text-xl font-semibold mb-2">Forum Management</h2>
        <p class="text-gray-500 mb-4">Moderate topics, posts, and categories.</p>
      </div>
      <a href="/admin/forums" class="mt-auto inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded">Manage Forums</a>
    </div>
    <!-- Events management -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col justify-between">
      <div>
        <h2 class="text-xl font-semibold mb-2">Event Management</h2>
        <p class="text-gray-500 mb-4">Create and manage events and schedules.</p>
      </div>
      <a href="/admin/events" class="mt-auto inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded">Manage Events</a>
    </div>
    <!-- Groups management -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col justify-between">
      <div>
        <h2 class="text-xl font-semibold mb-2">Group Management</h2>
        <p class="text-gray-500 mb-4">Oversee user groups and permissions.</p>
      </div>
      <a href="/admin/groups" class="mt-auto inline-block px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded">Manage Groups</a>
    </div>
  </div>
</div>===== ./src/routes/admin/forums/category/[id]/edit/+page.svelte =====
<script lang="ts">
  import { getForumCategory, updateForumCategory } from '$lib/services/forums/forumService';
  let category = { name: '', description: '' };
  export let params: { id: string };
  async function loadCategory(id: string) {
    category = await getForumCategory(id);
  }
  loadCategory(params.id);
  async function handleSubmit() {
    await updateForumCategory(category.id, category);
  }
</script>

<form on:submit|preventDefault={handleSubmit}>
  <input bind:value={category.name} placeholder="Category Name" />
  <textarea bind:value={category.description} placeholder="Description" />
  <button type="submit">Save</button>
</form>===== ./src/routes/admin/forums/category/[id]/edit/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { getCategory } from '$lib/services/forumService';

export const load: PageServerLoad = async ({ params }) => {
  const category = await getCategory(params.id);
  return { category };
};===== ./src/routes/admin/forums/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { categories, loadCategories, isLoading, error } from '$lib/stores/forumStore';
  import { createForumCategory, deleteForumCategory } from '$lib/services/forums/forumService';
  import type { ForumCategory } from '$lib/types/forumTypes';
  import Icon from '@iconify/svelte';
  
  let showCreateForm = false;
  let newCategoryName = '';
  let newCategoryDescription = '';
  let newCategoryImageUrl = '';
  
  let isCreating = false;
  let createError: string | null = null;
  let createSuccess: string | null = null;
  
  onMount(() => {
    loadCategories();
  });
  
  function toggleCreateForm() {
    showCreateForm = !showCreateForm;
    if (!showCreateForm) {
      newCategoryName = '';
      newCategoryDescription = '';
      newCategoryImageUrl = '';
      createError = null;
      createSuccess = null;
    }
  }
  
  async function handleCreateCategory() {
    if (!newCategoryName.trim() || !newCategoryDescription.trim()) {
      createError = 'Name and description are required';
      return;
    }
    
    isCreating = true;
    createError = null;
    createSuccess = null;
    
    try {
      const newCategory = await createForumCategory({
        name: newCategoryName.trim(),
        description: newCategoryDescription.trim(),
        ...(newCategoryImageUrl ? { imageUrl: newCategoryImageUrl.trim() } : {})
      });
      
      if (newCategory) {
        createSuccess = 'Category created successfully!';
        newCategoryName = '';
        newCategoryDescription = '';
        newCategoryImageUrl = '';
        
        // Reload categories to include the new one
        await loadCategories();
        
        setTimeout(() => {
          showCreateForm = false;
          createSuccess = null;
        }, 1500);
      } else {
        createError = 'Failed to create category. Please try again.';
      }
    } catch (err) {
      console.error('Error creating category:', err);
      createError = 'An error occurred while creating the category.';
    } finally {
      isCreating = false;
    }
  }
  
  async function handleDeleteCategory(categoryId: string) {
    if (!confirm('Are you sure you want to delete this category? This will also delete all topics in this category and cannot be undone.')) {
      return;
    }
    
    try {
      const result = await deleteForumCategory(categoryId);
      
      if (result) {
        await loadCategories();
      } else {
        alert('Failed to delete category. Please try again.');
      }
    } catch (err) {
      console.error('Error deleting category:', err);
      alert('An error occurred while deleting the category.');
    }
  }
</script>

<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Forum Administration</h1>
    
    <button 
      on:click={toggleCreateForm}
      class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 transition-colors"
    >
      {showCreateForm ? 'Cancel' : 'Create Category'}
    </button>
  </div>
  
  {#if showCreateForm}
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Create New Category</h2>
      
      {#if createError}
        <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
          <p>{createError}</p>
        </div>
      {/if}
      
      {#if createSuccess}
        <div class="bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 p-4 rounded-md mb-6">
          <p>{createSuccess}</p>
        </div>
      {/if}
      
      <div class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Name *
          </label>
          <input
            type="text"
            id="name"
            bind:value={newCategoryName}
            placeholder="e.g., General Discussion"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
            disabled={isCreating}
          />
        </div>
        
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Description *
          </label>
          <textarea
            id="description"
            bind:value={newCategoryDescription}
            placeholder="A short description of what this category is for."
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[100px]"
            disabled={isCreating}
          ></textarea>
        </div>
        
        <div>
          <label for="imageUrl" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Image URL (optional)
          </label>
          <input
            type="text"
            id="imageUrl"
            bind:value={newCategoryImageUrl}
            placeholder="https://example.com/image.jpg"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
            disabled={isCreating}
          />
        </div>
        
        <div class="flex justify-end">
          <button 
            on:click={handleCreateCategory}
            disabled={isCreating || !newCategoryName.trim() || !newCategoryDescription.trim()}
            class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isCreating ? 'Creating...' : 'Create Category'}
          </button>
        </div>
      </div>
    </div>
  {/if}
  
  <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Forum Categories</h2>
  
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
      <p>{$error}</p>
    </div>
  {:else if $categories.length === 0}
    <div class="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <Icon icon="mdi:forum-outline" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No categories found</h3>
      <p class="text-gray-600 dark:text-gray-400">
        There are no forum categories yet. Create your first category to get started.
      </p>
    </div>
  {:else}
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-900">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
              Name
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
              Description
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
              Topics
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
              Order
            </th>
            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          {#each $categories as category}
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-750">
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                {category.name}
              </td>
              <td class="px-6 py-4 text-sm text-gray-600 dark:text-gray-300 truncate max-w-[300px]">
                {category.description}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">
                {category.topicCount || 0}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">
                {category.order ?? 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <div class="flex justify-end space-x-2">
                  <a 
                    href="/admin/forums/category/{category.id}/edit" 
                    class="text-cherry-600 dark:text-cherry-400 hover:text-cherry-900 dark:hover:text-cherry-300"
                    title="Edit category"
                  >
                    <Icon icon="mdi:pencil" class="w-5 h-5" />
                  </a>
                  <button 
                    on:click={() => handleDeleteCategory(category.id)}
                    class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
                    title="Delete category"
                  >
                    <Icon icon="mdi:delete" class="w-5 h-5" />
                  </button>
                </div>
              </td>
            </tr>
          {/each}
        </tbody>
      </table>
    </div>
  {/if}
</div>===== ./src/routes/admin/forums/topic/[id]/edit/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { getForumTopic, updateForumTopic, getForumCategories } from '$lib/services/forums/forumService';
  import type { ForumCategory, ForumTopic } from '$lib/types/forumTypes';
  import { goto } from '$app/navigation';
  import Icon from '@iconify/svelte';
  
  const topicId = $page.params.id;
  
  let title = '';
  let content = '';
  let categoryId = '';
  let isPinned = false;
  let isLocked = false;
  let tags: string[] = [];
  let newTag = '';
  let categories: ForumCategory[] = [];
  
  let isLoading = true;
  let isSaving = false;
  let error: string | null = null;
  let success: string | null = null;
  
  onMount(async () => {
    try {
      const [topic, categoriesList] = await Promise.all([
        getForumTopic(topicId),
        getForumCategories()
      ]);
      
      if (!topic) {
        error = 'Topic not found';
        return;
      }
      
      title = topic.title;
      content = topic.content;
      categoryId = topic.categoryId;
      isPinned = topic.isPinned;
      isLocked = topic.isLocked;
      tags = topic.tags || [];
      categories = categoriesList;
    } catch (err) {
      console.error('Error loading topic data:', err);
      error = 'Failed to load topic data. Please try again.';
    } finally {
      isLoading = false;
    }
  });
  
  function addTag() {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      tags = [...tags, newTag.trim()];
      newTag = '';
    }
  }
  
  function removeTag(tag: string) {
    tags = tags.filter(t => t !== tag);
  }
  
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      event.preventDefault();
      addTag();
    }
  }
  
  async function handleSubmit() {
    if (!title.trim() || !content.trim() || !categoryId) {
      error = 'Title, content, and category are required';
      return;
    }
    
    isSaving = true;
    error = null;
    success = null;
    
    try {
      const result = await updateForumTopic(topicId, {
        title: title.trim(),
        content: content.trim(),
        categoryId,
        isPinned,
        isLocked,
        tags: tags.length > 0 ? tags : undefined
      });
      
      if (result) {
        success = 'Topic updated successfully!';
        setTimeout(() => {
          goto(`/forums/topic/${topicId}`);
        }, 1500);
      } else {
        error = 'Failed to update topic. Please try again.';
      }
    } catch (err) {
      console.error('Error updating topic:', err);
      error = 'An error occurred while updating the topic.';
    } finally {
      isSaving = false;
    }
  }
</script>

<!-- Placeholder for admin topic edit page -->

<div class="container mx-auto px-4 py-8">
  <div class="max-w-3xl mx-auto">
    <div class="mb-6">
      <a href="/forums/topic/{topicId}" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
        <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
        Back to Topic
      </a>
      
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Edit Forum Topic</h1>
    </div>
    
    {#if isLoading}
      <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
      </div>
    {:else}
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        {#if error}
          <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md mb-6">
            <p>{error}</p>
          </div>
        {/if}
        
        {#if success}
          <div class="bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 p-4 rounded-md mb-6">
            <p>{success}</p>
          </div>
        {/if}
        
        <div class="space-y-6">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Title *
            </label>
            <input
              type="text"
              id="title"
              bind:value={title}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
              disabled={isSaving}
            />
          </div>
          
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Category *
            </label>
            <select
              id="category"
              bind:value={categoryId}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
              disabled={isSaving}
            >
              <option value="" disabled>Select a category</option>
              {#each categories as category}
                <option value={category.id}>{category.name}</option>
              {/each}
            </select>
          </div>
          
          <div>
            <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Content *
            </label>
            <textarea
              id="content"
              bind:value={content}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400 min-h-[200px]"
              disabled={isSaving}
            ></textarea>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              You can use Markdown formatting to structure your content.
            </p>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Tags
            </label>
            <div class="flex">
              <input
                type="text"
                bind:value={newTag}
                on:keydown={handleKeydown}
                placeholder="Add tags (press Enter to add)"
                class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
                disabled={isSaving}
              />
              <button
                on:click={addTag}
                type="button"
                class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 border-l-0 rounded-r-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                disabled={isSaving || !newTag.trim()}
              >
                Add
              </button>
            </div>
            
            {#if tags.length > 0}
              <div class="flex flex-wrap gap-2 mt-2">
                {#each tags as tag}
                  <div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
                    {tag}
                    <button
                      on:click={() => removeTag(tag)}
                      type="button"
                      class="ml-1.5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
                      disabled={isSaving}
                    >
                      <Icon icon="mdi:close" class="w-4 h-4" />
                    </button>
                  </div>
                {/each}
              </div>
            {/if}
          </div>
          
          <div class="flex space-x-6">
            <div class="flex items-center">
              <input
                type="checkbox"
                id="isPinned"
                bind:checked={isPinned}
                class="h-4 w-4 text-cherry-600 dark:text-cherry-500 focus:ring-cherry-500 dark:focus:ring-cherry-400 border-gray-300 dark:border-gray-600 rounded"
                disabled={isSaving}
              />
              <label for="isPinned" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                Pin this topic
              </label>
            </div>
            
            <div class="flex items-center">
              <input
                type="checkbox"
                id="isLocked"
                bind:checked={isLocked}
                class="h-4 w-4 text-cherry-600 dark:text-cherry-500 focus:ring-cherry-500 dark:focus:ring-cherry-400 border-gray-300 dark:border-gray-600 rounded"
                disabled={isSaving}
              />
              <label for="isLocked" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                Lock this topic (no new replies)
              </label>
            </div>
          </div>
          
          <div class="flex justify-end space-x-4">
            <a 
              href="/forums/topic/{topicId}" 
              class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            >
              Cancel
            </a>
            
            <button 
              on:click={handleSubmit}
              disabled={isSaving || !title.trim() || !content.trim() || !categoryId}
              class="px-4 py-2 bg-cherry-600 text-white rounded-md hover:bg-cherry-700 dark:bg-cherry-500 dark:hover:bg-cherry-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSaving ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </div>
      </div>
    {/if}
  </div>
</div>===== ./src/routes/admin/forums/topic/[id]/edit/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { getAllCategories, getTopic } from '$lib/services/forumService';

export const load: PageServerLoad = async ({ params }) => {
  const categories = await getAllCategories();
  const topic = await getTopic(params.id);
  return { topic, categories };
};===== ./src/routes/admin/forums/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { getAllTopics, getAllCategories } from '$lib/services/forums/forumService';

export const load: PageServerLoad = async () => {
  const topics = await getAllTopics();
  const categories = await getAllCategories();
  return { topics, categories };
};===== ./src/routes/admin/users/+page.svelte =====
<script lang="ts">
  import { env } from '$env/dynamic/public';
  import type { PageData } from './$types';
  
  export let data: PageData;
  let users = data.users;
  const ADMIN_EMAILS = (env.PUBLIC_VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());
</script>

<svelte:head><title>Manage Users | Admin</title></svelte:head>
<div class="container mx-auto px-4 py-8">
  <h1 class="text-2xl font-bold mb-6">User Management</h1>
  
  {#if !users}
    <div class="flex justify-center">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
    </div>
  {:else}
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-700">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">User</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Email</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Admin Status</th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          {#each users as u (u.uid)}
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="h-8 w-8 rounded-full bg-indigo-500 flex items-center justify-center text-white">
                    {u.displayName?.charAt(0).toUpperCase() ?? u.email?.charAt(0).toUpperCase() ?? 'U'}
                  </div>
                  <div class="ml-4">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">
                      {u.displayName || 'No name'}
                    </div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900 dark:text-white">{u.email}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-500 dark:text-gray-400">
                  {new Date(u.createdAt).toLocaleDateString()}
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                {#if ADMIN_EMAILS.includes(u.email)}
                  <span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">Admin</span>
                {:else}
                  <span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">User</span>
                {/if}
              </td>
            </tr>
          {/each}
        </tbody>
      </table>
    </div>
  {/if}
</div>===== ./src/routes/admin/users/+page.server.ts =====
import { getAllUsers } from '$lib/services/userService.server';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async () => {
    const users = await getAllUsers();
    return { users };
};===== ./src/routes/admin/+layout.server.ts =====
import { redirect } from '@sveltejs/kit';
import type { LayoutServerLoad } from './$types';
import { env } from '$env/dynamic/private';

export const load: LayoutServerLoad = async ({ locals }) => {
    const user = locals.user;
    const ADMIN_EMAILS = (env.VITE_ADMIN_EMAILS || '').split(',').map(email => email.trim());
    
    if (!user || !ADMIN_EMAILS.includes(user.email)) {
        throw redirect(302, '/');
    }
    
    return {
        user
    };
};===== ./src/routes/admin/+layout.svelte =====
<script lang="ts">
  import { page } from '$app/stores';
  import { user, isAdmin } from '$lib/stores/authStore';
  
  // Redirect non-admin users if they somehow reach this page
  $: if ($user && !$isAdmin) {
    window.location.href = '/';
  }
  
  // Define the admin navigation items
  const adminNavItems = [
    { name: 'Dashboard', href: '/admin', icon: 'fa-tachometer-alt' },
    { name: 'Courses', href: '/admin/courses', icon: 'fa-book' },
    { name: 'Forums', href: '/admin/forums', icon: 'fa-comments' },
    { name: 'Users', href: '/admin/users', icon: 'fa-users' }
  ];
  
  // Track current section to highlight in sidebar
  $: currentPath = $page.url.pathname;
  $: currentSection = currentPath.split('/')[2] || 'dashboard';
</script>

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 flex">
  <!-- Admin Sidebar -->
  <div class="w-64 bg-white dark:bg-gray-800 shadow-md">
    <div class="p-4 border-b border-gray-200 dark:border-gray-700">
      <h1 class="text-xl font-semibold text-gray-800 dark:text-white">Admin Portal</h1>
    </div>
    
    <nav class="mt-4">
      <ul>
        {#each adminNavItems as item}
          <li class="mb-1">
            <a 
              href={item.href} 
              class="flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 
                    {currentPath === item.href || (item.href !== '/admin' && currentPath.startsWith(item.href)) ? 
                    'bg-indigo-50 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400 border-r-4 border-indigo-500' : ''}"
            >
              <i class="fas {item.icon} w-5 mr-3"></i>
              {item.name}
            </a>
          </li>
        {/each}
      </ul>
    </nav>
    
    <div class="p-4 border-t border-gray-200 dark:border-gray-700 mt-auto">
      <a href="/" class="flex items-center text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400">
        <i class="fas fa-arrow-left mr-2"></i>
        Return to Site
      </a>
    </div>
  </div>
  
  <!-- Main Content Area -->
  <div class="flex-1 overflow-auto">
    <slot />
  </div>
</div>===== ./src/routes/admin/courses/+page.svelte =====
<script lang="ts">
  export let data: { courses: import('$lib/services/contentService').ContentMetadata[] };
  import { fade } from 'svelte/transition';
  let courses = data.courses;
  async function editCourse(slug: string) {
    // open course editor URL
    window.location.href = `/admin/courses/${slug}/edit`;
  }
  async function deleteCourse(slug: string) {
    if (!confirm('Delete course?')) return;
    // TODO: call API to delete course file
    courses = courses.filter(c => c.slug !== slug);
  }
</script>

<svelte:head><title>Manage Courses | Admin</title></svelte:head>
<div class="container mx-auto p-4" in:fade>
  <h1 class="text-2xl font-bold mb-4">Course Management</h1>
  <table class="min-w-full bg-white dark:bg-gray-800">
    <thead><tr>
      <th class="px-4 py-2">Title</th>
      <th class="px-4 py-2">Slug</th>
      <th class="px-4 py-2">Type</th>
      <th class="px-4 py-2">Difficulty</th>
      <th class="px-4 py-2">Actions</th>
    </tr></thead>
    <tbody>
      {#each courses as c}
      <tr class="hover:bg-gray-100 dark:hover:bg-gray-700">
        <td class="border px-4 py-2">{c.title}</td>
        <td class="border px-4 py-2">{c.slug}</td>
        <td class="border px-4 py-2">{c.type}</td>
        <td class="border px-4 py-2">{c.difficulty || '-'}</td>
        <td class="border px-4 py-2 space-x-2">
          <button class="text-blue-600 hover:underline" on:click={() => editCourse(c.slug)}>Edit</button>
          <button class="text-red-600 hover:underline" on:click={() => deleteCourse(c.slug)}>Delete</button>
        </td>
      </tr>
      {/each}
    </tbody>
  </table>
</div>===== ./src/routes/admin/courses/+page.server.ts =====
import type { PageServerLoad } from './$types';
// Update import path and function name
import { getAllContentItemsByType } from '$lib/server/contentService';

export const load: PageServerLoad = async () => {
  // Retrieve course metadata for admin using the new function
  const courses = await getAllContentItemsByType('courses', 'course');
  return { courses };
};===== ./src/routes/exercises/+page.svelte =====
<script lang="ts">
  export let data;
  import ExerciseCard from '$lib/components/ExerciseCard.svelte';

  const { categories, latestExercises, allExercises } = data;

  // Group exercises by difficulty for display
  $: exercisesByDifficulty = {
    beginner: allExercises.filter(ex => ex.difficulty === 'beginner'),
    intermediate: allExercises.filter(ex => ex.difficulty === 'intermediate'),
    advanced: allExercises.filter(ex => ex.difficulty === 'advanced')
  };
</script>

<svelte:head>
  <title>Exercises | LearnFlow</title>
  <meta name="description" content="Browse all exercises, categories, and practice your skills on LearnFlow." />
</svelte:head>

<div class="min-h-screen p-6 bg-gray-900 text-gray-100">
  <h1 class="text-4xl font-bold mb-8">Exercises</h1>

  <!-- Categories Section -->
  {#if categories.length > 0}
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Categories</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each categories as category}
          <a 
            href={`/exercises/${category.slug}`}
            class="block p-6 rounded-lg bg-gradient-to-br from-blue-800 to-blue-700 hover:from-blue-700 hover:to-blue-600 transition-all shadow-lg"
          >
            <div class="flex items-center mb-3">
              <i class="fas {category.icon} text-blue-300 mr-3 text-xl"></i>
              <h3 class="text-xl font-semibold">{category.title}</h3>
            </div>
            <p class="text-blue-100">{category.description}</p>
          </a>
        {/each}
      </div>
    </section>
  {/if}

  <!-- Latest Exercises Section -->
  {#if latestExercises.length > 0}
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Latest Exercises</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each latestExercises as exercise}
          <ExerciseCard {exercise} href={`/exercises/${exercise.id}`} />
        {/each}
      </div>
    </section>
  {/if}

  <!-- Exercises by Difficulty -->
  {#if exercisesByDifficulty.beginner.length > 0}
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Beginner Exercises</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each exercisesByDifficulty.beginner.slice(0, 6) as exercise}
          <ExerciseCard {exercise} href={`/exercises/${exercise.id}`} />
        {/each}
      </div>
    </section>
  {/if}

  {#if exercisesByDifficulty.intermediate.length > 0}
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Intermediate Exercises</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each exercisesByDifficulty.intermediate.slice(0, 6) as exercise}
          <ExerciseCard {exercise} href={`/exercises/${exercise.id}`} />
        {/each}
      </div>
    </section>
  {/if}

  {#if exercisesByDifficulty.advanced.length > 0}
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Advanced Exercises</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each exercisesByDifficulty.advanced.slice(0, 6) as exercise}
          <ExerciseCard {exercise} href={`/exercises/${exercise.id}`} />
        {/each}
      </div>
    </section>
  {/if}

  <!-- All Exercises Section -->
  {#if allExercises.length > 0}
    <section>
      <h2 class="text-2xl font-semibold mb-4">All Exercises</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {#each allExercises as exercise}
          <ExerciseCard {exercise} href={`/exercises/${exercise.id}`} />
        {/each}
      </div>
    </section>
  {/if}
</div>===== ./src/routes/exercises/[...id]/+page.svelte =====
<script lang="ts">
  import { fade } from 'svelte/transition';
  import MarkdownRenderer from '$lib/components/MarkdownRenderer.svelte';
  import ExerciseMarkdown from '$lib/components/courses/exercise/ExerciseMarkdown.svelte';
  import ExerciseRating from '$lib/components/courses/exercise/ExerciseRating.svelte';
  import ExerciseCard from '$lib/components/courses/exercise/ExerciseCard.svelte';
  import MathContent from '$lib/components/MathContent.svelte';
  
  export let data;
  
  // Handle both category and individual exercise display
  const { isCategory } = data;
</script>

<svelte:head>
  {#if isCategory}
    <title>{data.category.title} | LearnFlow Exercises</title>
    <meta name="description" content={data.category.description || `Browse exercises in the ${data.category.title} category`} />
  {:else}
    <title>{data.exercise?.title || 'Exercise'} | LearnFlow</title>
    <meta name="description" content={data.exercise?.description || 'Practice with this exercise on LearnFlow'} />
  {/if}
</svelte:head>

<div class="min-h-screen p-6 bg-gray-900 text-gray-100">
  {#if isCategory}
    <!-- Category View -->
    <div in:fade={{ duration: 300 }}>
      <a href="/exercises" class="text-sm text-red-300 hover:text-red-200 mb-4 inline-block">← All Exercises</a>
      
      <h1 class="text-3xl font-bold mb-2">{data.category.title}</h1>
      {#if data.category.description}
        <p class="text-gray-300 mb-6">{data.category.description}</p>
      {/if}
      
      {#if data.category.exercises && data.category.exercises.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
          {#each data.category.exercises as exercise}
            <ExerciseCard {exercise} href={`/exercises/${data.category.id}/${exercise.id}`} />
          {/each}
        </div>
      {:else}
        <p>No exercises found in this category.</p>
      {/if}
    </div>
  {:else}
    <!-- Individual Exercise View -->
    <div in:fade={{ duration: 300 }}>
      <a href="/exercises" class="text-sm text-red-300 hover:text-red-200 mb-4 inline-block">← All Exercises</a>
      
      {#if data.exercise}
        <div class="bg-gray-800 rounded-lg p-6 shadow-lg">
          <h1 class="text-3xl font-bold mb-2">{data.exercise.title}</h1>
          
          <div class="flex flex-wrap gap-2 mb-4">
            {#if data.exercise.difficulty}
              <span class="px-2 py-1 text-xs rounded-full bg-opacity-20"
                class:bg-green-600={data.exercise.difficulty === 'beginner'}
                class:bg-yellow-600={data.exercise.difficulty === 'intermediate'}
                class:bg-red-600={data.exercise.difficulty === 'advanced'}
              >
                {data.exercise.difficulty.charAt(0).toUpperCase() + data.exercise.difficulty.slice(1)}
              </span>
            {/if}
            
            {#if data.exercise.estimatedTime}
              <span class="px-2 py-1 text-xs rounded-full bg-blue-600 bg-opacity-20">
                <i class="fas fa-clock mr-1"></i> {data.exercise.estimatedTime}
              </span>
            {/if}
            
            {#if data.exercise.tags && data.exercise.tags.length > 0}
              {#each data.exercise.tags as tag}
                <span class="px-2 py-1 text-xs rounded-full bg-purple-600 bg-opacity-20">{tag}</span>
              {/each}
            {/if}
          </div>
          
          {#if data.exercise.description}
            <p class="text-gray-300 mb-6">{data.exercise.description}</p>
          {/if}
          
          <!-- Exercise Content -->
          <div class="mt-6">
            {#if data.content}
              <ExerciseMarkdown content={data.content} />
            {:else}
              <p>No content available for this exercise.</p>
            {/if}
          </div>
          
          <!-- Exercise Rating -->
          <div class="mt-8 pt-6 border-t border-gray-700">
            <ExerciseRating exerciseId={data.exercise.id} />
          </div>
        </div>
      {:else}
        <div class="bg-red-900 bg-opacity-20 p-4 rounded-lg">
          <p>Exercise not found or failed to load.</p>
        </div>
      {/if}
    </div>
  {/if}
</div>===== ./src/routes/exercises/[...id]/+page.server.ts =====
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
// Use the unified content service function
import { getContentNodeByIdentifier, getBreadcrumbs } from '$lib/server/contentService.js';

export const load: PageServerLoad = async ({ params }) => {
  // The identifier comes from the route parameter
  const identifier = params.id;

  try {
    // Use the unified function to get the node. Content is loaded by the service.
    const node = await getContentNodeByIdentifier('exercises', identifier);

    // Service throws 404 if not found.

    // Determine if it's a category/container or a specific exercise
    const containerTypes = ['category', 'root', 'exercise-category', 'topic']; // Add relevant container types for exercises
    const isCategory = containerTypes.includes(node.type);

    // Fetch breadcrumbs for the current node
    const breadcrumbs = await getBreadcrumbs('exercises', identifier);

    if (isCategory) {
      // For categories/containers, return the node and its children
      return {
        node: node,
        isCategory: true,
        items: node.children || [], // Pass children if available
        breadcrumbs
      };
    } else if (node.type === 'exercise') {
      // For exercises, the service should have loaded markdownContent
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
        console.warn(`Content loading error for exercise ${identifier}: ${contentLoadingError}`);
        // Content will contain the error message loaded by the service
      }

      return {
        node: node, // Renamed from exercise to node for consistency
        content: content,
        isCategory: false,
        breadcrumbs
      };
    } else {
      // Handle unexpected node types
      console.warn(`Unexpected content node type \"${node.type}\" for identifier: ${identifier}`);
      throw error(404, 'Content type not viewable');
    }

  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }

    // Log unexpected errors and throw a generic 500
    console.error(`Error loading exercise content for identifier ${identifier}:`, err);
    throw error(500, `Error loading exercise content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./src/routes/exercises/maths/+page.svelte =====
===== ./src/routes/exercises/maths/mpsi-maths/[exerciseId]/+page.svelte =====
===== ./src/routes/exercises/maths/mpsi-maths/+page.svelte =====
===== ./src/routes/exercises/+page.server.ts =====
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit';
// Use the unified content service
import { getContentListByCategory, getBreadcrumbs } from '$lib/server/contentService';

export const load: PageServerLoad = async ({ url }) => {
  // Use an empty string for the root category identifier
  const categoryIdentifier = url.searchParams.get('category') || '';

  try {
    // Fetch the list of items (top-level categories/exercises or children of a category)
    const items = await getContentListByCategory('exercises', categoryIdentifier);

    // Fetch breadcrumbs for the current category view
    const breadcrumbs = await getBreadcrumbs('exercises', categoryIdentifier);

    return {
      items, // Renamed from exercises to items for consistency
      breadcrumbs,
      currentCategory: categoryIdentifier
    };
  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }

    // Log unexpected errors and throw a generic 500
    console.error(`Error loading exercises page for category "${categoryIdentifier}":`, err);
    error(500, `Failed to load exercises data. An unexpected error occurred.`);
  }
};===== ./src/routes/exercises/[id]/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade, slide, blur } from 'svelte/transition';
  import MarkdownRenderer from '$lib/components/MarkdownRenderer.svelte';
  import ExerciseMarkdown from '$lib/components/ExerciseMarkdown.svelte';
  import ExerciseRating from '$lib/components/ExerciseRating.svelte';
  import MathContent from '$lib/components/MathContent.svelte';
  import { page } from '$app/stores';
  import { getExercise } from '$lib/services/exerciseService';
  import { getAuth, onAuthStateChanged } from 'firebase/auth';
  import { getFirestore, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';
  import { app } from '$lib/firebase';
  
  // Exercise State
  let exercise = null;
  let loading = true;
  let error = null;
  let showSolution = false;
  
  // User Progress State
  let auth;
  let db;
  let userProgress = null;
  let progressStatus: 'notStarted' | 'inProgress' | 'completed' = 'notStarted';
  let userNotes = '';
  let isSavingNotes = false;
  let showHints = false;
  let currentHintIndex = 0;
  
  // Related Exercises State
  let sortOption = 'default';
  let filterTag = '';
  let filteredRelatedExercises = [];
  
  // Solution Reveal State
  let solutionRevealProgress = 0;
  let solutionRevealInterval;
  
  onMount(async () => {
    // Initialize Firebase
    auth = getAuth(app);
    db = getFirestore(app);
    
    try {
      const exerciseId = $page.params.id;
      if (!exerciseId) {
        throw new Error('Exercise ID is missing');
      }
      
      // Fetch exercise data with the updated service
      loading = true;
      console.log(`Fetching exercise with ID: ${exerciseId}`);
      const exerciseData = await getExercise(exerciseId);
      
      if (!exerciseData) {
        throw new Error('Failed to load exercise');
      }
      
      exercise = exerciseData;
      console.log('Exercise loaded:', exercise);
      
      // Load user progress if authenticated
      onAuthStateChanged(auth, (user) => {
        if (user) {
          loadUserProgress(user.uid, exerciseId);
          loadUserNotes(user.uid, exerciseId);
        }
      });
      
      // Process related exercises if available
      if (exercise.relatedExercises && exercise.relatedExercises.length > 0) {
        filteredRelatedExercises = [...exercise.relatedExercises];
      }
      
      loading = false;
    } catch (err) {
      console.error('Error in exercise page:', err);
      error = err.message;
      loading = false;
    }
  });
  
  // Load user progress from Firestore
  async function loadUserProgress(userId, exerciseId) {
    try {
      const userProgressRef = doc(db, 'users', userId, 'progress', 'exercises');
      const userProgressDoc = await getDoc(userProgressRef);
      
      if (userProgressDoc.exists()) {
        const data = userProgressDoc.data();
        if (data[exerciseId]) {
          userProgress = data[exerciseId];
          progressStatus = userProgress.status || 'notStarted';
        }
      }
    } catch (err) {
      console.error('Error loading user progress:', err);
    }
  }
  
  // Load user notes from Firestore
  async function loadUserNotes(userId, exerciseId) {
    try {
      const userNotesRef = doc(db, 'users', userId, 'notes', 'exercises');
      const userNotesDoc = await getDoc(userNotesRef);
      
      if (userNotesDoc.exists()) {
        const data = userNotesDoc.data();
        if (data[exerciseId]) {
          userNotes = data[exerciseId].content || '';
        }
      }
    } catch (err) {
      console.error('Error loading user notes:', err);
    }
  }
  
  // Save user progress to Firestore
  async function saveUserProgress(status: 'inProgress' | 'completed' | 'notStarted') {
    if (!auth.currentUser) return;
    
    try {
      const userId = auth.currentUser.uid;
      const exerciseId = $page.params.id;
      const userProgressRef = doc(db, 'users', userId, 'progress', 'exercises');
      
      const progressData = {
        status,
        updatedAt: new Date().toISOString(),
        lastAccessed: new Date().toISOString()
      };
      
      await setDoc(userProgressRef, {
        [exerciseId]: progressData
      }, { merge: true });
      
      progressStatus = status;
    } catch (err) {
      console.error('Error saving user progress:', err);
    }
  }
  
  // Save user notes to Firestore
  async function saveUserNotes() {
    if (!auth.currentUser) return;
    
    try {
      isSavingNotes = true;
      const userId = auth.currentUser.uid;
      const exerciseId = $page.params.id;
      const userNotesRef = doc(db, 'users', userId, 'notes', 'exercises');
      
      await setDoc(userNotesRef, {
        [exerciseId]: {
          content: userNotes,
          updatedAt: new Date().toISOString()
        }
      }, { merge: true });
      
      setTimeout(() => {
        isSavingNotes = false;
      }, 1000);
    } catch (err) {
      console.error('Error saving user notes:', err);
      isSavingNotes = false;
    }
  }
  
  // Toggle solution with animation
  function toggleSolution() {
    if (!showSolution) {
      showSolution = true;
      solutionRevealProgress = 0;
      
      solutionRevealInterval = setInterval(() => {
        solutionRevealProgress += 2;
        if (solutionRevealProgress >= 100) {
          clearInterval(solutionRevealInterval);
        }
      }, 20);
    } else {
      clearInterval(solutionRevealInterval);
      showSolution = false;
    }
  }
  
  // Filter and sort related exercises
  function updateRelatedExercises() {
    if (!exercise?.relatedExercises) return;
    
    let filtered = [...exercise.relatedExercises];
    
    // Apply tag filter if selected
    if (filterTag) {
      filtered = filtered.filter(ex => ex.tags && ex.tags.includes(filterTag));
    }
    
    // Apply sorting
    switch (sortOption) {
      case 'difficulty-asc':
        filtered.sort((a, b) => {
          const difficultyOrder = { 'beginner': 1, 'intermediate': 2, 'advanced': 3 };
          return difficultyOrder[a.difficulty] - difficultyOrder[b.difficulty];
        });
        break;
      case 'difficulty-desc':
        filtered.sort((a, b) => {
          const difficultyOrder = { 'beginner': 1, 'intermediate': 2, 'advanced': 3 };
          return difficultyOrder[b.difficulty] - difficultyOrder[a.difficulty];
        });
        break;
      case 'title-asc':
        filtered.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'title-desc':
        filtered.sort((a, b) => b.title.localeCompare(a.title));
        break;
    }
    
    filteredRelatedExercises = filtered;
  }
  
  // Show next hint
  function showNextHint() {
    if (exercise?.hints && currentHintIndex < exercise.hints.length - 1) {
      currentHintIndex++;
    }
  }
  
  // Reset hints
  function resetHints() {
    currentHintIndex = 0;
    showHints = false;
  }
</script>

<svelte:head>
  {#if exercise}
    <title>{exercise.title} | LearnFlow Exercises</title>
    <meta name="description" content={exercise.description} />
  {:else}
    <title>Exercise | LearnFlow</title>
  {/if}
</svelte:head>

<div class="exercise-page-container">
  {#if loading}
    <div class="loading-container" in:fade>
      <div class="loading-spinner"></div>
      <p>Loading exercise...</p>
    </div>
  {:else if error}
    <div class="error-container glass-panel" in:fade>
      <h2>Error Loading Exercise</h2>
      <p>{error}</p>
      <div class="action-buttons">
        <button class="back-button" on:click={() => history.back()}>
          Go Back
        </button>
        <button class="retry-button" on:click={() => window.location.reload()}>
          Retry
        </button>
      </div>
    </div>
  {:else if exercise}
    <div class="exercise-header glass-panel" in:slide={{ duration: 400, y: -20 }}>
      <button class="back-button" on:click={() => history.back()}>
        ← Back
      </button>
      <h1>{exercise.title}</h1>
      
      {#if auth?.currentUser}
        <div class="progress-badge {progressStatus}">
          {progressStatus === 'notStarted' ? 'Not Started' : progressStatus === 'inProgress' ? 'In Progress' : 'Completed'}
        </div>
      {/if}
      
      <div class="exercise-metadata">
        <div class="metadata-item">
          <span class="metadata-icon">⏱️</span>
          <span>{exercise.estimatedTime || '30min'}</span>
        </div>
        <div class="metadata-item">
          <span class="metadata-icon">📊</span>
          <span class="difficulty {exercise.difficulty || 'intermediate'}">
            {exercise.difficulty?.charAt(0).toUpperCase() + exercise.difficulty?.slice(1) || 'Intermediate'}
          </span>
        </div>
      </div>
      <div class="tags-container">
        {#if exercise.tags && exercise.tags.length > 0}
          {#each exercise.tags as tag}
            <span class="tag">{tag}</span>
          {/each}
        {/if}
      </div>
    </div>
    
    <div class="exercise-content glass-panel" in:fade={{ delay: 300 }}>
      <div class="description">
        <h2>Description</h2>
        <p>{exercise.description}</p>
      </div>
      
      {#if auth?.currentUser}
        <div class="progress-controls">
          <h3>Track Your Progress</h3>
          <div class="progress-buttons">
            <button 
              class="progress-btn not-started {progressStatus === 'notStarted' ? 'active' : ''}" 
              on:click={() => saveUserProgress('notStarted')}
            >
              Not Started
            </button>
            <button 
              class="progress-btn in-progress {progressStatus === 'inProgress' ? 'active' : ''}" 
              on:click={() => saveUserProgress('inProgress')}
            >
              In Progress
            </button>
            <button 
              class="progress-btn completed {progressStatus === 'completed' ? 'active' : ''}" 
              on:click={() => saveUserProgress('completed')}
            >
              Completed
            </button>
          </div>
        </div>
      {/if}
      
      {#if exercise.content}
        <div class="problem">
          <h2>Problem</h2>
          <div class="problem-content">
            <ExerciseMarkdown content={exercise.content} />
          </div>
        </div>
      {/if}
      
      {#if exercise.hints && exercise.hints.length > 0}
        <div class="hints-section">
          <button class="hints-toggle" on:click={() => showHints = !showHints}>
            {showHints ? 'Hide Hints' : 'Show Hints'}
          </button>
          
          {#if showHints}
            <div class="hints glass-panel" in:slide={{ duration: 300 }}>
              <h3>Hints ({currentHintIndex + 1}/{exercise.hints.length})</h3>
              <div class="hint-content">
                <ExerciseMarkdown content={exercise.hints[currentHintIndex]} />
              </div>
              <div class="hint-controls">
                {#if currentHintIndex < exercise.hints.length - 1}
                  <button class="hint-btn" on:click={showNextHint}>Show Next Hint</button>
                {/if}
                {#if currentHintIndex > 0 || currentHintIndex === exercise.hints.length - 1}
                  <button class="hint-btn reset" on:click={resetHints}>Reset Hints</button>
                {/if}
              </div>
            </div>
          {/if}
        </div>
      {/if}
      
      {#if exercise.solution}
        <div class="solution-section">
          <button class="solution-toggle" on:click={toggleSolution}>
            {showSolution ? 'Hide Solution' : 'Show Solution'}
          </button>
          
          {#if showSolution}
            <div class="solution-progress-container">
              <div class="solution-progress-bar" style="width: {solutionRevealProgress}%"></div>
            </div>
            
            <div class="solution glass-panel" style="filter: blur({Math.max(5 - (solutionRevealProgress/20), 0)}px);">
              <h2>Solution</h2>
              <ExerciseMarkdown content={exercise.solution} />
            </div>
          {/if}
        </div>
      {/if}
      
      {#if auth?.currentUser}
        <div class="notes-section">
          <h3>My Notes</h3>
          <textarea 
            bind:value={userNotes}
            on:input={saveUserNotes}
            placeholder="Add your notes here..."
            rows="5"
            class="notes-input"
          ></textarea>
          <div class="notes-status">
            {#if isSavingNotes}
              <span class="saving">Saving...</span>
            {:else}
              <span class="saved">Notes saved</span>
            {/if}
          </div>
        </div>
      {/if}
    </div>
    
    {#if exercise.relatedExercises && exercise.relatedExercises.length > 0}
      <div class="related-exercises-section glass-panel" in:fade={{ delay: 400 }}>
        <h2>Related Exercises</h2>
        
        <div class="filter-sort-controls">
          <div class="filter-control">
            <label for="tag-filter">Filter by tag:</label>
            <select id="tag-filter" bind:value={filterTag} on:change={updateRelatedExercises}>
              <option value="">All Tags</option>
              {#if exercise.tags && exercise.tags.length > 0}
                {#each exercise.tags as tag}
                  <option value={tag}>{tag}</option>
                {/each}
              {/if}
            </select>
          </div>
          
          <div class="sort-control">
            <label for="sort-option">Sort by:</label>
            <select id="sort-option" bind:value={sortOption} on:change={updateRelatedExercises}>
              <option value="default">Default</option>
              <option value="difficulty-asc">Difficulty (Easiest First)</option>
              <option value="difficulty-desc">Difficulty (Hardest First)</option>
              <option value="title-asc">Title (A-Z)</option>
              <option value="title-desc">Title (Z-A)</option>
            </select>
          </div>
        </div>
        
        <div class="related-exercises-grid">
          {#each filteredRelatedExercises as relatedEx}
            <a href="/exercises/{relatedEx.id}" class="related-exercise-card">
              <h3>{relatedEx.title}</h3>
              {#if relatedEx.difficulty}
                <span class="difficulty-badge {relatedEx.difficulty}">{relatedEx.difficulty}</span>
              {/if}
              {#if relatedEx.tags && relatedEx.tags.length > 0}
                <div class="related-tags">
                  {#each relatedEx.tags.slice(0, 2) as tag}
                    <span class="related-tag">{tag}</span>
                  {/each}
                </div>
              {/if}
            </a>
          {/each}
        </div>
      </div>
    {/if}
    
    <div class="exercise-footer glass-panel" in:fade={{ delay: 450 }}>
      <div class="rating-section">
        <h3>Rate this exercise</h3>
        <ExerciseRating exerciseId={exercise.id} />
      </div>
    </div>
  {/if}
</div>

<style>
  .exercise-page-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .glass-panel {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.8));
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.18);
    box-shadow: 0 8px 32px rgba(220, 38, 38, 0.08);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .exercise-header {
    position: relative;
    text-align: center;
  }

  .back-button {
    position: absolute;
    top: 1.5rem;
    left: 1.5rem;
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    border: 1px solid rgba(220, 38, 38, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .back-button:hover {
    background: rgba(220, 38, 38, 0.2);
    transform: translateX(-3px);
  }

  h1 {
    font-size: 2.25rem;
    color: rgba(220, 38, 38, 0.9);
    margin-bottom: 1rem;
    font-weight: bold;
  }

  h2 {
    font-size: 1.5rem;
    color: rgba(220, 38, 38, 0.8);
    margin-bottom: 1rem;
    font-weight: 600;
    border-bottom: 2px solid rgba(220, 38, 38, 0.1);
    padding-bottom: 0.5rem;
  }

  h3 {
    font-size: 1.25rem;
    color: rgba(220, 38, 38, 0.7);
    margin-bottom: 1rem;
  }

  .exercise-metadata {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 1rem;
  }

  .metadata-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1rem;
    color: #4b5563;
  }

  .metadata-icon {
    font-size: 1.25rem;
  }

  .difficulty {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .difficulty.beginner {
    background-color: rgba(52, 211, 153, 0.2);
    color: rgba(6, 95, 70, 0.8);
  }

  .difficulty.intermediate {
    background-color: rgba(251, 191, 36, 0.2);
    color: rgba(146, 64, 14, 0.8);
  }

  .difficulty.advanced {
    background-color: rgba(239, 68, 68, 0.2);
    color: rgba(185, 28, 28, 0.8);
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
    margin-top: 1rem;
  }

  .tag {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
  }

  .problem-content {
    background: rgba(255, 255, 255, 0.5);
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-top: 1rem;
  }

  .solution-toggle {
    background: linear-gradient(135deg, rgba(220, 38, 38, 0.7), rgba(185, 28, 28, 0.8));
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    margin: 1.5rem 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .solution-toggle:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.15);
  }

  .solution {
    background: rgba(220, 38, 38, 0.05);
    border-left: 4px solid rgba(220, 38, 38, 0.5);
    padding: 1.5rem;
    margin-top: 1rem;
  }

  .solution-progress-container {
    height: 10px;
    background: rgba(220, 38, 38, 0.1);
    border-radius: 5px;
    margin: 1rem 0;
    overflow: hidden;
  }

  .solution-progress-bar {
    height: 100%;
    background: rgba(220, 38, 38, 0.7);
    transition: width 0.2s ease;
  }

  .progress-controls {
    margin-top: 1rem;
    text-align: center;
  }

  .progress-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  .progress-btn {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .progress-btn.not-started {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
  }

  .progress-btn.in-progress {
    background: rgba(251, 191, 36, 0.1);
    color: rgba(146, 64, 14, 0.8);
  }

  .progress-btn.completed {
    background: rgba(52, 211, 153, 0.1);
    color: rgba(6, 95, 70, 0.8);
  }

  .progress-btn.active {
    border: 2px solid rgba(220, 38, 38, 0.8);
  }

  .notes-section {
    margin-top: 2rem;
  }

  .notes-input {
    width: 100%;
    border: 1px solid rgba(220, 38, 38, 0.2);
    border-radius: 0.5rem;
    padding: 0.5rem;
    font-size: 1rem;
    resize: none;
  }

  .notes-status {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: rgba(220, 38, 38, 0.8);
  }

  .saving {
    color: rgba(220, 38, 38, 0.7);
  }

  .saved {
    color: rgba(52, 211, 153, 0.7);
  }

  .hints-section {
    margin-top: 2rem;
  }

  .hints-toggle {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    border: 1px solid rgba(220, 38, 38, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .hints-toggle:hover {
    background: rgba(220, 38, 38, 0.2);
  }

  .hint-content {
    margin-top: 1rem;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 0.5rem;
    padding: 1rem;
  }

  .hint-controls {
    margin-top: 1rem;
    display: flex;
    justify-content: center;
    gap: 1rem;
  }

  .hint-btn {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    border: 1px solid rgba(220, 38, 38, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .hint-btn.reset {
    background: rgba(52, 211, 153, 0.1);
    color: rgba(6, 95, 70, 0.8);
  }

  .hint-btn:hover {
    background: rgba(220, 38, 38, 0.2);
  }

  .filter-sort-controls {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
  }

  .filter-control, .sort-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-control select, .sort-control select {
    padding: 0.5rem;
    border-radius: 0.5rem;
    border: 1px solid rgba(220, 38, 38, 0.2);
  }

  .related-exercises-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .related-exercise-card {
    background: rgba(255, 255, 255, 0.5);
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
    transition: all 0.2s ease;
    text-decoration: none;
    color: rgba(220, 38, 38, 0.8);
  }

  .related-exercise-card:hover {
    background: rgba(220, 38, 38, 0.1);
    transform: translateY(-2px);
  }

  .difficulty-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    margin-top: 0.5rem;
  }

  .difficulty-badge.beginner {
    background-color: rgba(52, 211, 153, 0.2);
    color: rgba(6, 95, 70, 0.8);
  }

  .difficulty-badge.intermediate {
    background-color: rgba(251, 191, 36, 0.2);
    color: rgba(146, 64, 14, 0.8);
  }

  .difficulty-badge.advanced {
    background-color: rgba(239, 68, 68, 0.2);
    color: rgba(185, 28, 28, 0.8);
  }

  .related-tags {
    margin-top: 0.5rem;
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .related-tag {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
  }

  /* Progress Badge styles */
  .progress-badge {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-weight: 600;
    margin: 1rem auto;
    font-size: 0.875rem;
    text-transform: uppercase;
  }

  .progress-badge.notStarted {
    background-color: rgba(156, 163, 175, 0.2);
    color: rgba(55, 65, 81, 0.8);
    border: 1px solid rgba(156, 163, 175, 0.3);
  }

  .progress-badge.inProgress {
    background-color: rgba(251, 191, 36, 0.2);
    color: rgba(146, 64, 14, 0.8);
    border: 1px solid rgba(251, 191, 36, 0.3);
  }

  .progress-badge.completed {
    background-color: rgba(52, 211, 153, 0.2);
    color: rgba(6, 95, 70, 0.8);
    border: 1px solid rgba(52, 211, 153, 0.3);
  }

  /* Loading and error states */
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 50vh;
  }

  .loading-spinner {
    border: 4px solid rgba(220, 38, 38, 0.1);
    border-top: 4px solid rgba(220, 38, 38, 0.8);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-container {
    text-align: center;
    padding: 2rem;
  }

  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .retry-button {
    background: rgba(220, 38, 38, 0.1);
    color: rgba(220, 38, 38, 0.8);
    border: 1px solid rgba(220, 38, 38, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .retry-button:hover {
    background: rgba(220, 38, 38, 0.2);
  }

  @media (max-width: 768px) {
    .exercise-footer {
      grid-template-columns: 1fr;
    }
    
    .back-button {
      position: static;
      margin-bottom: 1rem;
      display: inline-block;
    }
    
    .exercise-header {
      padding-top: 1rem;
    }
  }
</style>===== ./src/routes/progress/+page.svelte =====
<script>
  import { isAuthenticated, loading } from '$lib/stores/authStore.js';
  import { login } from '$lib/authService.js';
</script>

<svelte:head>
  <title>LearnFlow | My Progress</title>
</svelte:head>

<div class="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
  {#if $loading}
    <div class="flex justify-center items-center min-h-[calc(100vh-200px)] text-4xl text-indigo-500">
      <i class="fas fa-spinner fa-spin"></i>
    </div>
  {:else if $isAuthenticated}
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-6">My Progress</h1>
    <p class="text-gray-600 dark:text-gray-300">Your learning progress and statistics will be shown here. (Placeholder)</p>
    <!-- Add progress visualization logic here -->
  {:else}
    <div class="text-center py-10">
      <p class="text-xl text-gray-600 dark:text-gray-300 mb-4">Please log in to view your progress.</p>
      <button 
        class="px-6 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-md transition duration-150"
        on:click={login}
      >
        Log In
      </button>
    </div>
  {/if}
</div> ===== ./src/routes/groups/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { fade } from 'svelte/transition';

  // Types
  type UserGroup = {
    id: string;
    name: string;
    description: string;
    topic: string;
    image?: string;
    memberCount: number;
    isPublic: boolean;
    createdBy: string;
    createdAt: string;
    isMember?: boolean; // Added to track if the current user is a member
  };

  // User groups data fetched from API
  let allGroups: UserGroup[] = [];

  // Filter and search state
  let searchQuery = '';
  let selectedTopic = 'all';

  // Extract unique topics for filtering (computed after fetch)
  $: groupTopics = [
    'all',
    ...Array.from(new Set(allGroups.map(group => group.topic)))
  ];

  // Filtered and searched groups
  $: filteredGroups = allGroups.filter(group => {
    const matchesTopic = selectedTopic === 'all' || group.topic === selectedTopic;
    const matchesSearch = searchQuery === '' || 
      group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      group.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesTopic && matchesSearch;
  });

  // Separate groups the user is a member of
  $: myGroups = allGroups.filter(group => group.isMember);
  $: discoverGroups = filteredGroups.filter(group => !group.isMember);

  // Function to handle joining/leaving a group
  async function toggleGroupMembership(groupId: string, isMember: boolean) {
    try {
      const endpoint = isMember ? '/api/groups/leave' : '/api/groups/join';
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ group_id: groupId })
      });
      if (res.ok) {
        const groupIndex = allGroups.findIndex(g => g.id == groupId || g.id === groupId);
        if (groupIndex !== -1) {
          allGroups[groupIndex].isMember = !isMember;
          allGroups = [...allGroups];
        }
      } else {
        alert('Failed to update group membership.');
      }
    } catch (e) {
      alert('Error updating group membership.');
    }
  }

  // Loading state
  let loading = true;

  onMount(async () => {
    loading = true;
    try {
      const res = await fetch('/api/groups/');
      if (res.ok) {
        allGroups = await res.json();
      } else {
        allGroups = [];
      }
    } catch (e) {
      allGroups = [];
    } finally {
      loading = false;
    }
  });

  function handleJoin(id: string) {
    toggleGroupMembership(id, false);
  }

  function handleLeave(id: string) {
    toggleGroupMembership(id, true);
  }
</script>

<svelte:head>
  <title>User Groups | LearnFlow</title>
</svelte:head>

<div class="container mx-auto px-4 py-8 max-w-7xl">
  {#if loading}
    <div class="flex justify-center items-center h-64">
      <div class="loader"></div>
    </div>
  {:else}
    <div in:fade={{ duration: 300 }}>
      <!-- Header Section -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Study Groups</h1>
          <p class="text-gray-600 dark:text-gray-400">Connect, collaborate, and learn with fellow students</p>
        </div>
        
        <div class="mt-4 md:mt-0">
          <a 
            href="/groups/create" 
            class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium flex items-center transition-colors"
          >
            <i class="fas fa-plus mr-2"></i>
            Create New Group
          </a>
        </div>
      </div>
      
      <!-- Search and Filter Bar -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-4 mb-8">
        <div class="flex flex-col md:flex-row gap-4">
          <div class="relative flex-grow">
            <input 
              type="text" 
              class="w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="Search groups by name or description..."
              bind:value={searchQuery}
            />
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
              <i class="fas fa-search text-gray-400"></i>
            </div>
          </div>
          
          <div class="relative">
            <select
              class="appearance-none pl-4 pr-10 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 min-w-[180px]"
              bind:value={selectedTopic}
            >
              {#each groupTopics as topic}
                <option value={topic}>{topic === 'all' ? 'All Topics' : topic}</option>
              {/each}
            </select>
            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <i class="fas fa-chevron-down text-gray-400"></i>
            </div>
          </div>
        </div>
      </div>

      <!-- My Groups Section -->
      {#if myGroups.length > 0}
        <div class="mb-12">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">My Groups</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {#each myGroups as group (group.id)}
              <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden flex flex-col">
                {#if group.image}
                  <img src={group.image} alt={group.name} class="w-full h-32 object-cover"/>
                {:else}
                  <div class="w-full h-32 bg-gradient-to-r from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 flex items-center justify-center">
                     <i class="fas fa-users text-4xl text-indigo-400 dark:text-indigo-600"></i>
                  </div>
                {/if}
                <div class="p-5 flex-1 flex flex-col">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">{group.name}</h3>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">Topic: {group.topic}</p>
                  <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2 flex-1">{group.description}</p>
                  <div class="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400 mb-4">
                    <span><i class="fas fa-users mr-1"></i> {group.memberCount} members</span>
                    <span>{group.isPublic ? 'Public' : 'Private'}</span>
                  </div>
                  <div class="mt-auto flex gap-2">
                     <a href="/groups/{group.id}" class="flex-1 text-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors">
                       View Group
                     </a>
                     <button 
                       on:click={() => handleLeave(group.id)}
                       class="px-3 py-2 bg-red-100 hover:bg-red-200 dark:bg-red-900/30 dark:hover:bg-red-900/50 text-red-700 dark:text-red-300 rounded-md text-sm font-medium transition-colors"
                       title="Leave Group"
                     >
                       <i class="fas fa-sign-out-alt"></i>
                     </button>
                  </div>
                </div>
              </div>
            {/each}
          </div>
        </div>
      {/if}

      <!-- Discover Groups Section -->
      <div>
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          {searchQuery || selectedTopic !== 'all' ? 'Filtered Groups' : 'Discover Groups'}
        </h2>
        {#if discoverGroups.length === 0}
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-8 text-center">
            <div class="w-16 h-16 mx-auto bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
              <i class="fas fa-search text-gray-400 dark:text-gray-500 text-2xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No groups found</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              {#if searchQuery || selectedTopic !== 'all'}
                Try adjusting your search or filter criteria.
              {:else}
                There are no available groups to join right now. Why not create one?
              {/if}
            </p>
            {#if searchQuery || selectedTopic !== 'all'}
              <button 
                class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors"
                on:click={() => { searchQuery = ''; selectedTopic = 'all'; }}
              >
                Clear Filters
              </button>
            {:else}
               <a 
                href="/groups/create" 
                class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm font-medium transition-colors"
              >
                <i class="fas fa-plus mr-2"></i>
                Create New Group
              </a>
            {/if}
          </div>
        {:else}
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {#each discoverGroups as group (group.id)}
              <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden flex flex-col">
                 {#if group.image}
                  <img src={group.image} alt={group.name} class="w-full h-32 object-cover"/>
                {:else}
                  <div class="w-full h-32 bg-gradient-to-r from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 flex items-center justify-center">
                     <i class="fas fa-users text-4xl text-indigo-400 dark:text-indigo-600"></i>
                  </div>
                {/if}
                <div class="p-5 flex-1 flex flex-col">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">{group.name}</h3>
                   <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">Topic: {group.topic}</p>
                  <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2 flex-1">{group.description}</p>
                  <div class="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400 mb-4">
                    <span><i class="fas fa-users mr-1"></i> {group.memberCount} members</span>
                    <span>{group.isPublic ? 'Public' : 'Private'}</span>
                  </div>
                  <div class="mt-auto">
                    {#if group.isPublic}
                      <button 
                        on:click={() => handleJoin(group.id)}
                        class="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm font-medium transition-colors"
                      >
                        <i class="fas fa-user-plus mr-2"></i>
                        Join Group
                      </button>
                    {:else}
                      <button 
                        class="w-full px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-md text-sm font-medium cursor-not-allowed" disabled
                      >
                        <i class="fas fa-lock mr-2"></i>
                        Request to Join (Private)
                      </button>
                    {/if}
                  </div>
                </div>
              </div>
            {/each}
          </div>
        {/if}
      </div>
    </div>
  {/if}
</div>

<style>
  .loader {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: #4f46e5;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>===== ./src/routes/groups/create/+page.svelte =====
<script lang="ts">
  import { goto } from '$app/navigation';
  let name = '';
  let description = '';
  let topic = '';
  let image = '';
  let isPublic = true;
  let error = '';
  let loading = false;
  let success = false;

  async function createGroup() {
    error = '';
    success = false;
    // Client-side validation
    if (!name.trim() || !description.trim() || !topic.trim()) {
      error = 'Please fill in all required fields.';
      return;
    }
    loading = true;
    try {
      const res = await fetch('/api/groups/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description, topic, image, is_public: isPublic })
      });
      if (res.ok) {
        success = true;
        setTimeout(() => goto('/groups'), 1200);
      } else {
        const data = await res.json().catch(() => ({}));
        error = data?.error || 'Failed to create group.';
      }
    } catch (e) {
      error = 'Failed to create group.';
    } finally {
      loading = false;
    }
  }
</script>

<svelte:head>
  <title>Create New Group | LearnFlow</title>
</svelte:head>

<div class="max-w-xl mx-auto py-10 px-4">
  <h1 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Create a New Group</h1>
  <form on:submit|preventDefault={createGroup} class="space-y-6 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
    <div>
      <label class="block text-sm font-medium mb-1">Group Name</label>
      <input class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" bind:value={name} required />
    </div>
    <div>
      <label class="block text-sm font-medium mb-1">Description</label>
      <textarea class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" bind:value={description} rows="3" required></textarea>
    </div>
    <div>
      <label class="block text-sm font-medium mb-1">Topic</label>
      <input class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" bind:value={topic} required />
    </div>
    <div>
      <label class="block text-sm font-medium mb-1">Image URL (optional)</label>
      <input class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" bind:value={image} />
    </div>
    <div class="flex items-center gap-2">
      <input type="checkbox" id="isPublic" bind:checked={isPublic} />
      <label for="isPublic" class="text-sm">Public group (anyone can join)</label>
    </div>
    {#if error}
      <div class="text-red-500">{error}</div>
    {/if}
    {#if success}
      <div class="text-green-600 font-semibold">Group created successfully! Redirecting...</div>
    {/if}
    <div class="flex gap-4">
      <button type="submit" class="px-6 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md" disabled={loading}>
        {loading ? 'Creating...' : 'Create Group'}
      </button>
      <a href="/groups" class="px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md">Cancel</a>
    </div>
  </form>
</div>
===== ./src/routes/groups/[id]/+page.svelte =====
<script lang="ts">
  import { page } from '$app/stores';
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  let group: any = null;
  let members: any[] = [];
  let loading = true;
  let error = '';
  let groupId = '';

  $: groupId = $page.params.id;

  async function fetchGroup() {
    loading = true;
    error = '';
    try {
      const res = await fetch(`/api/groups/${groupId}`);
      if (res.ok) {
        const data = await res.json();
        group = data.group;
        members = data.members;
      } else {
        error = 'Group not found.';
      }
    } catch (e) {
      error = 'Failed to load group.';
    } finally {
      loading = false;
    }
  }

  onMount(fetchGroup);
</script>

<svelte:head>
  <title>{group ? group.name : 'Group'} | LearnFlow</title>
</svelte:head>

<div class="max-w-2xl mx-auto py-10 px-4">
  {#if loading}
    <div class="text-center text-gray-500">Loading...</div>
  {:else if error}
    <div class="text-center text-red-500">{error}</div>
  {:else if group}
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
      {#if group.image}
        <img src={group.image} alt={group.name} class="w-full h-48 object-cover rounded mb-4" />
      {/if}
      <h1 class="text-3xl font-bold mb-2 text-gray-900 dark:text-white">{group.name}</h1>
      <div class="mb-2 text-gray-600 dark:text-gray-300">Topic: <span class="font-semibold">{group.topic}</span></div>
      <div class="mb-4 text-gray-600 dark:text-gray-300">{group.description}</div>
      <div class="mb-2 text-sm text-gray-500 dark:text-gray-400">{group.is_public ? 'Public' : 'Private'} group</div>
      <div class="mb-2 text-sm text-gray-500 dark:text-gray-400">Created by: {group.created_by}</div>
      <div class="mb-2 text-sm text-gray-500 dark:text-gray-400">Created at: {new Date(group.created_at).toLocaleString()}</div>
      <div class="mb-2 text-sm text-gray-500 dark:text-gray-400">Members: {members.length}</div>
    </div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Members</h2>
      {#if members.length === 0}
        <div class="text-gray-500">No members yet.</div>
      {:else}
        <ul class="space-y-2">
          {#each members as m}
            <li class="text-gray-800 dark:text-gray-200">{m.user_id}</li>
          {/each}
        </ul>
      {/if}
    </div>
  {/if}
</div>
===== ./src/routes/+error.svelte =====
<script>
  export let error, status;
</script>

<svelte:head>
  <title>{status} - Something went wrong</title>
</svelte:head>

<div class="min-h-screen flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800 p-4">
  <h1 class="text-4xl font-bold text-gray-800 dark:text-gray-100 mb-4">{status}</h1>
  <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">{error?.message ?? 'An unknown error occurred'}</p>
  <a href="/" class="btn btn-primary">Go Home</a>
</div>

<style lang="postcss">
  /* Removed unused CSS selectors */
</style>===== ./src/routes/+page.server.ts =====
import { getSuggestedContentItems } from '$lib/server/contentService';
import type { PageServerLoad } from './$types';
import { error } from '@sveltejs/kit'; // Import error helper

export const load: PageServerLoad = async (event) => {
    const { parent } = event;
    const { userProfile } = await parent(); // Get userProfile from layout load

    // Ensure userProfile is loaded, otherwise handle appropriately
    // This check might depend on whether anonymous users can see this page
    // If userProfile is required, you might redirect or throw an error earlier
    // For now, we'll proceed assuming userProfile might be null/undefined for guests
    const enrolledCourseIds = userProfile?.preferences?.enrollments?.map((e: any) => e.id) || [];
    // Assuming similar structure for exercise progress/enrollment if applicable
    // If not, adjust accordingly or pass an empty array
    const completedExerciseIds = userProfile?.progress?.exercises?.map((ex: any) => ex.id) || []; // Example structure

    try {
        // Fetch suggested courses and exercises using the new service function
        const [suggestedCourses, suggestedExercises] = await Promise.all([
            getSuggestedContentItems('courses', 'course', enrolledCourseIds),
            getSuggestedContentItems('exercises', 'exercise', completedExerciseIds) // Use relevant IDs for exercises
        ]);

        return {
            suggestedCourses,
            suggestedExercises
        };
    } catch (err: any) {
        console.error("Error loading dashboard data:", err);

        // Re-throw SvelteKit errors or throw a generic 500
        if (err.status) {
            throw err; // Re-throw the error caught from contentService
        }
        // Throw a generic 500 error for other unexpected issues
        error(500, 'Failed to load dashboard data. Please try again later.');

        // SvelteKit's error function halts execution, but for type safety:
        // return { suggestedCourses: [], suggestedExercises: [] };
    }
};
===== ./src/routes/adminGuard.ts =====
import { redirect } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import type { User } from 'firebase/auth';

// Custom event type that includes user
type AuthenticatedRequestEvent = RequestEvent & {
    locals: {
        user: User | null;
    };
};

const ADMIN_EMAILS = import.meta.env.VITE_ADMIN_EMAILS?.split(',') || [];

export async function adminGuard(event: AuthenticatedRequestEvent) {
    const user = event.locals.user;
    
    if (!user) {
        throw redirect(302, '/login?redirect=' + encodeURIComponent(event.url.pathname));
    }

    if (!user.email || !ADMIN_EMAILS.includes(user.email)) {
        throw redirect(302, '/');
    }
}===== ./src/routes/settings/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { isAuthenticated, user, loading as authLoading, logout } from '$lib/stores/authStore.js';
  import { goto } from '$app/navigation';
  import type { UserProfile } from '$lib/services/userService.js';
  import { userProfile, userProfileLoading, updateUserProfile } from '$lib/stores/userProfileStore.js';
  import { getCurrentUser, updateProfile as firebaseUpdateProfile } from '$lib/authService.js';
  import type { TimerSettings } from '$lib/stores/pipStores.js';
  import { timerSettings } from '$lib/stores/pipStores.js';

  // Local form state
  let displayName = '';
  let email = '';
  let theme = 'auto';
  let durations = { work: 25, shortBreak: 5, longBreak: 15, interval: 4 };
  let saving = false;
  let error: string | null = null;

  let unsubProfile: () => void;
  let unsubTimer: () => void;

  onMount(() => {
    unsubProfile = userProfile.subscribe((profile: UserProfile | null) => {
      if (profile) {
        displayName = profile.displayName || '';
        email = profile.email;
        // load theme if stored
        theme = profile.preferences?.theme || 'auto';
      }
    });
    // load timer settings store
    unsubTimer = timerSettings.subscribe((s: TimerSettings) => {
      durations = { 
        work: Math.round(s.workDuration/60), 
        shortBreak: Math.round(s.shortBreakDuration/60), 
        longBreak: Math.round(s.longBreakDuration/60), 
        interval: s.longBreakInterval
      };
    });
    return () => { 
      if (unsubProfile) unsubProfile();
      if (unsubTimer) unsubTimer();
    };
  });

  async function saveSettings() {
    saving = true;
    error = null;
    try {
      // Update Firebase auth displayName
      const currentUser = getCurrentUser();
      if (currentUser && displayName !== currentUser.displayName) {
        await firebaseUpdateProfile(currentUser, { displayName });
      }
      // Update preferences in Firestore
      if (currentUser) {
        await updateUserProfile(currentUser.uid, { 
          displayName, 
          preferences: { 
            theme,
            // preserve other preferences
            ...($userProfile?.preferences || {})
          }
        });
      }
      // Update Pomodoro durations store
      timerSettings.set({
        workDuration: durations.work * 60,
        shortBreakDuration: durations.shortBreak * 60,
        longBreakDuration: durations.longBreak * 60,
        longBreakInterval: durations.interval
      });
    } catch (e:any) {
      console.error(e);
      error = e.message;
    } finally {
      saving = false;
    }
  }

  function goToLogin() {
    goto('/login?redirect=/settings');
  }
</script>

<svelte:head>
  <title>Account Settings | LearnFlow</title>
</svelte:head>

<div class="max-w-3xl mx-auto px-4 py-6">
  {#if $authLoading || $userProfileLoading}
    <div class="flex justify-center items-center min-h-[50vh]">
      <i class="fas fa-spinner fa-spin text-3xl text-indigo-500"></i>
    </div>
  {:else if $isAuthenticated && $user && $userProfile}
    <h1 class="text-2xl font-bold mb-4">Account Settings</h1>
    {#if error}
      <div class="text-red-500 mb-4">{error}</div>
    {/if}
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6 space-y-6">
      <!-- Profile Info -->
      <div>
        <h2 class="text-lg font-semibold mb-2">Profile</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="displayName" class="block text-sm font-medium mb-1">Display Name</label>
            <input type="text" id="displayName" bind:value={displayName} class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" />
          </div>
          <div>
            <label for="email" class="block text-sm font-medium mb-1">Email (cannot change)</label>
            <input type="email" id="email" value={email} readonly class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-gray-100 dark:bg-gray-600 text-gray-500" />
          </div>
        </div>
      </div>

      <!-- Preferences -->
      <div>
        <h2 class="text-lg font-semibold mb-2">Preferences</h2>
        <div class="space-y-4">
          <div>
            <label for="theme" class="block text-sm font-medium mb-1">Theme</label>
            <select id="theme" bind:value={theme} class="w-full rounded border-gray-300 dark:border-gray-600 p-2 bg-white dark:bg-gray-700">
              <option value="auto">Auto</option>
              <option value="light">Light</option>
              <option value="dark">Dark</option>
            </select>
          </div>
          <div>
            <fieldset class="space-y-4">
              <legend class="text-sm font-medium mb-1">Pomodoro Durations (minutes)</legend>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="work-duration" class="block text-sm text-gray-500">Work Duration</label>
                  <input type="number" id="work-duration" min="1" bind:value={durations.work} class="w-full rounded border-gray-300 dark:border-gray-600 p-2" />
                </div>
                <div>
                  <label for="short-break" class="block text-sm text-gray-500">Short Break</label>
                  <input type="number" id="short-break" min="1" bind:value={durations.shortBreak} class="w-full rounded border-gray-300 dark:border-gray-600 p-2" />
                </div>
                <div>
                  <label for="long-break" class="block text-sm text-gray-500">Long Break</label>
                  <input type="number" id="long-break" min="1" bind:value={durations.longBreak} class="w-full rounded border-gray-300 dark:border-gray-600 p-2" />
                </div>
                <div>
                  <label for="interval" class="block text-sm text-gray-500">Sessions Before Long Break</label>
                  <input type="number" id="interval" min="1" bind:value={durations.interval} class="w-full rounded border-gray-300 dark:border-gray-600 p-2" />
                </div>
              </div>
            </fieldset>
          </div>
        </div>
      </div>

      <div class="flex justify-end space-x-2">
        <button class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" on:click={() => logout()}>Sign Out</button>
        <button class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700" on:click={saveSettings} disabled={saving}>
          {saving ? 'Saving...' : 'Save Changes'}
        </button>
      </div>
    </div>
  {:else}
    <div class="text-center py-20">
      <p class="text-lg text-gray-600 dark:text-gray-300 mb-4">Please log in to manage your settings.</p>
      <button class="px-6 py-2 bg-indigo-600 text-white rounded" on:click={goToLogin}>Log In</button>
    </div>
  {/if}
</div>
===== ./src/routes/+layout.svelte =====
<script lang="ts">
  import { sidebarCollapsed } from '$lib/stores/sidebarStore.js';
  let collapsed = false;
  sidebarCollapsed.subscribe(v => collapsed = v);
  import '../app.css';
  import '@splidejs/splide/dist/css/splide.min.css';
  import { onMount } from 'svelte';
  import Sidebar from '$lib/components/Sidebar.svelte';
  import Header from '$lib/components/Header.svelte';
  import PipWidget from '$lib/components/PipWidget.svelte';
  import CourseModal from '$lib/components/courses/CourseModal.svelte';
  import Footer from '$lib/components/Footer.svelte';
  import { pipVisible } from '$lib/stores/pipStores.js';
  import { initAuth } from '$lib/authService.js';
  import { isAuthenticated, user } from '$lib/stores/authStore.js';
  import { storeCsrfToken } from '$lib/utils/csrf.client.js';

  export let data;

  onMount(async () => {
    console.log('Root layout mounted - initializing authentication and CSRF protection');
    
    // Store CSRF token from server
    if (data.csrfToken) {
      storeCsrfToken(data.csrfToken);
    }
    
    // Initialize Firebase authentication
    initAuth();
    
    // Set up subscription to auth state for debugging
    const unsubAuth = isAuthenticated.subscribe(value => {
      console.log('Auth state changed in root layout:', value ? 'Authenticated' : 'Not authenticated');
    });

    const unsubUser = user.subscribe(u => {
      if (u) console.log('User state changed in root layout:', u);
    });

    return () => {
      unsubAuth();
      unsubUser();
    };
  });

  function togglePip() {
    pipVisible.update(v => !v);
  }
</script>

<svelte:head>
  <meta name="csrf-token" content={data.csrfToken}>
  
  <!-- Preload commonly used Font Awesome fonts with correct MIME type -->
  <link 
    rel="preload" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/webfonts/fa-solid-900.woff2" 
    as="font" 
    type="font/woff2" 
    crossorigin="anonymous"
  />
  <link 
    rel="preload" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/webfonts/fa-regular-400.woff2" 
    as="font" 
    type="font/woff2" 
    crossorigin="anonymous"
  />
  
  <!-- Font Awesome with font-display swap -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" 
    integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" 
    crossorigin="anonymous" 
    referrerpolicy="no-referrer"
  />
  
  <!-- Inter Font with font-display swap -->
  <link 
    rel="preconnect" 
    href="https://fonts.googleapis.com"
  />
  <link 
    rel="preconnect" 
    href="https://fonts.gstatic.com" 
    crossorigin="anonymous"
  />
  <link 
    href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" 
    rel="stylesheet"
  />
</svelte:head>

<div class="min-h-screen flex">
  <Sidebar />
  <div class={`flex-1 transition-all duration-300 ${collapsed ? 'lg:ml-0' : 'lg:ml-64'}`}>
    <Header onTogglePip={togglePip} />
    
    <main>
      <slot />
    </main>
    
    <Footer />
  </div>
  
  <PipWidget />
  <CourseModal />
</div>

<style>
  /* Basic styles to ensure things are working */
  :global(body) {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    margin: 0;
    padding: 0;
  }
  
  /* Improve Font Awesome rendering */
  :global(.fas), :global(.fa), :global(.fa-solid), :global(.fa-regular), :global(.fa-brands) {
    font-display: swap !important;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
  }
  
  :global(.card-hover) {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  
  :global(.card-hover:hover) {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
</style>
===== ./src/routes/courses/[slug]/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { fetchCourseBySlug } from '$lib/services/courses/courseService';
  import type { ContentNode } from '$lib/services/courses/courseService';
  import MarkdownRenderer from '$lib/components/shared/MarkdownRenderer.svelte';
  import Icon from '@iconify/svelte';
  
  let course: ContentNode | null = null;
  let isLoading = true;
  let error: string | null = null;
  
  onMount(async () => {
    try {
      const slug = $page.params.slug;
      course = await fetchCourseBySlug(slug);
      
      if (!course) {
        error = 'Course not found.';
      }
    } catch (err) {
      console.error('Error loading course:', err);
      error = 'Failed to load course. Please try again.';
    } finally {
      isLoading = false;
    }
  });
</script>

<div class="container mx-auto px-4 py-8">
  {#if isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md">
      <p>{error}</p>
    </div>
  {:else if course}
    <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
      <div class="md:col-span-3">
        <div class="mb-6">
          <a href="/courses" class="inline-flex items-center text-cherry-600 dark:text-cherry-400 hover:underline mb-4">
            <Icon icon="mdi:arrow-left" class="w-5 h-5 mr-1" />
            Back to Courses
          </a>
          
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{course.title}</h1>
          
          {#if course.description}
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">{course.description}</p>
          {/if}
          
          <div class="flex flex-wrap gap-2 mb-4">
            {#if course.category}
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-cherry-100 dark:bg-cherry-900/30 text-cherry-800 dark:text-cherry-400">
                {course.category}
              </span>
            {/if}
            
            {#if course.level}
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400">
                {course.level}
              </span>
            {/if}
            
            {#if course.tags && course.tags.length > 0}
              {#each course.tags as tag}
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
                  {tag}
                </span>
              {/each}
            {/if}
          </div>
        </div>
        
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
          {#if course.content}
            <MarkdownRenderer content={course.content} />
          {:else}
            <p class="text-gray-700 dark:text-gray-300 italic">No content available for this course yet.</p>
          {/if}
        </div>
      </div>
      
      <div class="md:col-span-1">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-4">
          <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Course Information</h2>
          
          <div class="space-y-4">
            {#if course.author}
              <div>
                <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Instructor</h3>
                <p class="text-gray-900 dark:text-white">{course.author}</p>
              </div>
            {/if}
            
            {#if course.duration}
              <div>
                <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Duration</h3>
                <p class="text-gray-900 dark:text-white">{course.duration}</p>
              </div>
            {/if}
            
            {#if course.prerequisites && course.prerequisites.length > 0}
              <div>
                <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Prerequisites</h3>
                <ul class="list-disc list-inside text-gray-900 dark:text-white">
                  {#each course.prerequisites as prereq}
                    <li>{prereq}</li>
                  {/each}
                </ul>
              </div>
            {/if}
            
            <div class="pt-4">
              <button class="w-full bg-cherry-600 hover:bg-cherry-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
                Enroll in this Course
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  {/if}
</div>===== ./src/routes/courses/[slug]/+page.server.ts =====
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
// Use the unified content service function
import { getContentNodeByIdentifier } from '$lib/server/contentService';

export const load: PageServerLoad = async (event) => {
  const { params } = event; // Removed fetch
  const identifier = params.slug; // Use identifier instead of slug

  try {
    // Directly use the service to get the node. It handles finding by path/id and loading content.
    const node = await getContentNodeByIdentifier('courses', identifier);

    // Service throws 404 if not found, so explicit check might be redundant.
    // if (!node) {
    //   throw error(404, 'Content not found');
    // }

    // Determine if it's a category/container or a content page
    const containerTypes = ['category', 'root', 'course-category', 'topic'];
    const isCategory = containerTypes.includes(node.type);

    if (isCategory) {
      // For categories/containers, return the node and its children
      return {
          node: node,
          isCategory: true,
          items: node.children || [] // Pass children if available
      };
    } else {
      // For content pages (course, lesson, module), return node and content
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
          console.warn(`Content loading error for ${identifier}: ${contentLoadingError}`);
          // Content will contain the error message loaded by the service
      }

      return {
          node: node,
          content: content,
          isCategory: false
      };
    }

  } catch (err: any) {
    // Re-throw SvelteKit errors (like 404/500 from the service)
    if (err.status) {
      throw err;
    }
    // Log unexpected errors and throw a generic 500
    console.error(`Error loading content for identifier ${identifier}:`, err);
    throw error(500, `Error loading content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./src/routes/courses/+page.svelte =====
<script lang="ts">
  import { onMount } from 'svelte';
  import { courseItems, courseCategories, selectedCourse, isLoading, error, initCourseStore } from '$lib/stores/courseStore';
  import CourseCard from '$lib/components/courses/CourseCard.svelte';
  import ContentViewer from '$lib/components/shared/ContentViewer.svelte';
  import Icon from '@iconify/svelte';
  
  let selectedCategoryId = 'all';
  let searchQuery = '';
  let filteredCourses: typeof $courseItems = [];
  
  $: {
    // Filter courses based on category and search query
    filteredCourses = $courseItems.filter(course => {
      const matchesCategory = selectedCategoryId === 'all' || course.category === selectedCategoryId;
      const matchesSearch = !searchQuery || 
        course.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (course.description && course.description.toLowerCase().includes(searchQuery.toLowerCase()));
      
      return matchesCategory && matchesSearch;
    });
  }
  
  function handleSelectCourse(event: CustomEvent<{course: any}>) {
    selectedCourse.set(event.detail.course);
  }
  
  function handleResetSelection() {
    selectedCourse.set(null);
  }
  
  onMount(() => {
    initCourseStore();
  });
</script>

<div class="container mx-auto px-4 py-8">
  <div class="flex items-center justify-between mb-6">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Courses</h1>
    
    <div class="flex space-x-2">
      <div class="relative">
        <input
          type="text"
          bind:value={searchQuery}
          placeholder="Search courses..."
          class="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
        />
        <Icon icon="mdi:magnify" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
      </div>
      
      <select
        bind:value={selectedCategoryId}
        class="px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-cherry-500 focus:border-cherry-500 dark:focus:ring-cherry-400 dark:focus:border-cherry-400"
      >
        <option value="all">All Categories</option>
        {#each $courseCategories as category}
          <option value={category.id}>{category.name}</option>
        {/each}
      </select>
    </div>
  </div>
  
  {#if $isLoading}
    <div class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cherry-500"></div>
    </div>
  {:else if $error}
    <div class="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-4 rounded-md">
      <p>{$error}</p>
    </div>
  {:else}
    <div class="grid grid-cols-1 gap-6 md:grid-cols-3 lg:grid-cols-4">
      <div class="md:col-span-2 lg:col-span-3">
        {#if filteredCourses.length === 0}
          <div class="flex flex-col items-center justify-center py-12 text-center">
            <Icon icon="mdi:book-open-page-variant" class="w-16 h-16 text-gray-400 mb-4" />
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No courses found</h3>
            <p class="text-gray-600 dark:text-gray-400">Try adjusting your filters or search query.</p>
          </div>
        {:else}
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {#each filteredCourses as course}
              <CourseCard 
                {course} 
                isSelected={$selectedCourse?.id === course.id}
                on:select={handleSelectCourse}
              />
            {/each}
          </div>
        {/if}
      </div>
      
      <div class="md:col-span-1 sticky top-4">
        <ContentViewer 
          item={$selectedCourse} 
          type="course" 
          onBack={handleResetSelection}
        />
      </div>
    </div>
  {/if}
</div>===== ./src/routes/courses/[...slug]/+page.server.ts =====
import type { PageServerLoad } from './$types.js';
import { error } from '@sveltejs/kit';
import { getContentNodeByIdentifier } from '$lib/server/contentService.js';

export const load: PageServerLoad = async (event) => {
  const { params } = event;
  const identifier = params.slug;

  try {
    const node = await getContentNodeByIdentifier('courses', identifier);

    if (node.type === 'category' || node.type === 'root' || node.type === 'course-category' || node.type === 'topic') {
      return {
        contentNode: node,
        isCategory: true,
        items: node.children || []
      };
    } else if (node.type === 'course' || node.type === 'lesson' || node.type === 'module') {
      const content = (node as any).markdownContent || '';
      const contentLoadingError = (node as any).contentLoadingError;

      if (contentLoadingError) {
        console.warn(`Content loading error for ${identifier}: ${contentLoadingError}`);
      }

      return {
        contentNode: node,
        content: content,
        isCategory: false
      };
    } else {
      console.warn(`Unexpected content node type "${node.type}" for identifier: ${identifier}`);
      throw error(404, 'Content type not viewable');
    }

  } catch (err: any) {
    if (err.status) throw err;

    console.error(`Error loading content for identifier ${identifier}:`, err);
    throw error(500, `Error loading content: ${err.message || 'Internal Server Error'}`);
  }
};===== ./src/routes/courses/maths/mpsi-maths/+page.svelte =====
===== ./src/routes/courses/+page.server.ts =====
import { error } from '@sveltejs/kit';
// Updated import to use the new server-side service
import { getContentNodeByPath, getBreadcrumbs } from '$lib/server/contentService';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ url }) => {
  const path = url.searchParams.get('path') || ''; // Default to root path if not specified

  try {
    // Use the new service function for courses
    const node = await getContentNodeByPath('courses', path);

    if (!node) {
      // Keep SvelteKit's error helper for 404
      error(404, `Course content not found for path: ${path || '/'}`);
    }

    // Use the new service function for breadcrumbs
    const breadcrumbs = await getBreadcrumbs('courses', path);

    // Return data structure remains similar, but sourced from the new service
    return {
      node, // This can be the root node structure or a specific item node
      breadcrumbs,
      currentPath: path
    };
  } catch (err: any) {
     // Catch potential errors from getContentNodeByPath or getBreadcrumbs
     // Including SvelteKit errors thrown by the service itself
     if (err.status) {
       throw err; // Re-throw SvelteKit errors (like 404 or 500 from the service)
     }

     // Log unexpected errors
     console.error(`Unexpected error loading courses page for path "${path}":`, err);
     // Throw a generic 500 for other server-side issues
     error(500, `Failed to load course data. An unexpected error occurred.`);
  }
};===== ./svelte.config.js =====
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
  // for more information about preprocessors
  preprocess: vitePreprocess(),
  
  kit: {
    // adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
    // If your environment is not supported, or you settled on a specific environment, switch out the adapter.
    adapter: adapter(),
    alias: {
      // Define the $lib alias here
      $lib: 'src/lib'
    }
  }
};

export default config;
===== ./PROJECT.md =====
# LearnFlow Project Implementation Log

This file documents all changes and features implemented so far to facilitate resuming development.

## 1. Database Migration
- Created `activities` table in PostgreSQL with columns:
  - id (SERIAL PK)
  - user_id (FK → users(id))
  - event_type, reference_id
  - timestamp_start, timestamp_end
  - metadata (JSONB)
  - previous_event_id (self-referential FK)

## 2. Services
- **`activityService.ts`** (client)
  - `logStart`, `logEnd`, `logEvent`, `fetchRecentActivities`
- **`recommendationService.ts`**
  - `getRecommendations(userId, limit)` stub mapping recent activities to placeholder recommendations

## 3. API Endpoints
- **`/api/activities/start`**: POST → start activity session
- **`/api/activities/end`**: POST → end activity session
- **`/api/activities/event`**: POST → log instantaneous event
- **`/api/activities`**: GET → fetch recent activities
- **`/api/recommendations`**: GET → fetch personalized recommendations

## 4. Components & UI Instrumentation
Instrumented pages to call `logStart`/`logEnd` and `logEvent`:
- **Dashboard** (`src/routes/+page.svelte`) - view_dashboard
- **Courses List** (`/courses/+page.svelte`) - view_courses
- **Course Lesson** (`/courses/[courseId]/lesson/[lessonId]/+page.svelte`) - view_lesson
- **Exercises** (`/exercises/+page.svelte`) - view_exercises & start_exercise
- **Flashcards** (`/tools/flashcards/+page.svelte`) - view_flashcards & flashcard_review
- **AI Chat** (`/tools/chat/+page.svelte`) - view_chat & send_message
- **Calculator** (`/tools/calculator/+page.svelte`) - view_calculator & calculate actions
- **Groups** (`/groups/+page.svelte`) - view_groups, join_group, leave_group
- **Calendar** (`/calendar/+page.svelte`) - view_calendar
- **Pomodoro** (`/tools/pomodoro/+page.svelte`) - view_pomodoro & session actions
- **Tools Overview** (`/tools/+page.svelte`) - view_tools & view_tool

## 5. Layout Adjustments
- Enhanced **Quick Actions** grid on dashboard with responsive flex layout and hover effects
- Integrated **RecommendationsSection.svelte** below Quick Actions
- Updated **RecentActivity.svelte** to fetch real activities

## 6. Documentation
- **RECOMMENDATIONS.md**: API design, data model, service logic, future enhancements

## 7. Course System Revamp (as of May 2025)

### Content-Driven Course System
- Migrated to markdown-based content system:
  - Course content stored in `/static/content/courses/`
  - Support for frontmatter metadata
  - Course structure extracted from markdown headers
  - Lesson content in individual markdown files

### Services Integration
- **ContentService** enhancements:
  - `listContent('course')`: Lists available courses from index.json
  - `loadContent('course', id)`: Loads course content and metadata
  - Enhanced metadata extraction with frontmatter support
  - Backward compatibility with existing mock data

### Course Content Structure
- Standard course file format:
  ```markdown
  ---
  title: Course Title
  description: Course description
  tags: ['tag1', 'tag2']
  difficulty: beginner|intermediate|advanced
  estimatedTime: duration
  ---

  # Course Title
  Description

  ## Module: Module Title
  Module description

  ### Lesson: Lesson Title
  Lesson content
  ```

### Navigation & UI Updates
- Enhanced breadcrumb navigation in course and lesson pages
- Proper loading states and error handling
- Course cards with dynamic gradients based on category
- MathContent integration for mathematical content
- Responsive layout improvements

### Content Management
- New admin interface for course management:
  - Course listing with metadata
  - Basic CRUD operations
  - Markdown preview support
  - Metadata validation

### Progress Tracking
- Integrated with activity logging system:
  - `view_course_detail`
  - `view_lesson`
  - `start_course`
  - Progress persistence in user preferences

### Migration Path
- Dual content system during transition:
  1. New markdown-based content system
  2. Legacy mock data fallback
  3. Gradual migration strategy for existing courses

### Technical Notes
- Course content fetching:
  ```
  /content/courses/
    ├── index.json         # Course metadata index
    ├── course-id/         # Course directory
    │   ├── lesson-1.md    # Individual lesson files
    │   └── lesson-2.md
    └── course-id.md       # Main course content
  ```

### Content Management System Updates (May 2025)

#### File-Based Course System
- Removed mock data system in favor of file-based content
- Courses now fully loaded from `/static/content/courses/`:
  - `index.json`: Central course metadata registry
  - Individual `.md` files for course content
  - Support for nested lesson structure

#### Visual Improvements
- Enhanced course card design:
  - Dark theme optimization
  - Dynamic gradient colors based on course type:
    - Math/Calculus: Blue gradient
    - Programming/Python: Green gradient
    - Physics/Science: Purple gradient
    - Language courses: Orange gradient
    - Other courses: Indigo gradient (default)
  - Improved text contrast and readability
  - Consistent card styling across views

#### CourseService Enhancements
- Direct content loading from filesystem
- Robust error handling for missing content
- Improved module/lesson structure parsing
- Enhanced metadata integration from frontmatter

### Hierarchical Course Organization (May 2025)

#### Nested Course Structure
- Implemented hierarchical course navigation:
  - Main `/courses` page shows course categories and standalone courses
  - Course categories (e.g. "MPSI - Mathématiques") link to dedicated category pages
  - Category pages display all related subcourses
  - Each subcourse has its own detail page

#### Directory Structure Reorganization
- Restructured content directories for better organization:
  ```
  /content/courses/
    ├── index.json                 # Main courses index
    ├── intro-python.md            # Standalone course
    └── mpsi-maths/                # Course category directory
        ├── index.json             # Category index with subcourses
        ├── mpsi-mathematiques.md  # Overview course
        ├── calculs_algebriques.md # Subcourse
        └── ...                    # Other subcourses
  ```

#### Navigation Improvements
- Layer-by-layer navigation path:
  1. Courses page → lists categories and standalone courses
  2. Category page → displays all subcourses in the category
  3. Course detail page → shows specific course content
- Intelligent breadcrumb navigation adapts to course hierarchy
- Smart back buttons that return to appropriate parent page
- Visual distinction between course categories and individual courses

#### Content Service Enhancements
- Support for nested content directories
- Custom category index files for subcourse listings
- Adaptable content paths to work with subdirectories
- Proper routing to handle nested course structure

---
*Implementation log last updated: 1 May 2025.*===== ./tsconfig.json =====
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
			// Adding a comment to potentially trigger TS server refresh
			"allowJs": true,
			"checkJs": true,
			"esModuleInterop": true,
			"forceConsistentCasingInFileNames": true,
			"resolveJsonModule": true,
			"skipLibCheck": true,
			"sourceMap": true,
			"strict": true,
			"lib": ["ES2015", "DOM"]
	}
}
===== ./AUTHENTICATION.md =====
# Authentication System

This project uses Firebase Authentication for user management. The authentication system provides the following features:

- User registration with email/password
- Email/password login
- Google OAuth login
- Password reset
- Authentication state persistence
- Route protection based on authentication status

## Configuration

1. Create a Firebase project at [https://console.firebase.google.com/](https://console.firebase.google.com/)
2. Enable Email/Password and Google authentication providers in the Firebase console
3. Copy your Firebase config from the Firebase Console (Project Settings > General > Your Apps)
4. Create a `.env` file based on the `.env.example` template and add your Firebase configuration

## Authentication Flow

1. The authentication system initializes in the root layout component
2. Authentication state is observed via Firebase's `onAuthStateChanged` listener
3. User data and authentication status are stored in Svelte stores
4. Authentication-required pages check the authentication status and redirect if needed

## Authentication Components

- `Login.svelte`: Email/password and Google sign-in
- `Register.svelte`: New user registration 
- `ResetPassword.svelte`: Password recovery via email

## Protected Routes

Routes can be protected by checking the authentication status. Example:

```svelte
<script>
  import { isAuthenticated } from '$lib/stores/authStore.js';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';

  onMount(() => {
    // Redirect to login if not authenticated
    if (!$isAuthenticated) {
      goto('/login');
    }
  });
</script>
```

## User Roles

Currently, admin role is determined by a specific email address:

```typescript
const ADMIN_EMAIL = 'admin@example.com';
$: isAdmin = $isAuthenticated && $user?.email === ADMIN_EMAIL;
```

For production, consider implementing a more robust role management system with Firebase custom claims or Firestore.

## User Profile Persistence
- Upon successful sign-in, a Firestore document is created or loaded under `users/{uid}`.
- Profiles include `email`, `displayName`, `createdAt`, and custom `preferences` (e.g. enrollments, settings).
- The application maintains a Svelte store `userProfile` that reflects this document in real time.
- Configuration: ensure Firestore credentials are defined in `.env` with `VITE_FIREBASE_*` variables.

## Admin Configuration
- Admin users are controlled via environment variable `VITE_ADMIN_EMAILS` (comma-separated).
- The app checks `user.email` against this list to grant admin privileges.